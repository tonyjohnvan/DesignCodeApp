{
  "content": {"data":{"content":[{"id":"1","title":"Learn iOS Design","sections":[{"id":"1","chapter_id":"1","order":"1","slug":"ios11","title":"Learn iOS 11 Design","caption":"A complete guide to designing for iOS 11","body":"<p>While flat design has become universal over the past 5 years, it wasn\u2019t so common before iOS 7. It was the shift that shaped the design landscape. But to say that it hasn\u2019t evolved would be inaccurate. iOS design has adapted to the bigger screens. What started as the ultimate opposite of hyper realistic designs that preceded it, flat design is now much more nuanced, giving way to gradients, drop shadows and cards.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/ios11.jpg","video":"https:\/\/player.vimeo.com\/external\/247063072.hd.mp4?s=19fd66696b4e7dd66ff14a5620577ec223e2b8f0&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/ios11.zip","contents":[{"id":"9906","section_id":"1","order":"1","title":"The Evolution of iOS","subhead":"","body":"<p>Let&rsquo;s start from the beginning and look at the image below. On the left, a hyper realistic design, also known as <strong>Skeuomorphic<\/strong>. It was effective to introduce strong metaphors because in 2007, few were familiar with having a super computer in your pocket. In the middle, we got rid of all ornaments in favor of flat colors, beautiful typography and high-resolution content. Since most of us got increasingly comfortable with technology, it was no longer necessary to adorn our designs with heavy decorations. On the right, a screen from iOS 11. Titles are much bolder, and as a result more readable. Because of the taller screens, it is now much more common to see the bottom navigation (known as Tab bar). Designers today have to adapt their layouts against multiple resolutions and pixel densities. The good news is that we have better tools, like <a href=\"https:\/\/sketchapp.com\">Sketch<\/a> and <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode<\/a>, to prepare us for these modern techniques. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Evolution.jpg","image_width":"1600","image_height":"960","video":"","bookmark_id":"ios11-the-evolution-of-ios"},{"id":"9907","section_id":"1","order":"2","title":"","subhead":"Large Titles","body":"<p>More than ever, iOS 11 is going back to its roots. Bold fonts are everywhere. Titles are big and black. Since screens are now about twice as tall as they were, it only makes sense to have large titles. Another reason for large fonts is accessibility. With billions of people using their phone daily from all age groups, it is important to make the content as clear and readable as possible. Accessibility lets users set very large fonts for apps that support it. In iOS 11, all of Apple&rsquo;s stock apps support that option. Because of that reason, you&rsquo;ll find that users are now expecting it. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Accessibility.jpg","image_width":"1600","image_height":"960","video":"","bookmark_id":"ios11-large-titles"},{"id":"9908","section_id":"1","order":"3","title":"","subhead":"Cards","body":"<p>Bigger screens mean more space for content. Before the bigger iPhones, it made sense to rid of any container and give maximum space to content. But with the iPhone X and 8, that is no longer the case. We can make navigation easier by including the status, navigation and tab bars, and use cards as a way to better organize sections. Cards with rounded corners are a good way to make the content seem more tactile and approachable. You can use blurred backgrounds and drop shadows to add depth and context to your design.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Cards.jpg","image_width":"1600","image_height":"1200","video":"","bookmark_id":"ios11-cards"},{"id":"9909","section_id":"1","order":"4","title":"The State of iOS Design","subhead":"","body":"<p>Design is now much simpler, allowing us to focus on animation and function, rather than intricate visual details. Before iOS 7, I spent a big part of my day designing intricate textures like wood, leather and chrome. Today, I spend that same amount of time on animation and code. It is no longer about the static design, but how to make it come alive, engaging our users on a deeper level. It is also the reason why I wrote this book to be more than merely about visual design. Animations and code has never been this important, or feasible from a technical standpoint. That&rsquo;s why we can witness a new prototyping tool and coding framework almost every single week. Design has become extremely broad, but at the same time, interconnected with many disciplines at once. A single designer can grow to be independent in their execution while being a better collaborator with engineers as they understand better the craft of each discipline.<\/p><blockquote><p>I&apos;ve been asked many times how to get started in design and what the shortcuts are to becoming a better designer. While there is no silver bullet, there are, however, a number of tips and rules on designing for iOS that will affect the way you design universally.<\/p><\/blockquote><p>Even if you&apos;re designing for a totally different platform, the same design notions remain, and you can apply the same techniques that you&apos;ve learned on the Web and Print. iOS is a platform where design goes back to its roots. It reads like a modern magazine, with beautiful typography and simple layouts. The things you&apos;ll learn in this book will serve you tremendously well on your journey to design the best products anywhere.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-the-state-of-ios-design"},{"id":"9910","section_id":"1","order":"5","title":"Core Philosophies","subhead":"","body":"<p>Let&rsquo;s review the basics. iOS is driven by 3 core philosophies: <strong>deference<\/strong>, <strong>clarity<\/strong> and <strong>depth<\/strong>. Inspired by those design principles, I&apos;ve broken down their meanings into actionable items that are much simpler and more visual than those explained in the guidelines.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-core-philosophies"},{"id":"9911","section_id":"1","order":"6","title":"Deference","subhead":"","body":"<p>Your content should be the hero, everything else is secondary. Use elements that complement it and avoid distracting visuals that compete with your content. For example, use beautiful animations that gracefully transition from one screen to another, thus ensuring that the users don&rsquo;t get lost. Blurred backgrounds keep context of where the user is while allowing focus on the front content. If in doubt, start from a provided <a href=\"https:\/\/developer.apple.com\/design\/resources\/\">template<\/a> and work from there. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-deference"},{"id":"9912","section_id":"1","order":"7","title":"","subhead":"Simplify","body":"<p>Your user interface should be stripped down to the core aesthetic. Every time you add an element, ask yourself: is this necessary? Unless your app is a game or a specific theme, temper your use of heavy textures, 3D effects and multiple shadows. Instead, focus on functional colors, harmonious gradients, and beautiful typography. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Simplify.jpg","image_width":"1600","image_height":"1280","video":"","bookmark_id":"ios11-simplify"},{"id":"9913","section_id":"1","order":"8","title":"","subhead":"Maximize content","body":"<p>The content should fill the whole screen, giving maximum space to its inner elements. Avoid nested containers and maximize the scrolling areas to allow more room for interactions. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Maximize.jpg","image_width":"1600","image_height":"1280","video":"","bookmark_id":"ios11-maximize-content"},{"id":"9914","section_id":"1","order":"9","title":"","subhead":"Colors","body":"<p>Use a prominent color to show that an element is tappable or that it&rsquo;s highlighted. Picking the right colors and neutral tones can make or break your design. Blue is a safe choice for buttons and states. Also, a white or extra light gray background against black texts is recommended as a starting point. This provides excellent contrast, which is perfect for readability.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Colors.jpg","image_width":"1600","image_height":"1280","video":"","bookmark_id":"ios11-colors"},{"id":"9915","section_id":"1","order":"10","title":"","subhead":"Typography is content","body":"<p>Because of the simplification of the user interface and the focus on the content, your typography will occupy from 50-90% of the screen. Therefore, it is paramount to pick a beautiful font and set its weight, line-height, and color to be visually pleasing and optimal for reading at any size. The default <a href=\"https:\/\/developer.apple.com\/fonts\/\">San Francisco font<\/a> is the recommended option as it was designed for legibility. Apple uses it in all their apps.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Typography.jpg","image_width":"1600","image_height":"1282","video":"","bookmark_id":"ios11-typography-is-content"},{"id":"9916","section_id":"1","order":"11","title":"","subhead":"Negative space","body":"<p>Use negative space to bring focus to the content. The less you see, the more you can focus on a few things at once. Negative spacing gives breathing room. Don&apos;t overwhelm your screen with too much structure or unneeded visual elements. If in doubt, make use of the default margins in Xcode. Apple typically uses between 8 pt to 16 pt for their margins.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Negative.jpg","image_width":"1600","image_height":"1280","video":"","bookmark_id":"ios11-negative-space"},{"id":"9917","section_id":"1","order":"12","title":"Clarity","subhead":"","body":"<p>Make things obvious. Buttons should be self-explanatory and typography should be big and readable at a comfortable distance. Your content should clearly indicate what your app is about. For example, if it&apos;s a coffee app, then you should be reminded of the coffee beans, espresso, and brown colors of coffee.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-clarity"},{"id":"9918","section_id":"1","order":"13","title":"","subhead":"Make the text readable","body":"<p>Titles should be big and well-contrasted. Captions should be short and easy to glance. The body texts should be well-spaced and not too long per line to avoid reading fatigue. <\/p><p>Body texts should also have a minimum size of <strong>11pt<\/strong>. The optimal size for reading is <strong>17pt<\/strong> to <strong>19 pt<\/strong>. Screen titles should be sized to <strong>34 pt<\/strong> or more while body titles should be set at <strong>20 pt<\/strong> to <strong>30 pt<\/strong>. Align texts with other elements to make them easy to scan. Finally, use black or dark gray against a light background for the best contrast.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-TypeSizes.jpg","image_width":"1600","image_height":"1288","video":"","bookmark_id":"ios11-make-the-text-readable"},{"id":"9919","section_id":"1","order":"14","title":"","subhead":"Use obvious icons","body":"<p>Icons should not be ambiguous; they should clearly indicate what the symbol means. Whenever possible, use text to accompany the icon. Once you use an icon, don&apos;t reuse another variation of the same icon elsewhere as that will confuse your users. Likewise, don&apos;t use generic texts such as &#x201C;Back&#x201D; or &#x201C;Submit&#x201D;, instead be specific: &#x201C;Back to Home&#x201D; or &quot;Sign up a new account&quot;. Design sharp, vectorized icons to make it easy to adapt to different screen densities. Make sure that your assets work for 1x, 2x (retina) and 3x (super retina) screens.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Icons.jpg","image_width":"1600","image_height":"1280","video":"","bookmark_id":"ios11-use-obvious-icons"},{"id":"9920","section_id":"1","order":"15","title":"","subhead":"Descriptive screens","body":"<p>Each page should clearly explain what it does. There should be minimal branding that is replaced by a clear screen title and highlighted state from the tab bar. Be thoughtful with the selection of images to best represent the sections. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Descriptive.jpg","image_width":"1600","image_height":"1280","video":"","bookmark_id":"ios11-descriptive-screens"},{"id":"9921","section_id":"1","order":"16","title":"","subhead":"Meaning in colors","body":"<p>Colors have <a href=\"http:\/\/www.color-wheel-pro.com\/color-meaning.html\">meaning<\/a>. Use red, green, blue and neutral tones wisely to indicate destructive actions, affirmative actions, links and inactive states, respectively. Avoid confusing your users by using these colors for different purposes. For example, don&rsquo;t use green on a button that indicates &#x201C;Delete&#x201D;. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Actions.jpg","image_width":"1600","image_height":"1280","video":"","bookmark_id":"ios11-meaning-in-colors"},{"id":"9922","section_id":"1","order":"17","title":"","subhead":"Design for touch","body":"<p>Buttons should be easily tappable. Their sizes should be between <strong>30-60pt<\/strong> wide. The optimal size is <strong>44pt<\/strong>. On rare occasions, set to <strong>22pt<\/strong> for links inside texts, but use cautiously as they become hard to tap. Even text buttons have a tappable zone of at least <strong>30pt<\/strong>. When opening pictures, make sure to include the ability to pinch to zoom and take advantage of the swipe gestures to easily navigate to previous screens one-handed.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Sizes.png","image_width":"1280","image_height":"970","video":"","bookmark_id":"ios11-design-for-touch"},{"id":"9923","section_id":"1","order":"18","title":"","subhead":"Landscape Mode","body":"<p>Users often use the iPads and larger iPhones in landscape. In that mode, apps will appear without the status bar and with smaller navigation and tab bars. Sometimes, it will show an extra menu on the left, similar to what you&rsquo;d find on the iPad. Adaptive layouts, a way to resize your layout based on screen size, is now common practice. Thanks to Auto Layout and Size Classes in Xcode, modifying the layout based on device orientation is fairly easy. So don&rsquo;t be afraid to support this in your designs.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Landscape.jpg","image_width":"1600","image_height":"740","video":"","bookmark_id":"ios11-landscape-mode"},{"id":"9924","section_id":"1","order":"19","title":"Depth","subhead":"","body":"<p>Perhaps the hardest part to understand is depth. It&apos;s a very abstract concept, but at the same time very powerful and unique. Depth is the idea that everything should be contextual and transitional. In real life, when you walk from a room to another, you get a sense of progression and distance. That way you don&apos;t get lost. That same concept should be applied to user interface. <\/p><blockquote><p>Indifference towards people and the reality in which they live is actually the one and only cardinal sin in design. &#x2013; Dieter Rams<\/p><\/blockquote>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-depth"},{"id":"9925","section_id":"1","order":"20","title":"","subhead":"Transitional interface","body":"<p>One of the most exciting and unique aspects of iOS is the animation. Every screen transitions from one to another. The home screen zooms into a folder, then zooms into an app. Animations used to be hard to execute, but thanks to Xcode 9, they are made more accessible than ever. In fact, you will learn exactly these techniques in the Swift chapter. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Blur.mp4","bookmark_id":"ios11-transitional-interface"},{"id":"9926","section_id":"1","order":"21","title":"","subhead":"Blurred background","body":"<p>Keeping context of the background UI shouldn&apos;t compromise the clarity of your content. Blurring the background not only allows you to keep its natural colors, but also brings focus to the foreground. Blurring isn&apos;t an invention, it&apos;s something that already exists in real life; as you focus on something, everything else become blurry.<\/p><blockquote><p>What you think people want, multiplied by ten is what you should create. Anything less won&apos;t last longer than a day in people&apos;s mind. Do it right and it&apos;ll last a lifetime.<\/p><\/blockquote>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-blurred-background"},{"id":"9927","section_id":"1","order":"22","title":"","subhead":"Animations","body":"<p>Animation not only serves to transition from one screen to another, it also adds playfulness and delight to your design. It brings importance to an element that would otherwise be ignored. Notifications are more noticeable and the weather is better understood when there is rain pouring in the background. <\/p><p>Although animations are encouraged, they should not be overdone. They should not distract your users from the content or give them motion sickness. Gratuitous, forceful animations can become overwhelming to your users. Instead, make them discoverable when users manipulate the content, or use them to gracefully direct attention to an on boarding process. <\/p><p>Finally, be realistic in the way animations are demonstrated. A modal that slides from the bottom should be dismissed back to the bottom of the screen. That way, users can appreciate the physicality of the elements, even if they&rsquo;re digital.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Gestures.mp4","bookmark_id":"ios11-animations"},{"id":"9928","section_id":"1","order":"23","title":"","subhead":"Gestures","body":"<p>With the introduction of bigger screens, the back button is now too high for the thumb to easily reach. So, while less obvious than a visible button, a gesture can be an extension to an already visible interaction. It makes it easier for power users. We&apos;re all becoming power users, that&apos;s why we require less visual cues and more useful functions.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-gestures"},{"id":"9929","section_id":"1","order":"24","title":"","subhead":"3D Touch","body":"<p>3D Touch allows people to quickly access options inside and outside of your app. Think of 3D Touch like the keyboard shortcuts on your Mac &#x2013; they enable people to do repeated tasks quicker. You have to design shortcuts that make power users more productive. But just like Keyboard shortcuts, essential features shouldn&rsquo;t be exclusive to 3D Touch. Your users must be able to operate your app normally without it.<\/p><p>For example, users can force-press your App Icon to find frequently used items. Inside an app, mails can be peeked and links can be peeked before entering full-screen. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/iOS-3DTouch.mp4","bookmark_id":"ios11-3d-touch"},{"id":"9930","section_id":"1","order":"25","title":"","subhead":"Sounds","body":"<p>Sounds are minimally used in apps, but when they&apos;re played, they can transform a mundane task into a truly rewarding experience. People can recognize your app without even seeing it in meaningful places such as the push notifications. When the sound gives the right impression, you win a lot with a minimal amount of effort.<\/p><blockquote><p>Good design is universal. You don&apos;t need to explain or overcompensate it with big words. People just get it.<\/p><\/blockquote>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-sounds"},{"id":"9931","section_id":"1","order":"26","title":"Further Reading","subhead":"","body":"<p>A high level and essential <a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/overview\/themes\/\">read<\/a> written by Apple. It&rsquo;s always kept up-to-date and is pretty exhaustive with its list of features. I would suggest to at least skim through it and only read the portions that you need, as it gets very detailed. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-HIG.jpg","image_width":"1600","image_height":"916","video":"","bookmark_id":"ios11-further-reading"}]},{"id":"2","chapter_id":"1","order":"1","slug":"ios11-iphone-x","title":"Designing for iPhone X","caption":"Guidelines to designing for iOS 11","body":"<p>iOS 11 marks the introduction of the iPhone X, a much taller iPhone that has virtually no bezel. The 5.8-inch OLED screen is larger than the iPhone 8 Plus\u2019s 5.5-inch, yet the body size is about the same as the iPhone 8. For designers, this means more freedom in our canvas. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/ios11-iphone-x.jpg","video":"https:\/\/player.vimeo.com\/external\/248878252.hd.mp4?s=dd8de2640eaaa66be112a93a47a7a1c8dae54c06&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/ios11-iphone-x.zip","contents":[{"id":"9752","section_id":"2","order":"1","title":"Taller Screen","subhead":"","body":"<p>The extra <strong>145 pt<\/strong> can mean an additional row of content, or the addition of a menu that we once thought was too cramped. That extra space applies to both the iPhone 8 and 8 Plus since they share the exact same ratio, despite having different resolutions. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPhoneX-ExtraSpace.jpg","image_width":"2400","image_height":"2000","video":"","bookmark_id":"ios11-iphone-x-taller-screen"},{"id":"9753","section_id":"2","order":"2","title":"More Space for Content ","subhead":"","body":"<p>If compared to the original iPhone, we get a whooping <strong>332 pt<\/strong> increase in height, which can afford us the equivalent of 7 navigation bars. The future is looking fantastic for content and bleak for <a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2014-211\/\">hamburger<\/a> menus.<\/p><p>When you put the iPhone X side by side with the original iPhone, you can notice that the space for content has almost doubled in height. In general, this means that modern apps need to always include all the bars: status, navigation, tab and home indicator. Omitting these bars can not only mean a worse user experience, but it will also make your app inconsistent with Apple&rsquo;s own apps.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPhoneX-Content.jpg","image_width":"2400","image_height":"2000","video":"","bookmark_id":"ios11-iphone-x-more-space-for-content"},{"id":"9754","section_id":"2","order":"3","title":"The Notch","subhead":"","body":"<p>Perhaps the most controversial aspect of the new design is in the top 10%. The sensor housing, also known as the <strong>Notch<\/strong>, is an element that distracts and keep the iPhone X&rsquo;s screen from truly being edge-to-edge. Technology-wise, it&rsquo;s currently impossible to do without as it houses Face ID, the camera and the speaker. Design-wise, it&rsquo;s one of the biggest compromises that Apple has made in recent years. But, after looking at how other phone makers are solving the <a href=\"https:\/\/twitter.com\/DesaiRaj414\/status\/917416673497440257\">problem<\/a>, with either a large forehead, chin or both, I can&rsquo;t say they&rsquo;re without compromises.<\/p><p>Apple <a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/overview\/iphone-x\/\">advises against<\/a> hiding the notch with black bars. Their reasoning is that, as bothersome as it is, the notch still provides valuable space for the status bar and extra content. It provides context of the content underneath and gives a feeling that the screen is larger. Background elements such as wallpapers, maps and colors don&rsquo;t suffer when being slightly clipped by the rounded corners and the notch. By hiding that space, your app will feel smaller and inconsistent with other apps, as explained in this <a href=\"https:\/\/developer.apple.com\/videos\/play\/fall2017\/801\/\">video<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPhoneX-Notch.jpg","image_width":"2000","image_height":"800","video":"","bookmark_id":"ios11-iphone-x-the-notch"},{"id":"9755","section_id":"2","order":"4","title":"Large Titles","subhead":"","body":"<p>In iOS 11, screen titles are generally sized at <strong>34 pt<\/strong>. They&rsquo;re set at <strong>Semibold<\/strong>, in black. What&rsquo;s interesting is that when you scroll, the title transitions to the Navigation bar, giving us back that valuable space. In Landscape, it just remains small in the bar. This sends a clear message to designers that first, you should use that extra space wisely and second, you need to make your design adaptive because that extra space may exist in portrait mode, but not in landscape mode.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/Design-LargeTitle.mp4","bookmark_id":"ios11-iphone-x-large-titles"},{"id":"9756","section_id":"2","order":"5","title":"Bigger Status Bar","subhead":"","body":"<p>The status bar has more than doubled in height, increasing from <strong>20 pt<\/strong> to <strong>44 pt<\/strong>. The Notifications can now be dragged from the top left. The Control Center can be swiped from the top right. Swiping from the bottom gives way to the Home screen, if done quickly. Or, to reach the screens navigator, you must interrupt that Home swipe.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/iPhoneX-Gestures.mp4","bookmark_id":"ios11-iphone-x-bigger-status-bar"},{"id":"9757","section_id":"2","order":"6","title":"Safe Area Layout Guides","subhead":"","body":"<p>When designing for the iPhone X, the rounded corners and the notch can clip the content. That should be avoided at all time. Using the safe area layout guide, you can push the content where the notch wouldn&rsquo;t be, thus ensuring that no clipping will occur. In general, backgrounds should not follow the safe area guide, while content such as texts, images and buttons should follow these guides. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPhoneX-Portrait.jpg","image_width":"2400","image_height":"2000","video":"","bookmark_id":"ios11-iphone-x-safe-area-layout-guides"},{"id":"9758","section_id":"2","order":"7","title":"iPhone X in Landscape","subhead":"","body":"<p>In landscape, the status bar is hidden to maximize content space. The navigation bar is reduced to <strong>32 pt<\/strong>, the tab bar to <strong>30 pt<\/strong> and the home indicator, to <strong>23 pt<\/strong>. While most users won&rsquo;t switch to landscape mode on the iPhone X, there are still important scenarios for this usage. For example, for viewing a landscape photo, a full-screen video, or for reading an article with larger texts. After they&rsquo;re finished, it&rsquo;s counter intuitive to have to switch back to portrait, especially if the device is docked or held comfortably in a landscape position.<\/p><p>If your app is already adaptive for iPads, why not support iPhone&rsquo;s landscape as well? A large gain with minimal effort, as most modern apps are designed with adaptive layouts in mind.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPhoneX-Landscape.jpg","image_width":"1200","image_height":"600","video":"","bookmark_id":"ios11-iphone-x-iphone-x-in-landscape"},{"id":"9759","section_id":"2","order":"8","title":"Websites in Landscape","subhead":"","body":"<p>If you&rsquo;re a product designer, chances are that you have worked on a Website. On the iPhone X in landscape, your site will have a large empty space on the left and right sides. That&rsquo;s because the Safe Area kicks in automatically to avoid clipping, which is an even worse result. To avoid this, Apple has created a <a href=\"https:\/\/webkit.org\/blog\/7929\/designing-websites-for-iphone-x\/\">guide<\/a> for adapting your site for iPhone X in landscape. Basically, you can extend your backgrounds to fill the entire screen while keeping the content inset based on the Safe Area.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPhoneX-Website.png","image_width":"1440","image_height":"1065","video":"","bookmark_id":"ios11-iphone-x-websites-in-landscape"},{"id":"9760","section_id":"2","order":"9","title":"The Rounded Corners","subhead":"","body":"<p>Content clipping can also occur in the corners of the iPhone X. Unless you hide the status bar or home indicator, you shouldn&rsquo;t face this issue, since they cover the corner areas. However, for apps that are used mostly in full-screen, like Camera, it will be important to ensure that there is enough margin in the corners. To perfectly follow the rounded corners, a radius of around <strong>16 pt<\/strong> is recommended for your buttons.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPhoneX-Corners.png","image_width":"1440","image_height":"1000","video":"","bookmark_id":"ios11-iphone-x-the-rounded-corners"},{"id":"9761","section_id":"2","order":"10","title":"Preview Your App on iOS Simulator","subhead":"","body":"<p>The iPhone X device isn&rsquo;t out yet. Chances are that after launch, it will be sold out and thus, inaccessible to the majority of us. Without the device on hand, the only way to experience it is via the iOS simulator. You can preview your App and your Website by installing <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode<\/a>. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPhoneX-Simulator.jpg","image_width":"1996","image_height":"1258","video":"","bookmark_id":"ios11-iphone-x-preview-your-app-on-ios-simulator"},{"id":"9762","section_id":"2","order":"11","title":"Death of the Hamburger Menu","subhead":"","body":"<p>For a decade, designers were scrambling to fit their content in the tiny screen of the original iPhone. A lot of designers decided to omit the Tab bar entirely, because it took too much vertical space. Some got creative and decided to put a button that would slide from the left. That was the birth of the famous Hamburger menu. While it was fun and fresh at first, it was a usability nightmare. More taps were needed to reach extra screens. As a result, this meant less usage of secondary tabs. Often, people would forget that there were more contents. <\/p><p>With bigger screens, one-handed usage began to suffer. Apple even made it possible to double-tap the Home button to slide down the whole user interface in order to make the Navigation bar reachable with the thumb. That translated into an extra double-tap to reach the menu. The Hamburger menu was typically placed the top left of the screen, so trying to reach that menu was even more frustrating. And with a much taller screen, there were no longer a fight to find space for content. The Tab Bar is now the obvious choice to replace the Hamburger menu, since we can afford the space. The iPhone X cements that direction. If you have more than a couple of sections in your app, there is virtually no reason not to use the Tab bar. In Landscape, the Tab bar takes even less space in iOS 11.<\/p><p>The Hamburger menu is pervasive on the Web, and arguably one of the reasons why the mobile Web experience has not caught up to the native experience. Even React Native uses native controls, which is a fantastic direction for Web technologies. However, in iOS and especially for the iPhone X, you should use the Tab bar instead.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/iPhoneX-Hamburger.mp4","bookmark_id":"ios11-iphone-x-death-of-the-hamburger-menu"},{"id":"9763","section_id":"2","order":"12","title":"Adaptive Layout and Multitasking","subhead":"","body":"<p>With the increasing number of <a href=\"http:\/\/www.paintcodeapp.com\/news\/ultimate-guide-to-iphone-resolutions\">device resolutions<\/a> to deal with, it is crucial to make your layout adaptive. Using tools like Sketch&rsquo;s <a href=\"https:\/\/www.sketchapp.com\/docs\/layer-basics\/constraints\/\">Constraints<\/a> and Xcode&rsquo;s <a href=\"https:\/\/developer.apple.com\/library\/content\/documentation\/UserExperience\/Conceptual\/AutolayoutPG\/index.html\">Auto Layout<\/a>, you have to design in a way that the screen size is flexible and can show extra menus if needed.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-iphone-x-adaptive-layout-and-multitasking"},{"id":"9764","section_id":"2","order":"13","title":"","subhead":"Stack Views","body":"<p>In Xcode, you&rsquo;ll also find <a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2015-218\/\">Stack Views<\/a>, a fantastic tool for making your layouts more reactive to changes. Same elements and groups can stack together dynamically and all you need to edit is the spacings as well as how the content will fill the box. Then, you can complete the work with Auto Layout. Apple recommends to use Stack Views first, then Auto Layout second.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-StackViews.jpg","image_width":"1280","image_height":"800","video":"","bookmark_id":"ios11-iphone-x-stack-views"},{"id":"9765","section_id":"2","order":"14","title":"Points and Pixels","subhead":"","body":"<p>Developers work with point values, so it is important to understand the difference with pixels. When the iPhone was first introduced, the two units were the same: 1pt equals 1px. Then, when retina screens came along, 1pt became 2px. So think of points as the values in the original iPhone, and pixels as the real values depending on the pixel density (iPhone 4, 5, 6, 7, 8 = <strong>@2x<\/strong>, iPhone 8 Plus, iPhone X = <strong>@3x<\/strong>). To better understand the different between points and pixels, I highly recommend watching this <a href=\"https:\/\/vimeo.com\/169809377\">video<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Resolutions.jpg","image_width":"1404","image_height":"1012","video":"","bookmark_id":"ios11-iphone-x-points-and-pixels"},{"id":"9766","section_id":"2","order":"15","title":"iPhone Resolutions","subhead":"","body":"<p>The iPhone has 5 main resolutions: <strong>320 x 480 pt<\/strong> (iPhone 4S), <strong>320 x 568 pt<\/strong> (iPhone SE), <strong>375 x 667 pt<\/strong> (iPhone 8), <strong>414 x 736 pt<\/strong> (iPhone 8 Plus) and <strong>375 x 812 pt<\/strong> (iPhone X). The layout doesn&rsquo;t scale but expands based on the resolution. For example, the Navigation Bar only adjusts the width but keeps the same height. Elements inside it remain intact.<\/p><p>The iPhone 8 Plus is the only iPhone that acts more like an iPad in Landscape mode. In other words, a Left Navigation may appear, replacing the need for the Tab bar.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-iPhone.jpg","image_width":"1600","image_height":"1590","video":"","bookmark_id":"ios11-iphone-x-iphone-resolutions"},{"id":"9767","section_id":"2","order":"16","title":"iPhone Size Classes","subhead":"","body":"<p>Size Classes allow you to categorize screen widths and heights, and set conditions based on those combinations. For example, you can decide that an avatar is <strong>30 x 30 pt<\/strong> on a screen with <strong>Compact<\/strong> width, but <strong>50 x 50 pt<\/strong> on a screen with <strong>Regular<\/strong> width, just because there is so much more empty space on the larger screen. Since the layout can be pretty different between Portrait and Landscape, or between iPhone and iPad, Size Classes are essential for customizing your layout beyond the normal Auto Layout constraints. <\/p><p>There are 3 types of Size Classes for both width and height: <strong>Compact<\/strong>, <strong>Regular<\/strong> and <strong>Any<\/strong>. By combining these, you will affect several devices at once. For example, <strong>Compact<\/strong> (width) x <strong>Regular<\/strong> (height) will target all iPhones in Portrait, but won&rsquo;t affect Landscape or iPad.<\/p><p>What&rsquo;s interesting is that <strong>Compact<\/strong> x <strong>Compact<\/strong> will affect iPhones in Landscape (except iPhone 6+, 7+, 8+), even though the screen has a rather large width. As result, it&rsquo;s important to get familiar with the different combinations, as shown in the illustration below.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-SizeClasses.jpg","image_width":"1600","image_height":"1694","video":"","bookmark_id":"ios11-iphone-x-iphone-size-classes"},{"id":"9768","section_id":"2","order":"17","title":"App Icon","subhead":"","body":"<p>The App Icon is used for the branding of your app. It&rsquo;s the first thing that users see when they experience it. It appears prominently on the Home screen, the App Store, in Spotlight and Settings.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-iphone-x-app-icon"},{"id":"9769","section_id":"2","order":"18","title":"","subhead":"Support","body":"<p>@1x assets are no longer supported for the iPhone, so you don&rsquo;t need to generate them. App icons have 2 resolutions now: @2x and @3x. There are 3 types: App Icon, Spotlight and Settings. For the iPad, @1x and @2x are used.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-AppIconsRes.png","image_width":"1240","image_height":"1638","video":"","bookmark_id":"ios11-iphone-x-support"},{"id":"9770","section_id":"2","order":"19","title":"","subhead":"Super-Ellipse","body":"<p>Since iOS 7, the rounded corners have shifted from plain rounded corners to a super-ellipse shape. It is important to keep note that you shouldn&rsquo;t export the icons with the mask, or you&rsquo;ll potentially find black artifacts. Instead, just export square assets to the App Store.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-RoundedCorners.jpg","image_width":"1600","image_height":"400","video":"","bookmark_id":"ios11-iphone-x-super-ellipse"},{"id":"9771","section_id":"2","order":"20","title":"","subhead":"Icon Grid","body":"<p>Apple applied a golden ratio on some of their icons. This ensures that the icons are the heroes while keeping good proportions. While this is a good rule to follow, it&rsquo;s not a strict rule. Even Apple omitted it on many of their icons.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-IconGrid.jpg","image_width":"1600","image_height":"400","video":"","bookmark_id":"ios11-iphone-x-icon-grid"},{"id":"9772","section_id":"2","order":"21","title":"Colors","subhead":"","body":"<p>iOS uses vibrant colors to bring out the buttons. These colors tend to work well against a white background as much as a black background. Keep in mind that colors should be used sparsely, for call-to-actions and minimal branding areas like the navigation bar. Roughly, only 10-20% of your design should have colors, or they will compete too much against the content.<\/p><p>iOS often uses neutral colors to serve as the background and menu areas. A well-contrasted black text against a white background is used to make the text comfortable to read. Finally, the pastel blue is applied for making the buttons stand out.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Colors.jpg","image_width":"1600","image_height":"800","video":"","bookmark_id":"ios11-iphone-x-colors"},{"id":"9773","section_id":"2","order":"22","title":"System Font","subhead":"","body":"<p>The system <a href=\"https:\/\/developer.apple.com\/fonts\/\">font<\/a> is now called <strong>SF Pro Text<\/strong> for texts smaller than <strong>20 pt<\/strong> and SF Pro Display for texts at <strong>20 pt<\/strong> or larger. It is important to note that when using the system font, you now have access to Dynamic Type, which lets the font adjust based on the user&rsquo;s preference.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iOS-Accessibility.jpg","image_width":"1600","image_height":"960","video":"","bookmark_id":"ios11-iphone-x-system-font"},{"id":"9774","section_id":"2","order":"23","title":"Button and Font Sizes","subhead":"","body":"<p>The general rule is <strong>44pt<\/strong> for buttons and <strong>12pt<\/strong> for small text, <strong>17pt<\/strong> for body text and <strong>20pt<\/strong>+ for titles.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Sizes.jpg","image_width":"1280","image_height":"882","video":"","bookmark_id":"ios11-iphone-x-button-and-font-sizes"},{"id":"9775","section_id":"2","order":"24","title":"Spacing and Alignment","subhead":"","body":"<p>A general rule is to have a minimum <strong>padding<\/strong> or <strong>margin<\/strong> of <strong>8pt<\/strong>. This creates enough breathing room, which makes the layout easier to scan and the text more readable. Also, UI elements should be aligned and texts should have the same baseline position.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-SpacingAlign.jpg","image_width":"1280","image_height":"700","video":"","bookmark_id":"ios11-iphone-x-spacing-and-alignment"},{"id":"9776","section_id":"2","order":"25","title":"Status Bar","subhead":"","body":"<p>It is recommended to include the status bar in as many places as you can. Users rely on it for important information such as signal, time and battery. The text and icons can be white or black, but the background can be customized into any color and merge with the Navigation Bar.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-StatusBar.jpg","image_width":"1280","image_height":"400","video":"","bookmark_id":"ios11-iphone-x-status-bar"},{"id":"9777","section_id":"2","order":"26","title":"Navigation Bar","subhead":"","body":"<p>The Navigation Bar is used for quick information about the screen. The left portion can be used for placing <strong>Back<\/strong>, <strong>Profile<\/strong>, <strong>Menu<\/strong> buttons whereas the right portion is generally used for action buttons like <strong>Add<\/strong>, <strong>Edit<\/strong>, <strong>Done<\/strong>. Note that if you use any of these system icons, you don&rsquo;t need to create assets for them.<\/p><p>Just like the Status Bar, the background can be customized to any color and typically has a subtle blur to ensure that the text is always readable. When the Status Bar is present, both backgrounds are merged.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-NavigationBar.jpg","image_width":"1280","image_height":"600","video":"","bookmark_id":"ios11-iphone-x-navigation-bar"},{"id":"9778","section_id":"2","order":"27","title":"Search Bar","subhead":"","body":"<p>When you have a lot of content, it is always wise to make it searchable.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Search.jpg","image_width":"1280","image_height":"600","video":"","bookmark_id":"ios11-iphone-x-search-bar"},{"id":"9779","section_id":"2","order":"28","title":"Toolbar","subhead":"","body":"<p>When you need more real estate to place your action buttons and screen status, you&rsquo;ll want to use the Toolbar.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Toolbar.jpg","image_width":"1280","image_height":"400","video":"","bookmark_id":"ios11-iphone-x-toolbar"},{"id":"9780","section_id":"2","order":"29","title":"Tab Bar","subhead":"","body":"<p>The Tab Bar is the main navigation between multiple screens. Avoid the Hamburger menu if you have few items. Menus that are always visible will increase usage since <a href=\"http:\/\/www.lukew.com\/ff\/entry.asp?1945\">obvious always win<\/a>. Additionally, it is encouraged to add text next to your icons as most people won&rsquo;t instantly recognize symbols, especially when they&rsquo;re not universally known.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-TabBar.jpg","image_width":"1200","image_height":"240","video":"","bookmark_id":"ios11-iphone-x-tab-bar"},{"id":"9781","section_id":"2","order":"30","title":"","subhead":"States","body":"<p>When they&rsquo;re not active, icons will be gray. Like this, they attract less attention.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-TabBarSizes.jpg","image_width":"1280","image_height":"400","video":"","bookmark_id":"ios11-iphone-x-states"},{"id":"9782","section_id":"2","order":"31","title":"Table View","subhead":"","body":"<p>The Table View is a very common user interface for listing content. Most apps use a form of Table View. That&rsquo;s because it can be very basic, or highly customizable down to the smallest elements.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-TableExamples.jpg","image_width":"1280","image_height":"906","video":"","bookmark_id":"ios11-iphone-x-table-view"},{"id":"9783","section_id":"2","order":"32","title":"","subhead":"Basic Styles","body":"<p>At the basic level, you can use a number of preset Styles and Accessories.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-TableView.jpg","image_width":"1280","image_height":"680","video":"","bookmark_id":"ios11-iphone-x-basic-styles"},{"id":"9784","section_id":"2","order":"33","title":"","subhead":"Sections","body":"<p>Cells can also be grouped, with a title above and description underneath.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-TableGrouped.jpg","image_width":"1280","image_height":"400","video":"","bookmark_id":"ios11-iphone-x-sections"},{"id":"9785","section_id":"2","order":"34","title":"Collection View","subhead":"","body":"<p>When you have both rows and columns in a grid style, you&rsquo;ll need the Collection View. Although a little more advanced, it can pretty much create any layout you can dream of.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-CollectionExamples.jpg","image_width":"1280","image_height":"906","video":"","bookmark_id":"ios11-iphone-x-collection-view"},{"id":"9786","section_id":"2","order":"35","title":"","subhead":"Collection View Layouts","body":"<p>Collection View layouts may look like these, or a combination of them. The possibilities are endless.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-CollectionView.jpg","image_width":"1280","image_height":"700","video":"","bookmark_id":"ios11-iphone-x-collection-view-layouts"},{"id":"9787","section_id":"2","order":"36","title":"Modals","subhead":"","body":"<p>The <strong>Alert<\/strong> dialog is used for conveying critical information and prompting quick actions. Alerts should be kept minimal and exiting must be obvious.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Alert.jpg","image_width":"1280","image_height":"600","video":"","bookmark_id":"ios11-iphone-x-modals"},{"id":"9788","section_id":"2","order":"37","title":"","subhead":"Activity Modal","body":"<p>The <strong>Activity<\/strong> dialog allows you to share content (text, images, links) to iOS features like Airdrop, Favorites, Bookmarks and apps like Mail, Facebook, Twitter. While the look can&rsquo;t be customized, the options are.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Share.jpg","image_width":"1280","image_height":"1060","video":"","bookmark_id":"ios11-iphone-x-activity-modal"},{"id":"9789","section_id":"2","order":"38","title":"","subhead":"Full-size Modal","body":"<p>When the information presented isn&rsquo;t short, you can design a modal that is full-sized, typically appearing from a slide, fade, flip or page animation. Like other modals, it must be easy to cancel and kept as short as possible.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Modal.jpg","image_width":"1280","image_height":"752","video":"","bookmark_id":"ios11-iphone-x-full-size-modal"},{"id":"9790","section_id":"2","order":"39","title":"Keyboards","subhead":"","body":"<p>The keyboard is used to input information in text fields such as search, chat or login. It&rsquo;s highly customizable, for URL, Email, Phone numbers and even Emoji. You can choose between the Light and Dark themes, as well as how the action button is named (<strong>return<\/strong> being the default).<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Keyboards.jpg","image_width":"1280","image_height":"610","video":"","bookmark_id":"ios11-iphone-x-keyboards"},{"id":"9791","section_id":"2","order":"40","title":"Picker","subhead":"","body":"<p>When you have multiple options to choose from, you can use the Picker control. It&rsquo;s particularly useful for dates, which controls 3 fields in one action.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Picker.jpg","image_width":"1280","image_height":"600","video":"","bookmark_id":"ios11-iphone-x-picker"},{"id":"9792","section_id":"2","order":"41","title":"Segmented Control","subhead":"","body":"<p>While the Tab Bar navigates to the main sections, the Segmented Control is used for sub-sections.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-SementedControl.jpg","image_width":"1280","image_height":"600","video":"","bookmark_id":"ios11-iphone-x-segmented-control"},{"id":"9793","section_id":"2","order":"42","title":"Sliders","subhead":"","body":"<p>Sliders are interactive controls that are less precise, but extremely useful for quick settings like Sound, Brightness and Video Progress.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Sliders.jpg","image_width":"1280","image_height":"250","video":"","bookmark_id":"ios11-iphone-x-sliders"},{"id":"9794","section_id":"2","order":"43","title":"Progress","subhead":"","body":"<p>The Progress bar is an indicator showing how far an activity has gone. For example, you can use this to show the loading progress of a Web View. Note that the height can be customized.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Progress.jpg","image_width":"1280","image_height":"164","video":"","bookmark_id":"ios11-iphone-x-progress"},{"id":"9795","section_id":"2","order":"44","title":"Switch","subhead":"","body":"<p>Use this to quickly toggle between on and off. Do not use this for anything else than on \/ off.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Switches.jpg","image_width":"1280","image_height":"350","video":"","bookmark_id":"ios11-iphone-x-switch"},{"id":"9796","section_id":"2","order":"45","title":"Stepper","subhead":"","body":"<p>Slower but more precise than the Slider, the Stepper allows the user to increase or decrease a value by an increment of one. The border and background are customizable.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Stepper.jpg","image_width":"1280","image_height":"184","video":"","bookmark_id":"ios11-iphone-x-stepper"},{"id":"9797","section_id":"2","order":"46","title":"iOS Icons","subhead":"","body":"<p>These are the native icons that permeate iOS. Since they&rsquo;re commonly used, they&rsquo;re instantly recognized by users for their meaning. Using them for other purposes may confuse your users, so it&rsquo;s important to be aware of how they&rsquo;re used in iOS. <\/p><p>When you design custom icons outside of these, it is important to use well-known symbols. Additionally, I strongly recommend to always accompany them with a small text of <strong>10pt<\/strong> or more.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Icons.jpg","image_width":"1084","image_height":"364","video":"","bookmark_id":"ios11-iphone-x-ios-icons"},{"id":"9798","section_id":"2","order":"47","title":"Resources","subhead":"","body":"<p>These templates are not only useful for study but also to re-use and customize, so you don&apos;t have to start from scratch, which opens the possibility for errors. As you get more comfortable with them, you&rsquo;ll be able to get more creative.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-iphone-x-resources"},{"id":"9799","section_id":"2","order":"48","title":"","subhead":"iOS 11 GUI by Apple","body":"<p>If you&apos;re designing for iOS, you&apos;ll want to use <a href=\"https:\/\/developer.apple.com\/design\/resources\/#ios-apps\">pre-made elements<\/a> such as the status, navigation and tab bars. Get comfortable with all the colors, sizes, fonts and components. Officially supported by Apple.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-AppleGUI.jpg","image_width":"1592","image_height":"846","video":"","bookmark_id":"ios11-iphone-x-ios-11-gui-by-apple"},{"id":"9800","section_id":"2","order":"49","title":"","subhead":"iOS 11 GUI by Great Simple Studio","body":"<p>The most complete iOS <a href=\"https:\/\/iosdesignkit.io\/ios-11-gui\/\">GUI<\/a> with a ton of elements to play with. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-GUI.jpg","image_width":"1392","image_height":"888","video":"","bookmark_id":"ios11-iphone-x-ios-11-gui-by-great-simple-studio"},{"id":"9801","section_id":"2","order":"50","title":"","subhead":"Vector Device Mockups","body":"<p>My personal collection of over <a href=\"http:\/\/designcode.io\/angle\">260 mockups<\/a> made entirely in vector. This is perfect for presenting your designs. The devices are used throughout this book.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Angle.jpg","image_width":"1440","image_height":"910","video":"","bookmark_id":"ios11-iphone-x-vector-device-mockups"},{"id":"9802","section_id":"2","order":"51","title":"","subhead":"Design Resources by Facebook","body":"<p>A treasure trove for iOS <a href=\"http:\/\/facebook.design\/toolsandresources\/\">design resources<\/a>, including SoundKit, Diverse device hands and useful GUIs.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-Facebook.jpg","image_width":"1634","image_height":"1096","video":"","bookmark_id":"ios11-iphone-x-design-resources-by-facebook"},{"id":"9803","section_id":"2","order":"52","title":"","subhead":"What Not To Do","body":"<p>An excellent <a href=\"http:\/\/blog.maxrudberg.com\/post\/166045445103\/ui-design-for-iphone-x-top-elements-and-the-notch\">article<\/a> on designing for the iPhone X. Includes a few great examples on what not to do when designing for iPhone X.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-NotToDo.jpg","image_width":"1000","image_height":"500","video":"","bookmark_id":"ios11-iphone-x-what-not-to-do"},{"id":"9804","section_id":"2","order":"53","title":"","subhead":"UI Design Dos and Don&rsquo;ts","body":"<p>There are <a href=\"https:\/\/developer.apple.com\/design\/tips\/\">practices<\/a> that you should avoid at all cost, especially if you&rsquo;re new to iOS. Follow these simple examples put together by Apple. Even a quick glance can go a long way.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-iphone-x-ui-design-dos-and-don-ts"},{"id":"9805","section_id":"2","order":"54","title":"","subhead":"iOS Guidelines by Ivo Mynttinen","body":"<p>If you&rsquo;d like to <a href=\"http:\/\/iosdesign.ivomynttinen.com\">read more<\/a> about iOS from a different perspective, check out this excellent and comprehensive guide.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-iphone-x-ios-guidelines-by-ivo-mynttinen"}]},{"id":"63","chapter_id":"1","order":"2","slug":"ios11-ipad","title":"Design for iPad","caption":"How bigger screens affect your design","body":"<p>Designing for the iPad isn&#x2019;t as simple as flipping a switch and just making everything bigger. A larger screen provides a real opportunity to present more content while respecting some basic rules in navigation, typography and visual hierarchy. Don&#x2019;t treat the iPad as just a big iPhone. Instead, treat it more like a desktop computer with touch capabilities. In other words, your users can be more productive, see more content and perform tasks faster like typing, and drag-and-drop and multi-tasking.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/ios11-ipad.jpg","video":"https:\/\/player.vimeo.com\/external\/249847986.hd.mp4?s=b50b278b3eb5dabef44f83d83111e05ae4bdf515&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/ios11-ipad.zip","contents":[{"id":"9737","section_id":"63","order":"1","title":"Bigger Content","subhead":"","body":"<p>Often times, apps on the iPhone have smaller images to fit the smaller screens. That doesn&rsquo;t always translate well on the iPad. Instead, try to have bigger images, and allow more images per row if content isn&rsquo;t jeopardized. For example, on the App Store, the size of the cards change when in Landscape mode, Portrait mode and on the iPhone. In addition, there are 2 cards per row on the iPad versus 1 card per row on the iPhone.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPad-BiggerContent.jpg","image_width":"1600","image_height":"747","video":"","bookmark_id":"ios11-ipad-bigger-content"},{"id":"9738","section_id":"63","order":"2","title":"Containing the Text","subhead":"","body":"<p>On the iPhone, the text takes the full width of the screen while on the iPad, it&rsquo;s wrapped in a container to ensure that the character count per line isn&rsquo;t over 90 characters. <\/p><p>Notice that in the App Store app, the texts are well-contained and never get too long per line. Even on the iPad Pro, the container doesn&rsquo;t exceed <strong>800 pt<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/iPad-Container.mp4","bookmark_id":"ios11-ipad-containing-the-text"},{"id":"9739","section_id":"63","order":"3","title":"Center your Modals","subhead":"","body":"<p>On the iPhone, modals are generally constrained against the borders. That is normal practice. On the iPad, you should avoid that because it would make your modal unnecessarily big. If your modal is smaller than the screen size, try to center it both horizontally and vertically, while having a fixed size.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPad-CenterModals.jpg","image_width":"1600","image_height":"871","video":"","bookmark_id":"ios11-ipad-center-your-modals"},{"id":"9740","section_id":"63","order":"4","title":"Move your Content","subhead":"","body":"<p>One of the hardest things to do is to redesign your layout for the bigger screen. If your app feels strange with a lot of negative space, try to fill it with modules of your content. For example, on the Music app, the cover image and description are moved to the left side of the layout. Try to group your content together to make this transition easier.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPad-MoveContent.jpg","image_width":"1600","image_height":"871","video":"","bookmark_id":"ios11-ipad-move-your-content"},{"id":"9741","section_id":"63","order":"5","title":"iPad Resolutions","subhead":"","body":"<p>The iPad has 3 resolutions: <strong>768 x 1024 pt<\/strong> (iPad), <strong>834 x 1112 pt<\/strong> (iPad Pro 10.5&#x201D;) and <strong>1024 x 1366 pt<\/strong> (iPad Pro 12.9&#x201D;). The iPad Pro 12.9-inch&rsquo;s portrait width is the equivalent of the iPad&rsquo;s landscape width, at <strong>1024 pt<\/strong>. Hardware-wise, the iPad is looking like a professional desktop computer. The only thing that needs catching up is the software. <\/p><p>Unfortunately, apps as comprehensive as Sketch or Xcode don&rsquo;t exist yet on the iPad. But for people who uses less complex tools like photo editing, video editing and other productivity apps, the iPad is already a compelling replacement for the desktop computers. As such, you must design with these limitations in mind, but also knowing that there is a growing demand for professional apps.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPad-Resolutions.jpg","image_width":"1280","image_height":"1686","video":"","bookmark_id":"ios11-ipad-ipad-resolutions"},{"id":"9742","section_id":"63","order":"6","title":"Multi-tasking","subhead":"","body":"<p>Because the iPad allows multi-tasking, having an adaptive layout is essential. Like this, the layout adapts to both the Full-screen mode, Slide Over or in Split view.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-ipad-multi-tasking"},{"id":"9743","section_id":"63","order":"7","title":"","subhead":"Slide Over","body":"<p>Slide Over is an overlay that appears on the right of the screen without affecting the current app&rsquo;s layout. It can be triggered by dragging an app from the &#x201C;dock&#x201D; in iOS 11. The floating app has a size of <strong>375 pt<\/strong> on the iPad Pro 12.9-inch, and <strong>320 pt<\/strong> on all other iPads.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPad-SlideOver.jpg","image_width":"1280","image_height":"728","video":"","bookmark_id":"ios11-ipad-slide-over"},{"id":"9744","section_id":"63","order":"8","title":"","subhead":"Split View","body":"<p>Split View allows users to multitask by running 2 apps simultaneously next to each other. There are <strong>16 widths<\/strong> that your app must adapt to. Due to the sheer amount of resolutions, using Auto Layout and Size Classes is the only sensible way to go forward. <\/p><p>Split apps can take <strong>1\/3<\/strong>, <strong>2\/3<\/strong> or <strong>1\/2<\/strong> of the screen&rsquo;s width in Landscape. In Portrait, it can take <strong>1\/3<\/strong> or <strong>2\/3<\/strong>. Just like Slide Over, the app taking <strong>1\/3<\/strong> will have a width of <strong>375 pt<\/strong> on the iPad Pro 12.9-inch, and <strong>320 pt<\/strong> on all other iPads.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPad-SplitView.jpg","image_width":"1280","image_height":"1438","video":"","bookmark_id":"ios11-ipad-split-view"},{"id":"9745","section_id":"63","order":"9","title":"iPad Size Classes","subhead":"","body":"<p>Size Classes allow you to categorize screen widths and heights, and set layout conditions based on those combinations. They&rsquo;re even more essential on the iPad, just because of the sheer amount of screen resolutions to deal with thanks to the new Multi-tasking feature.<\/p><p>There are 3 types of Size Classes for both width and height: <strong>Compact<\/strong>, <strong>Regular<\/strong> and <strong>Any<\/strong>. By combining these, you will affect several devices at once. At full-screen, it&rsquo;s generally just <strong>Regular<\/strong> x <strong>Regular<\/strong>. <\/p><p>In Split View, the iPad Pro 12.9-inch may behave slightly differently because of the larger resolution. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPad-SizeClasses.jpg","image_width":"1280","image_height":"1318","video":"","bookmark_id":"ios11-ipad-ipad-size-classes"},{"id":"9746","section_id":"63","order":"10","title":"Drag and Drop","subhead":"","body":"<p>New in iOS 11 is the ability to drag and drop texts and images across apps. This feature is especially useful for the iPad because of its large screen that can be split in two. What this means for designers is that you must ensure that your content is draggable. In other words, don&rsquo;t use texts embedded in images or elements that are impossible to drag.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/iPad-DragDrop.mp4","bookmark_id":"ios11-ipad-drag-and-drop"},{"id":"9747","section_id":"63","order":"11","title":"Control Center","subhead":"","body":"<p>On the iPad, the Control Center shows additional elements such as the opened apps and the dock. Apps are shown in a small format, so make sure that your content is interesting, and easily scannable while in this mode. Titles should be big, body text should be at least <strong>17 pt<\/strong>, as recommended in the Typography section.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPad-ControlCenter.jpg","image_width":"1600","image_height":"1200","video":"","bookmark_id":"ios11-ipad-control-center"},{"id":"9748","section_id":"63","order":"12","title":"Do and Don&rsquo;t","subhead":"","body":"<p>These are the best practices for the iPad. To summarize, your layout should be adaptive and take full advantage of the larger screen. Images and medias should generally be bigger and texts should be comfortable to read.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPad-Dont.jpg","image_width":"1630","image_height":"1536","video":"","bookmark_id":"ios11-ipad-do-and-don-t"},{"id":"9749","section_id":"63","order":"13","title":"Resources","subhead":"","body":"<p>The resources for the iPad is more scarce than for the iPhone. It is true that the iPhone is a bigger market for designers, but at the same time, one must not discard the value of having Pro users using your app. For tools, video, reading and other Pro apps, this is a great opportunity to expand your app to an audience that is willing to pay for quality.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-ipad-resources"},{"id":"9750","section_id":"63","order":"14","title":"","subhead":"Adaptivity and Layout","body":"<p>Excellent <a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/visual-design\/adaptivity-and-layout\/\">page<\/a> for reading more about adaptive layouts, from the human interface guidelines for iOS. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPad-HIG.jpg","image_width":"1600","image_height":"578","video":"","bookmark_id":"ios11-ipad-adaptivity-and-layout"},{"id":"9751","section_id":"63","order":"15","title":"","subhead":"iPad UI Kit","body":"<p>There is no iOS 11 UI Kit for iPad yet, but <a href=\"https:\/\/iosdesignkit.io\/ios-gui\/\">this<\/a> is the best out there at the moment. It&rsquo;s the most extensive and well-supported template.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPad-UIKit.jpg","image_width":"1600","image_height":"1124","video":"","bookmark_id":"ios11-ipad-ipad-ui-kit"}]},{"id":"90","chapter_id":"1","order":"2","slug":"ios11-watch","title":"Design for Apple Watch","caption":"Designing for people on the go","body":"<p>Apple Watch was introduced on April 24, 2015, and it was highly anticipated by developers, designers, and the media. It was truly the first wearable that broke every expectation, placing Apple as the <strong>number one watch manufacturer in the world<\/strong>.<\/p>\n\n<p>Although it is part of the Apple devices family, it came with its own <a href=\"https:\/\/developer.apple.com\/watchos\/human-interface-guidelines\/overview\/themes\/\" title=\"Human Interface Guidelines\">Human Interface Guidelines<\/a>. This was essential for Apple Watch to have its own ecosystem.<\/p>\n\n<p>According to <a href=\"http:\/\/www.asymco.com\/2017\/09\/25\/a-small-screen-ipod\/\" title=\"Apple Watch Sales\">Asymco<\/a>, there are <strong>33 million Apple Watches sold.<\/strong> This is a big audience for your app. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/ios11-watch.jpg","video":"https:\/\/player.vimeo.com\/external\/249818867.hd.mp4?s=cfa7e24da877b8ec320da8b6f72657919e6426fa&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/ios11-watch.zip","contents":[{"id":"9881","section_id":"90","order":"1","title":"The Basics","subhead":"","body":"<p>Designing for the Apple Watch is completely different from designing for iOS. We need to understand different aspects which make Apple Watch an amazing minicomputer, and at the same time, an extension of the iPhone. <\/p><p>As designers, we need to consider the size of the screen of the Apple Watch and understand that the design is completely different from the iPhone.<br><\/p><p>This is so important since the screen size brought new gestures and new UI\/UX considerations.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/iPhone%208%20Plus%20and%20AppleWatch%20Screens.jpg","image_width":"1600","image_height":"902","video":"","bookmark_id":"ios11-watch-the-basics"},{"id":"9882","section_id":"90","order":"2","title":"Designing for Apple Watch","subhead":"","body":"<p>Perhaps the first experience that we all had with Apple Watch, is when we receive the very first time a notification. It is pretty awesome experience as a user to act directly from the Watch without reaching your phone. <\/p><p>But what makes this experience so good? Overall what makes the experience so personal is the <strong>watchOS Design Themes:<\/strong> <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/watchOS%20Design%20Themes.jpg","image_width":"1600","image_height":"791","video":"","bookmark_id":"ios11-watch-designing-for-apple-watch"},{"id":"9883","section_id":"90","order":"3","title":"","subhead":"Personal Communication","body":"<p>Apple Watch is maybe the first device which creates an intimate connection with the user, so you need to take advantage of this unique bond during your design process.<br><\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-watch-personal-communication"},{"id":"9884","section_id":"90","order":"4","title":"","subhead":"Holistic Design","body":"<p>Force Touch and Digital Crown are the key components that let users interact seamlessly with onscreen content. When you are designing your app the goal should be to enhance the user&rsquo;s perception that hardware and software are indistinguishable between them.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-watch-holistic-design"},{"id":"9885","section_id":"90","order":"5","title":"","subhead":"Lightweight interactions","body":"<p>The quick interactions in the Apple watch are essential to the experience. The synchronization between the animation and the sound is crucial for users. It is important to consider that the information that is displayed should be quick to glance and easy to dismiss.<br><\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-watch-lightweight-interactions"},{"id":"9886","section_id":"90","order":"6","title":"Qualities of great Apple Watch experiences","subhead":"","body":"<p>You need to plan carefully the moment when you start designing your Apple Watch App. There is a nice <a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2017\/808\/\" title=\"Planning a Great Apple Watch Experience\">video<\/a> from Apple which gives some tips and tricks to best plan your App.<\/p><p>The best way to evaluate your App is to think about accomplishing these 4 points: <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Qualities%20of%20Apple%20Watch%20Experiences.jpg","image_width":"1600","image_height":"1003","video":"","bookmark_id":"ios11-watch-qualities-of-great-apple-watch-experiences"},{"id":"9887","section_id":"90","order":"7","title":"","subhead":"Legible","body":"<p>The user needs to understand at first glance what is the information you are displaying. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-watch-legible"},{"id":"9888","section_id":"90","order":"8","title":"","subhead":"Concise","body":"<p>Get straight to the point. Remember that you will have just a few seconds between the moment when your users receive your app notifications and raise their wrist.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-watch-concise"},{"id":"9889","section_id":"90","order":"9","title":"","subhead":"Timely","body":"<p>Show the most relevant information to the user in the smallest amount of time as possible. Like that, you are making your App more relevant for the user.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-watch-timely"},{"id":"9890","section_id":"90","order":"10","title":"","subhead":"Personal","body":"<p>If your App accomplishes the first three elements, your user will feel a personal connection. Ideally, try to deepen this relationship with the user.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-watch-personal"},{"id":"9891","section_id":"90","order":"11","title":"Apple Watch design essentials","subhead":"","body":"<p>Apple offers some <a href=\"https:\/\/developer.apple.com\/design\/resources\/\" title=\"Resources for Sketch and PS\">great resources<\/a> for you to start designing for the Apple Watch. There are also some principles you need to consider the moment when you start designing apps such as:<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-watch-apple-watch-design-essentials"},{"id":"9892","section_id":"90","order":"12","title":"","subhead":"Ask yourself a question","body":"<p>Identify what is essential to show on your Watch App. Find that feature that is special to the end user. Ask yourself: What is the most important thing that the user would like to see at a glance? this is key for you to understand. If your App is about the weather, the question should be; How is the weather today? In the end, your design should answer that question.<\/p><blockquote><p>You need to understand that your design will answer the main question that you are trying to solve with your App, so keep it short, essential and focused. <\/p><\/blockquote>","image":"https:\/\/designcode.io\/cloud\/ios11\/AskYourself.jpg","image_width":"1600","image_height":"1003","video":"","bookmark_id":"ios11-watch-ask-yourself-a-question"},{"id":"9893","section_id":"90","order":"13","title":"","subhead":"Iteration","body":"<p>Ok, you have a great design for your Apple Watch App. People seem to love it. Don&apos;t stop there, you always keep asking yourself; How can we make this better ?. <\/p><p>There are always new and creative ways to come up with better designs for your users.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Iterations.jpg","image_width":"1600","image_height":"915","video":"","bookmark_id":"ios11-watch-iteration"},{"id":"9894","section_id":"90","order":"14","title":"","subhead":"Notifications","body":"<p>Apple Watch apps have two types of notifications: short-look and long-look interface. <\/p><p>The user first receives a notification, which is the short-look interface. This notification is visible for a brief time, if the user wants to dismiss it, they can lower their wrist. If they want to see the more detailed information they can raise their wrist and tap on the short-look interface.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Notifications.jpg","image_width":"1600","image_height":"915","video":"","bookmark_id":"ios11-watch-notifications"},{"id":"9895","section_id":"90","order":"15","title":"Visual Design","subhead":"","body":"<p>Here are the guidelines for visual design.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-watch-visual-design"},{"id":"9896","section_id":"90","order":"16","title":"","subhead":"Animation","body":"<p>You need to keep the animation short and with a specific purpose. You don&rsquo;t have to use layout animations in your notification interface. Minimize the number of concurrent animations, and try to make the animations optional.<\/p><p>You can animate the following attributes: <\/p><ul>\t<li>Height<\/li>\t<li>Width <\/li>\t<li>Group Insets <\/li>\t<li>Alignment <\/li>\t<li>Background Color <\/li>\t<li>Tint Color <\/li>\t<li>Opacity <\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/Animations.mp4","bookmark_id":"ios11-watch-animation"},{"id":"9897","section_id":"90","order":"17","title":"","subhead":"Colors","body":"<p>You need to choose a global color for your app which is consistent to your app in other devices such as the iPhone. Apple suggests to consider some of the following aspects:<\/p><ul>\t<li>Use black for your app&rsquo;s background color because it blends with the Apple Watch bezel and creates the illusion of an edgeless screen.<\/li>\t<li>Be aware of color blindness and how different cultures perceive color.<\/li>\t<li>Try to avoid using color as the only way to show interactivity.<\/li><\/ul>","image":"https:\/\/designcode.io\/cloud\/ios11\/Color%20Palette.jpg","image_width":"1600","image_height":"985","video":"","bookmark_id":"ios11-watch-colors"},{"id":"9898","section_id":"90","order":"18","title":"","subhead":"Display Sizes","body":"<p>Apple Watch comes in two sizes: 38 mm and 42 mm. <\/p><p>So you need to use one image source file for both display sizes.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Apple%20Watch%20Sizes.jpg","image_width":"1600","image_height":"902","video":"","bookmark_id":"ios11-watch-display-sizes"},{"id":"9899","section_id":"90","order":"19","title":"","subhead":"Customization","body":"<p>Colors, fonts, and icons are important parts to customize your app. But there are essentials rules you need to follow: <\/p><ul>\t<li>Try to always express your brand identity through your font, color and image choices. These will help you to create a unique style.<\/li>\t<li>Avoid displaying your logo in your app. <\/li>\t<li>Don&rsquo;t include a launch screen. <\/li>\t<li>If you use different Typography, make sure it is legible. For more information, you can read the <a href=\"https:\/\/developer.apple.com\/watchos\/human-interface-guidelines\/visual-design\/typography\/\" title=\"HIG Typography\">Typography Page.<\/a><\/li>\t<li>Avoid filling background areas with logos or brand colors.<\/li>\t<li>Use your brand color for your app&rsquo;s global tint color.<\/li><\/ul>","image":"https:\/\/designcode.io\/cloud\/ios11\/NikeApp.jpg","image_width":"1600","image_height":"919","video":"","bookmark_id":"ios11-watch-customization"},{"id":"9900","section_id":"90","order":"20","title":"","subhead":"Typography","body":"<p>The same year of Apple Watch&rsquo;s launch, Apple came with another surprise for the design community. They <a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2015\/804\/\" title=\"Introducing the New System Fonts San Francisco\">released<\/a> their first family of typefaces called San Francisco. At the time Helvetica Neue was used for iOS, but it was not suited for texts in small screens. <\/p><p>San Francisco has the objective to unify Apple&rsquo;s platform. However is not a single font. <\/p><p>San Francisco is comprised of two main sub-families. <\/p><p>SF Pro ships on iOS and macOS, and SF Compact ships on Apple Watch. <\/p><p>The first is stylistic, but the second one is functional.<\/p><p><a href=\"https:\/\/developer.apple.com\/fonts\/\" title=\"SF and SF Compact\">SF Pro and SF Compact<\/a> are sibling typefaces, meaning they are related but not identical. The biggest difference between the two is how the round shapes are handled.<\/p><p>SF Compact has rather flat vertical lines than that of SF Pro, and this was due to Apple wanting to fit more text on a small screen. <\/p><p>Actually, San Francisco fonts for iOS, macOS, and watchOS are not the same. You can spot easily the difference between round shaped letters like &#x2018;o&rsquo;, &#x2018;e&rsquo;.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography.jpg","image_width":"1600","image_height":"1000","video":"","bookmark_id":"ios11-watch-typography"},{"id":"9901","section_id":"90","order":"21","title":"","subhead":"Icons and Images","body":"<p>As for any other app, you need to optimize your app&rsquo;s Images. Apple recommends you to use de-interlaced PNG files for bitmap\/raster and artwork. <\/p><p>Also, try to avoid transparency because the alpha channel increases the file size.<br><\/p><p>You can use an 8-bit color palette for PNG graphics that don&rsquo;t require full 24-bit colors. This palette is not appropriate for photos.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Images%20and%20Icons.jpg","image_width":"1600","image_height":"1003","video":"","bookmark_id":"ios11-watch-icons-and-images"},{"id":"9902","section_id":"90","order":"22","title":"","subhead":"Exporting Apple Watch App Icons","body":"<p>There is a neat paid app that is very handy when you need to export assets for the Apple Watch. <a href=\"https:\/\/itunes.apple.com\/us\/app\/asset-catalog-creator-resizer\/id809625456?ls=1&amp;mt=12\" title=\"Asset Catalog Creator\">Asset Catalog Creator<\/a> is an App that can export Apple Watch App icons.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Asset%20Catalog%20Creator.jpg","image_width":"1600","image_height":"902","video":"","bookmark_id":"ios11-watch-exporting-apple-watch-app-icons"},{"id":"9903","section_id":"90","order":"23","title":"Designing for other Wearables","subhead":"","body":"<p>Although Apple Watch is the most popular wearable so far, we as designers sometimes asked to design for other wearables. For those cases, you will find the following links very useful: <a href=\"https:\/\/designguidelines.withgoogle.com\/android-wear\/android-wear\/designing-for-watches.html#\" title=\"Designing for Android Wear\">Android Wear<\/a>, <a href=\"https:\/\/developer.pebble.com\/guides\/design-and-interaction\/\" title=\"Designing for Pebble\">Pebble<\/a>. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-watch-designing-for-other-wearables"},{"id":"9904","section_id":"90","order":"24","title":"Conclusion","subhead":"","body":"<p>Summing up, it is important that you as a designer can keep on mind that your design should constantly answer one question: What is the most important thing that the user will like to see on a Glance? Finally always consider these 4 qualities: legible, concise, timely and personal. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-watch-conclusion"},{"id":"9905","section_id":"90","order":"25","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/dnisttahuz\">Daniel Nisttahuz<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-watch-credit"}]},{"id":"3","chapter_id":"1","order":"3","slug":"ios11-colors","title":"Learn Colors","caption":"How to work with colors","body":"<p>Colors are difficult to master because it\u2019s really easy to go overboard. When we design, we have a tendency to over-design. For colors, we tend to use competing colors that distract and just feels completely unnatural. What I can recommend is to simply stick to the basics and temper your use of colors by focusing on its utility and pleasantness. When in doubt, use colors only to draw attention to a button or element of importance.<\/p><blockquote id=\"blockquote\"> <p id=\"p\">Nature is probably the biggest inspiration for all things. Harmony exists in nature; all you need to do is translate it to the digital world, on the medium that you\u2019re designing for. You\u2019d want to pick a color based on something that is naturally beautiful like the sky, clouds, sunsets and plants.<\/p> <\/blockquote>","image":"https:\/\/designcode.io\/cloud\/ios11\/ios11-colors.jpg","video":"https:\/\/player.vimeo.com\/external\/251534283.hd.mp4?s=b590a367922576ea925c257e5fc208fd2c1d76ef&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/ios11-colors.zip","contents":[{"id":"12064","section_id":"3","order":"1","title":"Primary, Secondary and Tertiary Colors","subhead":"","body":"<p>I suggest starting with a vibrant, pastel color that is <strong>Primary<\/strong> or <strong>Secondary<\/strong>. There is no wrong pick. It&rsquo;s how you use it and what you choose to complement it.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Wheel.jpg","image_width":"1594","image_height":"1466","video":"","bookmark_id":"ios11-colors-primary-secondary-and-tertiary-colors"},{"id":"12065","section_id":"3","order":"2","title":"","subhead":"iOS Palette","body":"<p>These are the colors used by Apple in their native apps. They&rsquo;re vibrant, but not too flashy. In general, blue is used system-wide as the universal color for buttons, icons and actionable items. But other colors can be used to set the brand like yellow for Notes, pink for Apple Music, green for Messages, etc. If you&rsquo;re in doubt, use blue. When designing, please keep in mind that red is generally used for destructive actions and green for successful actions.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Primary.png","image_width":"1276","image_height":"324","video":"","bookmark_id":"ios11-colors-ios-palette"},{"id":"12066","section_id":"3","order":"3","title":"","subhead":"Example","body":"<p>Colors are used minimally to direct the attention to interactive places. Items that are not actionable are generally more muted and neutral, using black, grey or white. Try to use a single color if possible and let the content do the speaking.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Screens.jpg","image_width":"1600","image_height":"752","video":"","bookmark_id":"ios11-colors-example"},{"id":"12067","section_id":"3","order":"4","title":"Hue, Saturation, Brightness","subhead":"","body":"<p>When manipulating colors, it is important to understand the properties relevant to colors. A lot of people use <strong>RGB<\/strong>, but personally I found <strong>HSB<\/strong> to be a lot easier to manipulate. That&rsquo;s because it is hard to tell how much <strong>Red<\/strong>, <strong>Green<\/strong> or <strong>Blue<\/strong> there is to a color. On the other hand, I can easily map in my mind how much <strong>Hue<\/strong>, <strong>Saturation<\/strong> and <strong>Brightness<\/strong>. Those values make a lot more sense to me.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-HSBA%202.jpeg","image_width":"432","image_height":"458","video":"","bookmark_id":"ios11-colors-hue-saturation-brightness"},{"id":"12068","section_id":"3","order":"5","title":"Monochrome Colors","subhead":"","body":"<p>The most common scenario is to have one main color and apply a <strong>10-90%<\/strong> white or black layer on top. Sticking to one main color can prove to be a wise decision, especially for those who are not comfortable with colors yet. Simplification always helps new concepts.<\/p><p>By adding a Black or White layer with varying degrees of opacity, you get new monochrome colors, and they complement each other well.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Opacity.png","image_width":"1600","image_height":"676","video":"","bookmark_id":"ios11-colors-monochrome-colors"},{"id":"12069","section_id":"3","order":"6","title":"Create a Monochrome Color","subhead":"","body":"<p>As you get more comfortable, you can also use the Color picker to change the <strong>Brightness<\/strong> and <strong>Saturation<\/strong>. As long as the <strong>Hue<\/strong> value is approximately the same (red must remain red), you&rsquo;ll get monochrome colors.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/2015-10-09 23_43_31.mp4","bookmark_id":"ios11-colors-create-a-monochrome-color"},{"id":"12070","section_id":"3","order":"7","title":"Analogous Colors","subhead":"","body":"<p>This means picking <strong>nearby<\/strong> colors to the main one. From the color wheel, it would be one color next to it. This is especially useful when you have a feeling that your content doesn&apos;t provide enough color variations and you have to resort to new colors to spice it up.<\/p><p>For example, <strong>Red<\/strong> is next to <strong>Orange<\/strong>, which is next to <strong>Yellow<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Analogous.png","image_width":"916","image_height":"152","video":"","bookmark_id":"ios11-colors-analogous-colors"},{"id":"12071","section_id":"3","order":"8","title":"Create an Analogous Color","subhead":"","body":"<p>By changing the Hue value by about 30-50, you get a new Analogous color.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/2015-10-09 23_55_07.mp4","bookmark_id":"ios11-colors-create-an-analogous-color"},{"id":"12072","section_id":"3","order":"9","title":"Complementary Colors","subhead":"","body":"<p>The Complementary color is the opposite of the main color. On the color wheel, it&apos;s the one in the <strong>opposite<\/strong> end. Complementary colors provide excellent contrast, which is important for energizing the mood of your user interface. However, they&rsquo;re harder to work with, so thread carefully.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Complementary.png","image_width":"996","image_height":"306","video":"","bookmark_id":"ios11-colors-complementary-colors"},{"id":"12073","section_id":"3","order":"10","title":"","subhead":"Create a Complementary Color","body":"<p>Using the Color picker, you can simply drag the color spectrum (Hue) by about half the width of the bar.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/2015-10-10 00_06_18.mp4","bookmark_id":"ios11-colors-create-a-complementary-color"},{"id":"12074","section_id":"3","order":"11","title":"Neutral Tones","subhead":"","body":"<p>Perhaps the most important aspect of colors are the neutral tones. They&apos;re the neutralizer and they keep your designs from feeling too heavy. Too many colors mean less usable over a long period of time. Most importantly, the neutral tones defer the user&apos;s attention to the content.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-NeutralColors.png","image_width":"916","image_height":"496","video":"","bookmark_id":"ios11-colors-neutral-tones"},{"id":"12075","section_id":"3","order":"12","title":"","subhead":"Create a Neutral Tone","body":"<p>Neutral tones shouldn&rsquo;t compete against the main colors. In order to get neutral tones, you have to drag the <strong>Saturation<\/strong> to almost 0. Then, you change the Brightness to <strong>Light<\/strong> or <strong>Dark<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/2015-10-10 00_08_51.mp4","bookmark_id":"ios11-colors-create-a-neutral-tone"},{"id":"12076","section_id":"3","order":"13","title":"Contrast","subhead":"","body":"<p>Colors shouldn&rsquo;t be in the way of legibility. Contrast is needed to allow comfortable reading and to immerse the viewer. For good contrast, use opposite ends: white against black, light blue against dark blue, high brightness against low brightness.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Contrast.png","image_width":"1600","image_height":"1204","video":"","bookmark_id":"ios11-colors-contrast"},{"id":"12077","section_id":"3","order":"14","title":"Using an Image&apos;s Colors","subhead":"","body":"<p>Your surrounding is full of colors that inspire. When you look at beautiful photographs, objects or digital designs, one of the first things that you notice is how beautiful the colors are. When that happens, you should take a picture or screen capture the image, and extract the colors. From those colors, you can create a palette out of it.<\/p><p><a href=\"https:\/\/itunes.apple.com\/ca\/app\/sip-color\/id934379679?mt=8\">Sip<\/a> is a great iOS app that lets you create a palette out of an photo.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Sip.jpg","image_width":"2236","image_height":"1404","video":"","bookmark_id":"ios11-colors-using-an-image-apos-s-colors"},{"id":"12078","section_id":"3","order":"15","title":"The Manual Way","subhead":"","body":"<p>Manual palette creation is the best way but requires a good understanding of colors. Anything automatic always comes with a price: accuracy. It is best to use your intuition.<\/p><p>In this example, I picked Medium&apos;s iOS App and manually extracted the primary, secondary and neutral tones.<\/p><p>The main color is typically used to draw attention to the call to actions. The second color complements the main color and add variations. As for the background colors, they&apos;re used to defer to the content as well as add contrast to the whole design. That&apos;s why we have both light and dark (contrasted) backgrounds.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Manual.jpg","image_width":"1600","image_height":"752","video":"","bookmark_id":"ios11-colors-the-manual-way"},{"id":"12079","section_id":"3","order":"16","title":"Using Adobe&rsquo;s Kuler","subhead":"","body":"<p>If you drag and drop an image to <a href=\"http:\/\/kuler.adobe.com\">Adobe Kuler<\/a>, it is able to give you the main colors and even the ones in the background.<\/p><p>You can play with the different themes and even move the circles to focus on the UI instead of the background. It&apos;s not perfect. However, by customizing a little, I got the palette that I wanted from the image I uploaded.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Kuler.jpg","image_width":"1600","image_height":"1268","video":"","bookmark_id":"ios11-colors-using-adobe-s-kuler"},{"id":"12080","section_id":"3","order":"17","title":"Collecting Colors","subhead":"","body":"<p>On <a href=\"https:\/\/dribbble.com\">Dribbble<\/a>, you can browse and save great color schemes. Then, you can browse colors from a design that inspired you.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-Colors.mp4","bookmark_id":"ios11-colors-collecting-colors"},{"id":"12081","section_id":"3","order":"18","title":"The Neutral Palettes","subhead":"","body":"<p>While the main colors are easy to extract, the backgrounds and text colors are not. They&apos;re a lot more subtle and require more experimentations and study to get them right. Here are some of my favorite palettes for UI design in term of neutral tones.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-colors-the-neutral-palettes"},{"id":"12082","section_id":"3","order":"19","title":"","subhead":"The Blue Palette","body":"<p>Blue is a pleasant color because it reminds people of the sky and water. When people see blue, they&rsquo;re more likely to feel calm and trusting. Blue generally goes well with other colors.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-BluePalette.png","image_width":"916","image_height":"152","video":"","bookmark_id":"ios11-colors-the-blue-palette"},{"id":"12083","section_id":"3","order":"20","title":"","subhead":"The Gray Palette","body":"<p>UI colors should avoid absolute black. Black offers too much contrast and blends too well with the iPhone&rsquo;s physical black screen.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-GrayPalette.png","image_width":"916","image_height":"152","video":"","bookmark_id":"ios11-colors-the-gray-palette"},{"id":"12084","section_id":"3","order":"21","title":"","subhead":"Gray Usage","body":"<p>If you are to use gray, remember to make it dark below <strong>30%<\/strong> or light above <strong>70%<\/strong>. Average gray tones looks dull and don&rsquo;t complement well other colors.<\/p><p>In this example, we get far more contrast when the <strong>Brightness<\/strong> is in that range. As soon as the gray goes mid-tone, we can hardly read the text and the colors don&rsquo;t look attractive together.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/2015-10-11 00_28_28.mp4","bookmark_id":"ios11-colors-gray-usage"},{"id":"12085","section_id":"3","order":"22","title":"","subhead":"The Custom Palette","body":"<p>Beyond the common blue and gray palettes, you can always pick any color you&rsquo;d like, just make sure that they complement each other well.<\/p><p>Slide the <strong>Hue<\/strong> in your color picker and experiment with Monochrome, Analogous and Complementary colors (in that order). Then, play with <strong>Saturation<\/strong> and <strong>Brightness<\/strong> to increase contrast and vibrancy.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-CustomPalette.png","image_width":"916","image_height":"496","video":"","bookmark_id":"ios11-colors-the-custom-palette"},{"id":"12086","section_id":"3","order":"23","title":"Light and Dark UI","subhead":"","body":"<p>Sometimes, you have to juggle between light and dark, either for branding or for usability. Think of iBooks: the user interface automatically switches to Dark mode when the ambient light is low.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-iBooks.jpg","image_width":"1600","image_height":"752","video":"","bookmark_id":"ios11-colors-light-and-dark-ui"},{"id":"12087","section_id":"3","order":"24","title":"","subhead":"Example for Dark UI","body":"<p>Another example is the Apple Watch: it uses an absolute black background to blend perfectly with the physical bezel.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Watch.jpg","image_width":"1840","image_height":"1316","video":"","bookmark_id":"ios11-colors-example-for-dark-ui"},{"id":"12088","section_id":"3","order":"25","title":"","subhead":"Guidelines for Light UI","body":"<p>1. The content should be lighter than the background. Objects in focus are usually better lit than the background.<\/p><p>2. Don&rsquo;t overuse colors. They really grab your attention. Use colors to give importance to buttons and highlighted states.<\/p><p>3. Avoid average colors. <strong>90-100%<\/strong> white is usually the best range.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-OffGray.jpg","image_width":"1948","image_height":"912","video":"","bookmark_id":"ios11-colors-guidelines-for-light-ui"},{"id":"12089","section_id":"3","order":"26","title":"","subhead":"Guidelines for Dark UI","body":"<p>1. Don&rsquo;t use absolute black. It&rsquo;s very hard to see the details in pitch black and the contrast can be too high against white.<\/p><p>2. If you must use black, make sure to have variations of dark gray to alleviate the high contrast.<\/p><p>3. Avoid grays when using blue. Dark blue complements blue better than gray.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Payment.jpg","image_width":"1600","image_height":"1200","video":"","bookmark_id":"ios11-colors-guidelines-for-dark-ui"},{"id":"12090","section_id":"3","order":"27","title":"Additional Resources","subhead":"","body":"<p>Understanding how colors work, how they complement each other and when to use them is crucial to the branding and usability of your app. These resources will strengthen your mastery of colors and give you valuable tools and examples to apply that knowledge in real projects.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-colors-additional-resources"},{"id":"12091","section_id":"3","order":"28","title":"Material Design Colors","subhead":"","body":"<p>A fantastic <a href=\"http:\/\/www.google.com\/design\/spec\/style\/color.html#\">guide<\/a> about colors from Google&apos;s Material design. This will help you for iOS as well.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-colors-material-design-colors"},{"id":"12092","section_id":"3","order":"29","title":"Sketch Palettes","subhead":"","body":"<p><a href=\"https:\/\/github.com\/andrewfiorillo\/sketch-palettes\">Sketch Palettes<\/a> lets you easily save and import palettes for both global and document colors. I started a <a href=\"http:\/\/cl.ly\/2k1g3h1w1c1y\">palette<\/a> using <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UserExperience\/Conceptual\/MobileHIG\/ColorImagesText.html\">iOS<\/a>, <a href=\"https:\/\/www.materialpalette.com\">Material Design<\/a> and <a href=\"https:\/\/flatuicolors.com\">Flat UI<\/a> colors.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Sketch.jpg","image_width":"1610","image_height":"1126","video":"","bookmark_id":"ios11-colors-sketch-palettes"},{"id":"12093","section_id":"3","order":"30","title":"UI Gradients","subhead":"","body":"<p>iOS is known to use beautiful gradients. You can incorporate them inexpensively for your UIs by having two colors that complement each other. This is a <a href=\"http:\/\/uigradients.com\">nice collection<\/a> of gradients.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-colors-ui-gradients"},{"id":"12094","section_id":"3","order":"31","title":"Skala Color","subhead":"","body":"<p>An exceptional <a href=\"https:\/\/bjango.com\/mac\/skalacolor\/\">color picker<\/a> with Swift and HEX support.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Colors-Skala%202.jpeg","image_width":"1018","image_height":"788","video":"","bookmark_id":"ios11-colors-skala-color"},{"id":"12095","section_id":"3","order":"32","title":"Design your app with accessibility in mind","subhead":"","body":"<p><a href=\"https:\/\/usecontrast.com\" title=\"Contrast App\">Contrast App<\/a> is a practical tool to design and choose the right colors following the accessibility guidelines.<\/p><p>You can make sure that the text you&apos;re designing isn&apos;t too light in your interface designs. You can enter hex codes manually or use the built-in color picker for sampling colors directly from your designs.<\/p><p>It&apos;ll stay on top of your active design tool for quick access to the <a href=\"https:\/\/www.w3.org\/WAI\/intro\/wcag\" title=\"WCAG Scores\">WCAG<\/a> contrast scores.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/colors-contrastApp.jpg","image_width":"1600","image_height":"702","video":"","bookmark_id":"ios11-colors-design-your-app-with-accessibility-in-mind"},{"id":"12096","section_id":"3","order":"33","title":"Coolors.co","subhead":"","body":"<p><a href=\"https:\/\/coolors.co\" title=\"Coolors.co\">Coolors.co<\/a> is a quick color scheme generator, with just pressing the spacebar you will be able to browse through different palettes in seconds. If you like a single color, you can lock that color and keep browsing until you find your dreamed palette, once you have your palette you can export it. It also has its iOS App which is handy.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/colors-cooloers.jpg","image_width":"1600","image_height":"900","video":"","bookmark_id":"ios11-colors-coolors-co"},{"id":"12097","section_id":"3","order":"34","title":"Color Juicer","subhead":"","body":"<p>This is another helpful App which will help you to obtain the dominant colors from an image and create your palette in seconds with just dragging and dropping the image to the App. Once the App will create for you a palette, you will be able to copy any color with only one click.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/colors-colorJuicer.jpg","image_width":"1600","image_height":"768","video":"","bookmark_id":"ios11-colors-color-juicer"}]},{"id":"4","chapter_id":"1","order":"4","slug":"ios11-typography","title":"Learn Typography","caption":"Make the content clear and readable","body":"<p>The text content represents more than 80% of your design, so understanding typography is crucial. Always put readability first.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/ios11-typography.jpg","video":"https:\/\/player.vimeo.com\/external\/252391910.hd.mp4?s=64ba80e092aed0fa00f53d4a7c3a5ca7e784b2ac&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/ios11-typography.zip","contents":[{"id":"9853","section_id":"4","order":"1","title":"Typography Basics","subhead":"","body":"<p>It&rsquo;s important to learn these typography terms and what they mean. These names will be employed often when explaining typography.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography-Basics.png","image_width":"1600","image_height":"980","video":"","bookmark_id":"ios11-typography-typography-basics"},{"id":"9854","section_id":"4","order":"2","title":"Rules of Good Typography","subhead":"","body":"<p>Unless you&rsquo;re a typography aficionado, you&rsquo;ll want something clean and simple first, not necessarily original. Good typography makes us want to read, so it&apos;s best to focus on its utility. Let&rsquo;s look at these <a href=\"http:\/\/practicaltypography.com\/typography-in-ten-minutes.html\">5 rules of good typography<\/a> and apply them to modern design for mobile and for Websites.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-rules-of-good-typography"},{"id":"9855","section_id":"4","order":"3","title":"San Francisco Font","subhead":"","body":"<p>The default font for iOS is <a href=\"https:\/\/developer.apple.com\/fonts\/\">San Francisco<\/a>, which is made in-house by Apple. You can download the new fonts at this <a href=\"https:\/\/developer.apple.com\/fonts\/\">link<\/a>. It&rsquo;s beautiful, free and most importantly, designed for legibility. I encourage you to watch the <a href=\"https:\/\/developer.apple.com\/videos\/wwdc\/2015\/?id=804\">video<\/a> to understand how it affects the design for iOS.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography-Fonts.jpg","image_width":"1280","image_height":"640","video":"","bookmark_id":"ios11-typography-san-francisco-font"},{"id":"9856","section_id":"4","order":"4","title":"","subhead":"SF Pro Font Tracking Value","body":"<p>iOS automatically adjusts the <a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/visual-design\/typography\/\">tracking value<\/a> and Text\/Display for San Francisco based on the font size. This ensures that the typeface is always easy to read. At <strong>20 pt<\/strong> or more, <strong>SF UI Display<\/strong> should be used, otherwise use <strong>SF UI Text<\/strong>. These tracking values can only be applied in Photoshop, but here&rsquo;s a formula for converting in Sketch.<\/p><p>Use this <a href=\"https:\/\/github.com\/kylehickinson\/Sketch-SF-UI-Font-Fixer\">Sketch plugin<\/a> to quickly apply the correct character spacing values.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography-Tracking.jpg","image_width":"1280","image_height":"1020","video":"","bookmark_id":"ios11-typography-sf-pro-font-tracking-value"},{"id":"9857","section_id":"4","order":"5","title":"","subhead":"Dynamic Type","body":"<p>Accessibility is a prominent theme in iOS 11. Now, there are dynamic font presets, as shown in this image. Like this, if you set your text to Body, and enable Dynamic Type, the system will automatically increases the size based on the user&rsquo;s preferences.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography-DynamicType.png","image_width":"1600","image_height":"1462","video":"","bookmark_id":"ios11-typography-dynamic-type"},{"id":"9858","section_id":"4","order":"6","title":"Body Text","subhead":"","body":"<p>Pick a font that looks good in the body text. When in doubt, pick one that is both clean and comfortable to read. San Francisco, Helvetica Neue, Open Sans, Roboto, Proxima Nova and Museo Sans are some of my favorites. They&rsquo;re all available for free on <a href=\"https:\/\/www.google.com\/fonts\">Google Fonts<\/a> and <a href=\"https:\/\/typekit.com\">Typekit<\/a> (with <a href=\"http:\/\/www.adobe.com\/ca\/creativecloud.html\">Creative Cloud<\/a> account).<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography-List.png","image_width":"1600","image_height":"514","video":"","bookmark_id":"ios11-typography-body-text"},{"id":"9859","section_id":"4","order":"7","title":"Font Size","subhead":"","body":"<p>The font size should be at least <strong>11pt<\/strong> to be readable on the iPhone, iPad and Apple Watch. While that is the minimum value, the recommended size for the body text is actually <strong>15-19pt<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography-Size.jpg","image_width":"800","image_height":"644","video":"","bookmark_id":"ios11-typography-font-size"},{"id":"9860","section_id":"4","order":"8","title":"","subhead":"Font Size Do and Don&rsquo;t","body":"<p>Your texts should never be below <strong>10 pt<\/strong> since that would make them unreadable for many of your readers. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography-Donts.png","image_width":"1600","image_height":"528","video":"","bookmark_id":"ios11-typography-font-size-do-and-don-t"},{"id":"9861","section_id":"4","order":"9","title":"Font Weight","subhead":"","body":"<p>Modern fonts such as <strong>SF<\/strong> have many extra font weights: <strong>Thin<\/strong>, <strong>Ultralight<\/strong>, <strong>Light<\/strong>, <strong>Medium<\/strong>, <strong>Semibold<\/strong>, <strong>Heavy<\/strong> and <strong>Black<\/strong> in addition to the usual suspects: <strong>Regular<\/strong>, and <strong>Bold<\/strong>. <\/p><p>In general, at <strong>11-19 pt<\/strong>, use SF Text <strong>Regular<\/strong>. At <strong>20-34 pt<\/strong>, use SF Display <strong>Medium<\/strong> and at <strong>34 pt&#xA0;<\/strong> or more, use SF Display <strong>Bold<\/strong>. Please note that at bigger sizes, you can afford using thinner fonts like Light and Ultralight, but I would suggest doing that if you are comfortable with typography. In iOS 11, large titles are generally much bolder.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography-Weight.png","image_width":"1600","image_height":"618","video":"","bookmark_id":"ios11-typography-font-weight"},{"id":"9862","section_id":"4","order":"10","title":"Line Height","subhead":"","body":"<p>The line height should be between <strong>120%&#xA0;<\/strong>to <strong>145%<\/strong> of the font size.<\/p><p>The right example has a line height that equals the font size (100%). In the left, I applied a <strong>145%<\/strong> scale. The difference is substantial. Now, multiply that quantity of words by 10 and you get an idea of how frustrating it can be to have to read such condensed text. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography-LineHeight.png","image_width":"1598","image_height":"528","video":"","bookmark_id":"ios11-typography-line-height"},{"id":"9863","section_id":"4","order":"11","title":"45-90 Characters Per Line","subhead":"","body":"<p>When your line is too long, the reader will have a hard time focusing. The overwhelming amount of text per line wears them off, because each jump to a new line gives excitement and that happens less when lines are too long.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography-Line.png","image_width":"1600","image_height":"1038","video":"","bookmark_id":"ios11-typography-45-90-characters-per-line"},{"id":"9864","section_id":"4","order":"12","title":"Use Your Typeface Wisely","subhead":"","body":"<p>It&rsquo;s one thing to know about typefaces, it is another to know how to use it. Beautiful typography doesn&rsquo;t just happen, you have to carefully curate and customize it. For instance, don&rsquo;t force bold or italic if the font doesn&rsquo;t support it.<\/p><p>Use italics, underline, bold, lists and colors to reinforce the hierarchy and interactions.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography-Used.jpg","image_width":"800","image_height":"644","video":"","bookmark_id":"ios11-typography-use-your-typeface-wisely"},{"id":"9865","section_id":"4","order":"13","title":"Serif and Sans-Serif","subhead":"","body":"<p>A sans-serif typeface is one that does not have the small projecting features called &quot;serifs&quot; at the end of strokes. Both Serif and Sans are good choices.<\/p><p>The <strong>Serif<\/strong> fonts are more commonly used in more traditional apps that encourage reading and storytelling such as Medium, iBooks and The New York Times. It has a lot of charm. Personally, I believe it&apos;s important to go back to our roots when it comes to design, so I would definitely encourage using Serif fonts for storytelling. As they&apos;re less used in modern apps, you get a unique feel to them.<\/p><p>The <strong>Sans<\/strong> typefaces are more utilitarian and neutral, used widely in most modern apps. Its popularity also means that it&apos;s more generic. The amount of Sans serif typefaces out there is overwhelming, so pick carefully.<\/p><blockquote><p>People say design isn&rsquo;t art. It isn&rsquo;t. Great design is art.<\/p><\/blockquote>","image":"https:\/\/designcode.io\/cloud\/ios11\/Typography-Serif.png","image_width":"1600","image_height":"840","video":"","bookmark_id":"ios11-typography-serif-and-sans-serif"},{"id":"9866","section_id":"4","order":"14","title":"Kerning","subhead":"","body":"<p>Kerning is the process to adjust the space between two specific characters, <\/p><p>to achieve a pleasing visual result. <\/p><p>There is an <a href=\"http:\/\/type.method.ac\">awesome site<\/a> where you can test your Kerning abilities.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Kerning.jpg","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-kerning"},{"id":"9867","section_id":"4","order":"15","title":"Where to Find Fonts","subhead":"","body":"<p>Some fonts are expensive. However, there are a lot of free ones that are excellent. Just make sure you pick the fonts that you love. Here are some of the best places to find them.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-where-to-find-fonts"},{"id":"9868","section_id":"4","order":"16","title":"","subhead":"Google Fonts","body":"<p>With <a href=\"http:\/\/google.com\/fonts\">Google Fonts<\/a>, you can download fonts for free and use them in your projects as you see fit. It&apos;s as good as it gets as far as free fonts go. Since the only way to get custom typefaces on iOS is to download and import the font files, the download option is very useful. There are at least two great fonts: <strong>Open Sans<\/strong> and <strong>Roboto<\/strong>, which is used by default in modern Android phones.<\/p><p>You can use <a href=\"https:\/\/skyfonts.com\">SkyFonts<\/a> for Mac to automatically synchronize to your Desktop.<\/p><p>In case you want to download all the fonts available from Google fonts there is a <a href=\"https:\/\/github.com\/google\/fonts\" title=\"Google Fonts\">GitHub repository<\/a>where you can do that.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-google-fonts"},{"id":"9869","section_id":"4","order":"17","title":"","subhead":"Typekit","body":"<p><a href=\"https:\/\/typekit.com\/fonts\">Typekit<\/a> is part of the Creative Cloud subscription and has a wealthy selection of great fonts. It&rsquo;s perfect for those who are starting. Great fonts that I enjoy include: <strong>Proxima Nova<\/strong>, <strong>Museo<\/strong>, Adelle Sans and Brandon Grotesque.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-typekit"},{"id":"9870","section_id":"4","order":"18","title":"","subhead":"Fontstand","body":"<p>The great thing about <a href=\"https:\/\/fontstand.com\">Fontstand for Mac<\/a> is that you can try fonts for 1 hour before purchasing them. Also, instead of buying the fonts, you rent them for a fraction of the price per month.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-fontstand"},{"id":"9871","section_id":"4","order":"19","title":"","subhead":"Fonts.com","body":"<p>For a monthly subscription, <a href=\"http:\/\/fonts.com\">fonts.com<\/a> lets you use as many fonts as you want. It has the largest selection by far. You can go really specific at picking a font you love. For example, Avenir Next has a <strong>Rounded<\/strong> family that isn&rsquo;t available for free.<\/p><p>Fonts.com also allows you to self-host the font files, meaning you can download and host them on your server. Because I&apos;m fascinated with typography, I use this service pretty much on all my projects.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-fonts-com"},{"id":"9872","section_id":"4","order":"20","title":"Resources","subhead":"","body":"<p>Typography is an art form that is worth exploring. It goes well beyond iOS. When you&apos;ve reached a level where you can call your craft Art, that is the biggest achievement that you can get. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-resources"},{"id":"9873","section_id":"4","order":"21","title":"","subhead":"Typography Guide","body":"<p>If you&apos;d like to learn more about combining typefaces, apostrophes, quotes, dashes and brackets, I suggest heading to <a href=\"http:\/\/typogui.de\">typogui.de<\/a>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-typography-guide"},{"id":"9874","section_id":"4","order":"22","title":"","subhead":"A Five Minutes Guide to Better Typography","body":"<p>A <a href=\"http:\/\/pierrickcalvez.com\/journal\/a-five-minutes-guide-to-better-typography\">real treat<\/a> to read. Smartly designed to give you time to stop and think about each point. It&rsquo;s also cleverly animated to give better impact.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-a-five-minutes-guide-to-better-typography"},{"id":"9875","section_id":"4","order":"23","title":"","subhead":"Guide to Pairing Fonts","body":"<p>At some point, you&rsquo;ll want to have multiple fonts in your design to set a contrast between body text and titles, captions or block quotes. This <a href=\"http:\/\/webdesign.tutsplus.com\/articles\/a-beginners-guide-to-pairing-fonts--webdesign-5706\">guide<\/a> is particularly helpful to help you pair fonts based on a set of criteria.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-guide-to-pairing-fonts"},{"id":"9876","section_id":"4","order":"24","title":"","subhead":"Hand Lettering","body":"<p>There is also a fascinating <a href=\"http:\/\/seanwes.com\/learn\/\">course<\/a> for hand lettering. With these techniques, you can create logos, personal brands and explore typography in general.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-hand-lettering"},{"id":"9877","section_id":"4","order":"25","title":"Font Pair.co","subhead":"","body":"<p>Font Pair is a useful site which helps you to pair Google Fonts together, it has different combination types, like Sans-Serif with Serif , Serif with Sans-Serif, and many others. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Fontpair.jpg","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-typography-font-pair-co"},{"id":"9878","section_id":"4","order":"26","title":"Font Base","subhead":"","body":"<p><a href=\"https:\/\/fontba.se\" title=\"FontBase\">FontBase<\/a> is a font manager app, with it you can share fonts with your whole team just by adding them to any cloud folder.<\/p><p>You also have access to any font from Google&apos;s library in a single click.<\/p><p>It is a really interesting tool with many hidden features.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/82arxx2zm6ili1y\/typography-fontBase.mp4?dl=0","bookmark_id":"ios11-typography-font-base"},{"id":"9879","section_id":"4","order":"27","title":"Right Font","subhead":"","body":"<p>With <a href=\"https:\/\/rightfontapp.com\" title=\"Right Font\">Right Font<\/a> you can also sync your fonts with your team, can favorite any font. It automatically sync fonts from Google Fonts and Adobe Typekit. You can also access to different icons that you can use them for your designs, is a really nice app.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/pwlg95u77nmvfma\/typography-rightFont.mp4?dl=0","bookmark_id":"ios11-typography-right-font"},{"id":"9880","section_id":"4","order":"28","title":"What The Font","subhead":"","body":"<p>Did you ever seen a font and wonder which font it is ?, so there a tool for that. <a href=\"https:\/\/www.myfonts.com\/WhatTheFont\/\" title=\"WhatTheFont\">What The Font<\/a> is an App where you can upload an image, and WhatTheFont will find the closest match on its database. It also has an iOS version of its App.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/typography-whatTheFont.jpg","image_width":"1600","image_height":"900","video":"","bookmark_id":"ios11-typography-what-the-font"}]},{"id":"5","chapter_id":"1","order":"5","slug":"ios11-animations","title":"Learn Animations","caption":"Good animations enhance, bad animations distract","body":"<p>The simplification of UI design enables the focus in animation. In this lesson, you&#39;ll learn the basic techniques to animations such as slide, scale and color transitions. Then, you&#39;ll learn about the more advanced techniques introduced in iOS for transitional interfaces and physics animations combined with gestures.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/ios11-animations.jpg","video":"https:\/\/player.vimeo.com\/external\/252916255.hd.mp4?s=099f59302f7edc154bfeda8bdb9d3759debd006b&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/ios11-animations.zip","contents":[{"id":"11792","section_id":"5","order":"1","title":"Introduction to Animations","subhead":"","body":"<p>Animations should enhance the app experience. They make your app more engaging and dynamic. Good animations should provide feedback on taps and gestures, and give a sense of direct manipulation.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Animation-Good.jpg","image_width":"1220","image_height":"534","video":"","bookmark_id":"ios11-animations-introduction-to-animations"},{"id":"11793","section_id":"5","order":"2","title":"Animation Basics","subhead":"","body":"<p>There are a number of basic animation techniques that we use to transition from point A to point B. These animations are so common that they can be found of every platform, from Web to iOS. <\/p><p>Typically, you don&rsquo;t need to set more than 2 animation states: <strong>Begin<\/strong> and <strong>End<\/strong>. The computer will know what happens in between those states.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-animations-animation-basics"},{"id":"11794","section_id":"5","order":"3","title":"","subhead":"Translate","body":"<p>This is as simple as moving the position X and Y. With different timing, Translate is used for sliding, bouncing and shaking visual elements.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/2015-10-14 00_37_57.mp4","bookmark_id":"ios11-animations-translate"},{"id":"11795","section_id":"5","order":"4","title":"","subhead":"Rotate","body":"<p>By changing the angle of the element, you can create interesting effects like the loading animation in iOS, or the <strong>Add<\/strong> icon that turns into a <strong>Close<\/strong> icon.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/2015-10-14 00_38_57.mp4","bookmark_id":"ios11-animations-rotate"},{"id":"11796","section_id":"5","order":"5","title":"","subhead":"Scale","body":"<p>This animation pervades iOS, such as the app icon that zooms inside the app, or the photo thumbnails that expand to full-screen view.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/2015-10-14 00_43_10.mp4","bookmark_id":"ios11-animations-scale"},{"id":"11797","section_id":"5","order":"6","title":"Animation Curve","subhead":"","body":"<p>The <strong>curve<\/strong> plays a big part in making the animation more life-like. Good animations replicate real physics. A ball that bounces on the ground makes a much more interesting subject than one that falls flat. Modern apps tend to use Spring and Ease animations much more than Linear.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/2015-10-14 04_02_36.mp4","bookmark_id":"ios11-animations-animation-curve"},{"id":"11798","section_id":"5","order":"7","title":"3D Transform","subhead":"","body":"<p>When changing the position, you can also play with the X, Y and Z values. Although generally more rare and harder to pull, 3D transforms can give interesting results that can really set your app apart.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/2015-10-14 04_40_07.mp4","bookmark_id":"ios11-animations-3d-transform"},{"id":"11799","section_id":"5","order":"8","title":"Property Change","subhead":"","body":"<p>A very popular animation technique is to change the color and opacity properties. Just modifying the opacity results in the Fade In \/ Fade Out effect, which is extremely common. Animating the layer, text and background colors can also yield effective transitions.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/2015-10-14 05_05_13.mp4","bookmark_id":"ios11-animations-property-change"},{"id":"11800","section_id":"5","order":"9","title":"Combining Animations","subhead":"","body":"<p>On almost every occasion, you&rsquo;ll want to work with 2 or 3 transforms at the same time. By doing so, you get interesting animations inspired by real life physics such as <strong>Bounce<\/strong>, <strong>Morph<\/strong>, <strong>Shake<\/strong>, etc.<\/p><p><a href=\"https:\/\/dribbble.com\/shots\/2148431-GIF-for-the-Timeline-App\">Animation<\/a> by Tubik Studio.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/open-uri20150715-11-1qyjtbd.mp4","bookmark_id":"ios11-animations-combining-animations"},{"id":"11801","section_id":"5","order":"10","title":"","subhead":"Preset Animations","body":"<p>On <a href=\"http:\/\/github.com\/mengto\/spring\">Spring<\/a>, an animation framework that I created for iOS, I made available a bunch of preset animations that combine many transforms at once. They can be inexpensively integrated to your app, without even learning how to code.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/Animation-Spring.mp4","bookmark_id":"ios11-animations-preset-animations"},{"id":"11802","section_id":"5","order":"11","title":"Animations Shouldn&apos;t Last Longer Than 1 second","subhead":"","body":"<p>A long animation can lead to frustration &#x2014; it can get in the way of performing a task. The ideal duration that I&rsquo;ve personally found is 0.3 - 1 second. If you do a Fade In, Slide or Scale, that&rsquo;s the duration that you should aim for. Anything shorter would make seem like there was no animation, or worse it could stress your users. Anything longer may seem underperforming and can be in the way of doing what they want.<\/p><p><a href=\"https:\/\/dribbble.com\/shots\/1949368-Sidebar-animation\">Animation<\/a> by Jakub Antal&#xED;k.<\/p><blockquote><p>Design is the fundamental soul of a human-made creation that ends up expressing itself in successive outer layers of the product or service. &#x2013; Steve Jobs<\/p><\/blockquote>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/side-bar.mp4","bookmark_id":"ios11-animations-animations-shouldn-apos-t-last-longer-than-1-second"},{"id":"11803","section_id":"5","order":"12","title":"Working with Developers","subhead":"","body":"<p>Learning these animations will allow you to understand the techniques behind them. You&rsquo;ll struggle at first to get the results that you seek in the final product, so it&rsquo;s important that you include your engineers in the process. A prototype will work wonders in explaining your animated concepts. In my personal experience, knowing different paths to a goal, from the simple options to the complex ones, will allow you to make a wise decision based on your timeframe.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-animations-working-with-developers"},{"id":"11804","section_id":"5","order":"13","title":"The Animation Tools","subhead":"","body":"<p>You have several animation tools to choose from. Some require little to no experience and others require a pretty steep learning curve. But the rewards are much greater. The harder it gets, the more likely your app will stand out from others.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-animations-the-animation-tools"},{"id":"11805","section_id":"5","order":"14","title":"","subhead":"Principle","body":"<p>The easiest of all is called <a href=\"http:\/\/principleformac.com\">Principle<\/a>. All you need to do is set screen A and screen B, and the tool will automatically animate the elements that both share. From there, you can customize the timing and animation curve. It has a user interface that is very similar to Sketch. <\/p><p><strong>Tip<\/strong>: you can Copy and Paste from Sketch.<\/p><p>Previewing an animation in Principle.<\/p><p><a href=\"https:\/\/dribbble.com\/shots\/2247898-Swipe-Principle-share\">Animation<\/a> in Principle by Leon Wu. Source shared.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/widget.mp4","bookmark_id":"ios11-animations-principle"},{"id":"11806","section_id":"5","order":"15","title":"","subhead":"Flinto for Mac","body":"<p><a href=\"https:\/\/www.flinto.com\/mac\">Flinto<\/a> is similar to Principle in its simplicity. With version 24, the Sketch import feature is built-in to Flinto. So the Sketch plugin is no longer necessary.<\/p><p>I quickly exported my Artboards from Sketch, and built my animations in Flinto.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/Flinto.mp4","bookmark_id":"ios11-animations-flinto-for-mac"},{"id":"11807","section_id":"5","order":"16","title":"","subhead":"Origami","body":"<p><a href=\"http:\/\/facebook.github.io\/origami\/\">Origami<\/a> is a standalone app by Facebook inspired by Apple&rsquo;s Quartz Composer, a tool that is famously used to prototype most of the animations you see on iOS and for Facebook Paper.<\/p><p><a href=\"https:\/\/dribbble.com\/shots\/1812505-Updated-Reservation-Interaction\">Animation<\/a> in Origami by Sam Thibault.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/reservation.mp4","bookmark_id":"ios11-animations-origami"},{"id":"11808","section_id":"5","order":"17","title":"","subhead":"Framer","body":"<p>If you&apos;re a javascript fan, then I think <a href=\"http:\/\/www.framerjs.com\/\">Framer<\/a> is for you as it&rsquo;s based on Web technologies. It allows you to preview your code in real-time and you can even see the results on your mobile.<\/p><p><a href=\"https:\/\/dribbble.com\/shots\/2191447-SpaceInFramers\">Animation<\/a> in Framer by Balraj Chana. Framer source provided.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/spaceinframers.mp4","bookmark_id":"ios11-animations-framer"},{"id":"11809","section_id":"5","order":"18","title":"","subhead":"After Effects","body":"<p><a href=\"http:\/\/www.adobe.com\/products\/aftereffects.html\">After Effects<\/a> is the most popular animation tool for visual designers who don&rsquo;t want to touch code. I&apos;ve seen amazing results on Dribbble. It&apos;s a more traditional tool, using frames and layers. Since it&apos;s an Adobe product, the way it functions is similar to Photoshop&apos;s animation tool, but a lot more advanced.<\/p><p><a href=\"https:\/\/dribbble.com\/shots\/1623679-Open-Close\">Animation<\/a> in After Effects by Creativedash. Author has included the source file.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/openclose.mp4","bookmark_id":"ios11-animations-after-effects"}]},{"id":"6","chapter_id":"1","order":"6","slug":"ios11-icons","title":"UI Icons","caption":"Learn how to find great icons and customize them","body":"<p>Great icons are familiar because they make an instant connection to the things that we see everyday: a camera, a trash can, clouds. They set a friendly tone without words. In this lesson, you&#39;ll learn how to find great icons, when to use and when not to, and you&#39;ll learn how to customize them so that they can fit beautifully in your app&#39;s design.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/ios11-icons.jpg","video":"https:\/\/player.vimeo.com\/external\/253530387.hd.mp4?s=ab65e069ece3c6dba716f1b25575746018b2c917&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/ios11-icons.zip","contents":[{"id":"12323","section_id":"6","order":"1","title":"iOS Icons","subhead":"","body":"<p>In iOS 11, icons are no longer just lines. While the navigation icons still use line icons, the tab bar icons are generally filled, bolder and thus, easier to recognize. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Icons-LineIcons.jpg","image_width":"1600","image_height":"1280","video":"","bookmark_id":"ios11-icons-ios-icons"},{"id":"12324","section_id":"6","order":"2","title":"","subhead":"Icon States","body":"<p>The icons for the Tab Bar have 2 states: gray and coloured. When an icon is coloured, it means that the current screen is selected.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Icons-2States.jpg","image_width":"1200","image_height":"240","video":"","bookmark_id":"ios11-icons-icon-states"},{"id":"12325","section_id":"6","order":"3","title":"Obvious Icons","subhead":"","body":"<p>You should always pick an icon that is easy to recognize. It is encouraged to have text next to the icon in order to bring more clarity. Not every icon is universally recognized, so pick carefully and be familiar with native icons that come with iOS.<\/p><p>If you don&apos;t want to always have text next to the icon, introduce it first and the next time, the icon can be without text. Once the user learns the first time, they don&apos;t need to learn it again.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Icons-System.jpg","image_width":"1084","image_height":"364","video":"","bookmark_id":"ios11-icons-obvious-icons"},{"id":"12326","section_id":"6","order":"4","title":"Avoid Confusion","subhead":"","body":"<p>Avoid using the same icons that Apple uses, but for a different purpose. It may confuse your users since they&rsquo;ve become familiar with the icon elsewhere.<\/p><blockquote><p>You don&rsquo;t need to learn everything, you just need to be curious about learning. When the time comes that you need it, you&rsquo;ll be prepared.<\/p><\/blockquote>","image":"https:\/\/designcode.io\/cloud\/ios11\/Icons-TabBar.jpg","image_width":"1280","image_height":"306","video":"","bookmark_id":"ios11-icons-avoid-confusion"},{"id":"12327","section_id":"6","order":"5","title":"Navigation and Tab Bar Icons","subhead":"","body":"<p>Icons used in the Nav Bar and Tab Bar should have a canvas size of <strong>30 x 30 pt<\/strong>. In fact, most icons except for the App Icon will be around that size.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Icons-ControlCenter.jpg","image_width":"1280","image_height":"856","video":"","bookmark_id":"ios11-icons-navigation-and-tab-bar-icons"},{"id":"12328","section_id":"6","order":"6","title":"App Icon","subhead":"","body":"<p>The App Icon is used for the branding of your app. It&rsquo;s the first thing that users see when they experience it. It appears prominently on the Home screen, the App Store, in Spotlight and Settings.<\/p><p>@1x assets are no longer supported for the iPhone, so you don&rsquo;t need to generate them. App icons have 2 resolutions now: @2x and @3x. There are 3 types: App Icon, Spotlight and Settings. For the iPad, @1x and @2x are used.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Design-AppIconsRes.jpg","image_width":"1240","image_height":"1638","video":"","bookmark_id":"ios11-icons-app-icon"},{"id":"12329","section_id":"6","order":"7","title":"Super-Ellipse","subhead":"","body":"<p>Since iOS 7, the rounded corners have shifted from plain rounded corners to a super-ellipse shape. It is important to keep note that you shouldn&rsquo;t export the icons with the mask, or you&rsquo;ll potentially find black artifacts. Instead, just export square assets to the App Store. In Sketch 47, you can enable <strong>Smooth Corners<\/strong> to create this shape.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Rounded%20Corners.jpg","image_width":"842","image_height":"240","video":"","bookmark_id":"ios11-icons-super-ellipse"},{"id":"12330","section_id":"6","order":"8","title":"Icon Grid","subhead":"","body":"<p>Apple applied a golden ratio on some of their icons. This ensures that the icons are the heroes while keeping good proportions. While this is a good rule to follow, it&rsquo;s not a strict rule. Even Apple omitted it on many of their icons.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Icon%20Grid.jpg","image_width":"840","image_height":"240","video":"","bookmark_id":"ios11-icons-icon-grid"},{"id":"12331","section_id":"6","order":"9","title":"Icon Sets for iOS","subhead":"","body":"<p>Most of us are not icon designers. That&apos;s why it&apos;s best to find vector icon sets that we can customize. These are the ones that I recommend and that I personally use in my projects. With these sets, you will have thousands of icons to choose from.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-icons-icon-sets-for-ios"},{"id":"12332","section_id":"6","order":"10","title":"","subhead":"Pixel Love","body":"<p>This large <a href=\"http:\/\/pixellove.com\/\">set of 5,000 icons<\/a> fits perfectly with the default iOS style. It is currently my favorite to use because of its clean look and elegant proportions.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Icons-PixelLove.jpg","image_width":"1860","image_height":"1302","video":"","bookmark_id":"ios11-icons-pixel-love"},{"id":"12333","section_id":"6","order":"11","title":"","subhead":"Streamline","body":"<p>A slightly more curvy and fun style to the iOS theme. If you seek something a little different, this is it. <a href=\"http:\/\/www.streamlineicons.com\/\">Streamline<\/a> boasts over 5,000 icons.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Icons-StreamLine.jpg","image_width":"1494","image_height":"922","video":"","bookmark_id":"ios11-icons-streamline"},{"id":"12334","section_id":"6","order":"12","title":"","subhead":"Ionicons","body":"<p>A <a href=\"https:\/\/github.com\/andrewsardone\/ionicons-sketch\">free icon set<\/a> with most of the native iOS icons included, along with hundreds of other ones. You can use this as a font.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Icons-Ionicons.jpeg","image_width":"1432","image_height":"880","video":"","bookmark_id":"ios11-icons-ionicons"},{"id":"12335","section_id":"6","order":"13","title":"","subhead":"Font Awesome","body":"<p><a href=\"https:\/\/fortawesome.github.io\/Font-Awesome\/\">2481 icons<\/a> widely used for both Web and mobile. You can also use it as a font.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Icons-FontAwesome.jpeg","image_width":"1928","image_height":"882","video":"","bookmark_id":"ios11-icons-font-awesome"},{"id":"12336","section_id":"6","order":"14","title":"IconFont Sketch Plugin","subhead":"","body":"<p>This <a href=\"https:\/\/github.com\/keremciu\/sketch-iconfont\">plugin<\/a> lets you choose from <strong>thousands<\/strong> of icons from <a href=\"https:\/\/fortawesome.github.io\/Font-Awesome\/\">Font Awesome<\/a>, <a href=\"http:\/\/ionicons.com\">Ionicons<\/a> and <a href=\"https:\/\/www.google.com\/design\/icons\/\">Material icons<\/a>. You can browse, search and insert icons as text and <strong>Convert to outlines<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Sketch-IconFont.jpeg","image_width":"1854","image_height":"1110","video":"","bookmark_id":"ios11-icons-iconfont-sketch-plugin"},{"id":"12337","section_id":"6","order":"15","title":"IconJar Mac App","subhead":"","body":"<p>When you have thousands of icons piled up, it gets hard to find the ones you need. <a href=\"http:\/\/geticonjar.com\">IconJar<\/a> is a great solution.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Icons-Iconjar.jpeg","image_width":"2008","image_height":"1188","video":"","bookmark_id":"ios11-icons-iconjar-mac-app"},{"id":"12338","section_id":"6","order":"16","title":"Using The Icons","subhead":"","body":"<p>Now that you have your favorite icons in Sketch, you&apos;ll want to learn how to customize them to fit your app&apos;s design. In Sketch, it&apos;s a fairly simple process.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/using.mp4","bookmark_id":"ios11-icons-using-the-icons"},{"id":"12339","section_id":"6","order":"17","title":"Manipulating Icons","subhead":"","body":"<p>Sometimes, the icons aren&apos;t quite exactly what you wanted. In those situations, you&apos;ll want to edit the icons layers by using <strong>Union<\/strong>, <strong>Subtract<\/strong>, <strong>Intersect<\/strong> or <strong>Difference<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/edit.mp4","bookmark_id":"ios11-icons-manipulating-icons"},{"id":"12340","section_id":"6","order":"18","title":"Noun Project","subhead":"","body":"<p>The <a href=\"https:\/\/thenounproject.com\/\" title=\"The Noun Project\">Noun Project<\/a> is a Web and Mac app with over a million of icons. All you need to do is type the icon you are searching for, select the format between SVG, PNG or PDF and customize the color. Once you are happy with the result, just drag and drop the icon to your Artboard.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/recxxjzq7ys1wjq\/uiIcons-nounProject%20.mp4?dl=0","bookmark_id":"ios11-icons-noun-project"},{"id":"12341","section_id":"6","order":"19","title":"Fontello","subhead":"","body":"<p><a href=\"http:\/\/fontello.com\/\" title=\"Fontello\">Fontello<\/a> is handy tool, especially when you are working with developers. It&rsquo;s a web app that uses icon fonts which can be edited with CSS. After you have create your icon, make sure to export to SVG. Import the icon and click &#x201C;download web font&#x201D;. You will find your icon in demo.html as well as the CSS files.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/s3u1khm1ik537se\/uiIcons-fontello.mp4?dl=0","bookmark_id":"ios11-icons-fontello"},{"id":"12342","section_id":"6","order":"20","title":"Sketch Icons","subhead":"","body":"<p><a href=\"https:\/\/github.com\/AMoreaux\/Sketch-Icons\">Sketch Icons<\/a> is a neat plugin for Sketch which lets you import a set of icons or a folder, and converts them to a dynamic icon library. The plugin automatically applies a color mask to your icons, which can be customized.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/rhs6pjr8hhmqdam\/uiIcons-sketchIcons.mp4?dl=0","bookmark_id":"ios11-icons-sketch-icons"}]},{"id":"7","chapter_id":"1","order":"7","slug":"ios11-sounds","title":"UI Sounds","caption":"Experience without even seeing the app","body":"<p>Sounds are used minimally in apps, but when they&#39;re played, they can transform a mundane action into a truly rewarding experience. People can recognize your app without even seeing it. When the sound gives the right impression, you win a lot with a small amount of effort.<\/p><p>You&#39;ll learn how to find great sounds and when to use them for a maximum effectiveness.<\/p><blockquote id=\"blockquote\"> <p id=\"p\">I love the expression &quot;humanizing design&quot;. We design things that makes us more human, experiences that makes us feel and use our senses. So far we&#39;ve achieved 3 out of 5 senses: touch, see and hear. The third one is as important as the rest. That&#39;s why we should make use of it as best as we can.<\/p> <\/blockquote>","image":"https:\/\/designcode.io\/cloud\/ios11\/ios11-sounds.jpg","video":"https:\/\/player.vimeo.com\/external\/254038249.hd.mp4?s=d27fadee93d81838ecd7cdcbc028783224216d39&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/ios11-sounds.zip","contents":[{"id":"9839","section_id":"7","order":"1","title":"Where to Use Sounds","subhead":"","body":"<p>Unless you&apos;re making a game, you shouldn&apos;t use sounds everywhere. Not every user has their sound turned on. There are a few key places that you should place your sounds to enhance your app rather than annoy. Most often software UI&apos;s give visual feedback and in many cases this is enough. You have to find the right balance between not having any sound at all to over-saturating your app with sounds.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/uiSounds-whereToUseSounds.jpg","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-sounds-where-to-use-sounds"},{"id":"9840","section_id":"7","order":"2","title":"","subhead":"Notifications","body":"<p>Notifications in iOS come with a default sound. That sound can be customized to fit the branding of your app. Since you&apos;re simply replacing one sound by another, you are absolutely encouraged to do this.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/uiSounds-Notifications.jpg","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-sounds-notifications"},{"id":"9841","section_id":"7","order":"3","title":"","subhead":"Positive Actions","body":"<p>Anything that requires a bit of effort, but that is rewarding or beneficial to the user. Some examples are liking, sharing something or creating a task. A fun animation and whimsical sound should be played for those cases.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/sounds-3.mp4","bookmark_id":"ios11-sounds-positive-actions"},{"id":"9842","section_id":"7","order":"4","title":"","subhead":"Realistic Actions","body":"<p>Use realistic sounds when you need the user to-feel like they are actually using a real version of its digital counterpart. For instance, when you take a photograph on your phone.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/uiSounds-realisticsActions.jpg","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-sounds-realistic-actions"},{"id":"9843","section_id":"7","order":"5","title":"","subhead":"Destructive Actions","body":"<p>In a similar fashion, the destructive actions give confirmation that something was removed. In some circumstances, people take pleasure in deleting things as it makes them feel in control.<\/p><p>Apple famously spent a lot of time creating a paper shredding animation when you delete an item in Passbook. Those were the good old days.<\/p><p>In iOS, as they simplified the styling, the animation remains but it&rsquo;s a lot more subtle. That&rsquo;s in line with their philosophy to give more focus on the content.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/passbook.mp4","bookmark_id":"ios11-sounds-destructive-actions"},{"id":"9844","section_id":"7","order":"6","title":"","subhead":"Pitch For Certain Actions","body":"<p>Certain sounds and tones have a metaphoric familiar meaning once we hear them.<\/p><p>For example, a high pitched sound is mostly associated with opening key actions (receiving text, logging in) whereas a low pitched sound is mostly associated with closing key actions (sending a text). Similarly with a car when being accelerated, it makes a high pitched sound as opposed to a low pitched sound when slowing down.<\/p><p>So using this pitch rule, creates a familiar user experience.<\/p><blockquote><p>The thing is, it&rsquo;s very easy to be different, but very difficult to be better. &#x2013; Jony Ive<\/p><\/blockquote>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-sounds-pitch-for-certain-actions"},{"id":"9845","section_id":"7","order":"7","title":"Where to Find Good Sounds","subhead":"","body":"<p>I wish it was as easy as shooting a photo with your camera, but it isn&rsquo;t. It has to sound right and be crystal clear. This reminds me of the days of Flash where a lot of Web applications used a lot of sounds. We had to find cool techno sounds for the futuristic user interfaces that we were designing. Nowadays, sounds are less futuristic and more modern. They&rsquo;ve become friendly and familiar, which is a great thing because that allows us to reach to a wider audience.<\/p><p>Over the past few years, I&rsquo;ve searched long and hard for good sound collections. I&rsquo;ve come across a few good resources.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-sounds-where-to-find-good-sounds"},{"id":"9846","section_id":"7","order":"8","title":"","subhead":"Facebook SoundKit","body":"<p>An excellent and free <a href=\"http:\/\/facebook.design\/soundkit\">package<\/a> from the designers at Facebook.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Sounds-Facebook.jpg","image_width":"1542","image_height":"990","video":"","bookmark_id":"ios11-sounds-facebook-soundkit"},{"id":"9847","section_id":"7","order":"9","title":"","subhead":"Octave","body":"<p><a href=\"http:\/\/raisedbeaches.com\/octave\/\">Octave<\/a> is a good library of 48 sounds. It&rsquo;s fairly limited, but it&rsquo;ll get you started.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/uiSounds-8ve.jpg","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-sounds-octave"},{"id":"9848","section_id":"7","order":"10","title":"","subhead":"Sonics (Paid)","body":"<p><a href=\"https:\/\/gumroad.com\/l\/sonics\">Sonics<\/a> has a variety of alerts, notifications, chimes, musical tones, and much more. Also, the creator has an interesting <a href=\"https:\/\/www.sonics.io\/blog\/\">blog<\/a> with some tips for recording, mics, and podcasting.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/uiSounds-Sonics.jpg","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-sounds-sonics-paid"},{"id":"9849","section_id":"7","order":"11","title":"","subhead":"RCPTones (Paid)","body":"<p><a href=\"http:\/\/rcptones.com\/dev_tones\">500+ professional UI sounds<\/a> specifically made for app design.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/uiSounds-rcpTones.jpg","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-sounds-rcptones-paid"},{"id":"9850","section_id":"7","order":"12","title":"","subhead":"Appsounds (Paid)","body":"<p><a href=\"https:\/\/appsounds.pro\" title=\"Appsounds\">Appsounds<\/a> affordable great-quality sounds for apps, games and all your digital products. Well divided for easy search and preview of sounds. You can just pick your sound and paste it into your project. <\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/uiSounds-appsounds.jpg","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-sounds-appsounds-paid"},{"id":"9851","section_id":"7","order":"13","title":"","subhead":"Freesound","body":"<p><a href=\"http:\/\/freesound.org\">Freesound<\/a> has an overwhelming number of sounds. It requires a free account and needs quite a bit of searching, but you will be rewarded by little gems that you won&rsquo;t find anywhere else. Don&rsquo;t forget to use the Advanced Search feature with a duration of 0 and 1 second.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/uiSounds-freeSound.jpg","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-sounds-freesound"},{"id":"9852","section_id":"7","order":"14","title":"","subhead":"SoundKIT (Paid)","body":"<p><a href=\"https:\/\/soundkit.io\">SoundKit<\/a> is a UI sound library kit with 300 professional royalty free sound effects, really great to be used in mobile and desktop app design.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/uiSounds-soundkit.jpg","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-sounds-soundkit-paid"}]},{"id":"8","chapter_id":"1","order":"8","slug":"ios11-inspiration","title":"Design Inspiration","caption":"How to keep yourself inspired","body":"<p>Inspiration isn&#39;t something that comes to you. It&#39;s something that you seek constantly. Without inspiration, you&#39;ll never get to start anything, much less finish it.<\/p><p>In this section, I&#39;ll share my tricks for finding design inspirations and how to collect colors, user interfaces and other works that can be used to empower your own ideas.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/ios11-inspiration.jpg","video":"","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/ios11-inspiration.zip","contents":[{"id":"9720","section_id":"8","order":"1","title":"Keep yourself inspired","subhead":"","body":"<p>It&apos;s easy to get inspired, what&apos;s hard is to be inspired all the time. Inspiration comes and goes. You have to actively seek it and make it part of your every day life. From the moment you wake up to the moment you sleep, you have to be absorbed by something. Ideally it&apos;s something crafty that is more or less related to design.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-inspiration-keep-yourself-inspired"},{"id":"9721","section_id":"8","order":"2","title":"Enjoy the craft","subhead":"","body":"<p>In everything you do, there is art behind it. Art is the idea that things are carefully made, imbued with one&apos;s soul and emotions. It is an expression of a person&apos;s inner self. When you connect your craftsmanship to such a deep level, you tend to be driven to obsession.<\/p><p>What&apos;s in your daily life? You read, you walk, you eat, and you observe. In every one of those routines, connect with an art form. Write a book, travel the world, cook a great meal, get into photography. You&apos;ll find that your craftsmanship in one thing can help strengthen another&apos;s.<\/p><blockquote><p>You can&apos;t connect the dots looking forward you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something: your gut, destiny, life, karma, whatever. Because believing that the dots will connect down the road will give you the confidence to follow your heart, even when it leads you off the well worn path. &#x2013; Steve Jobs<\/p><\/blockquote><p>Make a habit of reading great books and articles. My favorite books are the ones that tell great stories about hardship and success. They inspire me to do better.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-Photo2.jpg","image_width":"1200","image_height":"800","video":"","bookmark_id":"ios11-inspiration-enjoy-the-craft"},{"id":"9722","section_id":"8","order":"3","title":"Read books","subhead":"","body":"<p>I rarely read books that show me the latest trends in design. They tend to die off quick. Technology moves way too fast. By the time the book gets published, the technical knowledge becomes semi-obsolete. Traditional medias are more focused on the then rather the now. That&apos;s a great thing, but it&apos;s also why you should focus on harnessing the roots of design. Books are great for that purpose.<\/p><blockquote><p>I guess it&apos;s ironic that this book is about those soon-to-be obsolete techniques that I speak of. <\/p><\/blockquote><p>But I work hard to regularly update the book. Some sections are as fresh as a couple of days. I wanted to cut down the publishing time as much as I could. I also aim to make my work more timeless. A product may tire quickly, but the craftsmanship behind it will last a long time.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-inspiration-read-books"},{"id":"9723","section_id":"8","order":"4","title":"","subhead":"Steve Jobs Biography","body":"<p>Steve Jobs is my biggest inspiration in life. His insane drive and his phenomenal successes are hauntingly beautiful. What inspires me the most is his humanity. I&apos;ve never read about anyone who can feel anger, pain, empathy and excitement to such extremes as he did. His level of obsession on products and his determination to create without compromise is just astounding. Most of us would give up half way. He is the proof that your work isn&apos;t what makes you. It&apos;s values that you hold. Those same values can extend to anything in life and can create magic out of nothing.<\/p><p><a href=\"http:\/\/www.amazon.com\/Becoming-Steve-Jobs-Evolution-Visionary\/dp\/0385347405\">Becoming Steve Jobs<\/a><\/p><p><a href=\"http:\/\/www.amazon.com\/Steve-Jobs-Walter-Isaacson\/dp\/1451648537\/\">Steve Jobs<\/a> by Walter Isaacson<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-SteveJobsBiography.jpg","image_width":"385","image_height":"589","video":"","bookmark_id":"ios11-inspiration-steve-jobs-biography"},{"id":"9724","section_id":"8","order":"5","title":"","subhead":"Jony Ive","body":"<p>Famous for leading the design team at Apple, Jony Ive is a true craftsman. He not only understands aesthetic but is incredibly obsessed with functional design. He&apos;s a designer with deep consideration for engineering. For every single product that he works on, he would experiment on hundreds of models, each with subtle variations.<\/p><p><a href=\"http:\/\/www.amazon.com\/Jony-Ive-Genius-Greatest-Products\/dp\/159184617X\">Jony Ive<\/a>: The Genius Behind Apple&apos;s Greatest Products<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-JonyIve.jpg","image_width":"530","image_height":"795","video":"","bookmark_id":"ios11-inspiration-jony-ive"},{"id":"9725","section_id":"8","order":"6","title":"","subhead":"Dieter Rams","body":"<p><a href=\"http:\/\/www.amazon.com\/Dieter-Rams-Little-Design-Possible\/dp\/0714849189\">Dieter Rams<\/a> is one of most iconic designers in the last century. His work has inspired many of the products at Apple and his <a href=\"https:\/\/www.vitsoe.com\/us\/about\/good-design\">design principles<\/a> has an influence on many great designers today, including Jony Ive.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-DieterRams.jpg","image_width":"563","image_height":"561","video":"","bookmark_id":"ios11-inspiration-dieter-rams"},{"id":"9726","section_id":"8","order":"7","title":"","subhead":"Elon Musk","body":"<p>It&rsquo;s hard to tune in to the news without hearing about the exploits of Elon Musk these days. He&rsquo;s running 2 billion-dollar companies (Tesla and SpaceX) and tries to solve big problems: battery-powered cars, solar energy and space exploration. But that&rsquo;s just on the surface. In his <a href=\"http:\/\/www.amazon.ca\/Elon-Musk-SpaceX-Fantastic-Future\/dp\/0062301233\">book<\/a>, you&rsquo;ll find a man who endured great obstacles, works harder than anyone and self-taught everything he knows.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-ElonMusk.jpg","image_width":"800","image_height":"800","video":"","bookmark_id":"ios11-inspiration-elon-musk"},{"id":"9727","section_id":"8","order":"8","title":"","subhead":"Malcolm Gladwell","body":"<p>I&apos;ve read almost all of his 5 books: The Tipping Point, <a href=\"http:\/\/www.amazon.com\/Outliers-Story-Success-Malcolm-Gladwell\/dp\/0316017930\">Outliers<\/a>, Blink, David and Goliath and What The Dog Saw. What&apos;s addictive about his writing is his ability to tell engaging stories and deeply analyze what made things successful. Understanding success is long term goal and his books are a great starting point.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-MalcolmGladwell.jpg","image_width":"399","image_height":"600","video":"","bookmark_id":"ios11-inspiration-malcolm-gladwell"},{"id":"9728","section_id":"8","order":"9","title":"Articles","subhead":"","body":"<p>On a more technical level and day-to-day basis, I suggest to follow the best articles you can find on Designer News, Medium, Twitter, Dribbble and Sidebar.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-inspiration-articles"},{"id":"9729","section_id":"8","order":"10","title":"Designer News","subhead":"","body":"<p><a href=\"http:\/\/designernews.co\">Designer News<\/a> is great source for high quality design articles. The discussions that you find there are top notch, contributed by successful and new designers alike. It&apos;s insightful to see how other designers think. Good clients: <a href=\"http:\/\/usepanda.com\">Panda<\/a>, <a href=\"http:\/\/thenews.im\">The News<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-DN.jpg","image_width":"1200","image_height":"750","video":"","bookmark_id":"ios11-inspiration-designer-news"},{"id":"9730","section_id":"8","order":"11","title":"Dribbble","subhead":"","body":"<p><a href=\"https:\/\/dribbble.com\/\">Dribbble<\/a> is the best place to find inspirations for visual design. A lot of great designers are posting there regularly. However crude an idea is, if it generates an insane amount of interest from people, then it&apos;s worth exploring deeper. It&apos;s okay to be naive, because that&apos;s how you get inspired and get creative. Good teams to follow: <a href=\"https:\/\/dribbble.com\/Facebook\">Facebook<\/a>, <a href=\"https:\/\/dribbble.com\/google\">Google<\/a>, <a href=\"https:\/\/dribbble.com\/dropbox\">Dropbox<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-Dribbble.jpg","image_width":"826","image_height":"658","video":"","bookmark_id":"ios11-inspiration-dribbble"},{"id":"9731","section_id":"8","order":"12","title":"Twitter","subhead":"","body":"<p>No other platform is more instant than <a href=\"http:\/\/twitter.com\/\">Twitter<\/a>, except perhaps Facebook. But most tech people are on Twitter and that is a great reason to use it. If you fine-tune your Twitter to be a stream of great content posted by your favorite designers, then you don&apos;t need to scout multiple sources for design articles and feedback. Good accounts to follow: <a href=\"https:\/\/twitter.com\/sketchapp\">Sketch<\/a>, <a href=\"https:\/\/twitter.com\/designernewsbot\">Designer News<\/a>, <a href=\"https:\/\/twitter.com\/newsycombinator\">Hacker News<\/a>, <a href=\"https:\/\/twitter.com\/daringfireball\">Daring Fireball<\/a>, <a href=\"https:\/\/twitter.com\/elonmusk\">Elon Musk<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-Twitter.jpg","image_width":"570","image_height":"532","video":"","bookmark_id":"ios11-inspiration-twitter"},{"id":"9732","section_id":"8","order":"13","title":"Medium","subhead":"","body":"<p><a href=\"https:\/\/medium.com\/\">Medium<\/a> is a platform for creative thinkers. You can find quality articles just about everything. It&apos;s good to keep a curious mind about other things than design and Medium will definitely nurture that curiosity. The writing and reading experience is fantastic. It&apos;s like a modern book; a lot of care was poured in to make it feel like a traditional medium but with the convenience of a digital platform. I started a blog on Medium because I was frustrated by how complicated publishing articles was. It was completely disconnected from the end result. With Medium, what you write in front of you is exactly how readers will see it. That removes many barriers.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-Medium.jpg","image_width":"826","image_height":"658","video":"","bookmark_id":"ios11-inspiration-medium"},{"id":"9733","section_id":"8","order":"14","title":"Sidebar","subhead":"","body":"<p>While I was traveling and freelancing, I had very little time to check websites on a daily basis. Freelance takes a lot of your focus. But I checked my Inbox regularly. <a href=\"http:\/\/sidebar.io\/\">Sidebar<\/a> was insanely useful in that respect. In a way, <a href=\"http:\/\/twitter.com\/sachagreif\">Sacha Greif<\/a> started a great trend by picking the best 5 links and sending a newsletter daily.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-Sidebar.jpg","image_width":"800","image_height":"474","video":"","bookmark_id":"ios11-inspiration-sidebar"},{"id":"9734","section_id":"8","order":"15","title":"Collecting Inspiration","subhead":"","body":"<p>You&apos;ve created a great routine for consuming beautiful images and articles and now, you want to get cracking on the execution. Nothing is as efficient as practice. Reading is time that you steal from crafting something. If reading is a way to get inspired, doing the actual work is the true objective. For me, it&apos;s about <strong>10%<\/strong> reading, <strong>30%<\/strong> writing and collecting, and <strong>60%<\/strong> design and code.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-Split.png","image_width":"1012","image_height":"136","video":"","bookmark_id":"ios11-inspiration-collecting-inspiration"},{"id":"9735","section_id":"8","order":"16","title":"Collecting Colors","subhead":"","body":"<p>On <a href=\"https:\/\/dribbble.com\">Dribbble<\/a>, you can browse and save great color schemes. Then, you can browse colors from a design that inspired you.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-Colors.mp4","image_width":"1046","image_height":"760","video":"","bookmark_id":"ios11-inspiration-collecting-colors"},{"id":"9736","section_id":"8","order":"17","title":"Collecting UI Templates","subhead":"","body":"<p>An important part of your design studies is to download other people&apos;s work and analyze the layers. There are a number of resources you can find for Sketch. My favorites are <a href=\"http:\/\/www.sketchappsources.com\/\">Sketch App Sources<\/a>, <a href=\"http:\/\/sketchrepo.com\">Sketch Repo<\/a>, <a href=\"http:\/\/facebook.github.io\/design\/\">Facebook Design<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Inspiration-FacebookDesign.jpg","image_width":"1042","image_height":"720","video":"","bookmark_id":"ios11-inspiration-collecting-ui-templates"}]},{"id":"9","chapter_id":"1","order":"9","slug":"ios11-principles","title":"Design Principles","caption":"Trends fade quickly, strong foundations last forever","body":"<p>What does sleep, attitude and empathy have to do with design? The answer is: everything. We&#39;ll look at the 10 Principles of Good Design, the Rule of Three, the 10,000 hours, and try to make sense of them.<\/p><p>I&#39;ll also share my own personal advice that have taught me greatly during my career as a designer.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/ios11-principles.jpg","video":"","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/ios11-principles.zip","contents":[{"id":"9833","section_id":"9","order":"1","title":"Being Self-taught","subhead":"","body":"<p>I didn&apos;t go to school to learn what I learned. I was <a href=\"http:\/\/designcode.io\/story\">punished<\/a> for that. But in the end, I realized that what matters is the things that I did, the skills that I taught myself, and the person that I found.<\/p><p>You have to learn for the right reasons, with the people you want to learn from. No school or place can ever replace that. My advice for anyone starting in design is to learn the craft from people who are passionate about it, not the people whose agenda is money or fame driven. Find the heroes of your heroes, not the copies of the copies. Be consumed to a point that you&apos;d rather design than eat or sleep, and let that obsession take you where it may.<\/p><p>You don&apos;t always have to be in the front seat, you can just follow someone or something that you truly believe in. But believe in something. Don&apos;t be that person who&apos;s skeptical about everything. The future isn&apos;t for those who live in the past, it&apos;s for those who are hopeful and driven to do better.<\/p><p>Balance your self doubts with extreme confidence, your frustrations by building better products, your problems by solving them. Nothing is created out of nothing. A positive always needs a negative, but the positive, I found, has to be stronger.<\/p><p>It&apos;s okay to be naive. You&apos;re learning. Those who doubt you don&apos;t. It&apos;s better to be small than big, because being small gives you the dream of growing bigger. You&apos;ll fall, hard, and when that happens, never give up. Be relentless, fight the battle that your adversaries don&apos;t believe that is a battle. Vanquish them where they expect less, by the power of your will and your undying love for the things that you do.<\/p><p>Love your work, because you&apos;ll never have to work again. Always find a better way to do things, to perfect and to simplify. There is nothing simple about simplicity. Simplicity, just like perfection is a moving target, you grow with it and it follows you everywhere, taunting you at every corner. It will challenge you and be your best friend, and then leave you when you need it the most. But if you respect simplicity, it will respect you back.<\/p><p>People say the higher you climb, the harder you fall. I say the harder you fall, the higher you climb. Because that was true for me. I would never be where I am if I didn&apos;t fall hard, on my face. When you have nothing to lose, that&apos;s when you can do the most good. You can move mountains, the world will seem small and you will conquer it without ruling it. You will appreciate things as they really are, unmasked from the greed and whatever.<\/p><p>Always put up a fight, for what you believe in. Even if people disagree with you, they&apos;ll respect you for that. Never fear to lose, because if you&apos;ve never lost, then you don&apos;t know what you&apos;re missing.<\/p><p>Always take care of your heart, but follow your mind. Caring is more important than following. Without care, you don&apos;t have the heart to follow anything. Every time you say no to your heart, you lose something and it shrinks by one inch (not literally). Never forget the cost of your choices and remind yourself to go back to where you belong. Be nice to your parents.<\/p><blockquote><p>Your worst enemy is yourself. No one knows you better, and you have to constantly ask yourself &#x201C;is this good enough?&quot;.<\/p><\/blockquote>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-principles-being-self-taught"},{"id":"9834","section_id":"9","order":"2","title":"As Little Design As Possible","subhead":"","body":"<p>Dieter Rams&apos;s <a href=\"https:\/\/www.vitsoe.com\/rw\/about\/good-design\">10 principles of good design<\/a> are timeless. These principles still resonate prominently in the design community, for both hardware and software design. His work is truly iconic. Even after 30 years after they were first conceptualized, they&apos;re still elegant and functional. Less is more.<\/p><p>I suggest paying a visit to this site: <a href=\"http:\/\/startupsthisishowdesignworks.com\/\">Startups, this is how design works<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/Principles-DieterRams.jpg","image_width":"1600","image_height":"1132","video":"","bookmark_id":"ios11-principles-as-little-design-as-possible"},{"id":"9835","section_id":"9","order":"3","title":"The Rule of Three","subhead":"","body":"<p>You&apos;ve probably noticed by now that I used this rule a lot: 3 chapters (when I launched the book), 3 type of downloads, 3 rules, etc. Steve Jobs was famously obsessed about this rule, presenting every product with 3 features at most (e.g., the iPhone). There is apparently a reasoning behind this: the human brain can easily remember 3 things at once. Think of the phone numbers; they&apos;re easy to remember in sequences of threes.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-principles-the-rule-of-three"},{"id":"9836","section_id":"9","order":"4","title":"The 10,000 Hours Rule","subhead":"","body":"<p>I believe in hard work. You always reap what you sow and every hour you spend in a craft is an hour closer to you becoming a master of it. This principle is largely based on Malcolm Gladwell&apos;s <a href=\"http:\/\/www.amazon.com\/Outliers-Story-Success-Malcolm-Gladwell\/dp\/0316017930\">Outliers<\/a> book. The book tells the story of how the greatest hockey players, computer geniuses and musicians all have one thing in common: they&apos;ve spent at least 10,000 hours practicing their craft.<\/p><p>People are born with a certain amount of advantages, the rest is up to their willingness to take things further. If you&apos;re serious about something, then you must not stop. A lot of us have small ideas and think of doing quick bucks with them. That&apos;s the wrong approach. The right approach is to dedicate yourself to a larger purpose and invest your time incrementally. Everything is connected to something larger: design, code, marketing, communication. The sooner you believe that the time you&apos;re spending right now learning adds to your 10,000 hours, the sooner you&apos;ll become a master of your world.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-principles-the-10-000-hours-rule"},{"id":"9837","section_id":"9","order":"5","title":"The Quest for Perfection Never Ends","subhead":"","body":"<p>One of my favorite documentaries is about a man who dedicated his whole life to perfecting sushi, from making the rice to hand picking every piece of ingredient. He even went as far as training new students one year just to make a tamago (Japanese sweet egg). He is well beyond 10,000 hours. In fact, he&apos;s much closer to 50,000. The result of such dedication is out of this world. Considered the best sushi chef in the world, <a href=\"https:\/\/www.magpictures.com\/jirodreamsofsushi\/\">Jiro<\/a> was the first sushi chef to receive 3 Michelin stars. Yet, at 85 years old, he is still relentless at perfecting the art of sushi.<\/p><blockquote><p>Caring is more important than knowing. If you care, you will spend more time learning and executing, and that will yield better results.<\/p><\/blockquote>","image":"https:\/\/designcode.io\/cloud\/ios11\/Principles-Caring.jpg","image_width":"1500","image_height":"884","video":"","bookmark_id":"ios11-principles-the-quest-for-perfection-never-ends"},{"id":"9838","section_id":"9","order":"6","title":"Sleep Is For The Strong","subhead":"","body":"<p>This principle has served me greatly over the past few years. A lot of people think that sleep is for the weak. They&rsquo;d even go as far as depriving themselves from sleep. Nothing could be more dangerous. I&apos;ve found that sleep allows me to keep a balance in life. I always wake up excited about the prospect of working. Without a strong starting point, you&apos;re bound to fall before you even tried. Your focus is lessened and eventually you&apos;re under so much stress that you have to re-energize yourself. You have to patch things up with massage sessions, relaxations and vacations.<\/p><p>Vacations are overrated. Traveling is not vacation -- in fact, it&apos;s more stressful than being comfortable at home and doing nothing. I personally feel happier and more satisfied when I work, even during my travels. You should travel because you want to discover new things, not because you expect to be relaxed.<\/p><p>With good sleep, you can think clearly, eat properly and work without really working.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-principles-sleep-is-for-the-strong"}]},{"id":"10","chapter_id":"1","order":"10","slug":"ios11-launch","title":"Launching Your Product","caption":"Solving problems, launching and iterating","body":"<p>You&#39;ve created work that you&#39;re proud of but you have no idea how to get it out there? Well, there are a few things you need to know when it comes to sharing your work. There are great tools and networks such Product Hunt, Designer News and Twitter that are made to connect with a community that thrives on feedback. But more importantly, being proactive is key.<\/p><p>In this section, I&#39;ll discuss about presentation, seeking feedback and the best ways to reach an audience.<\/p><blockquote id=\"blockquote\"> <p id=\"p\">Things are only scary the first 10 hours. Once you get past that, you start getting obsessed. With obsession, you can learn anything.<\/p> <\/blockquote>","image":"https:\/\/designcode.io\/cloud\/ios11\/ios11-launch.jpg","video":"","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/ios11-launch.zip","contents":[{"id":"9806","section_id":"10","order":"1","title":"Create a Great Product","subhead":"","body":"<p>No one wants to share a bad product. I get a lot of people asking me to promote their product. I would politely ask them if they need feedback. Most of the times, they don&apos;t reply.<\/p><p>If I share your product, I have to believe that you poured your heart and soul into it. If you did, then there wouldn&apos;t be a second thought about sharing it. If you didn&rsquo;t, my help wouldn&apos;t do you any good because the people that I share it to probably won&apos;t like it too. In turn, they&apos;ll start developing a blindness for my recommendations after a few bad shares. It becomes a vicious cycle.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-create-a-great-product"},{"id":"9807","section_id":"10","order":"2","title":"Benefits, Not Features","subhead":"","body":"<p>Your product may be good, but does it add value to people&apos;s lives? Does it make them stronger, faster or smarter? Does it make them laugh, inspired or learn? Think benefits, not features. Did you see how people use your product and did you iterate a thousand times based on tiny feedback?<\/p><blockquote><p>Details matter, it&apos;s worth waiting to get it right. &#x2013; Steve Jobs<\/p><\/blockquote>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-benefits-not-features"},{"id":"9808","section_id":"10","order":"3","title":"Learn the Market and Take Risks","subhead":"","body":"<p>If you&apos;ve created profound value for your customers, they&apos;d be happy to pay for it. The first time I&apos;ve charged for anything was when I was around 8, buying jello candies from the Chinese supermarket and reselling them for a little more to other kids. Back then in Canada, most of my school mates haven&rsquo;t even heard of Asian products.<\/p><p>For this book, I wanted to create the value of learning. I never expected to see people happy to pay for my product, more so than for my free stuff. I received more than 500 pre-orders after two weeks. That&apos;s enough money to get me focused on this book for a few months. It was the only way I could dedicate two months on a project while traveling. I was in the middle of Tokyo without a permanent home and I was going to run out of money, which would have forced me to take freelance jobs. But I was willing to take the risk. Was money the goal? No. I just wanted to be able to do it seriously, for a long time.<\/p><p>If you can&apos;t get paid, then you can&apos;t support your product, and everybody loses. The world is a worse place without valuable products.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-learn-the-market-and-take-risks"},{"id":"9809","section_id":"10","order":"4","title":"Launching Your Product","subhead":"","body":"<p>A successful product strikes a perfect balance between great content and great distribution. One doesn&rsquo;t go without the other. A great looking product without a channel of distribution will be buried. In contrast, a bad product with good distribution will not stick. People won&rsquo;t share. <\/p><p>When I wrote this book, I didn&rsquo;t think about the hundreds of iOS books out there. I just thought that none of them was written by a designer. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-launching-your-product"},{"id":"9810","section_id":"10","order":"5","title":"Demo Your Product","subhead":"","body":"<p>Landing pages should always come with a video or a sample of the content. Don&rsquo;t show unrelated stock photos, as beautiful as they may be. A photo of a workspace means nothing if they&rsquo;re from stocks. However, if you took it and if it flows with your story, then it brings a sense of modesty. I like to think that an average real photo is better than a perfect looking stock photo. If your audience finds the exact same photo on another site, they may not hold your work in high regards.<\/p><p>Photography is skill that complements design well. With an iPhone and good lighting, you can take good shots of your product and edit the screen in Sketch or Photoshop. During my 2-year travels, I took thousands of photographs, edited a select few in Lightroom and used them for the book. All of the cover images you find here have been custom made.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-demo-your-product"},{"id":"9811","section_id":"10","order":"6","title":"Write Plain English","subhead":"","body":"<p>I&rsquo;m terrible at English. It&rsquo;s my second language after French. But I&rsquo;m not as terrible at communicating what I think. People don&rsquo;t expect great writers, they expect simple explanations. In fact, sometimes it&rsquo;s best to just keep your English as plain as possible. Keep it short. Get to the point. Like this, anyone can understand. It doesn&rsquo;t take a person who aces their English classes to write plain English. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-write-plain-english"},{"id":"9812","section_id":"10","order":"7","title":"Knowing Little Shouldn&rsquo;t Stop You","subhead":"","body":"<p>I wrote a book about making apps, yet when I started writing, I only had 3 months of experience. One would think that you need to be extremely fluent at something before writing about it. Wrong. Being a beginner gives you a fresh perspective on a subject. The motivation you gain creates a fantastic opportunity to set yourself apart. I&rsquo;m not saying that people with experience can&rsquo;t teach well, just differently. They have to be able to reset their brain and be a beginner again. Many people fail at that.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-knowing-little-shouldn-t-stop-you"},{"id":"9813","section_id":"10","order":"8","title":"Stop Relying on Professionals","subhead":"","body":"<p>You&rsquo;re one person, not a startup with 2M in the bank. So do as much as you can by yourself. Fill the gap. The process of doing it yourself is incredibly motivating, pushing you to keep that crucial momentum going. When you rely on others, you&rsquo;re at the mercy of their schedule. You search, negotiate and wait. A decent video that you did in a weekend is much better than a 30K pro video that you waited 3 months to get. Invest in the tools instead. A professional camera costs around 5K, that&rsquo;s 6 cameras that you can afford. Or shoot with your iPhone and get your friends to help.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-stop-relying-on-professionals"},{"id":"9814","section_id":"10","order":"9","title":"The Brand Bank","subhead":"","body":"<p>As Steve Jobs once put it, you have a <a href=\"http:\/\/www.cultofmac.com\/159305\/insanely-simple-the-obsession-that-drives-apples-success-exclusive-book-excerpt\/\">brand bank<\/a>; when you do something good, it adds up. When you fail, you gain debts and people stop trusting you. Starting an entirely new project is a chance to start clean. Don&rsquo;t just do one major launch and never listen to feedback. Always iterate. Think of each iteration as adding $100 and responding to feedback as adding $10 to your Brand bank. Whenever you ignore an email, or a user has an issue that you can&rsquo;t solve, withdraw $100. Remember, it&rsquo;s easier to destroy than to build. People listen to negatives more than they do for positives. One bad critic can destroy your reputation if handled without tact.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-the-brand-bank"},{"id":"9815","section_id":"10","order":"10","title":"Give Discounts","subhead":"","body":"<p>People love discounts. It&rsquo;s a great way to promote and create buzz around your product. Give targeted discounts (20% or more) to specific communities like Product Hunt and Dribbble at launch.<\/p><p>Talking about money is a fragile thing. You don&rsquo;t want to end up sounding like a marketeer that tries too hard. But if your product is high quality, then it may actually help your reputation.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-give-discounts"},{"id":"9816","section_id":"10","order":"11","title":"The Feedback Cycle","subhead":"","body":"<p>Okay, you&apos;ve created a valuable product that you&rsquo;ve spent countless hours on it. You can feel the obsession, like magma running through your veins. People need to give you a chance to grow. I am one of them. You can ping me on <a href=\"https:\/\/twitter.com\/mengto\">Twitter<\/a> and I&apos;d be happy to help. There is also a thriving community on Product Hunt and Designer News that would love to help. But of course you need a couple of tips.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-the-feedback-cycle"},{"id":"9817","section_id":"10","order":"12","title":"","subhead":"Seek Criticism","body":"<p>You have to be willing to accept criticism. Actually, you have to seek criticism. A lot of people are too shy or too focused on their work to give feedback unless you actively seek it. Just the fact that you seek it proves that you&apos;re there to improve your product. It&apos;s a seal of quality in the eyes of your customers.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-seek-criticism"},{"id":"9818","section_id":"10","order":"13","title":"","subhead":"Make Friends","body":"<p>Remember that you&apos;re competing against giants in the industry. They have tens of thousands of followers. So you have to get creative. Get a few friends who are willing to help you test during the beta stage. Don&rsquo;t launch until you converted them into believers. Plan a clear strategy on who to contact, where to post and what to say the minute you release. With that initial push, if your product is truly good, it&apos;ll grow by itself. Hard work always pays off. Especially long term.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-make-friends"},{"id":"9819","section_id":"10","order":"14","title":"","subhead":"Be Consistently Good","body":"<p>The best products are the ones that come back on top every time there is something new: Stripe, Square, Apple, etc. Don&apos;t aim to be an overnight success. The hardest part of building a product is not before launch, but after. Keep iterating based on feedback, improve your product and release updates in big chunks, adding tremendous value each time.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-be-consistently-good"},{"id":"9820","section_id":"10","order":"15","title":"","subhead":"Tell Your Story","body":"<p>Today, technology is being enjoyed by a growing audience from all walks of life. It is being humanized. People enjoy good stories. So tell your story about your humble beginnings, what your process looks like, how you&apos;re David versus Goliath. Recount the obstacles you&rsquo;ve faced and the lessons you&rsquo;ve learned. You are unique because of them. Make your story informative and relatable. Be genuine in your weaknesses.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-tell-your-story"},{"id":"9821","section_id":"10","order":"16","title":"","subhead":"Never Take Anything For Granted","body":"<p>People get lazy. They develop a blindness for certain things. They get many followers and likes, and they start to become complacent. That&rsquo;s a mistake, because you loose your <a href=\"https:\/\/www.ted.com\/talks\/tony_fadell_the_first_secret_of_design_is_noticing?language=en\">beginner&rsquo;s mind<\/a>. With this attitude, you&rsquo;ll skip the important things that made you successful in the first place: get excited for feedback, reply to every customer, notice the smallest details, and most importantly, give back what you gain. You have to feel connected to the people you&rsquo;re designing for. Understand their lives and make them feel important.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-never-take-anything-for-granted"},{"id":"9822","section_id":"10","order":"17","title":"","subhead":"Be Self-critical","body":"<p>Your worst enemy is yourself. No one knows you better, and you have to constantly ask yourself &#x201C;is this good enough?&#x201D;. It&rsquo;s easy to criticize other people&rsquo;s work, but it&rsquo;s hard to criticize your own work and come up with better solutions. If you are the most critical person you know, then fulfilling your objectives will most definitely delight everyone else.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-be-self-critical"},{"id":"9823","section_id":"10","order":"18","title":"","subhead":"Don&apos;t Rush","body":"<p>Speed only matters when the work done is well-done. The ultimate goal is to do great work. You have no right to brag if your work is as generic as the ones you criticize. Good design takes time. Have the humility to admit when your product isn&rsquo;t good enough.<\/p><blockquote><p>People will tell you that what you want is hard and impossible. That you just can&apos;t. That&apos;s when you must do it.<\/p><\/blockquote>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-don-apos-t-rush"},{"id":"9824","section_id":"10","order":"19","title":"Where To Post","subhead":"","body":"<p>There are a number of places where you can tell people about your product. Understand the community and you will thrive. <strong>Note<\/strong>: for some of these platforms, you will need an invitation to post. You can find me under the username <strong>@MengTo<\/strong> and I may be able to guide you or even offer you one.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-where-to-post"},{"id":"9825","section_id":"10","order":"20","title":"","subhead":"Product Hunt","body":"<p>If you have a great product to launch, small or big, you should post it to <a href=\"https:\/\/www.producthunt.com\">Product Hunt<\/a>. It has a very friendly and positive community that is solely dedicated to finding exceptional new products. Just as with other communities, start by contributing, upvoting and commenting, then when the time comes, you&rsquo;ll have a good enough network to help back on your own product.<\/p>","image":"https:\/\/designcode.io\/cloud\/ios11\/thumbnail.png","image_width":"800","image_height":"600","video":"","bookmark_id":"ios11-launch-product-hunt"},{"id":"9826","section_id":"10","order":"21","title":"","subhead":"Facebook Group","body":"<p>There has been an emergence of product-focused Facebook groups over the last couple of years. Find a good group to join, then post your resources there. Good groups are: <a href=\"https:\/\/www.facebook.com\/groups\/sketchformac\/\">Sketch<\/a>, <a href=\"https:\/\/www.facebook.com\/groups\/framerjs\/\">Framer<\/a>, <a href=\"https:\/\/www.facebook.com\/groups\/designcode\/\">Design+Code<\/a>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-facebook-group"},{"id":"9827","section_id":"10","order":"22","title":"","subhead":"Designer News","body":"<p>You can submit articles and products on <a href=\"https:\/\/www.designernews.co\">Designer News<\/a>, or even start discussions. The community is definitely a little more critical, but I believe that&rsquo;s a great thing. There&rsquo;s a good concentration of experienced designers there.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-designer-news"},{"id":"9828","section_id":"10","order":"23","title":"","subhead":"Dribbble","body":"<p>If you&apos;re aspiring to be a world class visual designer, then <a href=\"http:\/\/dribbble.com\/\">Dribbble<\/a> is definitely for you. Just make sure you have a solid portfolio site. Then, pick 3 of your best works and present them to receive an invitation. Ask designers to give you critics and don&rsquo;t give up until you get invited. A word of advice: receiving an invitation too early is the best way to misuse Dribbble. A design that&rsquo;s unexceptional will only go unnoticed, giving you the impression that there&rsquo;s something wrong with the site. <strong>Your first shot is the most important one<\/strong>, so give only your very best.<\/p><p><a href=\"https:\/\/dribbble.com\/shots\/2330956-New-Portfolio\">New Portfolio<\/a> by Julien Renvoye<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/ios11\/Promoting-Portfolio.mp4","bookmark_id":"ios11-launch-dribbble"},{"id":"9829","section_id":"10","order":"24","title":"","subhead":"Medium","body":"<p>Use <a href=\"http:\/\/medium.com\/\">Medium<\/a> when you have no time to spend designing your own blog. As you write, your draft looks exactly like the final product. You can drag and drop images effortlessly. Follow Publications that represent your writing and ask for permission to post in them. That will give you a good initial boost. Good examples are <a href=\"https:\/\/medium.com\/sketch-app\">Sketch<\/a>, <a href=\"https:\/\/medium.com\/design-ux\">Design-UX<\/a>, <a href=\"https:\/\/medium.com\/swlh\">SWLH<\/a>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-medium"},{"id":"9830","section_id":"10","order":"25","title":"","subhead":"Twitter","body":"<p>I treat <a href=\"https:\/\/twitter.com\">Twitter<\/a> pretty much like a tool and I obsess over everything that I share. I try to simplify the sentences that I type, which in turn is a good exercise in design. Write about your discoveries, experiments and inspirations. As a maker, your success on Twitter usually starts with your essays, designs or products, so make sure to connect with mavens who might enjoy your work.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-twitter"},{"id":"9831","section_id":"10","order":"26","title":"Design a Newsletter","subhead":"","body":"<p>After the initial launch, make sure to keep people in the loop about new updates via Email. It&rsquo;s crucial to keep the email content relevant or it&rsquo;ll be flagged as a spam. Include a link to unsubscribe. Additionally, let people subscribe easily on your product site.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-design-a-newsletter"},{"id":"9832","section_id":"10","order":"27","title":"Build Followers","subhead":"","body":"<p>Some people prefer Email, others prefer Twitter \/ Medium \/ Dribbble. I say do both. They serve different purposes. On Twitter, it&rsquo;s about conversations and direct sharing, allowing you to receive feedback very quickly. You can share many posts on Twitter in a day. Via Email, it&rsquo;s once weekly.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"ios11-launch-build-followers"}]}]},{"id":"2","title":"Learn Sketch 4","sections":[{"id":"64","chapter_id":"2","order":"1","slug":"sketch-learn","title":"Learn Sketch","caption":"Introduction to Sketch Basic Tools","body":"<p><a href=\"http:\/\/www.sketchapp.com\">Sketch<\/a> is a design tool entirely vector-based and focused on user interface design. It\u2019s easy to pick up and costs a fraction of the price of Photoshop. Because of its simplicity, anyone with little to no training can learn Sketch. On top of that, it\u2019s perfect for today\u2019s need for designing for multiple devices. <\/p><p>When I first started using Sketch 5 years ago, it felt like a glimpse to the future. I immediately made the <a href=\"http:\/\/blog.mengto.com\/sketch-vs-photoshop\/\">switch<\/a>. But for many, it was an uphill battle. Vector-based design tools was unpopular back then. Very few believed in a striped-down, UI-focused design tool. Photoshop had everything they could dream of. They didn\u2019t see an age of Super Retina screens coming. They believed that prototyping was only meant for coders. They thought that 3D was merely for adding bevels to their design. Little did they know that Sketch would soundly dethrone Photoshop 5 years later.<\/p><p>Sketch has completely changed my workflow. As a design application that I spend 8 hours a day on, there is no other tool that has influenced my work as much. Its growth is out of this world; new resources and plugins are coming out almost on a daily basis.<\/p><p>We\u2019ve come a long way since. Artboards, Symbols and Libraries have become common in this space. Designers now collaborate more than ever, thanks to Sketch-first plugins like <a href=\"https:\/\/www.goabstract.com\">Abstract<\/a>, <a href=\"https:\/\/www.invisionapp.com\/craft\">Craft<\/a>, <a href=\"https:\/\/www.flinto.com\">Flinto<\/a>, <a href=\"http:\/\/principleformac.com\">Principle<\/a> and <a href=\"https:\/\/framer.com\">Framer<\/a>. <a href=\"https:\/\/developer.apple.com\/design\/resources\/\">Apple<\/a> and <a href=\"http:\/\/facebook.design\">Facebook<\/a> often releases their UI Kits Sketch-first.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-learn.jpg","video":"https:\/\/player.vimeo.com\/external\/246865925.hd.mp4?s=7ec700b90801af4eefdac42f8cd9e53637675e78&profile_id=175","subtitles":"https:\/\/designcode.io\/cloud\/sketch4\/2.1.LearnSketch.vtt","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-learn.zip","contents":[{"id":"11860","section_id":"64","order":"1","title":"Introduction to Sketch","subhead":"","body":"<p>Sketch is the ultimate tool for iOS, Android and Web design. It barely weights <strong>45MB<\/strong> in disk space, compared to Photoshop&apos;s <strong>2.17GB<\/strong>. As soon as you open it, you are greeted with an infinite canvas. Just like native Mac apps, you have a familiar user interface with a Toolbar, Navigator and Inspector. As a result, new users will find Sketch far more approachable because it doesn&rsquo;t get in the way of producing simple designs.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-Introduction.jpg","image_width":"1600","image_height":"992","video":"","bookmark_id":"sketch-learn-introduction-to-sketch"},{"id":"11861","section_id":"64","order":"2","title":"","subhead":"Customizing Your Toolbar","body":"<p>Consistent with the MacOS&apos;s design language, the Toolbar is customizable when you right-click on it. You can set all your favorite tools by dragging in the ones that you want. Since I&rsquo;m a big proponent of <a href=\"https:\/\/designcode.io\/sketch-keyboard\">Keyboard Shortcuts<\/a>, I suggest keeping the ones that are hard to remember, yet frequently used. Some of them only activate when it&rsquo;s possible to use them, so having them in the Toolbar is helpful. Some of my favorites tools are: <strong>Symbols<\/strong>, <strong>Scissors<\/strong>, <strong>Outlines<\/strong>, <strong>Round to Pixel<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-Toolbar.jpg","image_width":"1600","image_height":"632","video":"","bookmark_id":"sketch-learn-customizing-your-toolbar"},{"id":"11862","section_id":"64","order":"3","title":"Artboards","subhead":"","body":"<p><strong>Artboards<\/strong> are the Screens of your app. Each Artboard represents a screen or an interaction within a screen. Having an efficient workflow is crucial to a modern designer. We can no longer afford to spend all our time on visual design, because prototyping, delivering assets and coding can truly make our designs come alive instead of being stuck in a vacuum, at the mercy of others. <\/p><p>Before, designers used to save a file for each screen that they designed, resulting in dozens of files to manage. Now, thanks to Artboards, you can have your entire app, with dozens of screens, exist inside a single Sketch file.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-Artboards.jpg","image_width":"1600","image_height":"984","video":"","bookmark_id":"sketch-learn-artboards"},{"id":"11863","section_id":"64","order":"4","title":"","subhead":"Create an Artboard","body":"<p>It&rsquo;s easy to Create an Artboard, just press <strong>A<\/strong>. Then, on the top right, you can select from a large list of screens, for iOS, Android, Web and Print Additionally, and even you can customize one. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-Artboard-Preset.jpg","image_width":"642","image_height":"374","video":"","bookmark_id":"sketch-learn-create-an-artboard"},{"id":"11864","section_id":"64","order":"5","title":"","subhead":"Using Artboards","body":"<p>With Artboards, you no longer have to hide interactions, dialogs and states, since you can just put all your screens next to each other. Instead, it is recommended to show all your layers so that you can easily preview everything on your iPhone. You can easily rearrange, duplicate (<strong>&#x2318; D<\/strong>) or export them. I recommend the <strong>Artboard Manager<\/strong> plugin to keep Artboards organized.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-ArtboardManager.mp4","bookmark_id":"sketch-learn-using-artboards"},{"id":"11865","section_id":"64","order":"6","title":"","subhead":"Artboard Background","body":"<p>To select the Artboard, you must select the title above it. Your Artboard should have a background color, otherwise the resulting screen will show a transparent background instead of what seems to be white.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-learn-artboard-background"},{"id":"11866","section_id":"64","order":"7","title":"","subhead":"Artboard within Artboard","body":"<p>When you work with dozens of screens, you can have a great overview of the whole experience by creating an Artboard covering all your Artboards. Like this, you can export an image of the entire flow.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-learn-artboard-within-artboard"},{"id":"11867","section_id":"64","order":"8","title":"Pages","subhead":"","body":"<p>Each <strong>Page<\/strong> represents a platform or a completely different resolution. For most projects, you&rsquo;ll have twenty something Artboards for a platform like iOS. Then, you&rsquo;d create another Page for Android, Web, Apple Watch, tvOS, and son on. That way, you can have an entire project within a single Sketch file, saving you a ton of time switching between screens and platforms.<\/p><p>You can open the Pages by clicking on the arrow next to the page name. Also, you can quickly switch between pages by using the dropdown. The keyboard shortcut is <strong>Fn &#x2191; and &#x2193;<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Pages.jpeg","image_width":"2100","image_height":"1302","video":"","bookmark_id":"sketch-learn-pages"},{"id":"11868","section_id":"64","order":"9","title":"UI Templates","subhead":"","body":"<p>Sketch comes preloaded with a number of user interface templates for iOS, Material Design and Responsive Web. To access them, you simply have to go <strong>File<\/strong>, <strong>New From Template<\/strong>. The iOS and Material Design templates are particularly comprehensive. They&rsquo;ll be a great starting point for any designer, beginners and experts alike. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-Templates.jpg","image_width":"1600","image_height":"782","video":"","bookmark_id":"sketch-learn-ui-templates"},{"id":"11869","section_id":"64","order":"10","title":"","subhead":"iOS UI Kit","body":"<p>For the iOS UI Kit, it already comes preloaded as a <a href=\"https:\/\/www.sketchapp.com\/docs\/libraries\/\">Library<\/a>. It has a number of important elements such as status bar, navigation bar and tab bar to get your started. Start using them by going to <strong>Symbols<\/strong>, <strong>iOS UI Design<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-iOS-UIKit.jpg","image_width":"1436","image_height":"1018","video":"","bookmark_id":"sketch-learn-ios-ui-kit"},{"id":"11870","section_id":"64","order":"11","title":"","subhead":"Material Design UI Kit","body":"<p>If you&rsquo;re designing for Android, you&rsquo;ll love the Material Design UI Kit. It has all the elements you need to follow Google&rsquo;s own design <a href=\"https:\/\/material.io\/guidelines\/\">guidelines<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-MaterialDesign.jpg","image_width":"1280","image_height":"1494","video":"","bookmark_id":"sketch-learn-material-design-ui-kit"},{"id":"11871","section_id":"64","order":"12","title":"","subhead":"More Templates","body":"<p>You can also download your own templates from the Web, such as the <a href=\"https:\/\/iosdesignkit.io\/ios-11-gui\/\">iOS 11 GUI<\/a> or the <a href=\"http:\/\/facebook.design\/toolsandresources\">Facebook Resources<\/a>. To save them to the list of Templates, Open the file, then go to <strong>File<\/strong>, <strong>Save as Template&#x2026;<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-learn-more-templates"},{"id":"11872","section_id":"64","order":"13","title":"Designing at 1x","subhead":"","body":"<p>For iOS, I recommend <a href=\"https:\/\/medium.com\/sketch-app-sources\/designing-at-1x-33240842180c#.rikv01993\">designing at 1x<\/a> with the iPhone 8 (<strong>375 x 667 pt<\/strong>), since that is currently by far the most popular resolution. Also, custom Artboards can be created by clicking the <strong>&#xA0;+<\/strong> button. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-CustomArtboard.mp4","bookmark_id":"sketch-learn-designing-at-1x"},{"id":"11873","section_id":"64","order":"14","title":"","subhead":"Designing for Screens","body":"<p>In Sketch, you work with pixels. Since we&rsquo;re designing at 1x, your pixel units will be equivalent to points. So, <strong>1 px = 1 pt<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-learn-designing-for-screens"},{"id":"11874","section_id":"64","order":"15","title":"Alignment, Distances and Guides","subhead":"","body":"<p>There are many tools in Sketch that will help you design with incredible precision. You can never have too much precision. Designers would have a hard time working without rulers and grids, because they&rsquo;re essential to keeping the composition organized and clean. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Alignment.jpeg","image_width":"890","image_height":"630","video":"","bookmark_id":"sketch-learn-alignment-distances-and-guides"},{"id":"11875","section_id":"64","order":"16","title":"","subhead":"Smart Guides","body":"<p>Smart Guides are intrinsic to the experience of using Sketch. In fact, it&rsquo;s an essential feature in most apps where drawing is involved. As soon as you start dragging in a layer, red lines will appear to indicate if it&apos;s well-aligned or centered properly. Unique to Sketch, you&rsquo;ll see Smart Guides appearing even before you start drawing, enabling incredible precision.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-Insert.mp4","bookmark_id":"sketch-learn-smart-guides"},{"id":"11876","section_id":"64","order":"17","title":"","subhead":"Distances","body":"<p>Holding the <strong>Alt<\/strong> key will show the distances between the selected layer against other ones in the same Group or Artboard. It also measures the distances to the Artboard itself. It&rsquo;s important to mouse over different elements to see the distances.<\/p><p><strong>Tip<\/strong>: Distances can work against Rulers as well.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-DistancesRuler.mp4","bookmark_id":"sketch-learn-distances"},{"id":"11877","section_id":"64","order":"18","title":"","subhead":"Rulers","body":"<p>Rulers can be enabled by pressing <strong>Ctrl R<\/strong>. They&rsquo;re good for setting persistent guides that can be snapped or measured against your layers. To create a guide, simply click within the Ruler regions. <strong>Hold Shift<\/strong> to jump by 10 px. <\/p><p>In the Editor, You can even get the distances between a layer and a Ruler guide by holding the <strong>Alt<\/strong> key and hovering the guide.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-Rulers.mp4","bookmark_id":"sketch-learn-rulers"},{"id":"11878","section_id":"64","order":"19","title":"","subhead":"Align and Distribute Objects","body":"<p>As you create new shapes, you can instantly align them horizontally or vertically within the Artboard. When two layers are selected, they can also align with each other. <strong>Distribute Objects<\/strong> allows you to normalize the distances between multiple layers.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-AlignObjects.mp4.mp4","bookmark_id":"sketch-learn-align-and-distribute-objects"},{"id":"11879","section_id":"64","order":"20","title":"Layout Settings","subhead":"","body":"<p>If you open Layout Settings, you&rsquo;ll find a way to set up your own Layout Grid system, such as the famous <a href=\"http:\/\/960.gs\">960grid<\/a>. With this, setting up 2, 3 or 4 columns proportionally is as easy as snapping the layers to the grids. Layout Grids are particularly useful for bigger screens that occupy multiple columns and call for clean divisions. Examples are Web, iPad and tvOS interfaces.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-LayoutSettings.jpeg","image_width":"2876","image_height":"1630","video":"","bookmark_id":"sketch-learn-layout-settings"},{"id":"11880","section_id":"64","order":"21","title":"","subhead":"Grids","body":"<p>Enable Grids (<strong>Ctrl G<\/strong>) to divide your canvas perfectly. For instance, Material Design encourages a 8 dp grid system in order for shapes, text and baselines to fall perfectly into those lines. This promotes better spacing and cleanly divided layouts. For iOS, the guidelines are not as strict. Mostly, you are encouraged to have a minimum padding and margin of 8 pt.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Material-Design%202.jpeg","image_width":"2876","image_height":"1420","video":"","bookmark_id":"sketch-learn-grids"},{"id":"11881","section_id":"64","order":"22","title":"","subhead":"Pixels Grid","body":"<p>Use <strong>Show Pixels<\/strong> (<strong>Ctrl P<\/strong>) to make sure that your design is pixel perfect. Pixels will only be visible at more than 100% zoom if enabled. If you zoom at 1000% or more, you can see the Pixels Grid automatically.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-BezierCurve%202.jpeg","image_width":"1022","image_height":"830","video":"","bookmark_id":"sketch-learn-pixels-grid"},{"id":"11882","section_id":"64","order":"23","title":"","subhead":"Scale Tool","body":"<p>One of my favorite tools in Sketch is the Scale tool (<strong>Cmd K<\/strong>). Note that this isn&rsquo;t the same as resizing, since it actually scales every property: Size, Radius, Border, Shadow and Inner Shadow. For instance, a 1 px border scaled at 200% will be 2 px. By only resizing, it&rsquo;ll remain 1 px. This will be indispensable for converting <strong>@1x<\/strong> UI Kits to <strong>@2x<\/strong> or <strong>@3x<\/strong>, as it even works with Artboards.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-ScaleTool.mp4.mp4","bookmark_id":"sketch-learn-scale-tool"},{"id":"11883","section_id":"64","order":"24","title":"Working With Text","subhead":"","body":"<p>If you&apos;re new to typography, I suggest heading to the <a href=\"https:\/\/designcode.io\/ios11-typography\">Typography<\/a> section and start downloading a few modern fonts. The good ones that comes with MacOS or free on <a href=\"http:\/\/google.com\/fonts\">Google Fonts<\/a> are: <a href=\"https:\/\/developer.apple.com\/fonts\/\">San Francisco<\/a>, <strong>Avenir Next<\/strong>, <strong>Open Sans<\/strong> and <strong>Roboto<\/strong>. If you have a subscription to <a href=\"https:\/\/typekit.com\/\">Typekit<\/a>, download <strong>Museo<\/strong> and <strong>Proxima Nova<\/strong>.<\/p><p>To create a new text layer, press <strong>T<\/strong>. In the inspector, you can choose the font and edit the styles. What&rsquo;s more, you can use Text Styles to re-use the same style across multiple text layers. It works similarly to CSS, which allows you to have a global style for h1, h2, h3 and so on.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-WorkingWithText.mp4.mp4","bookmark_id":"sketch-learn-working-with-text"},{"id":"11884","section_id":"64","order":"25","title":"Preferences","subhead":"","body":"<p>You may want to customize some preferences. Here are the key options that will likely affect your workflow later on.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-learn-preferences"},{"id":"11885","section_id":"64","order":"26","title":"","subhead":"Auto-Save","body":"<p>I highly recommend Auto-Save. It will automatically save all your changes as you design, preventing you from losing precious work in case of crashes, power outage or accidental quitting. Please note that Auto-Save may be dangerous if fonts are missing or team mates open your files and make changes to them. That may lead to unintended modifications. Also, be wary of the <a href=\"https:\/\/medium.com\/@thomasdegry\/how-sketch-took-over-200gb-of-our-macbooks-cb7dd10c8163\">disk space cost<\/a>, especially if you happen to work with large bitmaps.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-AutoSave.jpg","image_width":"1410","image_height":"1008","video":"","bookmark_id":"sketch-learn-auto-save"},{"id":"11886","section_id":"64","order":"27","title":"","subhead":"Reverting To Old Versions","body":"<p>With Auto-Save enabled, Sketch will create a version history of your documents. In case mistakes happen (and they will happen), you can revert back to an older version of your Sketch file. Note that you can disable this feature by unchecking it.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Revert.mp4","bookmark_id":"sketch-learn-reverting-to-old-versions"},{"id":"11887","section_id":"64","order":"28","title":"","subhead":"Pixel Fitting","body":"<p>As a result of working with vectors, new shapes may not always land on the pixel grid as you create them, making them not as sharp as they should be (to enable Show Pixels, press <strong>Ctrl + P<\/strong>). As you align or resize, this option will make sure that your pixels stay sharp.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-PixelFitting.mp4","bookmark_id":"sketch-learn-pixel-fitting"},{"id":"11888","section_id":"64","order":"29","title":"Colors","subhead":"","body":"<p>A lot of people struggle with colors, that&rsquo;s why I think it&rsquo;s important to have a solid starting palette. Sketch&rsquo;s Color tool lets you store colors globally or for a specific document. Use the Eyedropper tool to pick any color inside or outside of Sketch. With this technique, you can quickly start your own palette. Good starting palettes are: <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UserExperience\/Conceptual\/MobileHIG\/ColorImagesText.html\">iOS<\/a>, <a href=\"https:\/\/www.materialpalette.com\">Material Design<\/a> and <a href=\"https:\/\/flatuicolors.com\">Flat UI<\/a>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-learn-colors"},{"id":"11889","section_id":"64","order":"30","title":"","subhead":"Color Picker","body":"<p>Colors are easy to work with in Sketch. As explained in the <a href=\"http:\/\/designcode.io\/colors\">Colors<\/a> section, you can switch from <strong>RGB<\/strong> to <strong>HSB<\/strong>, a more intuitive way to manipulate colors. Like this, you are in control of how much Hue, Saturation and Brightness you need.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-HSBA.mp4","bookmark_id":"sketch-learn-color-picker"},{"id":"11890","section_id":"64","order":"31","title":"","subhead":"Quick Eyedropper","body":"<p>The <strong>Eyedropper<\/strong> tool (shortcut: <strong>Ctrl + C<\/strong>) allows you to quickly pick colors within the document, or even outside the bounds of the application. The magnifying glass will increase the precision.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-EyeDropper.mp4","bookmark_id":"sketch-learn-quick-eyedropper"},{"id":"11891","section_id":"64","order":"32","title":"","subhead":"Frequently Used Colors","body":"<p>Sketch will automatically detect the colors used inside your document. To access it, click on the color itself. Colors will be ordered by how many times they were used.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-FrequentColors.mp4","bookmark_id":"sketch-learn-frequently-used-colors"},{"id":"11892","section_id":"64","order":"33","title":"","subhead":"Color Palettes","body":"<p><strong>Global Colors<\/strong> are shared across all your Sketch documents. On the other hand, <strong>Document Colors<\/strong> are document-specific. There&rsquo;s a <a href=\"https:\/\/github.com\/andrewfiorillo\/sketch-palettes\" title=\"Sketch Palettes\">good plugin<\/a> for saving your own palettes, or download from other designers. I made one using iOS, Material Design and FlatUI. You can download it <a href=\"http:\/\/cl.ly\/2k1g3h1w1c1y\">here<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-ColorPalettes.jpeg","image_width":"1610","image_height":"1125","video":"","bookmark_id":"sketch-learn-color-palettes"},{"id":"11893","section_id":"64","order":"34","title":"Gradients","subhead":"","body":"<p>In the same window as the Color Picker, you can switch to the <strong>Gradients<\/strong> Tab. In iOS, gradients are often used for app icons, backgrounds and buttons (combined with blur and vibrancy) to add a sense of depth. On the Mac, they&rsquo;re even more <a href=\"http:\/\/www.sketchappsources.com\/free-source\/1387-yosemite-icons-pack-sketch-freebie-resource.html\">prevalent<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-Gradients-Examples.jpg","image_width":"1600","image_height":"800","video":"","bookmark_id":"sketch-learn-gradients"},{"id":"11894","section_id":"64","order":"35","title":"","subhead":"Editing Gradients","body":"<p>You can edit your gradient by dragging the ends of the sliders. You can also rotate, or add new gradient points by double-clicking in the slider.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Gradients.mp4","bookmark_id":"sketch-learn-editing-gradients"},{"id":"11895","section_id":"64","order":"36","title":"","subhead":"Radial Gradients","body":"<p><strong>Radial Gradients<\/strong> are typically used for large backgrounds to give a more realistic spotlight. You can achieve interesting results by dragging the points outside the bounds of the canvas.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-Radial.mp4","bookmark_id":"sketch-learn-radial-gradients"},{"id":"11896","section_id":"64","order":"37","title":"","subhead":"Angular Gradients","body":"<p><strong>Angular Gradients&#xA0;<\/strong> are especially handy for circular shapes&rsquo;s backgrounds like those on the Apple Watch.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Angular.mp4","bookmark_id":"sketch-learn-angular-gradients"},{"id":"11897","section_id":"64","order":"38","title":"","subhead":"Importing Gradients","body":"<p>Gradients can&rsquo;t be as easily imported, but you can add them manually like in this video. Download the <a href=\"http:\/\/cl.ly\/1E1h36041X1V\">Gradients Sketch file<\/a> to follow the demo.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-Gradients.mp4.mp4","bookmark_id":"sketch-learn-importing-gradients"},{"id":"11898","section_id":"64","order":"39","title":"","subhead":"Patterns","body":"<p>Patterns can be used to repeat a <strong>Tile<\/strong> design and create interesting backgrounds by using a tiny image. I often use this feature in combination with the <a href=\"https:\/\/github.com\/timuric\/Content-generator-sketch-plugin\">Content Generator Plugin<\/a> to quickly set up avatars and image backgrounds by using the <strong>Fill<\/strong> option.<\/p><p>There&apos;s this <a href=\"http:\/\/thepatternlibrary.com\/\">great site<\/a> lets you use their library of gorgeous patterns.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Patterns.mp4","bookmark_id":"sketch-learn-patterns"},{"id":"11899","section_id":"64","order":"40","title":"","subhead":"Noise","body":"<p>If you want to replicate dust, paper or aluminum textures for presentations or to serve as an image background, then use the Noise fill at a very low opacity. Additionally, you can use Overlay or Soft Light to blend the colors even better.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Noise.mp4","bookmark_id":"sketch-learn-noise"},{"id":"11900","section_id":"64","order":"41","title":"","subhead":"Layers and Groups","body":"<p>It is recommended to always name your layers, and group (<strong>&#x2318; G<\/strong>) similar layers together. When you do, it is much easier to manage and organize your document. You can drag outside to export 1x PNG asset based on Layer, Group or Artboard. You may override that setting by using Make Exportable.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Noise.mp4","bookmark_id":"sketch-learn-layers-and-groups"},{"id":"11901","section_id":"64","order":"42","title":"","subhead":"Copy and Paste","body":"<p>One of the convenient things about Sketch is that it plays really well with other Mac apps like Finder, Keynote, Pages and Mail. Copy any image or text to the <strong>Clipboard<\/strong> will allow you to paste them to Sketch.<\/p><p><strong>Command + V<\/strong> to Paste your image or text.<\/p><p><strong>Command + Shift + V<\/strong> to Paste in Place at position 0, 0 of selected layer.<\/p><p><strong>Right-Click &gt; Paste Here<\/strong> to Paste at the mouse cursor from center position.<\/p><p>Vice versa, you can copy any image or text Sketch to other apps. For apps like Keynote or Pages, it&rsquo;ll copy the <strong>vector<\/strong> format, which makes it infinitely scalable.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-learn-copy-and-paste"},{"id":"11902","section_id":"64","order":"43","title":"Symbols","subhead":"","body":"<p>Symbols makes it easy to share the same elements across multiple Artboards. This is especially useful when you re-use the same elements multiple times like for Status Bar, Navigation bar or Tab Bar. You won&rsquo;t need to go back and edit those elements one by one. As you update one, it&rsquo;ll synchronize to all the other ones that share the same Symbol.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-Symbols.mp4.mp4","bookmark_id":"sketch-learn-symbols"},{"id":"11903","section_id":"64","order":"44","title":"Version Control, Autosave and iCloud","subhead":"","body":"<p>When you forgot to save your document and accidentally close your computer, you&rsquo;d normally run into the risk of losing all your changes. That&rsquo;s where Autosave comes in. It regularly saves multiple versions of your file, so that you don&rsquo;t have to think about it. You can even revert back to a previous version. This can be useful when for example, colleagues don&rsquo;t have the font files that you used, thus changing all the text layers to a default font. Autosaving will work without having a backup, but I still suggest that you set up a Time Machine for extra security.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Revert.mp4","bookmark_id":"sketch-learn-version-control-autosave-and-icloud"},{"id":"11904","section_id":"64","order":"45","title":"","subhead":"Autosave Tip","body":"<p>If you work with really large files, Autosaving can really take up a lot of disk space. That&rsquo;s when you need to clean your backups with this little <a href=\"https:\/\/medium.com\/@thomasdegry\/how-sketch-took-over-200gb-of-our-macbooks-cb7dd10c8163\">trick<\/a>.<\/p><p>iCloud works great with Sketch. Every save not only stores the file on your Hard Drive but also on Apple&rsquo;s servers. If your computer breaks down, you can always retrieve a backup of it.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-learn-autosave-tip"},{"id":"11905","section_id":"64","order":"46","title":"Background Blur","subhead":"","body":"<p>iOS uses blur everywhere, from the Lock screen to the Notifications center. <strong>Background Blur<\/strong> is a feature unique to Sketch, and it&rsquo;s extremely convenient. The blur is a dynamic sheet placed on top of multiple layers in the background. It updates in real-time as everything changes. <\/p><p>Creating the exact same effect only requires you to create a Shape, set the Fill opacity to less than 100%, and change the blur to Background Blur. From there, you can customize the Blur strength. As you move the Blur layer, the layers underneath blur automatically. You can use Soft Light or Overlay to add interesting effects that replicate the Vibrancy in iOS.<\/p><p>In addition to Background Blur, you have the usual <strong>Gaussian<\/strong>, <strong>Motion<\/strong> and <strong>Zoom<\/strong> blurs. Background Blur can be an expensive feature to the performance of Sketch, so don&rsquo;t overuse it. Flatten to Bitmap whenever possible.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-BackgroundBlur.mp4.mp4","bookmark_id":"sketch-learn-background-blur"},{"id":"11906","section_id":"64","order":"47","title":"Migrating from Photoshop and Illustrator","subhead":"","body":"<p>As a UI designer, the things you&apos;ll be missing are your hard-earned libraries of icons and logos. There&apos;s a solution for that. As long as you know how to export them to SVG, the process of migrating to Sketch is painless.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-learn-migrating-from-photoshop-and-illustrator"},{"id":"11907","section_id":"64","order":"48","title":"","subhead":"PSD Shapes to Sketch","body":"<p>If you happen to have a set of icons that is exclusively made for Photoshop, you just need to suck the SVG out of them. This process requires Photoshop and Illustrator.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/photoshop.mp4","bookmark_id":"sketch-learn-psd-shapes-to-sketch"},{"id":"11908","section_id":"64","order":"49","title":"","subhead":"What about my PSD files?","body":"<p>Consider two things: 1) you should work in vector, and 2) always work from scratch, except for your libraries. Recycling old work is a bad habit for any designer. Instead of jumping to Sketch in a middle of a project, consider getting the team together and experiment with Sketch for a Hackathon or small project.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-learn-what-about-my-psd-files"},{"id":"11909","section_id":"64","order":"50","title":"","subhead":"Clients and Photoshop Legacy","body":"<p>The biggest reason why designers are reluctant to switch to Sketch is because of the expectations of their co-workers. It&apos;s a fair assessment. There is no direct solution to that, but I will say a few things. I&apos;ve worked with Sketch at 3 different places and with a number of clients. In all of them, I&apos;ve successfully converted every designer, engineer and manager. The trick? Be convincing. The cost of staying in Photoshop is far greater than the cost of switching to a tool tailor-made for your work. If legacy was an issue, I would never have switched to the Mac 10 years ago. As Steve Jobs put it perfectly: &quot;Why join the navy if you can be a pirate?&quot;. Become the change you want to see.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-learn-clients-and-photoshop-legacy"}]},{"id":"65","chapter_id":"2","order":"2","slug":"sketch-start","title":"Powerful Start in Sketch","caption":"Strong Foundations for your Sketch Workflow","body":"<p>As a designer, you need a solid process to make your workflow efficient. It\u2019s even more crucial when you\u2019re starting, because you can avoid a lot of inefficient, time-wasting bottlenecks. One of the things that set <a href=\"https:\/\/sketchapp.com\">Sketch<\/a> apart is the sheer amount of <a href=\"https:\/\/sketchapphub.com\/resources\/\">plugins<\/a> and <a href=\"https:\/\/www.sketchappsources.com\">resources<\/a>. It\u2019s the openness of the Sketch file, which is universally supported and well-integrated into other apps. Comparing Sketch\u2019s base features to other design tools is like comparing the iPhone\u2019s specs to other phones. You forget the ecosystem, which is what makes Sketch so special. <\/p><p><a href=\"http:\/\/goabstract.com\">Abstract<\/a>, <a href=\"http:\/\/invisionapp.com\">InVision<\/a> and <a href=\"http:\/\/framer.com\">Framer<\/a> are just some of the widely popular third-party apps that support Sketch first. This is a big deal. Just like the iPhone\u2019s ecosystem, having access to these incredible extensions first will make your workflow ten times more powerful, flexible and up-to-date. Most importantly, it\u2019s driven by an active <a href=\"https:\/\/www.sketchapp.com\/community\/\">community<\/a> that constantly seek to better their workflow. As a result, you constantly solve pain points with new plugin releases, and refine your workflow with better techniques.<\/p><p>This section assumes that you\u2019re already familiar with Sketch. We\u2019re going to focus on the workflow. If you wish to learn the basics, I suggest heading to the <a href=\"https:\/\/designcode.io\/sketch-learn\">Learn Sketch<\/a> page. Also, this page is an overview of the entire workflow. If you wish to learn more about any of these topics, there is a section dedicated for each of them.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-start.jpg","video":"https:\/\/player.vimeo.com\/external\/242810822.hd.mp4?s=e08908e6101f088dfaf5d3972a125b1bbeadcf04&profile_id=175","subtitles":"https:\/\/designcode.io\/cloud\/sketch4\/2.2.PowerfulStart.vtt","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-start.zip","contents":[{"id":"11910","section_id":"65","order":"1","title":"Sketch Runner Workflow","subhead":"","body":"<p>Probably the most popular and efficient plugin of all is <a href=\"http:\/\/sketchrunner.com\">Sketch Runner<\/a>. It&rsquo;s absolutely the first thing you need to download. Runner is an essential multi-purpose Plugin (on steroids) for inserting UI elements and installing new plugins. It&rsquo;s like the Mac&rsquo;s Spotlight or <a href=\"https:\/\/www.alfredapp.com\">Alfred<\/a> within Sketch. To developers, this is the equivalent of Packages in <a href=\"https:\/\/atom.io\">Atom<\/a>. And it can do so much more:<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Start-RunnerWorkflow.jpg","image_width":"1600","image_height":"916","video":"","bookmark_id":"sketch-start-sketch-runner-workflow"},{"id":"11911","section_id":"65","order":"2","title":"","subhead":"Install Plugins","body":"<p>One of the most useful things about Runner is that it lets you install plugins without leaving Sketch.<\/p><p>To access runner you just need to press (<strong>Command + Apostrophe<\/strong>), you can navigate between Tabs, just by pressing the Tab key and you can install any plugin you would like.<\/p><p>The search is really powerful and descriptive, with a useful shortcut to launch the plugin&rsquo;s site (<strong>Option + Enter<\/strong>). Plugins are like iPhone apps, as in they make your Sketch experience far more personal and enhanced. Sometimes, the plugin does a better job than what&rsquo;s found in the native features. In fact, some of these plugins have inspired native features, such as Resizing Constraints and Plugins Manager.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Start-Plugins.mp4","bookmark_id":"sketch-start-install-plugins"},{"id":"11912","section_id":"65","order":"3","title":"","subhead":"Insert Symbols from iOS UI Kit","body":"<p>Since the iOS UI Kit is now a Library, getting access to it requires you to click <strong>Insert<\/strong> or <strong>Symbols<\/strong> from the Toolbar. However, with Runner, this experience is drastically better because of the search. In Runner, you simply Tab twice to get to Insert, then type <strong>iPhone X Status<\/strong>, for example, to get the status bar. This works for your own Libraries or Symbols.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Start-Runner.mp4","bookmark_id":"sketch-start-insert-symbols-from-ios-ui-kit"},{"id":"11913","section_id":"65","order":"4","title":"","subhead":"Generating Content","body":"<p>When it comes to getting beautiful photos from Unsplash automatically generated, Craft and Runner got you covered. Select any shape and make a search for the Command name of your Plugin. In this example, we&rsquo;re using Craft&rsquo;s <strong>Unsplash<\/strong> command. This also works with <a href=\"https:\/\/github.com\/timuric\/content-generator-sketch-plugin\">Content Generator<\/a> or any Plugin for that matter. Some great uses are: <a href=\"https:\/\/github.com\/utom\/sketch-measure\">Measure<\/a>&rsquo;s sizes and properties or Craft&rsquo;s extensive commands. Of course, you can also use this to activate hard-to-reach native commands like <strong>Collapse All Groups<\/strong>, <strong>Uppercase<\/strong>, <strong>Align<\/strong>, <strong>Arrange<\/strong>, etc.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Start-ContentGenerator.mp4","bookmark_id":"sketch-start-generating-content"},{"id":"11914","section_id":"65","order":"5","title":"iOS 11 Templates and Libraries","subhead":"","body":"<p>Once we have Runner set up, we can immediately start exploring the various UI Kits and Plugins made by the community. The exciting part is that there are thousands of resources out there. <\/p><p>Since we&rsquo;re designing for iOS, we&rsquo;ll need to download Apple&rsquo;s <a href=\"https:\/\/developer.apple.com\/design\/resources\/\">UI Kit<\/a> and Great Simple Studio <a href=\"https:\/\/iosdesignkit.io\/ios-11-gui\/\">iOS 11 GUI<\/a>. These kits can be saved to your Templates collection (<strong>File<\/strong> \/ <strong>Save Template&#x2026;<\/strong>), or they can be used as a Library. Also, we have Sketch&rsquo;s preloaded iOS UI Kit for inserting UI elements on the fly. Libraries can be added from the Preferences pane. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Adding-Library.mp4","bookmark_id":"sketch-start-ios-11-templates-and-libraries"},{"id":"11915","section_id":"65","order":"6","title":"Working With Data","subhead":"","body":"<p><a href=\"http:\/\/invisionapp.com\/craft\">Craft<\/a> is an all-in-one plugin that can generate dynamic content, duplicate Symbols with dynamic content, inspect and deliver assets, and even prototype directly in Sketch. Next to Runner, Craft is arguably the most comprehensive plugin. In big team environments, this is an essential tool because it can deal efficiently with a lot of moving parts. <\/p><p>If you&rsquo;re already working with <a href=\"https:\/\/www.invisionapp.com\">InVision<\/a>&rsquo;s full suite of services, you&rsquo;re in luck, since you can basically sync your prototype, <a href=\"https:\/\/www.invisionapp.com\/feature\/freehand\">Freehand<\/a> and Libraries with them. If not, you can still use their content features, as they will come in handy for any type of user.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web.mp4","bookmark_id":"sketch-start-working-with-data"},{"id":"11916","section_id":"65","order":"7","title":"Version Control with Abstract","subhead":"","body":"<p>When you&rsquo;re in a team with multiple designers working on the same Sketch file, it can become erratic to find a common ground and be on top of things. Should you beach ball the files via email? Should you have multiple files of the same design? Well, <a href=\"http:\/\/goabstract.com\">Abstract<\/a> will solve that problem for you. It&rsquo;s like the <a href=\"http:\/\/github.com\">Github<\/a> for designers. Every Sketch file will be stored in one repository and shared across your team. Everyone will use the same <strong>Master<\/strong> files. Team members, including designers, developers and product managers can open those files without worrying about making destructive changes. <\/p><p>If you&rsquo;re an active <strong>Collaborator<\/strong>, you can <strong>Branch<\/strong> from the Master file. In other words, you create your own version of that file. When finished, you can commit changes to the Master file. If conflict is detected, you have the choice to compare and choose which change is correct. If not, you can merge those changes to the Master file. Abstract is really robust, allowing you to follow long history of changes and communicate with your team through comments and commits. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Edit-in-Sketch.mp4","bookmark_id":"sketch-start-version-control-with-abstract"},{"id":"11917","section_id":"65","order":"8","title":"Nested Symbols","subhead":"","body":"<p>With all the essential UI Kits and plugins installed, we can finally start combining with the powerful native features already in Sketch. Let&rsquo;s dial back a little and learn about how to work with Sketch&rsquo;s built-in features.<\/p><p>When you have a lot of repeating elements, such as a list of items, or a grid of content, you&rsquo;ll want to use Symbols. That way, when you modify something in that item, it&rsquo;ll automatically update across all the Symbols.<\/p><p>Sometimes, contents in the Symbol are not just restricted to images and texts. You may need to change the icon, or the background color. That&rsquo;s where Nested Symbols come in. With this powerful workflow, you can customize all sorts of grouped layers.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Update-Nested-Symbol.mp4","bookmark_id":"sketch-start-nested-symbols"},{"id":"11918","section_id":"65","order":"9","title":"","subhead":"Overrides","body":"<p>When you have multiple Symbols, you&rsquo;ll want to customize the content individually. With Overrides, you can quickly replace the texts and images on the fly. When working with Nested Symbols, you can override Symbols instead of just texts and images. This opens up all kinds of possibilities in term of dynamic content that can be overridden.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Nested-Overrides.mp4","bookmark_id":"sketch-start-overrides"},{"id":"11919","section_id":"65","order":"10","title":"Libraries","subhead":"","body":"<p>Working in a team environment requires a different workflow than working alone. What happens when you have there are 3+ people working on the same design? What if you have a large style guide, comprised of hundreds of Symbols, like colors, buttons, contents, dialogs and menus? With Libraries (new in Sketch 47), you can put all your Symbols in a separate Sketch file that exists in a common folder, like on <a href=\"http:\/\/dropbox.com\">Dropbox<\/a> or Abstract. Libraries can be imported to your main Sketch file and used as local Symbols. However, Symbols inside Libraries can only be modified from that folder, separately. Whenever a change is made in that Sketch file, it can be synchronized back to your main Sketch file.<\/p><p>For example, let&rsquo;s say I have a Sketch file called <strong>main<\/strong>. I also have a Library file named <strong>styleguide<\/strong>. From <strong>main<\/strong>, I import <strong>styleguide<\/strong> in order to use all its Symbols. I can&rsquo;t modify those Symbols from <strong>main<\/strong>. But I can open <strong>styleguide<\/strong> and edit the Symbols there. When I save <strong>styleguide<\/strong>, the changes are sent to <strong>main<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Update-Library-Symbol.mp4","bookmark_id":"sketch-start-libraries"},{"id":"11920","section_id":"65","order":"11","title":"Adaptive Layouts","subhead":"","body":"<p>Designing for multiple devices has become a necessity. We don&rsquo;t design for a single iPhone anymore. We design for dozens of different iPhones and iPads, all with their own resolution and pixel density. We design for landscape, and for Web, which has no set resolution. You get the picture. Your Artboard has to react to the screen changing in size. That&rsquo;s where <a href=\"https:\/\/www.sketchapp.com\/docs\/layer-basics\/constraints\/\">Resizing Constraints<\/a> comes in. <\/p><p>For example, by setting the constraint to be against Top, Left, Right or Bottom, you get a box that follow those borders. If your box has a 10 px distance from the Left, it&rsquo;ll remain 10 px, no matter how much you resize the containing Group or Artboard. Additionally, you can set your element to have a fixed width or height. Like this, when the container gets resized, the element will keep the fixed size. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Adaptive-Tab-Bar.mp4","bookmark_id":"sketch-start-adaptive-layouts"},{"id":"11921","section_id":"65","order":"12","title":"","subhead":"Advanced Constraints with Auto Layout","body":"<p><a href=\"https:\/\/animaapp.github.io\/docs\/v1\/guide\/\">Auto Layout<\/a> truly closes the gap between design and development. When you work with so many resolutions (iPhone X, iPhone 8, Android, Web), you can save a ton of edits by setting up constraints, similarly to how you&rsquo;d use Auto Layout in Xcode. Working with adaptive layouts has been a major need for designers and this is the answer.<\/p><p>While Sketch has its own Constraints feature, it is still fairly basic compared to Xcode&rsquo;s Auto Layout and Stack Views. For example, you can&rsquo;t pin real pixel values against the borders. You can&rsquo;t stack similar elements, so that they become dynamic with each other, reacting to resizing in a way that a dynamic layout would. With Anima&rsquo;s Auto Layout, you can take this to the next level.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Start-StackView.mp4","bookmark_id":"sketch-start-advanced-constraints-with-auto-layout"},{"id":"11922","section_id":"65","order":"13","title":"Smooth Corners","subhead":"","body":"<p>The iOS app icon doesn&rsquo;t have a traditional rounded corner. It has something we call &#x201C;Super Ellipse&#x201D;. Typically, designers have to edit the Bezier path to get the right corners. But with this new feature, you can get the same exact result by turning on &#x201C;Smooth Corners&#x201D;. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Start-SmoothCorners.mp4","bookmark_id":"sketch-start-smooth-corners"},{"id":"11923","section_id":"65","order":"14","title":"Exporting Assets to Multiple Resolutions","subhead":"","body":"<p>One of my favorite features is the ability to easily export at multiple screen resolutions. By using Make Exportable in the bottom right of the screen, you can export at any scale (<strong>1x<\/strong>, <strong>2x<\/strong>, <strong>3x<\/strong>) and 6 file formats (JPG, PNG, SVG, PDF, TIFF and EPS). PDF in particular is useful for iOS assets, and SVG is a fantastic format for the Web. For many users, this is what makes Sketch shine from the other apps.<\/p><p>Click <strong>Make Exportable<\/strong> to set up your slices. By default, it&rsquo;ll set the scale at 1x, but click again and you&rsquo;ll quickly get 2x, then 3x. You can also set the scale to a width (<strong>w<\/strong>) or height (<strong>h<\/strong>). For instance, if you wish your asset to export at maximum 800 px wide, set <strong>800w<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-ExportAssets.mp4.mp4","bookmark_id":"sketch-start-exporting-assets-to-multiple-resolutions"},{"id":"11924","section_id":"65","order":"15","title":"","subhead":"Image Optim","body":"<p>Images exported from Sketch (or any other app) are not well-optimized for consumption. Apps and Websites tend to have a bloat issue. That&rsquo;s why plugins like <a href=\"https:\/\/imageoptim.com\/sketch\">Image Optim<\/a> is a necessary step whenever you export a PNG or JPG file. From my experience, you can shave up to 80% of the original file size. Plus, there&rsquo;s very little compromise in term of quality, even less apparent today because of Retina screens.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Start-ImageOptim.jpg","image_width":"1490","image_height":"806","video":"","bookmark_id":"sketch-start-image-optim"},{"id":"11925","section_id":"65","order":"16","title":"","subhead":"Optimization Tip","body":"<p>You can shave an additional 50% by enabling <strong>PNGCrush<\/strong> and <strong>JPEGOptim<\/strong>. Keep the quality at 80%. Because you design <strong>2x<\/strong> and <strong>3x<\/strong> screens, the loss in quality won&rsquo;t be noticeable. In fact, this site uses these aggressive optimization techniques. Without this, I would end up having 30 MB per page, rather than the current 5 MB. While this may seem high, we must not forget that we have multiple videos and high-resolution images. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Start-ImageOptimSettings.jpg","image_width":"1526","image_height":"944","video":"","bookmark_id":"sketch-start-optimization-tip"},{"id":"11926","section_id":"65","order":"17","title":"","subhead":"Sketch File Optimization","body":"<p>Sometimes, you will work with large Sketch files of over 100 MB. This can cause a strain to your hard drive and to the performance. You may not always need full quality of the bitmaps found in your document. In Sketch, you can use the built-in <strong>File<\/strong> &gt; <strong>Reduce File Size<\/strong>, which can reduce a sizable amount. To get an even better result, you can use <a href=\"https:\/\/flawlessapp.io\/reduce\">Reduce<\/a>, which in my own experience reduces even more, and keeps the color integrity better.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Start-Reduce.mp4","bookmark_id":"sketch-start-sketch-file-optimization"},{"id":"11927","section_id":"65","order":"18","title":"Styleguide and Handoff","subhead":"","body":"<p>Documentations are time-consuming. You have to spend days or weeks on them. When you need to update, you have to do it manually. With each update, you have to inform your whole team about them. It&rsquo;s like a major project on its own. That&rsquo;s time that you could be spending on perfecting the project and getting real feedback from users.<\/p><p>That&rsquo;s where <a href=\"https:\/\/www.invisionapp.com\/feature\/inspect\">InVision Inspect<\/a>, <a href=\"https:\/\/zeplin.io\">Zeplin<\/a> and <a href=\"https:\/\/sympli.io\">Sympli<\/a> come in. With their Sketch plugin, you can just export all your Artboards and the Mac or Web app will automatically pick up all the styling specifications. When your team opens your designs, they get the latest updates, find all the sizes, distances and font properties right there. Additionally, developers will find the assets embedded and can even make comments on specific parts of your designs.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Start-InvisionInspect.jpg","image_width":"1600","image_height":"936","video":"","bookmark_id":"sketch-start-styleguide-and-handoff"},{"id":"11928","section_id":"65","order":"19","title":"","subhead":"Comparing with Implementation","body":"<p>To compare your Sketch Artboards with real implementation in iOS Simulator, I recommend using <a href=\"https:\/\/flawlessapp.io\">Flawless<\/a>. You can simply drag and drop your Sketch file and it&rsquo;ll automatically detect all your Artboards. Then, it&rsquo;ll show an overlay of your design on top of the Simulator. This is also useful for testing your site on mobile, since you can use Safari in the iOS Simulator.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Start-Flawless.mp4","bookmark_id":"sketch-start-comparing-with-implementation"},{"id":"11929","section_id":"65","order":"20","title":"The Feedback Process","subhead":"","body":"<p>When you&rsquo;re done with your design, you&rsquo;ll want to share it with your co-workers to get feedback. Sketch&rsquo;s integrated <a href=\"https:\/\/www.sketchapp.com\/docs\/sketch-cloud\/\">Cloud<\/a> sharing allows you to automatically upload all your Artboards to their server and share your designs via a link, privately or publicly. Additionally, people can make comments. This feature works well for any type of user who just wants to quickly share something they made.<\/p><p>If you&rsquo;re in a large team and require more features like annotations and collaboration, you might want to consider more specialized services. InVision is well-integrated into Sketch. You can sync all your Artboards to their system with the click of a button. <a href=\"https:\/\/www.invisionapp.com\/feature\/freehand\">Freehand<\/a> can make this process really fun and collaborative.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Start-Freehand.jpg","image_width":"1600","image_height":"1032","video":"","bookmark_id":"sketch-start-the-feedback-process"},{"id":"11930","section_id":"65","order":"21","title":"Previewing on iOS Devices","subhead":"","body":"<p>What looks great on your computer screen may not be usable on your iPhone. Thanks to <a href=\"https:\/\/www.sketchapp.com\/features\/#mirror\">Sketch Mirror<\/a>, you can preview your designs just by connecting via Wi-Fi or IP address. If you&rsquo;re on the go a lot, you might find that setting a Personal Hotspot from your phone will give better results.<\/p><p>The <strong>Artboards<\/strong> can be swiped left and right on your phone. Swipe up and down to switch between <strong>Pages<\/strong>. Double-tap to zoom in or adjust to fit the screen. Mirror also supports scroll during preview so you can expand your screen as tall as you want.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/InVision-Marvel-Apple-Watch.jpg","image_width":"1600","image_height":"968","video":"","bookmark_id":"sketch-start-previewing-on-ios-devices"},{"id":"11931","section_id":"65","order":"22","title":"Previewing on Android Devices","subhead":"","body":"<p>For Android users, you might want to use <a href=\"https:\/\/crystal.smithy.productions\">Crystal<\/a>. Another fantastic tool that works cross-platforms is <a href=\"https:\/\/bjango.com\/mac\/skalapreview\/\">Skala Preview<\/a> (a plugin called <a href=\"https:\/\/bjango.com\/help\/skalapreview\/sketch\/\">Sketch Preview<\/a> is required).<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Start-Android.jpg","image_width":"1600","image_height":"944","video":"","bookmark_id":"sketch-start-previewing-on-android-devices"},{"id":"11932","section_id":"65","order":"23","title":"Prototyping In Sketch","subhead":"","body":"<p>Sketch doesn&rsquo;t have a built-in prototyping tool. But with Craft, you can quickly prototype a flow by connecting screens. Then, you set a Click, Tap or Swipe gesture.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Start-PrototypeCraft.mp4","bookmark_id":"sketch-start-prototyping-in-sketch"},{"id":"11933","section_id":"65","order":"24","title":"Prototyping Animations","subhead":"","body":"<p><a href=\"http:\/\/designcode.io\/sketch-flinto\">Prototyping<\/a> animations can be a labour-intensive process, especially with tools that have a steep learning curve. For those who just don&rsquo;t want to learn code, <a href=\"http:\/\/flinto.com\">Flinto<\/a> or <a href=\"http:\/\/principleformac.com\">Principle<\/a> are perfect. They yield maximum results for little investment in time and efforts. Both apps let you import all your Artboards and do powerful animations in a matter of minutes.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Flinto.mp4","bookmark_id":"sketch-start-prototyping-animations"},{"id":"11934","section_id":"65","order":"25","title":"Prototyping in Framer","subhead":"","body":"<p>For those who love code for its limitless possibilities, you&rsquo;ll love <a href=\"https:\/\/framer.com\">Framer<\/a>. It&rsquo;s designer-friendly, because you can create and edit your UI in it, which directly translates into code. There is a full <a href=\"https:\/\/designcode.io\/framer-intro\">section<\/a> on Framer.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/set-target.mp4","bookmark_id":"sketch-start-prototyping-in-framer"},{"id":"11935","section_id":"65","order":"26","title":"Designing Icons","subhead":"","body":"<p>Often times, you&rsquo;ll need to customize existing icons or draw them from scratch. You&apos;ll need in your arsenal a nice library of vector icons. The ones by <a href=\"http:\/\/pixellove.com\/\">PixelLove<\/a> and <a href=\"http:\/\/www.streamlineicons.com\/\">Streamline<\/a> will work well for iOS. Sketch is entirely vector-based so you can easily import SVG icons (a universal vector format), and edit them as you see fit. If you&rsquo;re uncomfortable working with vector paths, you can at least change the color and size to fit your project. To get an introduction to vectors in Sketch, I suggest heading to the section <a href=\"https:\/\/designcode.io\/sketch-vector\">Working with Vector<\/a>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Scissors.mp4","bookmark_id":"sketch-start-designing-icons"},{"id":"11936","section_id":"65","order":"27","title":"Keyboard Shortcuts","subhead":"","body":"<p>Design is easy to learn but hard to master. While less obvious, the Keyboard shortcuts are what makes Sketch so efficient at user interface design. Having to click too many times is one of the reasons why I wanted to switch from Photoshop.<\/p><p>This is a list of the most essential shortcuts to learn. Because I do these actions hundreds of times a day, I find it important to remember them by heart. Note that I didn&apos;t include the usual suspects of Copy (<strong>Cmd C<\/strong>), Paste (<strong>Cmd V<\/strong>), Zoom (<strong>Cmd +\/-<\/strong>) and Save (<strong>Cmd S<\/strong>).<\/p><p>Select Any Layer: <strong>Cmd Click<\/strong><\/p><p>Edit Text or Vector: <strong>Enter<\/strong><\/p><p>Rectangle: <strong>R<\/strong><\/p><p>Oval: <strong>O<\/strong><\/p><p>Text: <strong>T<\/strong><\/p><p>Show Distance: <strong>Alt<\/strong><\/p><p>Group Layers: <strong>Cmd G<\/strong><\/p><p>Ungroup: <strong>Cmd Shift G<\/strong><\/p><p>Show\/Hide Pixels: <strong>Ctrl P<\/strong><\/p><p>Color Picker: <strong>Ctrl C<\/strong><\/p><p>Duplicate: <strong>Cmd D<\/strong><\/p><p>Lock\/Unlock Layer: <strong>Cmd Shift L<\/strong><\/p><p>Hide\/Show Layer: <strong>Cmd Shift H<\/strong><\/p><p>Switch Windows: <strong>Cmd ~<\/strong><\/p><p>Focus on Layer: <strong>Cmd 2<\/strong><\/p><p>Paste in Place: <strong>Cmd Shift V<\/strong><\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Duplicate-Multiple.mp4","bookmark_id":"sketch-start-keyboard-shortcuts"},{"id":"11937","section_id":"65","order":"28","title":"Resources","subhead":"","body":"<p>The best way to learn Sketch is to download other people&apos;s work and analyze them. The community is growing at a rapid pace and new resources are popping out every day. <a href=\"http:\/\/sketchappsources.com\/\">SketchAppSources<\/a>, <a href=\"http:\/\/sketchrepo.com\">Sketch Repo<\/a>, <a href=\"https:\/\/sketchapphub.com\">Sketch App Hub<\/a> and <a href=\"http:\/\/sketch.fordesignrs.com\">Sketch for Designers<\/a> are some of the best places for download Sketch files. Together, they have over 5,000 user-submitted Sketch designs.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-start-resources"},{"id":"11938","section_id":"65","order":"29","title":"","subhead":"Starting Color Palette","body":"<p>Color palettes are shareable as a file, so I made one that you can <a href=\"http:\/\/cl.ly\/2k1g3h1w1c1y\">download here<\/a>. Download the <a href=\"https:\/\/github.com\/andrewfiorillo\/sketch-palettes\">Sketch Palettes<\/a> plugin to be able to quickly import color palettes. To install a new plugin, click on the <strong>Download ZIP<\/strong> button in GitHub, and once unzipped, double-click the <strong>.plugin<\/strong> file.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Start-Palette.jpg","image_width":"1600","image_height":"1042","video":"","bookmark_id":"sketch-start-starting-color-palette"},{"id":"11939","section_id":"65","order":"30","title":"","subhead":"Vector Devices and Mockups","body":"<p>Having a strong presentation of your app in a Keynote or on the front page of your site gives your product an edge. Download the free sample from <a href=\"https:\/\/designcode.io\/angle\">Angle<\/a>, a massive library of over 260 mockups. You&rsquo;ll find the iPhone, iPad, Mac and Apple Watch devices entirely made in vector, which means you can edit at your heart&rsquo;s content. Additionally, you can download more devices and Diverse Device Hands by <a href=\"http:\/\/facebook.design\/toolsandresources\/\">Facebook<\/a>. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Start-Devices.jpg","image_width":"1324","image_height":"1040","video":"","bookmark_id":"sketch-start-vector-devices-and-mockups"},{"id":"11940","section_id":"65","order":"31","title":"","subhead":"Sketch Gradients","body":"<p>Gradients can&rsquo;t be as easily imported, but you can add them manually like in this video. Download the <a href=\"https:\/\/cl.ly\/1N0y0R1i1Y11\">Gradients Sketch file<\/a> to follow the demo.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Start-Gradients.jpg","image_width":"1600","image_height":"844","video":"","bookmark_id":"sketch-start-sketch-gradients"},{"id":"11941","section_id":"65","order":"32","title":"","subhead":"InVision Sketch UI Kits","body":"<p>InVision has created a number of fantastic and free <a href=\"https:\/\/support.invisionapp.com\/hc\/en-us\/articles\/115000536363-Free-UI-design-kits\">UI Kits<\/a> for Sketch that you can download and start digging.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Start-InVisionUIKits.jpg","image_width":"1600","image_height":"1050","video":"","bookmark_id":"sketch-start-invision-sketch-ui-kits"},{"id":"11942","section_id":"65","order":"33","title":"","subhead":"Nested Symbols &amp; Auto-Updating Styleguides","body":"<p>There is a really comprehensive styleguide <a href=\"http:\/\/symbols.janlosert.com\">template<\/a> for creating a Website. Highly suggested for those who like to have a complete design system in place. Or, you can simply download it to study a well-executed example of that workflow.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Start-NestedSymbolsJanLosert.jpg","image_width":"1600","image_height":"878","video":"","bookmark_id":"sketch-start-nested-symbols-auto-updating-styleguides"}]},{"id":"91","chapter_id":"2","order":"2","slug":"sketch-ios11","title":"Design for iOS 11","caption":"Designing an iOS App from scratch in Sketch","body":"<p>We&#39;re going to design the <strong>Design+Code iOS app<\/strong> from scratch in <strong>Sketch<\/strong>, by using some guidelines and tips that will help your design workflow easier. After you learn to design for iOS from here, it can create a cohesive experience with multiple screens and build beautiful apps. You will need to <a href=\"https:\/\/www.dropbox.com\/s\/4yxbxuhyrmi7fon\/Design%20for%20iOS%2011.zip?dl=0\">download the assets<\/a> required to follow this tutorial. Let&#39;s get started!<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-ios11.jpg","video":"https:\/\/player.vimeo.com\/external\/242811766.hd.mp4?s=aa0ee7e30bace5f8192db1d30f1d5b90d9f7423e&profile_id=175","subtitles":"https:\/\/designcode.io\/cloud\/sketch4\/2.3.DesignForiOS.vtt","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-ios11.zip","contents":[{"id":"10073","section_id":"91","order":"1","title":"Design+Code Home Screen","subhead":"","body":"<p>We will be designing the new Design+Code <strong>Home screen<\/strong> in this tutorial. It contains a hero image, headline, introduction, call-to-action button, chapter and people section.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Home-Sections.jpg","image_width":"1600","image_height":"584","video":"","bookmark_id":"sketch-ios11-design-code-home-screen"},{"id":"10074","section_id":"91","order":"2","title":"Setting Up the Basics","subhead":"","body":"<p>It is recommended to design at <strong>1x<\/strong> size because it will be easy when you are exporting assets to 2x and 3x. We are going to use iPhone 8 at 1x (<strong>375x667<\/strong>) for this Home screen design.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-ios11-setting-up-the-basics"},{"id":"10075","section_id":"91","order":"3","title":"","subhead":"Create an Artboard","body":"<p>Create an Artboard by choosing&#xA0;<strong>Insert &#x203A; Artboard<\/strong>&#xA0;from the toolbar, or press <strong>A<\/strong>. A list of preset Artboard sizes will appear in the <strong>Inspector<\/strong> on the right. All these dimensions are already at 1x. You can change to Material Design or Responsive Web from the drop-down, along with a toggle for Portrait and Landscape orientations. Click on the iPhone 8 from the list and Sketch will create an Artboard for you.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Create-Artboard.mp4","bookmark_id":"sketch-ios11-create-an-artboard"},{"id":"10076","section_id":"91","order":"4","title":"","subhead":"Layout Margin","body":"<p>In this Home screen, we use a layout margin of <strong>16px<\/strong> from the left and the right. Like this we ensure that the user interface stay focus in the middle of the screen and doesn&rsquo;t look cramped against the edge.<\/p><p>Choose <strong>View &#x203A; Canvas &#x203A; Show Rulers<\/strong> or press <strong>Control R<\/strong> to display Rulers. Select the Artboard, move the mouse over to the top ruler and click at 16px area; you will get a vertical guideline. You can draw a 16px box, select it, move the mouse over to the top ruler, and the line will snap automatically to the edge of the box. With this, we can make sure the line is in the right margin.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Layout-Margin.mp4","bookmark_id":"sketch-ios11-layout-margin"},{"id":"10077","section_id":"91","order":"5","title":"","subhead":"Rulers Guide","body":"<p>You can change the color of the Rulers guide by going to <strong>Sketch Preferences &#x203A; Canvas &#x203A; Guides<\/strong> and click on the color palette. We use <strong>Magenta<\/strong> because it has more visibility when you are designing in Sketch.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Rulers-Guides-Color.mp4","bookmark_id":"sketch-ios11-rulers-guide"},{"id":"10078","section_id":"91","order":"6","title":"","subhead":"iOS UI Design Library","body":"<p>Because we&rsquo;re designing an iOS app, we try to make the design as realistic as possible. We can use the Sketch preset <strong>iOS UI Design library<\/strong> to grab elements that we need. Go to <strong>Sketch Preferences &#x203A; Libraries<\/strong> to make sure the iOS UI Design library is enabled.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/iOS-UI-Design.jpg","image_width":"1600","image_height":"1124","video":"","bookmark_id":"sketch-ios11-ios-ui-design-library"},{"id":"10079","section_id":"91","order":"7","title":"","subhead":"Status Bar","body":"<p>We need a <strong>Status Bar<\/strong> for the top of the screen. You can find the Status Bar in the <strong>Insert<\/strong> menu at the Toolbar. If you&rsquo;ve installed <a href=\"http:\/\/sketchrunner.com\/\">Sketch Runner<\/a>, you can search it easily. Go to <strong>Plugins &#x203A; Runner &#x203A; Run&#x2026;<\/strong> or press <strong>Command + &#x2018; (apostrophe)<\/strong> to activate Sketch Runner. Select the Insert tab and type the keyword &#x201C;<strong>status bar black<\/strong>&#x201D; and double-click the Symbol and then, place it in the Artboard.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iOS-Status-Bar.mp4","bookmark_id":"sketch-ios11-status-bar"},{"id":"10080","section_id":"91","order":"8","title":"","subhead":"Replace Symbol","body":"<p>Our hero image has a dark background, so it is good to change the Status Bar to the white version. So, we can have a better contrast on top of each element. Right-click the Status Bar and go to <strong>Replace With &#x203A; iOS UI Design &#x203A; Bars &#x203A; Status &#x203A; White<\/strong> and click on it. Now, you have a white status bar on the Home screen.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Replace-Status-Bar.mp4","bookmark_id":"sketch-ios11-replace-symbol"},{"id":"10081","section_id":"91","order":"9","title":"Hero Section","subhead":"","body":"<p>Our Hero Section has a background image, headline, and some stats. We can draw the user attention to start exploring the app by using an attractive headline, real statistics, and a beautiful background.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-ios11-hero-section"},{"id":"10082","section_id":"91","order":"10","title":"","subhead":"Insert a Background Image and Masking","body":"<p>Your image might not be cropped in the exact screen size as your design. You can use <strong>Masking<\/strong> to place the hero image layer in a container. Draw a container using the <strong>Rectangle<\/strong> tool and then, put your image on top of it. You can drag the picture from anywhere on your Mac and drop it in the Sketch Artboard, or you can just copy the image file by pressing <strong>Command C<\/strong> and then go to Sketch and press <strong>Command V<\/strong> to paste it in the Canvas.<\/p><p>Once the image is inserted in the same Artboard as the container, select both of them, then right-click and choose <strong>Mask<\/strong> in the context menu. Now the layer at the bottom, which is the container, will become a Mask for the image. Adjust the image to the position as you like.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Masking.mp4","bookmark_id":"sketch-ios11-insert-a-background-image-and-masking"},{"id":"10083","section_id":"91","order":"11","title":"","subhead":"San Francisco Font","body":"<p>Next step is to put the hero headline. You can use a larger font size for the headline. It is hard to choose a suitable typeface and also not recommended to use more than two different typefaces. If you&rsquo;re not sure which font to use for iOS app design, you can always go with Apple&rsquo;s <strong>San Francisco<\/strong> font. The San Francisco typeface was designed to be highly legible at both small and large sizes. For font size equal to <strong>19pt<\/strong> and below, you can use <strong>SF Pro Text<\/strong>; for font size equivalent to <strong>20pt<\/strong> or above, you should use <strong>SF Pro Display<\/strong>. <a href=\"https:\/\/developer.apple.com\/fonts\/\">Download<\/a> the San Francisco family of fonts or read more about it in the <a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/visual-design\/typography\/\">Apple Human Interface Guidelines<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Apple-SF-Pro.jpg","image_width":"1600","image_height":"626","video":"","bookmark_id":"sketch-ios11-san-francisco-font"},{"id":"10084","section_id":"91","order":"12","title":"","subhead":"Insert Headline","body":"<p>We are going to insert &#x201C;<strong>Learn to design &amp; code for iOS 11<\/strong>&#x201D; as the headline. Go to <strong>Insert &#x203A; Text<\/strong> or press <strong>T<\/strong> to start typing. Resize the text container to match the background image so that you won&rsquo;t cover up the iPhone mockup. You will notice that we&rsquo;re using a different font weight and style for the headline. With this, we can make the headline looks more exciting and less monotonous.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Insert-Headline.mp4","bookmark_id":"sketch-ios11-insert-headline"},{"id":"10085","section_id":"91","order":"13","title":"","subhead":"Drop Shadows","body":"<p>The headline might look too flat on top of the hero image. You can add a <strong>Shadows<\/strong> to the text layer and give more depth between the text and image. Select the text layer, go to the Inspector panel and click on Shadows. A default value of Shadows will be applied to the text. Make some adjustments to the Shadows so that it will look smoother and natural.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Text-Shadows.mp4","bookmark_id":"sketch-ios11-drop-shadows"},{"id":"10086","section_id":"91","order":"14","title":"","subhead":"Statistics and Background Blur","body":"<p>I&rsquo;ve done the one statistics section with a dark background, but it doesn&rsquo;t look appealing to me. What we can do is to make it half transparent and then, add a <strong>Background Blur<\/strong> to the dark background. Select the dark background layer, then go to the Inspector panel and change the <strong>Fills Opacity<\/strong> to <strong>50%<\/strong>. Then, click the Gaussian Blur drop-down and choose the Background Blur and set the <strong>Amount<\/strong> to <strong>24px<\/strong>. Now, the statistics section looks more appealing.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Background-Blur.mp4","bookmark_id":"sketch-ios11-statistics-and-background-blur"},{"id":"10087","section_id":"91","order":"15","title":"","subhead":"Finish the Statistics","body":"<p>Let&rsquo;s finish up this statistics section by completing the second stat on the right. Since the layout of the stat is pretty much the same as the left one, we can duplicate it by selecting it and hold the <strong>ALT<\/strong> key to drag it to the right. Now, we can start inserting the correct text for this stat.<\/p><p>So far, we have completed all the elements of the Hero Section, and we should group all these layers into one Group called &#x201C;<strong>Hero Section<\/strong>&#x201D;. That way, the file is more organized.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Stat.mp4","bookmark_id":"sketch-ios11-finish-the-statistics"},{"id":"10088","section_id":"91","order":"16","title":"Get the Book Section","subhead":"","body":"<p>We have completed the Hero Section. Let&rsquo;s move on to the <strong>Get the Book<\/strong> section. In this part, we have a book image, a short description, and a call-to-action button.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-ios11-get-the-book-section"},{"id":"10089","section_id":"91","order":"17","title":"","subhead":"Consistent Spacing","body":"<p>Having a consistent spacing in the design will make your layout look more clean and legible. This can help users have more breathing space to consume the content in the app. We are using a <strong>50px<\/strong> padding around the Get the Book section. Between the book image and descriptions, there is 20px. Between the description and the button is 50px.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Spacing.jpg","image_width":"1600","image_height":"1048","video":"","bookmark_id":"sketch-ios11-consistent-spacing"},{"id":"10090","section_id":"91","order":"18","title":"","subhead":"Call to Action Button","body":"<p>Apple highly recommends to size all the controls at a minimum tappable area of <strong>44pt x 44pt<\/strong>. With this, users can efficiently tap and interact with the buttons in your app. <\/p><p>Type &#x201C;<strong>Get the Book<\/strong>&#x201D; for the button label and then, set the font size to 20px. We can draw a shape with a 44px height and put it behind the text layer. Give the button a 20px padding to the left and right. Add a radius of 44px to make the button rounded. Align the text in the center of the button and apply a color to it. Here we apply a gradient for the button. While selecting the button, click the Fills color in the Inspector panel and choose the second option, <strong>Linear Gradient<\/strong>. We apply <strong>#9C6FFF<\/strong> for the left and <strong>#5334F5<\/strong> for the right in the spectrum of colors. You can adjust the position of the gradient by dragging the top dot to the top left and bottom dot to the bottom right. Lastly, change the text color to white. Now, we have a good looking and approachable button.<\/p><p>If you are not sure what color to use for the buttons, we recommend using <strong>blue<\/strong>. About 50% of apps made by Apple uses blue for their controls.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Button.mp4","bookmark_id":"sketch-ios11-call-to-action-button"},{"id":"10091","section_id":"91","order":"19","title":"Chapter and People Section","subhead":"","body":"<p>We are going to use a <strong>Card-based<\/strong> user interface for the <strong>Chapter<\/strong> and <strong>People<\/strong> section. The card-based design model is used almost everywhere. Card contents are easy to digest, visually appealing and flexible for different kinds of screen sizes from iPhone to iPad and Desktop. All these factors make card design popular and with a great usability.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-ios11-chapter-and-people-section"},{"id":"10092","section_id":"91","order":"20","title":"","subhead":"Card-based Design","body":"<p>This card design is going to be used multiple times in the Design+Code iOS app. We will need to convert it to <strong>Symbol<\/strong>. The Chapter card content includes a section title, description and background image. Select all the relevant layers for the Chapter Card and click <strong>Create Symbol<\/strong> from the toolbar to convert them into Symbols.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Chapter-Card-Symbol.mp4","bookmark_id":"sketch-ios11-card-based-design"},{"id":"10093","section_id":"91","order":"21","title":"","subhead":"Duplicating","body":"<p>Once we have done converted the card into a Symbol, we can start duplicating more to the right. Like this, the users can swipe left to view more cards.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Chapter-Card-Populate.mp4","bookmark_id":"sketch-ios11-duplicating"},{"id":"10094","section_id":"91","order":"22","title":"","subhead":"People Cards","body":"<p>Finally, we have the card design. Repeat the same workflow for the <strong>People<\/strong> section card design. For that section, we use a darker background color so that it can be contrasted against the Chapter section. We also show this section in the footer. Our goal is to show the number of readers and the well-known companies that read the Design+Code too. With this, the Home screen is done!<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/DesignCode-iPhone8.mp4","bookmark_id":"sketch-ios11-people-cards"},{"id":"10095","section_id":"91","order":"23","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/pizza0502\">Pizza Yap<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-ios11-credit"}]},{"id":"92","chapter_id":"2","order":"2","slug":"sketch-iphone-x","title":"Design for iPhone X","caption":"Designing and adapting for iPhone X in Sketch","body":"<p>We&#39;re going to cover the Navigation Bars, Icons, Table Cell, and Tab Bars in <strong>Design for iOS Part 2<\/strong>. We will use the Design+Code iOS app&#39;s <strong>Bookmarks screen<\/strong> and design it from scratch. Creating this screen in iPhone X will learn what?s new in the iOS 11 along the way. What you&#39;ve learned from Part 1 is still relevant and applicable to this tutorial. You will need to <a href=\"https:\/\/www.dropbox.com\/s\/mg0av2e46noxnr0\/Design%20for%20iPhone%20X.zip?dl=0\">download the assets<\/a> required to follow this tutorial.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-iphone-x.jpg","video":"https:\/\/player.vimeo.com\/external\/244255092.hd.mp4?s=341a4d09d0026240c4a61a35065ba029d9afe300&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-iphone-x.zip","contents":[{"id":"10106","section_id":"92","order":"1","title":"iPhone X","subhead":"","body":"<p>The iPhone X comes with a Super Retina Display, at 1125 x 2436 px resolution. It boasts a <strong>458PPI<\/strong> (pixels-per-inch) screen, which is the highest density Apple has built so far. The <strong>Notch<\/strong> comes with a state-of-the-art facial recognition feature. It is one of its kind in the market and is a unique aspect of the phone.<\/p><p>At 1x, the iPhone X is at <strong>375 x 812pt<\/strong>; the width is the same as the iPhone 6, 7 and 8 but <strong>145pt<\/strong> taller. This gives us a new design challenge, but Apple has an excellent <a href=\"https:\/\/www.dropbox.com\/s\/ixajy8dwhuqsrsm\/iOS-11-Sketch.zip?dl=0\">guideline<\/a> to let us kickstart the design without going wrong. In the meantime, the benefits of a taller screen are that we have more spaces for contents!<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/iPhoneX-ExtraSpace.jpg","image_width":"2400","image_height":"2000","video":"","bookmark_id":"sketch-iphone-x-iphone-x"},{"id":"10107","section_id":"92","order":"2","title":"","subhead":"Setting Up for iPhone X in Sketch","body":"<p>Let&rsquo;s start designing the Bookmarks screen in Sketch, but before that, we need to <a href=\"https:\/\/developer.apple.com\/design\/resources\/#ios-apps\">download<\/a> the official <strong>iOS 11 Sketch<\/strong> template from the Apple website. This version provides the most accurate and up-to-date iOS 11 components. This download not only comes with the UI templates, but also includes the latest San Francisco Pro fonts.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Apple-iOS-11-Template.jpg","image_width":"1600","image_height":"941","video":"","bookmark_id":"sketch-iphone-x-setting-up-for-iphone-x-in-sketch"},{"id":"10108","section_id":"92","order":"3","title":"","subhead":"Adding iOS 11 iPhone X Template as a Library","body":"<p>Unzip the iOS 11 template that you downloaded from the Apple website. Look for the file named &#x201C;<strong>UIElements+DesignTemplates+Guides-iPhoneX.sketch<\/strong>&#x201D; and then, rename it to &#x201C;<strong>iOS 11 - iPhone X<\/strong>&#x201D;. By shortening the template name, you will find it easier. Now, go to the <strong>Libraries<\/strong> tab in <strong>Sketch Preferences<\/strong> and drag the iOS 11 template to it.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iOS-11-Template.mp4","bookmark_id":"sketch-iphone-x-adding-ios-11-iphone-x-template-as-a-library"},{"id":"10109","section_id":"92","order":"4","title":"","subhead":"iPhone X Artboard","body":"<p>Add an iPhone X Artboard by pressing <strong>A<\/strong> or go to <strong>Insert &#x203A; Artboard<\/strong> and choose the iPhone X from the <strong>Inspector<\/strong> panel on the right.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/iPhoneX-Artboard.jpg","image_width":"1600","image_height":"800","video":"","bookmark_id":"sketch-iphone-x-iphone-x-artboard"},{"id":"10110","section_id":"92","order":"5","title":"","subhead":"iPhone X Frame","body":"<p>After adding an iPhone X Artboard, the first element to insert is the frame of the iPhone X. Using the <a href=\"http:\/\/sketchrunner.com\/\">Sketch Runner<\/a> plugin will make it easy for you to find the iOS 11 components. Sketch Runner can search the keywords and preview the Symbols when you navigate them one by one.<\/p><p>Activate Sketch Runner and go to the <strong>Insert<\/strong> tab. Type <strong>frame<\/strong> to find <strong>iPhone X Frame<\/strong>. <strong>Double-click<\/strong> or just press <strong>Enter<\/strong> to insert it into the Artboard. Align it to the center of the Artboard with <strong>Alignment<\/strong> tools at the top right corner of the Inspector. Now, this Artboard immediately looks like an iPhone X!<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iPhone-X-Frame.mp4","bookmark_id":"sketch-iphone-x-iphone-x-frame"},{"id":"10111","section_id":"92","order":"6","title":"","subhead":"The New iPhone X Status Bar","body":"<p>You can now insert the new iPhone X <strong>Status Bar<\/strong> to the Artboard. Find the Status Bar in Sketch Runner and choose <strong>Light Status Bar<\/strong> then, put it in the Artboard. Align it correctly to the top and center of the Artboard.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iPhone-X-Status-Bar.mp4","bookmark_id":"sketch-iphone-x-the-new-iphone-x-status-bar"},{"id":"10112","section_id":"92","order":"7","title":"","subhead":"The New Home Indicator","body":"<p>To accommodate an edge-to-edge Super Retina display, Apple abandoned the physical Home button and replaced it with the new <strong>Home Indicator<\/strong>. Home Indicator is a small horizontal line at the bottom of the iPhone X screen. The spacing around the Home Indicator is created for new gestures; it lets you swipe up to go back to the Home screen or switching between apps. Apple recommends against placing interactive controls at the very bottom of the screen.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-iphone-x-the-new-home-indicator"},{"id":"10113","section_id":"92","order":"8","title":"","subhead":"Insert Indicator","body":"<p>Use Sketch Runner and type <strong>indicator<\/strong> in the Insert tab and choose the <strong>black indicator<\/strong> because, we will put it on a light background. If your design has a dark background. Then, it is recommended to use the white version of the indicator for better contrast. Once you&rsquo;ve selected the black indicator, it aligns it in the center and place it at the bottom of the screen.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Home-Indicator.mp4","bookmark_id":"sketch-iphone-x-insert-indicator"},{"id":"10114","section_id":"92","order":"9","title":"","subhead":"Locking Layers","body":"<p>Now, we have all the exclusive iPhone X elements on the Artboard. To avoid accidentally select these elements, you can lock the iPhone X Frame, Status Bar and Home Indicator. Hold down the <strong>Option<\/strong> key, hover your mouse to each of the layers and a <strong>padlock icon<\/strong> will appear. Click on it and the layer will be locked. This means that the layer cannot be selected or moved on the Canvas unless you unlock the layer. There is a shortcut to toggle lock and unlock layer by pressing <strong>Shift Command L<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Lock-Layers.mp4","bookmark_id":"sketch-iphone-x-locking-layers"},{"id":"10115","section_id":"92","order":"10","title":"","subhead":"Safe Area and Layout Margins","body":"<p>Same as in Design for iOS 11, we need to ensure the content stay centered, symmetrically on the screen, doesn&rsquo;t cover the iPhone X notch and the Home Indicator.<\/p><p>For portrait mode, the margins on the left and right are <strong>16px<\/strong>. In landscape mode, the left and right margins are <strong>20px<\/strong>. We only will design in portrait mode for the Bookmarks screen, so you can use Rulers to set the 16px of left and right margins. In the official iOS 11 iPhone X template that you&rsquo;ve downloaded, you can find those Safe Area and Layout Margins in the <strong>Guide - Safe Areas<\/strong> page. Copy to your Artboard if you need it.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Safe-Area.jpg","image_width":"1600","image_height":"972","video":"","bookmark_id":"sketch-iphone-x-safe-area-and-layout-margins"},{"id":"10116","section_id":"92","order":"11","title":"Navigation Bar Title","subhead":"","body":"<p>We are done setting up the iPhone X essential elements and now, we can go into the details of Bookmarks screen design! With the new iOS 11 design, <strong>Navigation Bars<\/strong> are getting taller and capable of inserting <strong>larger title<\/strong>. This unique style is looking good especially for the iPhone X, but this doesn&rsquo;t mean you must use it as part of your app design. It&rsquo;ll need to use in the correct context and doesn&rsquo;t compete with your contents. A standard size title will transition from a large title as you scrolling the content.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Navigation-Bar-Titles.mp4","bookmark_id":"sketch-iphone-x-navigation-bar-title"},{"id":"10117","section_id":"92","order":"12","title":"","subhead":"Insert Navigation Bar","body":"<p>Now, we are going to insert the Navigation Bar into the Artboard. Search the keywords &#x201C;<strong>navigation bar with search<\/strong>&#x201D; in Sketch Runner and we are using the one with the name &#x201C;<strong>Light Large Navigation Bar With Search<\/strong>&#x201D; from the iOS 11 template. Then, place it to the Artboard and align it to the top and center. Move this Navigation Bar layer to the bottom of Frame and Status Bar in the Layer List on the left.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Navigation-Bar-With-Search.mp4","bookmark_id":"sketch-iphone-x-insert-navigation-bar"},{"id":"10118","section_id":"92","order":"13","title":"","subhead":"Overrides Large Title","body":"<p>Let&rsquo;s customize the Navigation Bar with the actual content of the Bookmarks screen. First, select the Navigation bar and find the &#x201C;<strong>Large Title<\/strong>&#x201D; section from the <strong>Overrides<\/strong> in the Inspector on the right side, which is the last one in that list. Just type &#x201C;<strong>Bookmarks<\/strong>&#x201D; in the Large Title text field and press Enter, the Navigation Bar will be updated.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Overrides-Large-Title.mp4","bookmark_id":"sketch-iphone-x-overrides-large-title"},{"id":"10119","section_id":"92","order":"14","title":"","subhead":"Update Library Symbol","body":"<p>You will notice that in the Bookmarks word, the letter &#x201C;<strong>s<\/strong>&#x201D; is dropped to the next line. We don&rsquo;t want this. To fix this, <strong>&#xA0;double-click&#xA0;<\/strong> the Navigation Bar Symbol and click Open in <strong>&#xA0;Original Document&#xA0;<\/strong>. This will bring you to its original document and allow you to edit. Bear in mind though that the changes you make in the original document will update any Sketch file that uses it as a Library.<\/p><p>Sketch will smartly focus on the exact Symbol in the original document. You will see the original Symbol now, select the Large Title layer and set it from <strong>Fixed<\/strong> to <strong>Auto<\/strong> in the Inspector panel. Save this original document and close it. Go back to the previous document and you will spot a <strong>purple badge<\/strong> on the top-right corner of the application with the caption <strong>Library Update Available<\/strong>. Click on the purple badge and a dialog will pop-up, showing you the <strong>OLD<\/strong> and <strong>NEW<\/strong> version of the Symbol that has been modified. We are going to get the new updates by checking the Symbol and then, click <strong>Update Symbols<\/strong>. Now, you will notice that the <strong>Bookmarks<\/strong> word is on one line, well-done!<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Update-Library-Symbol.mp4","bookmark_id":"sketch-iphone-x-update-library-symbol"},{"id":"10120","section_id":"92","order":"15","title":"","subhead":"Hide Unused Symbols","body":"<p>Next, select the Navigation Bar to remove the <strong>Back Button<\/strong>, <strong>Star<\/strong> and <strong>Dictation<\/strong> icons in the search field by finding their override and choose <strong>None<\/strong> in the drop-down. We don&rsquo;t need all of these icons for the Bookmarks screen. You are still able to place back those icons by selecting the elements you want in the Overrides drop-down menu.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Overrides-None.mp4","bookmark_id":"sketch-iphone-x-hide-unused-symbols"},{"id":"10121","section_id":"92","order":"16","title":"","subhead":"Insert Icons on Navigation Bar","body":"<p>We are going to place three icons on the Navigation Bar, which is <strong>Increase Font Size<\/strong>, <strong>Decrease Font Size<\/strong> and <strong>Night Mode<\/strong> icons. These icons can help the user have a better reading and viewing experience when they are using the Design+Code app.<\/p><p>Icon size on the Navigation Bar is <strong>28px of height and width<\/strong> at 1x. <\/p><p>You can find this info by analyzing the iOS 11 iPhone X template. It is a good practice to put your icon in a box so that all the icons are consistent.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Navigation-Bar-Icon-Size.jpg","image_width":"1600","image_height":"800","video":"","bookmark_id":"sketch-iphone-x-insert-icons-on-navigation-bar"},{"id":"10122","section_id":"92","order":"17","title":"","subhead":"Navigation Bar Icons","body":"<p>You can grab the three icons and the assets file that we mentioned from the beginning. Inside the &#x201C;<strong>Navigation Bar Icons<\/strong>&#x201D; folder, you can find three icons. Copy and paste them on the Artboard. Each of the three icons are different sizes, let&rsquo;s draw a <strong>28 x 28px<\/strong> bound for these icons. Rename the rectangle to &#x201C;<strong>Bound<\/strong>&#x201D; and then, align the icon with the bound. Try to give at least 1px to 3px of margins around the icon. For example, we align the <strong>Decrease Font Size<\/strong> icon to the center and bottom of the bound. We also gave a 2px margin from the bottom. Once you have aligned the bound and the icon, select the bound and disabled its <strong>Fill<\/strong> because we just need a transparent bound. Then, you can either put the bound into the icon group or choose both of them to create a new group.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Icon-Bound.mp4","bookmark_id":"sketch-iphone-x-navigation-bar-icons"},{"id":"10123","section_id":"92","order":"18","title":"","subhead":"Tab Bar Icons","body":"<p>After that, convert these icons into Symbols with this naming structure &#x201C;<strong>Tab Bar Icons\/Font Decrease<\/strong>&#x201D; respectively for all three icons. With this, our Symbols will be neatly organized and easy to find. Lastly, place them on the right side of the Navigation Bar Title with an <strong>8px<\/strong> margin between each of them and <strong>16px<\/strong> against the border. You can group these three icons with the Navigation Bar.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Create-Symbol.mp4","bookmark_id":"sketch-iphone-x-tab-bar-icons"},{"id":"10124","section_id":"92","order":"19","title":"Table Rows","subhead":"","body":"<p>Now, we can start to design the Table Rows that are showing the bookmarks list. First, draw a full-width white rectangle and rename it to &#x201C;<strong>Base<\/strong>&#x201D;, we&rsquo;re using it as a container for the table row. Then, copy the &#x201C;<strong>image.svg<\/strong>&#x201D; from the &#x201C;<strong>Table Row Icons<\/strong>&#x201D; folder in the assets folder, paste on top of the Base layer and give it <strong>16px<\/strong> top and left margins. Convert this icon to a Symbol with the name &#x201C;<strong>Table Row Icons\/Image<\/strong>&#x201D;. Draw a blue <strong>18px<\/strong> round shape and then, insert a number with <strong>15px SF Pro Text Bold White<\/strong>. Change the text Alignment to <strong>Center<\/strong> and place this number with a round shape on the top-right of the image icon. Group the Image icon, round shape, the number and rename it to &#x201C;<strong>Icon<\/strong>&#x201D;.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Table-Row-1.mp4","bookmark_id":"sketch-iphone-x-table-rows"},{"id":"10125","section_id":"92","order":"20","title":"","subhead":"Row Layers","body":"<p>Next, we are going to create 3 texts layers, <strong>Section<\/strong>, <strong>Title<\/strong> and <strong>Subtitle<\/strong>. All the texts are aligned to the Left. Set the font values as follow:<\/p><ol>\t<li><strong>Section<\/strong>: 15px, SF Pro Text Semibold, #9b9b9b<\/li>\t<li><strong>Title<\/strong>: 20px, SF Pro Display Semibold, Black<\/li>\t<li><strong>Subtitle<\/strong>: 17px, SF Pro Text Regular, #4a4a4a<\/li><\/ol>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Table-Row-2.mp4","bookmark_id":"sketch-iphone-x-row-layers"},{"id":"10126","section_id":"92","order":"21","title":"","subhead":"Alignment","body":"<p>Align the section text layer next to the image icon with an <strong>8px<\/strong> margin and <strong>16px<\/strong> margin from the top of the container and then, stack the other two texts layers below Section but give them a <strong>4px<\/strong> gap between them. The Subtitle text layer has two lines of content, so we need to type out the 2nd line of it then, we can give a <strong>16px<\/strong> of margin-bottom. Now, you will need to resize the height of Base layer to get the 16px gap. Then, resize them to <strong>291px<\/strong> of fixed width in the Inspector, so that they will have a 16px of the right margin.<\/p><p>We will need a divider line, so that it is distinguished when we stack multiple Table Rows. You can just draw a line with <strong>Insert &#x203A; Shape &#x203A; Line<\/strong> or you can follow our recommended way to draw a divider line. We prefer to use <strong>Inner Shadows<\/strong> on a rectangle shape to make a divider line. This is useful, because when the shape is resized to whatever sizes, the line will remain the height that you&rsquo;ve set.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Table-Row-3.mp4","bookmark_id":"sketch-iphone-x-alignment"},{"id":"10127","section_id":"92","order":"22","title":"","subhead":"Resizing","body":"<p>So, let&rsquo;s copy the Base layer and resize it the same as the three text layers width, which is <strong>291px<\/strong>. Align it to the position corresponding to the text layers. By selecting it, go to Inspector panel and look for <strong>Inner Shadows<\/strong>. Click the <strong>+<\/strong> icon, set the <strong>color opacity to 10%<\/strong>, set the <strong>Y value to -1<\/strong> and make sure the <strong>Blur<\/strong> and <strong>Spread<\/strong> are set as <strong>0<\/strong>. X value is for left and right, Y value is for top and bottom, so set -1 in Y will give the shape layer a bottom 1px line. This is a handy tip for making divider lines and borders.<\/p><p>We have done the design for the Table Row and this will be used for multiple times in this Bookmarks screen. So let&rsquo;s convert this to a Symbol, but before converting, we should arrange and rename the layers appropriately. The Subtitle layer is renamed to just &#x201C;Subtitle&#x201D; instead of &#x201C;Subtitle 2 line&#x201D;. Below is the final layers sequence arrangement. Rename the group to &#x201C;<strong>Bookmarks Row<\/strong>&#x201D;.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Bookmarks-Row-Layers.jpg","image_width":"1600","image_height":"1004","video":"https:\/\/designcode.io\/cloud\/sketch4\/Table-Row-4.mp4","bookmark_id":"sketch-iphone-x-resizing"},{"id":"10128","section_id":"92","order":"23","title":"","subhead":"Bookmark Row","body":"<p>After you&rsquo;ve arranged those layers, now you can create the <strong>Bookmarks Row<\/strong> to a Symbol. Once it converted to a Symbol, duplicate the Bookmarks Row and stack them below. You can press and hold <strong>Option<\/strong>, drag down the Bookmarks Row and then, just press <strong>Command D<\/strong> two times to repeat the duplication. Now, we can insert the content into these 4 Symbols. Copy the text from the <strong>Content<\/strong> file in the assets folder and paste them respectively. In the meantime, import the other two icons which are &#x201C;<strong>code.svg<\/strong>&#x201D; and &#x201C;<strong>text.svg<\/strong>&#x201D;. Then, convert them to Symbols so that you can override the Image Symbol.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Table-Row-5.mp4","bookmark_id":"sketch-iphone-x-bookmark-row"},{"id":"10129","section_id":"92","order":"24","title":"","subhead":"Uppercase","body":"<p>Now, all the contents and icons are inserted in the Symbols, but the Section text looks odd, we should change the text to all <strong>Uppercase<\/strong> to get a better visual hierarchy . If you double-click one of the Bookmarks Row Symbol, Sketch will bring you to the Symbols Page. In here, we can only edit the Section text style. Select the Section text layer, go to Inspector and find the <strong>Options<\/strong> with a gear icon. Click on it then, click on <strong>Text Transform<\/strong> and choose <strong>Uppercase<\/strong>. Lastly, click on <strong>Return to Instance<\/strong> at the top-left of the Canvas to go back to Bookmarks screen. Now, all the 4 Bookmarks Row Section texts are in uppercase, this is the power of Symbols and change once update all.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Table-Row-6.mp4","bookmark_id":"sketch-iphone-x-uppercase"},{"id":"10130","section_id":"92","order":"25","title":"iOS 11 Tab Bar and New Icon Style","subhead":"","body":"<p>There&rsquo;s only one more element to complete for the Bookmarks screen! The last item to create is the iOS Tab Bar at the bottom of the app. In general, it is recommended to use between <strong>3 to 5 tabs<\/strong> on an iPhone app. In iOS 11, Apple introduced a new icon style; they called it <strong>Glyphs<\/strong>. Unlike the previous iOS version icons, Glyphs are solid, monochromatic icons with transparency. Apple has <a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/icons-and-images\/system-icons\/#tab-bar-icons\">default icons<\/a> that you already can use or you can create your own Custom Icons. There are many downloadable icons for iOS that you can easily find on the internet, like this <a href=\"https:\/\/icons8.com\/ios?ref=design+code\">iOS 11 Glyphs<\/a> built by Icons8.<\/p><p>For the Design+Code iOS app, we have five tabs for five different screens. So, let&rsquo;s use <strong>Sketch Runner &#x203A; Insert<\/strong> to search this keywords &#x201C;<strong>tab bar 5<\/strong>&#x201D; and choose the one &#x201C;<strong>Light 5 Tabs<\/strong>&#x201D; from iOS 11 iPhone X Library. Place it at the bottom of the screen, rearrange its layers to the bottom of Frame and the Home Indicator in the Layer List.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Tab-Bar-1.mp4","bookmark_id":"sketch-iphone-x-ios-11-tab-bar-and-new-icon-style"},{"id":"10131","section_id":"92","order":"26","title":"","subhead":"Tab Bar","body":"<p>Recommended Tab Bar icon size is <strong>28 x 28px<\/strong>. We will need to create a bound for them just like what we did for Navigation Bar icons, but this time we are going to use a <strong>Tab Bar Size Guide<\/strong> from iOS 11 iPhone X Library.<\/p><p>Search the keywords &#x201C;<strong>tab bar size<\/strong>&#x201D; in <strong>Sketch Runner &#x203A; Insert<\/strong> and you will see the only option to choose. Place it on the Canvas, right-click it and select <strong>Detach from Symbol<\/strong>. By doing this, we can measure the icon size accurately with the red box guides.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Tab-Bar-2.mp4","bookmark_id":"sketch-iphone-x-tab-bar"},{"id":"10132","section_id":"92","order":"27","title":"","subhead":"Tab Bar Icons","body":"<p>Drag all the icons in the &#x201C;<strong>Tab Bar Icons<\/strong> folder from the assets folder to the Sketch document. Then, duplicate the Tab Bar Size Guide for each of the icons you pasted. Align all the icons in the center of the red square box, that is the safe area for where the icon should be placed.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Tab-Bar-3.mp4","bookmark_id":"sketch-iphone-x-tab-bar-icons"},{"id":"10133","section_id":"92","order":"28","title":"","subhead":"Tab Bar symbols","body":"<p>Then, select Tab Bar Size Guide with the icon and convert them to Symbol. Name the Symbol &#x201C;<strong>Tab Bar Icons\/Home<\/strong>&#x201D; and &#x201C;<strong>Tab Bar Icons\/Bookmarks<\/strong>&#x201D; accordingly. We don&rsquo;t want the red boxes to be visible, so we can hide the Tab Bar Size Guide layer in the Symbol by hovering the layer and toggle the <strong>eye icon<\/strong>. You can select the layer and press <strong>Shift Command H<\/strong> to hide the layer.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Tab-Bar-4.mp4","bookmark_id":"sketch-iphone-x-tab-bar-symbols"},{"id":"10134","section_id":"92","order":"29","title":"","subhead":"Active \/ Inactive Tabs","body":"<p>The sequence of the tab is <strong>Home<\/strong>, <strong>Chapters<\/strong>, <strong>Bookmarks<\/strong>, <strong>Exercises<\/strong> and <strong>More<\/strong>. Since this is the Bookmarks screen, we need to change the <strong>first tab&rsquo;s Active<\/strong> state to <strong>Inactive<\/strong> state and change the <strong>third tab<\/strong> to the <strong>Active<\/strong> state. Simply select the Tab Bar Symbol, go to <strong>Overrides<\/strong> panel, click the drop-down at the Tab 1 and choose <strong>iOS 11 - iPhone X &#x203A; Bars\/Tabbar\/Tab - Inactive<\/strong>. For the Tab 3, choose &#x201C;<strong>iOS 11 - iPhone X &#x203A; Bars\/Tabbar\/Tab - Light Active<\/strong>&#x201D;.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Tab-Bar-5.mp4","bookmark_id":"sketch-iphone-x-active-inactive-tabs"},{"id":"10135","section_id":"92","order":"30","title":"","subhead":"Final Touch","body":"<p>Now, we can start to override the icons and text of the Tab Bar. The workflow is the same as what we did just now. Change the icon in the <strong>icon drop-down<\/strong> and override the text in the <strong>Label<\/strong> field. You will notice that the &#x201C;<strong>Bookmarks<\/strong>&#x201D; label is broken and to fix it, it is the same flow as updating the Navigation Bar Title. Just double-click on the Tab Bar Symbol, click <strong>Open in Original Document<\/strong> and you will directly go to the Tab Bar original Symbol. Double-click the <strong>Inactive<\/strong> Symbol and change the text from <strong>Fixed<\/strong> to <strong>Auto<\/strong>. Repeat the same for the <strong>Active<\/strong> Symbol. Save the original document and go back to the Bookmarks screen. You will see the purple badge of <strong>Library Updates Available<\/strong>, click on it, just click <strong>Update Symbols<\/strong> and the Tab Bar&rsquo;s Bookmarks tab label will be updated.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-iphone-x-final-touch"},{"id":"10136","section_id":"92","order":"31","title":"Conclusion","subhead":"","body":"<p>This is the end of the tutorial, you have completed the Design+Code iOS Part 2 by designing the Bookmarks screen! Hope this tutorial helped you to have a better understanding at how to design for iPhone X. You should try to design your own concept from what you&rsquo;ve learned!<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Tab-Bar-6.mp4","bookmark_id":"sketch-iphone-x-conclusion"},{"id":"10137","section_id":"92","order":"32","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/pizza0502\">Pizza Yap<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-iphone-x-credit"}]},{"id":"108","chapter_id":"2","order":"2","slug":"sketch-ipad","title":"Design for iPad","caption":"Designing an iPad app from Scratch","body":"<p>Apple is more focus on its iPad experience with the new iOS 11. With the space available, you can do more with these big screen tablets. The bigger screen doesn&#x2019;t mean that you can simply enlarge your design and make it bigger. Don&#x2019;t treat iPad as a big iPhone. We should take advantage of the extra room that the iPad offers to create better designs, make a good use of the typography, navigation and hierarchy for the contents.<\/p><p>In this tutorial, we are going to show you how to design the <strong>Bookmarks<\/strong> screens for <strong>Design+Code iPad app<\/strong>. At the same time, you can learn Adaptive Design in landscape view, Table View and the difference between the old and new iPad Tab Bar.<\/p><p>If you&#x2019;ve followed the <strong>Design for iPhone X<\/strong> tutorial, you should have learned to design the Bookmarks screen. If you&#x2019;re not, I recommend you to go through the tutorial because you&apos;ll learn some useful tips and techniques to use here. You will need to <a href=\"https:\/\/www.dropbox.com\/s\/98o19nj896npalp\/2.Sketch-DesignForiPhoneX.zip?dl=0\">download the assets<\/a> required to follow this tutorial.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-ipad.jpg","video":"https:\/\/player.vimeo.com\/external\/245806516.hd.mp4?s=01855abd0fc202cbd6610f656b079b2c52d996f5&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-ipad.zip","contents":[{"id":"10096","section_id":"108","order":"1","title":"Use the Correct Library Template","subhead":"","body":"<p>The iOS 11 - iPhone X template is <strong>only<\/strong> for iPhone X; it can&rsquo;t be used for the iPad or iPhone 8 and below, the size is different. <\/p><p>If you have downloaded the <a href=\"https:\/\/developer.apple.com\/design\/resources\/#ios-apps\">iOS 11 Sketch template<\/a> from the Apple design resources, they have provided a template for the other iPhone and iPad too. We can use that for this tutorial.<\/p><p>Unzip the <strong>iOS-11-Sketch.zip<\/strong> and you will see a Sketch file name &#x201C;<strong>UIElements+DesignTemplates+Guides.sketch<\/strong>&#x201D;. Rename it to &#x201C;<strong>iOS 11<\/strong>&#x201D; so we can easily find the elements inside it. Now, go to the <strong>Libraries<\/strong> tab in <strong>Sketch Preferences<\/strong> and drag the iOS 11 template to use as <strong>Library<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iPad-iOS-11-Library.mp4","bookmark_id":"sketch-ipad-use-the-correct-library-template"},{"id":"10097","section_id":"108","order":"2","title":"","subhead":"Disable Library","body":"<p>You can temporary disable the <strong>iOS 11 - iPhone X<\/strong> and Sketch default <strong>iOS UI Design<\/strong> Library. All the Library Symbols that you&rsquo;ve inserted in the Canvas will still attach to its original document. Go to <strong>Sketch Preferences &#x203A; Libraries<\/strong> and <strong>uncheck<\/strong> the iOS 11 - iPhone X and iOS UI Design Library, this will hide the Library from Sketch and Sketch Runner.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iPad-Disable-Library.mp4","bookmark_id":"sketch-ipad-disable-library"},{"id":"10098","section_id":"108","order":"3","title":"Adaptive Design","subhead":"","body":"<p>Let&rsquo;s start using the Bookmarks screen to design an iPad version of it. Press <strong>A<\/strong>, toggle the Artboard orientation to <strong>Landscape<\/strong> and choose <strong>iPad 1024 x 768<\/strong>. By doing this, it will create an iPad Artboard beside the iPhone X Artboard.<\/p><p>Insert a <strong>Status Bar<\/strong> in the iPad Artboard by searching the keyword &#x201C;<strong>status bar<\/strong>&#x201D; in <strong>Sketch Runner &#x203A; Insert<\/strong>. Choose the one with the name &#x201C;<strong>iOS 11 &#x203A; Bars\/Status Bar\/Light Status Bar<\/strong>&#x201D;. Insert it to the top-left of the iPad Artboard. You will notice the width of the Status Bar is 375px; this is fine because all the elements from the iOS 11 template are made with <strong>Resizing<\/strong> method to make it flexible to resize. Just increase the Status Bar width to same as the iPad Artboard, which is <strong>1024px<\/strong>. The Status Bar shouldn&rsquo;t be stretched to some unacceptable visual. Instead, its elements stay in the same size, but at different positions. We called this <strong>Adaptive Design<\/strong> and it is very useful for designing in multiple screen sizes.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iPad-Artboard-Status-Bar.mp4","bookmark_id":"sketch-ipad-adaptive-design"},{"id":"10099","section_id":"108","order":"4","title":"","subhead":"Navigation Bar","body":"<p>Copy the <strong>Navigation Bar group<\/strong> from the iPhone X Artboard and paste it to the top-left of the iPad Artboard. As we mentioned, some of the iPhone X element sizes are different, and this Navigation Bar is the one. What we need to do is to replace the iPhone X Navigation Bar Symbol to the other Navigation Bar Symbol from the iOS 11 template.<\/p><p>Select and <strong>right-click<\/strong> the Navigation Bar Library Symbol, hover to the <strong>Replace With &#x203A; iOS 11 &#x203A; Bars &#x203A; Navigation Bar<\/strong> and choose the &#x201C;<strong>Light Large Navigation Bar with Search<\/strong>&#x201D;. Right-click again on the new Navigation Bar and select the <strong>Set to Original Size<\/strong> at the last option of the menu. Then, move up the Font Resize icons and Night Mode icon to give them <strong>70px<\/strong> margin to the bottom of the Navigation Bar. You will notice the previous Overrides remains the same because it comes from the same Apple resources.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iPad-New-Navigation-Bar.mp4","bookmark_id":"sketch-ipad-navigation-bar"},{"id":"10100","section_id":"108","order":"5","title":"","subhead":"Unlink Symbol from Library","body":"<p>We don&rsquo;t need the translucent background on the Navigation Bar, but there&rsquo;s no way to hide it from the Overrides panel. We can unlink this Symbol and convert it to our document Local Symbol. It is not recommended to always unlink Symbol from its original Library, but if we want to control the Symbol design, this is the only way.<\/p><p><strong>Double-click<\/strong> on the Navigation Bar Symbol and you will see a dialog slide down. Click the <strong>Unlink from Library<\/strong> and the Navigation Bar Symbol will immediately convert to <strong>Local Symbol<\/strong>. In the meantime, Sketch will bring you to the current document <strong>Symbols Page<\/strong>. Now, you can edit the Symbol design as you like. From here, hover to the Background layer and click the <strong>Eye<\/strong> icon to hide this layer. Click the <strong>Return to Instance<\/strong> button on the top-left of the Canvas, and you will see that the Background is now hidden.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iPad-Unlink-from-Symbol.mp4","bookmark_id":"sketch-ipad-unlink-symbol-from-library"},{"id":"10101","section_id":"108","order":"6","title":"","subhead":"Resizing Constraints","body":"<p>Resize the whole Navigation Bar group to <strong>750px<\/strong> width. You will notice that three icons on the right are distorted. We can resolve this by using the <strong>Resizing Constraints<\/strong> features. Applying constraints to layers allows you to decide how they should behave when you resize the Symbol, Artboard or group. By doing this, we can achieve the <strong>Adaptive Design<\/strong>.<\/p><p>Let&rsquo;s <strong>undo<\/strong> the Navigation Bar group to its previous size. Then, select the three icons, and you will see <strong>Resizing Constraints<\/strong> in the Inspector panel. By default, no constraints are applied to your layers. On the left, you can define the edges on each side of your layer that should be pinned to. On the right, you can decide whether the size of the layer should stretch or remain at a fixed height and\/or width on resize. Below is the Resizing Constraint guideline that you might use it frequently in your design.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Resizing-Constraints.jpg","image_width":"1600","image_height":"2630","video":"","bookmark_id":"sketch-ipad-resizing-constraints"},{"id":"10102","section_id":"108","order":"7","title":"","subhead":"Fixed Width and Height","body":"<p>Let&rsquo;s enabled the <strong>Fix Width<\/strong> and <strong>Fix Height<\/strong> for the three icons so they won&rsquo;t be distorted when resizing the parent group. If you increase the width of the Navigation Bar group now, the icons are no longer distorted, but their position is off the place. Undo and select the three icons again and pin them to the <strong>right<\/strong>, so the distance does not change when you resize the parent group or the Artboard. Lastly, resize the <strong>Navigation Bar group<\/strong> to <strong>750px<\/strong> and align it with the <strong>center<\/strong> of the iPad Artboard.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iPad-Resizing-Constraints.mp4","bookmark_id":"sketch-ipad-fixed-width-and-height"},{"id":"10103","section_id":"108","order":"8","title":"Table View","subhead":"","body":"<p>Next, copy the four <strong>Bookmarks Row<\/strong> Symbol from the iPhone X Artboard to the iPad Artboard. Since we have more space on the iPad, we can stack the Bookmarks Row into <strong>two columns<\/strong> Table View. With this, you can view more content without keep scrolling the screen. Let&rsquo;s add more Table View to illustrate the idea better.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iPad-Table-View.mp4","bookmark_id":"sketch-ipad-table-view"},{"id":"10104","section_id":"108","order":"9","title":"iPad Tab Bar","subhead":"","body":"<p>The Tab Bar has some adjustment in iOS 11, but you will only see it in iPhone Landscape mode and on iPad. The brand new appearance of the Tab Bar is showing the <strong>icon and text side by side<\/strong>. This can save the space for contents when you are viewing iPhone in Landscape view. Also, it gives better accessibility when viewing your content on a large screen like the iPad.<\/p><p>Before we jump into the new iOS 11 Tab Bar, we still can use the <strong>standard Tab Bar<\/strong> which has the icon on top and the text at the bottom. We can&rsquo;t use the Tab Bar on iPhone X Artboard because it has the extra space below for the iPhone X Home Indicator. So let&rsquo;s insert a Tab Bar for iPad. You can search it with the keyword &#x201C;<strong>tab bar 5<\/strong>&#x201D; with <strong>Sketch Runner &#x203A; Insert<\/strong> tab then, choose the one with the name &#x201C;<strong>iOS 11 &#x203A; Bars\/Tabbar\/Light 5 Tabs<\/strong>&#x201D; and put it to the iPad Artboard. Increase the width to <strong>1024px<\/strong> and place it at the bottom center of the iPad Artboard. Now, you can start inserting the icons and text accordingly from the Overrides panel.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iPad-Tab-Bar-1.mp4","bookmark_id":"sketch-ipad-ipad-tab-bar"},{"id":"10105","section_id":"108","order":"10","title":"Final Touch","subhead":"","body":"<p>Currently, we don&rsquo;t have the iOS 11 template specially built for the iPad, but you can <a href=\"https:\/\/www.dropbox.com\/s\/davfdl1m32647fh\/2.Sketch-iOS-11-iPad-Tab-Bar.zip?dl=0\">download<\/a> the new iPad Tab Bar Sketch file and use it on the Bookmarks screen. We are going to release the UI Kit soon, stay tuned!<\/p><p>Once you&rsquo;ve downloaded, open the Sketch file and copy it to your iPad Artboard. Just replace the icons and text just like you did for the standard Tab Bar. Now, you have done the Design+Code iPad app Bookmarks screen! Keep it up!<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/iPad-Tab-Bar-2.mp4","bookmark_id":"sketch-ipad-final-touch"}]},{"id":"109","chapter_id":"2","order":"2","slug":"sketch-web","title":"Design for Web","caption":"Designing a Website from Scratch","body":"<p>Designing for the web is a complex topic because you might need to create for various screen sizes. The web design language is slightly different compared to design for iOS. So it&apos;s not recommended to copy your iPhone or iPad design for the website directly. There are a few things you will need to consider when designing for the web, which will be explained in this section.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-web.jpg","video":"https:\/\/player.vimeo.com\/external\/245991009.hd.mp4?s=928369dc425c69da79929ed024aab6c6e4c66c1b&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-web.zip","contents":[{"id":"10345","section_id":"109","order":"1","title":"Navigation Menu","subhead":"","body":"<p>The website doesn&apos;t have Tab Bar. A navigation menu is always <strong>on top of the screen<\/strong> and this is convention style and behavior adapted by users. Most importantly, we should design a <strong>easy-to-use<\/strong> and <strong>intuitive<\/strong> navigation menu for the users.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/DesignCode-Top-Navigation.jpg","image_width":"1600","image_height":"400","video":"","bookmark_id":"sketch-web-navigation-menu"},{"id":"10346","section_id":"109","order":"2","title":"Scrolling","subhead":"","body":"<p>Scrolling is conventional for websites too. People always worried about what if the user doesn&apos;t scroll their website and stop at the <strong>above the fold<\/strong>, but the <a href=\"https:\/\/www.lukew.com\/ff\/entry.asp?1946=\">research<\/a> results show that <a href=\"http:\/\/www.hugeinc.com\/ideas\/perspective\/everybody-scrolls\">everybody scrolls<\/a>. Scrolling is quite cool nowadays if you&rsquo;re doing it right. For example, one of the famous scrolling patterns, is the <strong>Parallax Scrolling<\/strong>, it&rsquo;s always used by Apple on their product details page. We are fond for the Parallax Scrolling and you can see it live on our <a href=\"https:\/\/designcode.io\">Design+Code website<\/a>.<\/p><blockquote><p>Scrolling is a continuation; clicking is a decision. &#x2014; Joshua Porter&#x200F;<\/p><\/blockquote>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Scrolling.mp4","bookmark_id":"sketch-web-scrolling"},{"id":"10347","section_id":"109","order":"3","title":"Typography","subhead":"","body":"<p>Another thing to take note is Typography because it is one of the most noticeable elements in your design. For iOS design, there is a typography rule like 17px for the body text, 34pt for the large title. The web is using a similar strategy, but the base body text is <strong>16px<\/strong>, this is easy for web development because of <strong>1em = 16px<\/strong>. You can learn more about Web Typography <a href=\"http:\/\/typecast.com\/blog\/a-more-modern-scale-for-web-typography\">here<\/a> and <a href=\"http:\/\/www.modularscale.com\/\">here<\/a>. There is no maximum size for the large title, and you can go crazy until 200px font size. There&rsquo;s some websites using the large title, and the results are fantastic!<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Modular-Scale.jpg","image_width":"1600","image_height":"868","video":"","bookmark_id":"sketch-web-typography"},{"id":"10348","section_id":"109","order":"4","title":"A Wild Wild West for Web","subhead":"","body":"<p>Apple has a Human Interface Guideline for iOS design, but there&rsquo;s not an actual standard guideline for Web. So we&rsquo;re free to use any techniques that have wow effects yet user-friendly. Primarily your design should provide a <strong>similar experience<\/strong>, regardless of the device they are using.<\/p><p>Enough talking, let&rsquo;s start designing the Design+Code landing page! You will need to <a href=\"https:\/\/www.dropbox.com\/s\/5t0jmuhu3mf6mn9\/2.Sketch-DesignForWeb.zip?dl=0\">download the assets<\/a> required to follow this tutorial.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-web-a-wild-wild-west-for-web"},{"id":"10349","section_id":"109","order":"5","title":"Grid System","subhead":"","body":"<p>Setting up a <strong>Grid System<\/strong> for your web design is a good practice and very helpful when you&apos;re designing for various screen sizes. It will help web developers to match your design. There are some commonly use Grid System you can refer to the web, from 8 columns up to 16 columns grid. If you&rsquo;re not sure which Grid System to use, you can stick to the <a href=\"https:\/\/960.gs\/\">960 Grid System<\/a> that enormously used on the web. Otherwise, you can go with the default desktop <strong>12 columns grid<\/strong> from the <a href=\"http:\/\/getbootstrap.com\/docs\/4.0\/layout\/grid\/\">Bootstrap Framework<\/a>. Ultimately, you can customize your own Grid System for your design, and there&rsquo;s no limitation to this.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Grid-System.jpg","image_width":"1600","image_height":"941","video":"","bookmark_id":"sketch-web-grid-system"},{"id":"10350","section_id":"109","order":"6","title":"","subhead":"Regular Grid &amp; Layout Grid","body":"<p>Let&rsquo;s create an Artboard in Sketch by pressing <strong>A<\/strong>. Choose <strong>Responsive Web<\/strong> from the preset drop-down menu and select the <strong>Desktop HD (1440 x 1024)<\/strong> as our Artboard for this tutorial. Select the Artboard, then go to the top-right of the Sketch app Toolbar, you will see the <strong>View<\/strong> drop-down button there and click on it. The <strong>Grid Settings<\/strong> is to set <strong>Regular Grid<\/strong> for the Artboard. Usually, we won&rsquo;t use Regular Grid because <strong>Layout Grid<\/strong> is a better option to apply in the Grid System.<\/p><p>Choose the <strong>Layout Settings<\/strong> and then, a modal will be slide down. You can define <strong>columns<\/strong> and <strong>rows<\/strong>. When grids are applied on the Artboard, any objects will snap to the grid when you moved it. You also can change the <strong>Colors<\/strong> of the grid and the <strong>Visuals<\/strong> of the grid to <strong>Fill Grid<\/strong> or <strong>Stroke Outline<\/strong>. Once you&rsquo;ve set up a Layout Grid, select the Artboard and click on the View in the Toolbar to choose <strong>Show Layout<\/strong> to view the Grids on your Artboard. Or, you can simply press <strong>Control L<\/strong> to toggle the Layout Grid.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Grid.mp4","bookmark_id":"sketch-web-regular-grid-layout-grid"},{"id":"10351","section_id":"109","order":"7","title":"","subhead":"Using Rulers to Customize Grids","body":"<p>We&rsquo;re using <strong>content width<\/strong> concept for the homepage Grid System. We have <strong>1000px<\/strong>, <strong>800px<\/strong>, <strong>640px<\/strong> and <strong>480px<\/strong> of content width. You can use <strong>Rulers<\/strong> to draw the guidelines and treat it as the custom grids to achieve the Grid System.<\/p><p>Let&rsquo;s draw four rectangle with the size of 1000px, 800px, 640px and 480px on the Artboard respectively. Then, align all with the <strong>center<\/strong> of the Artboard. Press <strong>Control R<\/strong> to activate the Rulers. Select the first 1000px rectangle and hover to the top of the Rulers bar. The guideline will be snap automatically to the edge of the rectangle, click on the top Rulers bar, and a guideline will be created. Repeat the same method to create guidelines for all the left and right edges of the rectangles. Now, you have a set of custom Grid System for your design, and we are going to use this guideline quite often in this tutorial.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Custom-Grid.mp4","bookmark_id":"sketch-web-using-rulers-to-customize-grids"},{"id":"10352","section_id":"109","order":"8","title":"Hero Title","subhead":"","body":"<p>There are Logo, Top Navigation Menu, Hero Title, iPhone X Mockup, Video Button, Stats and Background image in the Hero Section. You can get most of the assets from the <strong>assets folder<\/strong> that you have downloaded.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-web-hero-title"},{"id":"10353","section_id":"109","order":"9","title":"","subhead":"Top Navigation Menu","body":"<p>The navigation menu on the Design+Code website is relatively simple. We only have a <strong>logo<\/strong> on the top-left, <strong>Login<\/strong> and <strong>Pre-order<\/strong> text button on the top-right. The Design+Code logo serves as a back to homepage button too.<\/p><p>First, draw a rectangle by pressing <strong>R<\/strong>, set it to full width and the height to <strong>800px<\/strong>. We will use this rectangle as a container for the Hero Section.<\/p><p>Let&rsquo;s insert the <strong>Design+Code logo<\/strong> to the top-left of the Artboard and resize it to <strong>44 x 44px<\/strong>. Give it a margin of <strong>40px<\/strong> at its <strong>top<\/strong> and the <strong>left<\/strong>. Then on the right side, insert two texts &#x201C;<strong>Login<\/strong>&#x201D; and &#x201C;<strong>Pre-order<\/strong>&#x201D; by pressing <strong>T<\/strong>. Set both of the font size to <strong>20px SF Pro Display Medium<\/strong> and in <strong>white<\/strong>. Give <strong>40px<\/strong> right margin for Pre-order and also <strong>40px<\/strong> gap between Login and Pre-order. <strong>Vertical-center-align<\/strong> both of the text layer with the logo. You can draw a rectangle and use it as a bound for the logo and the two buttons, uncheck the <strong>Fills<\/strong> because we want it to be transparent. Group the logo, the two buttons and the bound, name it &#x201C;<strong>Top Navigation<\/strong>&#x201D;.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Top-Navigation.mp4","bookmark_id":"sketch-web-top-navigation-menu"},{"id":"10354","section_id":"109","order":"10","title":"","subhead":"Background Image and iPhone X Mockup","body":"<p>Copy and paste the <strong>background-1.jpg<\/strong> to the Artboard. Resize the background image width to <strong>1440px<\/strong> so that it is full width on the homepage. Then, copy another image <strong>iphone-x.png<\/strong> and paste above the background image and place it within the <strong>640px<\/strong> grid. You will notice that the background image height is taller than the Base layer. You can <strong>right-click<\/strong> the Base layer and set it as a <strong>Mask<\/strong>. Group all the Top Navigation, Background image, iPhone X mockup and the Mask and name it &#x201C;<strong>Hero Title<\/strong>&#x201D;.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Background-Image.mp4","bookmark_id":"sketch-web-background-image-and-iphone-x-mockup"},{"id":"10355","section_id":"109","order":"11","title":"","subhead":"Hero Text and Text Style","body":"<p>There is a text file that has contents for the hero section. Copy the text &#x201C;<strong>Learn to design &amp; code for iOS 11<\/strong>&#x201D; and paste in the Hero Title group within the 640px grid. Set the font size to <strong>64px SF Pro Display Semibold in white color<\/strong>. Resize the width of the text so that it won&rsquo;t overlap with the iPhone X mockup. The text is too flat in the background, and we can add <strong>Shadows<\/strong> to give the text more depth. Select the text layer, go to Inspector panel, and you can find Shadows in one of the options below. Click on the <strong>+<\/strong> icon and change the color to <strong>#5E37C4<\/strong> with <strong>100% opacity<\/strong>. Also, change the values to <strong>X:0, Y:20, Blur:40, Spread:0<\/strong>. Now, the Hero Text stands out more than the previous style.<\/p><p>We will use this header style for other sections too. To keep the style consistency, we can create a <strong>Text Style<\/strong>. Once the Text Style is set, you can apply it to other text layers to get the same style across the document. Let&rsquo;s say you have multiple text layer are using the same Text Style, and you change one of its properties. You can update them with ease by just clicking the <strong>Refresh<\/strong> icon beside the Text Style. Let&rsquo;s select the text layer, go to Inspector panel and click the <strong>No Text Style<\/strong> drop-down, choose the <strong>Create New Text Style<\/strong> from the menu. Just name it as &#x201C;<strong>H1<\/strong>&#x201D;.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Text-Style.mp4","bookmark_id":"sketch-web-hero-text-and-text-style"},{"id":"10356","section_id":"109","order":"12","title":"","subhead":"Stats","body":"<p>Next, is the Design+Code <strong>statistics<\/strong>. We can attract people by placing those figures above the fold. All of these Stats are <strong>real data<\/strong> from Design+Code! You can copy the stats text in the assets folder <strong>1. Hero Title &#x203A; content<\/strong> text file. There is three stats content, and each of them contains three text layer. Let&rsquo;s do the first stat, below is the font value for each of them:<\/p><ol>\t<li><strong>Watch<\/strong>: 15px, SF Pro Text Medium, White with 60% opacity<\/li>\t<li><strong>44 hours<\/strong>: 30px, SF Pro Display Bold, White<\/li>\t<li><strong>of video lessons<\/strong>: 15px, SF Pro Text Medium, White<\/li><\/ol><p>Stack these three layers from top to bottom and align left to each other. Next, draw a line with <strong>130px of width<\/strong>, <strong>3px of height<\/strong> , <strong>3px of Radius<\/strong> and place it under the &#x201C;<strong>of video lessons<\/strong>&#x201D; text layer with an <strong>8px<\/strong> gap. Change the color to gradient by clicking on the <strong>Fills<\/strong> in Inspector panel and choose the second option: <strong>Linear Gradient<\/strong>. Zoom in the line and move the top dot to the left, bottom dot to the right, with this, the gradients will appear from left to right. Set the <strong>left<\/strong> gradient color to <strong>#C86DD7<\/strong> and the <strong>right<\/strong> color to <strong>#E95054<\/strong>. Group the three text layer and the line and name it &#x201C;<strong>Stat<\/strong>&#x201D;. Place them within the 640px grid with a margin-bottom of <strong>40px<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Stat.mp4","bookmark_id":"sketch-web-stats"},{"id":"10357","section_id":"109","order":"13","title":"","subhead":"Convert Stat to Symbol","body":"<p>We can convert the Stat group to <strong>Symbol<\/strong> because it is going to be used for other statistics content too. Select the Stat group and click on <strong>Create Symbol<\/strong> in the Toolbar. Now, you can duplicate the Stat Symbol and put in the text accordingly.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Stat-2.mp4","bookmark_id":"sketch-web-convert-stat-to-symbol"},{"id":"10358","section_id":"109","order":"14","title":"","subhead":"How to Choose Gradient Colors","body":"<p>If you cannot decide on what gradients to apply, you can try to decide on one color first. Then, change the value of <strong>H<\/strong>, which is <strong>Hue<\/strong> in the <strong>Color Picker<\/strong>. By default, the Color Picker is in <strong>RGB<\/strong> values, but we prefer to set the color with <strong>HSB<\/strong>. You can toggle between the RGB and HSB by hover to the RGB\/HSB label, click on it and it will toggle accordingly. Let&rsquo;s say you have decided the first color with <strong>#C86DD7<\/strong>, then select another gradient dot and set it as <strong>#C86DD7<\/strong> too. Now, you can <strong>increase or decrease<\/strong> the <strong>Hue<\/strong> value to find the perfect gradient color that you like. This is our favorite tips for choosing gradient colors, or you can go to the <a href=\"https:\/\/www.grabient.com\/\" title=\"Grabient\">Grabient<\/a> website to use the gradient color you want.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Gradient.mp4","bookmark_id":"sketch-web-how-to-choose-gradient-colors"},{"id":"10359","section_id":"109","order":"15","title":"Hero Body","subhead":"","body":"<p>In the Hero Body section have a short description, a call-to-action button, and other discount info. This section will place within the <strong>480px<\/strong> grid.<\/p><p>Let&rsquo;s increase the height of the Artboard first. Then, insert the <strong>image-book.svg<\/strong> and <strong>image-book-shadow.png<\/strong> from the asset folder <strong>2. Hero Body<\/strong>. Place the Book image in the center of the Artboard with a <strong>120px<\/strong> top margin. Then, put the Book Shadow behind the Book and adjust accordingly.<\/p><p>Next, insert the text which you can get from the assets folder. Below are the Typeface, Weight, Font Size and Color for each of them:<\/p><ol>\t<li><strong>An interactive&#x2026;<\/strong>: 32px, SF Pro Display Semibold, Black, Center Align<\/li>\t<li><strong>Early access<\/strong> and <strong>Launch 11.14<\/strong>: 24px, SF Pro Display Regular, #888888, Center Align<\/li>\t<li><strong>$12.99&#x2026;<\/strong> and <strong>Plus, get 20% off&#x2026;<\/strong>: 20px, SF Pro Display Regular, #888888, Center Align<\/li><\/ol><p>For &#x201C;<strong>An interactive&#x2026;<\/strong>&#x201D;, &#x201C;<strong>$12.99&#x2026;<\/strong>&#x201D; and &#x201C;<strong>Plus, get 20% off&#x2026;<\/strong>&#x201D;, resize their text container width to <strong>480px<\/strong>, so that it is easy to snap within the 480px grid. For &#x201C;<strong>Early access<\/strong>&#x201D; and &#x201C;<strong>Launch 11.14<\/strong>&#x201D;, set their text container width to <strong>240px<\/strong>, which is half compared to other text layers then, arrange them side by side. Give a <strong>24px<\/strong> top and bottom margins for all of these text layers.<\/p><p>Strike a line for the text &#x201C;<strong>$12.99\/month<\/strong>&#x201D; and &#x201C;<strong>$150<\/strong>&#x201D; because this is the future pricing for the Design+Code after the pre-order period. Select the text and go to Inspector panel, click on the <strong>Option<\/strong> and choose the fourth option which is the <strong>Strikeline icon<\/strong>. We also bold the &#x201C;<strong>Sketch<\/strong>&#x201D;, &#x201C;<strong>Angle<\/strong>&#x201D; and &#x201C;<strong>Paypal<\/strong>&#x201D; text because it will be a clickable link on the actual website.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Book-2.mp4","bookmark_id":"sketch-web-hero-body"},{"id":"10360","section_id":"109","order":"16","title":"","subhead":"Call-to-Action Button","body":"<p>The last thing for Hero Body section is the call-to-action button. Insert the text &#x201C;<strong>Pre-order for $50<\/strong>&#x201D; and set its font to <strong>24px SF Pro Display Semibold white<\/strong> and <strong>center align<\/strong>. Draw a rectangle with <strong>60px height<\/strong> and <strong>30px of radius<\/strong>. <strong>Vertical-align<\/strong> the text in the middle of the rectangle and increase the rectangle width so that the text has <strong>30px<\/strong> margins on the left and right.<\/p><p>Let&rsquo;s give the button a <strong>Linear Gradient<\/strong>. Move the top dot to the button top-left and the bottom dot to bottom-right. The color on the left is <strong>#9C6FFF<\/strong> and on the right is <strong>#5334F5<\/strong>. Add a <strong>Shadow<\/strong> and set to <strong>black color with 15% opacity, X:0, Y:10, Blur:20 and Spread:0<\/strong>. Now the call-to-action button is more prominent. Lastly, group the rectangle and the &#x201C;Pre-order for $50&#x201D; text and name it &#x201C;<strong>CTA<\/strong>&#x201D;, an abbreviation for &#x201C;Call-to-Action&#x201D;. Then, align this button with the center of the Artboard and place it in between the &#x201C;Early Access&#x201D; and &#x201C;$12.90&#x2026;&#x201D; text. Group all the elements here and name it &#x201C;<strong>Hero Body<\/strong>&#x201D;.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Call-to-Action-Button.mp4","bookmark_id":"sketch-web-call-to-action-button"},{"id":"10361","section_id":"109","order":"17","title":"Demo Section","subhead":"","body":"<p>Next is the Demo section. In this part, we have the video demonstration of the Design+Code iOS app and a few reasons of why people should purchase the book. Since this is a Sketch mockup, we can&rsquo;t insert a video file into Sketch, but what we can do is add an iPhone X mockup of the app.<\/p><p>Let&rsquo;s draw a full-width rectangle with <strong>700px<\/strong> of height and give a <strong>120px<\/strong> spacing away from the Hero Body section. Insert the &#x201C;<strong>background-2.jpg<\/strong>&#x201D; image from the &#x201C;<strong>3. Demo<\/strong>&#x201D; folder to the top-right of the rectangle and resize it to <strong>1440px<\/strong> width. Select both the rectangle and the image and click on the <strong>Mask<\/strong> icon on the Toolbar. Following by insert a title in this section which is &#x201C;<strong>Design, code this app.<\/strong>&#x201D; and apply the <strong>H1 Text Style<\/strong> for it. Align the title to the center of the Artboard and a <strong>80px<\/strong> of margin-top.<\/p><p>Next, copy the &#x201C;<strong>iphone-x-big.png<\/strong>&#x201D; mockup and paste on top of the section background image. Align it with the center of the Artboard and leave <strong>40px<\/strong> of margin-top to the title.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Demo-Title.mp4","bookmark_id":"sketch-web-demo-section"},{"id":"10362","section_id":"109","order":"18","title":"","subhead":"Demo Body","body":"<p>Below the iPhone X frame is the placement of contents which will be sitting inside the <strong>640px<\/strong> grid. Insert the first content from the assets folder &#x201C;<strong>3. Demo &#x203A; content<\/strong>&#x201D;. For the title, set it as <strong>20px, SF Pro Display Bold, #5856d6<\/strong> and change the text width to <strong>160px<\/strong>. For the description font, set it to <strong>24px, SF Pro Display Regular, black color<\/strong> and change the width to <strong>448px<\/strong>. For the &#x201C;<strong>Why Pre-order?<\/strong>&#x201D;, give a <strong>32px margin right<\/strong> to the description. Select both of this two text layer and click Align Top, leave a <strong>40px<\/strong> gap between the iPhone X frame. Lastly, group both of the text layer and name it &#x201C;<strong>Demo Reasons<\/strong>&#x201D;. Then, you can repeat the same workflow for rest of the contents by duplicating the Demo Reasons group. Once you finished, just group them all as &#x201C;<strong>Demo Body<\/strong>&#x201D;.<\/p><p>Cool, now we have finished the Hero Section, Call-to-Action Section and Demo Section. In the next Design for Web Part 2, we will cover <strong>Chapter Section<\/strong>, <strong>Benefits Section<\/strong> and the <strong>Footer<\/strong>. By then, you will have a final design of the Design+Code landing page in Sketch!<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Demo-Body.mp4","bookmark_id":"sketch-web-demo-body"}]},{"id":"110","chapter_id":"2","order":"2","slug":"sketch-web-2","title":"Design for Web Part 2","caption":"Designing a Website from Scratch","body":"<p>In Design for Web Part 1, you have learned about the considerations when designing for the Web in regards to typography and grid system. You have completed the design of the Hero, Call-to-Action and Demo sections, and learn about how to choose beautiful gradients. In Part 2, we are going to continue and finish up the Design+Code landing page. We will design the <strong>Chapter<\/strong>, <strong>Benefits<\/strong> and the <strong>Footer<\/strong> sections. You will need to <a href=\"https:\/\/www.dropbox.com\/s\/5t0jmuhu3mf6mn9\/2.Sketch-DesignForWeb.zip?dl=0\">download the assets<\/a> to follow this tutorial.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-web-2.jpg","video":"https:\/\/player.vimeo.com\/external\/246092009.hd.mp4?s=679bc9aecfa2965dc3d20e75cd44be337ae1a8e9&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-web-2.zip","contents":[{"id":"10331","section_id":"110","order":"1","title":"Chapter Section","subhead":"","body":"<p>In the Chapter section, the background image size is same as the Demo section. We can copy the Demo group layer and paste it into the Demo Body with a <strong>120px<\/strong> of top-margin. Then, select the background image layer, right-click it and choose <strong>Replace Image<\/strong>. Now you can select the image in the assets folder &#x201C;<strong>4. Chapters &#x203A; background-3.jpg<\/strong>&#x201D; and it will be instantly replaced. Change the title accordingly from the content text file. Then, place the &#x201C;<strong>macbook.png<\/strong>&#x201D; image below the title with a <strong>40px<\/strong> of the top margin.<\/p><p>The Chapter contents will be placed on the <strong>640px grid<\/strong>. You can copy the content from the assets folder. Below are the text layer properties for each of them:<\/p><ol>\t<li><strong>Chapter<\/strong>: 20px, SF Pro Display Semibold, #5856d6<\/li>\t<li><strong>Chapter Header<\/strong>: 32px, SF Pro Display Bold, Black<\/li>\t<li><strong>Each Chapters Title<\/strong>: 24px, SF Pro Display Regular, Black<\/li><\/ol>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Chapter-Title.mp4","bookmark_id":"sketch-web-2-chapter-section"},{"id":"10332","section_id":"110","order":"2","title":"","subhead":"Chapter Body","body":"<p>Also set all the text layer width to <strong>300px<\/strong>, so that you had two columns of Chapter contents side by side with a <strong>40px<\/strong> gap. Once you have finished entering the text, group each of the chapter contents in a group called &#x201C;<strong>Chapter<\/strong>&#x201D;, and then group all the four Chapter group and name it &#x201C;<strong>Chapter Body<\/strong>&#x201D;.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Chapter-Body.mp4","bookmark_id":"sketch-web-2-chapter-body"},{"id":"10333","section_id":"110","order":"3","title":"Sample Pages","subhead":"","body":"<p>Below the Chapter section, we will put some sample pages in card design. This will let people have a quick look at what kind of content we&rsquo;re providing to readers.<\/p><p>Users can interact this section by <strong>scrolling horizontally<\/strong>. So we are going to give this section a full-width design. Draw a <strong>1px<\/strong> height of full-width line, place it under the Chapter Body with <strong>120px<\/strong> gap and color it to <strong>#f0f3f5<\/strong>. Then, insert the title &#x201C;<strong>Sample Pages<\/strong>&#x201D; below the line with <strong>40px of margin left and top<\/strong>. Set the font to <strong>20px, SF Pro Display Medium, #8196a4<\/strong>.<\/p><p>Let&rsquo;s draw a <strong>300 x 240px<\/strong> rectangle and name it &#x201C;<strong>Base<\/strong>&#x201D;. Set the rectangle <strong>Radius to 14px<\/strong> and place it under the title with <strong>16px<\/strong> of gap. Copy and paste the &#x201C;<strong>ios11-iphone-x.jpg<\/strong>&#x201D; image from the assets folder and resize the height to <strong>240px<\/strong> then, align it with the center of the card. Select both of the card and image then click on the <strong>Mask<\/strong> on the Toolbar. Now, we can insert the title and description, these content can be found in the &#x201C;<strong>5. Sample Pages<\/strong>&#x201D; folder. For the title, resize its width to <strong>268px<\/strong> then, set the font to <strong>32px, SF Pro Display Semibold, White<\/strong>. Since the text will be on top of the image, we should set a <strong>Shadow<\/strong> for it so that way, it will be more readable. Select the text, add the Shadows in the Inspector panel and leave the color as default but set <strong>X:0, Y:10, Blur:20 and Spread:0<\/strong>. For the description, resize the width same as the title then, set the font to <strong>17px, SF Pro Text Regular, White<\/strong>. Apply the same Shadow as the title. Align the text layers in the card, so they have <strong>16px<\/strong> of margins around the card. Group the card and the two text layers then name it &#x201C;<strong>Sample Card<\/strong>&#x201D;.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Sample-Card.mp4","bookmark_id":"sketch-web-2-sample-pages"},{"id":"10334","section_id":"110","order":"4","title":"","subhead":"Convert the Sample Card to a Symbol","body":"<p>The next two cards content will be using the same design as the Sample Card. It&rsquo;s good to convert it to a Symbol for reusability. Before converting it to a Symbol, rearrange the layers inside the Sample Card. Then, select it and give a Shadow of <strong>25% opacity of Black, X:0, Y:10, Blur:20 and Spread:0<\/strong> so that it won&rsquo;t look very flat. Then, convert it to a Symbol by clicking the <strong>Create Symbol<\/strong> icon on the Toolbar. Duplicate two Symbol to the left with a <strong>40px<\/strong> margin. Now, you can insert the contents accordingly. Lastly, group the line, the title and the three cards and name it &#x201C;<strong>Sample Pages<\/strong>&#x201D;.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Sample-Pages.mp4","bookmark_id":"sketch-web-2-convert-the-sample-card-to-a-symbol"},{"id":"10335","section_id":"110","order":"5","title":"Benefits Section","subhead":"","body":"<p>Next, it will be the benefits section which will contain the number of readers and some testimonials from them. For the background and the title, the workflow is the same as how we did in Chapter Section. Copy the Chapter Section background then, we can replace the image and text accordingly. You can get the content from the &#x201C;<strong>6. Benefits Title<\/strong>&#x201D; folder.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Benefits-Title.mp4","bookmark_id":"sketch-web-2-benefits-section"},{"id":"10336","section_id":"110","order":"6","title":"","subhead":"Companies Logo","body":"<p>Insert the subtitle &#x201C;<strong>are learning from Design+Code<\/strong>&#x201D;, set the font to <strong>24px, SF Pro Display Regular, 80% White<\/strong> and center-align it below the title with a <strong>24px<\/strong> gap. Then, insert the five companies logo: Facebook, Google, Apple, Realm and Amazon within the 640px grid and vertical-align them below the subtitle with a <strong>24px<\/strong> gap. You can place one of the logos on the right edge of the 640px grid and another logo at the left edge. Then, select all five logos and press <strong>Distribute Horizontally<\/strong> so that all the five logos will be arranged properly within the 640px grid. Now, group them all and name it &#x201C;<strong>Companies<\/strong>&#x201D;.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Benefits-Companies-Logo.mp4","bookmark_id":"sketch-web-2-companies-logo"},{"id":"10337","section_id":"110","order":"7","title":"","subhead":"Testimonial Card","body":"<p>We are going to insert some testimonial cards below the companies logo. First, draw a <strong>300 x 240px<\/strong> rectangle with <strong>14px Radius<\/strong> in <strong>White<\/strong> color. Place it under the Companies group with a <strong>40px<\/strong> gap. Then, add a Shadow to it, the values are <strong>25% of Black opacity, X:0, Y:10, Blur:20 and Spread:0<\/strong>. Then, copy and paste the &#x201C;<strong>image-quote-begin.svg<\/strong>&#x201D; and &#x201C;<strong>image-quote-end.svg<\/strong>&#x201D; to the card. Move the &#x201C;image-quote-begin.svg&#x201D; to the top-left of the card with <strong>16px<\/strong> of margin top and left. Insert the testimonial text which you can get it from the &#x201C;<strong>6. Benefits Title<\/strong>&#x201D; folder and set the font to <strong>20px, SF Pro Display Regular, Black<\/strong>. Resize the text width to <strong>237px<\/strong> and place it next to the &#x201C;image-quote-begin.svg&#x201D; with <strong>8px<\/strong> gap and <strong>16px<\/strong> of top margin. Move the &#x201C;image-quote-end.svg&#x201D; icon to the end of the quote.<\/p><p>Then, draw a <strong>24 x 24px<\/strong> round shape, select it and go to Inspector panel and click <strong>Fills &#x203A; Pattern Fill<\/strong>. Drag and drop the &#x201C;<strong>avatar-jean-marc.jpg<\/strong>&#x201D; to the Pattern Fills and the round shape will become an avatar image. Now, insert the name and the job title. For the name, set the font to <strong>16px, SF Pro Text Semibold, Black<\/strong>. For the job title, set the font to <strong>14px, SF Pro Text Regular, #888888<\/strong>. Leave a <strong>4px<\/strong> of gap between the name and the job title, and <strong>8px<\/strong> of margin left to the avatar image. Increase the width of these two text layers to <strong>237px<\/strong>. Select the avatar image and the two text layers and move them until they have <strong>16px<\/strong> of margin around them.<\/p><p>Group all the elements and name it &#x201C;<strong>Testimonial Card<\/strong>&#x201D;. Now, you can arrange the layers in the group then convert it to a Symbol. Copy one card to the left with a <strong>40px<\/strong> gap, two cards to bottom and also with a <strong>40px<\/strong> gap too then start inserting the contents accordingly.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Testimonial-Card.mp4","bookmark_id":"sketch-web-2-testimonial-card"},{"id":"10338","section_id":"110","order":"8","title":"","subhead":"More Button","body":"<p>There will have more testimonial cards below, so we need to have a More button to let user expand and view all the testimonials. Copy the &#x201C;<strong>Pre-order for $50<\/strong>&#x201D; call-to-action button and change the label to &#x201C;<strong>More<\/strong>&#x201D;. Insert the <strong>Plus icon<\/strong> at the left of the label. And then <strong>center align<\/strong> it and place it with a <strong>40px<\/strong> of margin-bottom in the section.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-More-Button.mp4","bookmark_id":"sketch-web-2-more-button"},{"id":"10339","section_id":"110","order":"9","title":"","subhead":"Benefit Card","body":"<p>Insert the &#x201C;<strong>benefit-video.svg<\/strong>&#x201D; from the &#x201C;<strong>7. Benefits Body<\/strong>&#x201D; folder and resize it to <strong>72 x 72px<\/strong> then, convert it to a Symbol. Insert the text from the content file and below are the font properties for each of them:<\/p><ol>\t<li><strong>Watch and Follow<\/strong>: 15px, SF Pro Text Semibold, #888888<\/li>\t<li><strong>44 hours of videos<\/strong>: 24px, SF Pro Display Semibold, Black<\/li>\t<li><strong>Each section is&#x2026;<\/strong>: 17px, SF Pro Text Regular, #333333<\/li><\/ol><p>Left aligns all three text layers, 4px of gap to each other and resize the width to <strong>308px<\/strong>. You can group the icon and three text layers as &#x201C;<strong>Benefit Card<\/strong>&#x201D; then, convert it to a Symbol. Place the Symbol under the Benefit background with <strong>120px<\/strong> of gap and move it to the left edge of the 800px grid. Duplicate once to the right with a <strong>40px<\/strong> gap and four more to the bottom with 40px margin too. Now you can complete the contents respectively. All the icons you insert will need to resize to 72 x 72px and convert to Symbols so that you can replace the icon in the Benefit Card symbol.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Benefit-Body.mp4","bookmark_id":"sketch-web-2-benefit-card"},{"id":"10340","section_id":"110","order":"10","title":"","subhead":"Ready to Start","body":"<p>By having a call-to-action button, it gives the user an option to click the button to purchase instead of scrolling back to the top to find the button. Insert the text &#x201C;<strong>Ready to start?<\/strong>&#x201D; and set the font to <strong>64px, SF Pro Display Semibold, Black<\/strong>. Center align the text place under those Benefit Card with 80px of top margin. Then, for the text &#x201C;<strong>Get the book and&#x2026;<\/strong>&#x201D;, set it to <strong>32px, SF Pro Display Medium, #888888<\/strong>. Resize the text width to <strong>480px<\/strong>, center align the text layer and place it below the &#x201C;Ready to start?&#x201D; with <strong>16px<\/strong> of gap. Then, copy and paste the same call-to-action button to just below this two text layers with <strong>16px<\/strong> top margin. Group the two text layers and the button as &#x201C;<strong>Ready to Start<\/strong>&#x201D;, then select all the Benefit Card symbol and &#x201C;Ready to Start&#x201D; and group them all to &#x201C;<strong>Benefit Body<\/strong>&#x201D;.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Ready-To-Start.mp4","bookmark_id":"sketch-web-2-ready-to-start"},{"id":"10341","section_id":"110","order":"11","title":"Footer","subhead":"","body":"<p>Finally, we have come to the footer. In our footer, we will have a tweet button, links to other pages and privacy policy text. First, draw a full-width rectangle, set its Fills color to <strong>#f0f3f5<\/strong> and place it under the Benefit Body with 120px gap. Next, insert the text from the content file in the &#x201C;<strong>8. Footer<\/strong>&#x201D; folder. Set the font to <strong>24px, SF Pro Display Semibold, #8196a4<\/strong> and resize the width to <strong>480px<\/strong>. Center align and give this text layer an <strong>80px<\/strong> of top margin. Then, we can copy the More button and place it under the text. Replace the Plus icon with the &#x201C;<strong>icon-twitter.svg<\/strong>&#x201D; and vertical center align it with the button. Change the label to &quot;<strong>Tweet<\/strong>&quot; and make sure its left margin is <strong>16px<\/strong>, right margin is <strong>30px<\/strong>. Place the Tweet button below the first text layer with <strong>16px<\/strong> of gap. We want to have the similar style as what we did for &#x201C;Ready to Start&#x201D; section, so we set the text to align center, and also align the Tweet button to the center. Now, you can change the left gradient color to <strong>#2457f5<\/strong> and the right gradient color to <strong>#65d1f9<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Tweet.mp4","bookmark_id":"sketch-web-2-footer"},{"id":"10342","section_id":"110","order":"12","title":"","subhead":"Footer Content","body":"<p>Once we have inserted the remaining contents, the landing page design will be complete. First, insert the first text <strong>Design+Code is a&#x2026;<\/strong>, set the font to <strong>22px<\/strong>, <strong>SF Pro Display Regular<\/strong>, <strong>#8196a4<\/strong>, align the text to the left and resize the text width to <strong>480px<\/strong>. Align it to the center and leave a <strong>40px<\/strong> gap from the Tweet button. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Footer-1.mp4","bookmark_id":"sketch-web-2-footer-content"},{"id":"10343","section_id":"110","order":"13","title":"","subhead":"Footer Links","body":"<p>Then for the links, set the font to <strong>20px<\/strong>, <strong>SF Pro Display Semibold<\/strong>, <strong>#5856d6<\/strong>. Each of the links will have <strong>16px<\/strong> of margin bottom. We can separate it into two columns, so each column we set its width to <strong>220px<\/strong>. <\/p><p>For the last text <strong>All backgrounds made in&#x2026;<\/strong>, the font is <strong>15px<\/strong>, <strong>SF Pro Text Regular<\/strong>, <strong>#888888<\/strong> and left align the text. Place it under the links with <strong>40px<\/strong> of gap.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Footer-2.mp4","bookmark_id":"sketch-web-2-footer-links"},{"id":"10344","section_id":"110","order":"14","title":"Conclusion","subhead":"","body":"<p>After you&apos;ve inserted all the contents, increase the height of the background to leave a <strong>40px<\/strong> margin-bottom to the last text layer. Then, reduce the Artboard height by clicking <strong>Resize to Fit<\/strong> in the Inspector panel so there won&rsquo;t have any useless space. Well done! You have now finished the Design+Code landing page!<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web-Footer-3.mp4","bookmark_id":"sketch-web-2-conclusion"}]},{"id":"66","chapter_id":"2","order":"3","slug":"sketch-tricks","title":"Tricks and Shortcuts","caption":"Boost your productivity in Sketch","body":"<p>Keyboard shortcuts play a major part in Sketch to boost your productivity while designing. You can save a few seconds per action, which really adds up as you perform them hundreds of times per day.<\/p><p>Here are all the 80+ Keyboard Shortcuts, excluding the contextual shortcuts such as those in the Inspector and Layers List. Download the <a href=\"http:\/\/cl.ly\/0l2q3D0a1b2j\">Apple Keyboard<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-tricks.jpg","video":"https:\/\/player.vimeo.com\/external\/243235168.hd.mp4?s=d73adea657eae5e8636b2484a676951d2ac056b5&profile_id=175","subtitles":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-tricks.vtt","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-tricks.zip","contents":[{"id":"11943","section_id":"66","order":"1","title":"Math in Field","subhead":"","body":"<p>When you&rsquo;re working with several pixel densities (1x, 2x, 3x), you need to be able to quickly and easily convert the units. In Sketch, not only can you edit the position and size values by using the <strong>Up<\/strong> and <strong>Down<\/strong> arrow keys, but you can also add, subtract, multiply and divide the numbers. With this technique, you can easily convert from 1x to 2x by simply multiplying the numbers by 2.<\/p><p>Additionally, you can use percentages. So if you put 100% in the Width field, the shape would resize to the full width of the Artboard, or the total width of the Group that it&rsquo;s in.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-Inspector.mp4","bookmark_id":"sketch-tricks-math-in-field"},{"id":"11944","section_id":"66","order":"2","title":"Alt Tab Focusing","subhead":"","body":"<p>If you select a layer and press <strong>Alt Tab<\/strong>, it&apos;ll focus on the first property. As you press again, it&apos;ll switch to the next one.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-AltTab.mp4","bookmark_id":"sketch-tricks-alt-tab-focusing"},{"id":"11945","section_id":"66","order":"3","title":"Scale Tool","subhead":"","body":"<p>One of my favorite tools in Sketch is the Scale tool (<strong>Cmd K<\/strong>). Note that this isn&rsquo;t the same as resizing, since it actually scales every property: Size, Radius, Border, Shadow and Inner Shadow. For instance, a 1 px border scaled at 200% will be 2 px. By only resizing, it&rsquo;ll remain 1 px. This will be indispensable for converting <strong>@1x<\/strong> UI Kits to <strong>@2x<\/strong> or <strong>@3x<\/strong>, as it even works with Artboards.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-tricks-scale-tool"},{"id":"11946","section_id":"66","order":"4","title":"","subhead":"Scale Tip","body":"<p><strong>Tip<\/strong>: In general, scaling up yield better results than scaling down, since it won&rsquo;t mess with your pixel perfection. For example, scaling down a 15 x 15 square will give 7.5 x 7.5. Decimals in your Position or Size will create blurry shapes. Use <strong>Show Pixels<\/strong> (Ctrl P) to determine. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-tricks-scale-tip"},{"id":"11947","section_id":"66","order":"5","title":"Distances","subhead":"","body":"<p>Once created, press <strong>Alt<\/strong> to show distances between elements. When designing, distances are crucial to ensuring that your spacing are comfortable and consistent. For example, if you use <strong>16 pt<\/strong> between sections of your design, try to keep using the same distance everywhere else.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-Distances.mp4","bookmark_id":"sketch-tricks-distances"},{"id":"11948","section_id":"66","order":"6","title":"Insert Shape","subhead":"","body":"<p>Inserting a shape is one of the tasks that you&rsquo;ll perform hundreds of times a day. Using these shortcuts will make your experience less frustrating and more automatic. It will become a reflex. Over time, you will stop thinking about it and just focus on being creative.<\/p><p><strong>R<\/strong>: Rectangle<\/p><p><strong>O<\/strong>: Oval<\/p><p><strong>U<\/strong>: Rounded Rectangle<\/p><p><strong>L<\/strong>: Line<\/p><p><strong>T<\/strong>: Text<\/p><p><strong>V<\/strong>: Vector<\/p><p><strong>A<\/strong>: Artboard<\/p><p><strong>S<\/strong>: Slice<\/p><p><strong>P<\/strong>: Pencil<\/p><p><strong>Hold Shift<\/strong>: Keeps aspect ratio<\/p><p><strong>Hold Alt<\/strong>: Draw shape from center<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Learn-InsertShape.jpg","image_width":"1200","image_height":"676","video":"","bookmark_id":"sketch-tricks-insert-shape"},{"id":"11949","section_id":"66","order":"7","title":"","subhead":"Smart Guides Before","body":"<p>Before you start drawing the shape, but after you&rsquo;re ready to insert, you can use Smart Guides to increase precision. For example, you can press <strong>R<\/strong> to insert a <strong>Rectangle<\/strong> and align from top, center or bottom. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-Insert.mp4","bookmark_id":"sketch-tricks-smart-guides-before"},{"id":"11950","section_id":"66","order":"8","title":"","subhead":"Keep Aspect Ratio","body":"<p>When inserting or resizing a shape, <strong>holding Shift<\/strong> will allow you to have a perfect circle or square. But once the shape is created and you want to resize it, you can keep the same aspect ratio by holding Shift.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-tricks-keep-aspect-ratio"},{"id":"11951","section_id":"66","order":"9","title":"Editing Shapes","subhead":"","body":"<p>With a layer selected, you can do the following shortcuts.<\/p><p><strong>1 to 0<\/strong>: 1 represents 10% opacity, 0 represents 100% opacity. <\/p><p><strong>F<\/strong>: Toggle Fill.<\/p><p><strong>Ctrl C<\/strong>: Pick color. The Eyedropper tool can be used outside of the app.<\/p><p><strong>Double-click or Enter<\/strong> (not Grouped): Edit Mode.<\/p><p><strong>Double-Click<\/strong> (Grouped): Select one level deeper.<\/p><p><strong>&#x2318; Click<\/strong>: Select any layer regardless of Groups.<\/p><p><strong>&#x2318; Shift T<\/strong>: Transform<\/p><p><strong>&#x2318; Shift R<\/strong>: Rotate<\/p><p><strong>&#x2318; Shift L<\/strong>: Lock \/ unlock layer<\/p><p><strong>&#x2318; Shift H<\/strong>: Hide \/ show layer<\/p><p><strong>&#x2318; Shift E<\/strong>: Export<\/p><p><strong>Esc<\/strong>: Deselect \/ Select parent Artboard or Group.<\/p><p><strong>Space Drag<\/strong>: Move around canvas<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-EditingShapes.jpeg","image_width":"1350","image_height":"1004","video":"","bookmark_id":"sketch-tricks-editing-shapes"},{"id":"11952","section_id":"66","order":"10","title":"Multiple Shapes","subhead":"","body":"<p>When you have multiple shapes selected, you can use these shortcuts. <\/p><p><strong>Alt &#x2318; U<\/strong>: Union<\/p><p><strong>Alt &#x2318; S<\/strong>: Subtract<\/p><p><strong>Alt &#x2318; I<\/strong>: Intersect<\/p><p><strong>Alt &#x2318; X<\/strong>: Difference<\/p><p><strong>Ctrl &#x2318; M<\/strong>: Use as Mask<\/p><p><strong>&#x2318; G<\/strong>: Group<\/p><p><strong>Shift &#x2318; G<\/strong>: Ungroup<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-tricks-multiple-shapes"},{"id":"11953","section_id":"66","order":"11","title":"Editing Points","subhead":"","body":"<p>Once you&rsquo;re in <strong>Edit<\/strong> mode, you can apply a number of shortcuts.<\/p><p><strong>1<\/strong>: Straight<\/p><p><strong>2<\/strong>: Mirrored<\/p><p><strong>3<\/strong>: Disconnected<\/p><p><strong>4<\/strong>: Asymmetric<\/p><p><strong>Tab<\/strong>: Next Point<\/p><p><strong>Alt<\/strong>: Show only Selected Point<\/p><p><strong>&#x2318;<\/strong>: Show Middle Point<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-Points.jpeg","image_width":"1586","image_height":"1056","video":"","bookmark_id":"sketch-tricks-editing-points"},{"id":"11954","section_id":"66","order":"12","title":"Move and Resize","subhead":"","body":"<p>As you drag or resize shapes, Smart Guides and Distances are automatically visible.<\/p><p><strong>Shift Drag<\/strong>: Snap horizontally or vertically.<\/p><p><strong>Alt Drag<\/strong>: Duplicate Layer.<\/p><p><strong>&#x2318; D<\/strong>: Duplicate. If you use Alt Drag first, the duplicates will be distanced consistently.<\/p><p><strong>Shift Resize<\/strong>: Keep aspect ratio<\/p><p><strong>Alt Resize<\/strong>: Resize from center<\/p><p><strong>&#x2318;<\/strong>: Rotate. Must hover borders.<\/p><p><strong>Shift &#x2190;, &#x2192;, &#x2191; or &#x2193;<\/strong>: Move by 10px<\/p><p><strong>&#x2318; &#x2192; or &#x2193;<\/strong>: Expand by 1px<\/p><p><strong>&#x2318; &#x2190; or &#x2191;<\/strong>: Contract by 1px<\/p><p><strong>&#x2318; Shift &#x2192; or &#x2193;<\/strong>: Expand by 10px<\/p><p><strong>&#x2318; Shift &#x2190; or &#x2191;<\/strong>: Contract by 10px<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Duplicate-Multiple.mp4","bookmark_id":"sketch-tricks-move-and-resize"},{"id":"11955","section_id":"66","order":"13","title":"Type","subhead":"","body":"<p>These shortcuts apply to Text layers.<\/p><p><strong>&#x2318; B<\/strong>: Bold<\/p><p><strong>&#x2318; I<\/strong>: Italic<\/p><p><strong>&#x2318; U<\/strong>: Underline<\/p><p><strong>&#x2318; Alt +<\/strong>: Bigger type<\/p><p><strong>&#x2318; Alt -<\/strong>: Smaller type<\/p><p><strong>&#x2318; T<\/strong>: Change Font<\/p><p><strong>&#x2318; Shift O<\/strong>: Convert Text to Outlines<\/p><p><strong>Alt Ctrl T<\/strong>: Tighten character spacing<\/p><p><strong>Alt Ctrl L<\/strong>: Loosen character spacing<\/p><p><strong>&#x2318; Shift }<\/strong>: Align Left<\/p><p><strong>&#x2318; Shift {<\/strong>: Align Right<\/p><p><strong>&#x2318; Shift |<\/strong>: Align Center<\/p><p><strong>&#x2318; Ctrl Space<\/strong>: Emojis and Symbols<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-tricks-type"},{"id":"11956","section_id":"66","order":"14","title":"Copy and Paste","subhead":"","body":"<p>You can Paste any format (JPG, PNG, SVG) to Sketch, from apps like Finder, Keynote, Mail, etc. Sketch will try to capture the vector if possible. Likewise, Sketch will Copy the vector to other apps like Keynote.<\/p><p><strong>&#x2318; C<\/strong>: Copy<\/p><p><strong>&#x2318; V<\/strong>: Paste<\/p><p><strong>&#x2318; Shift V<\/strong>: Paste in Place.<\/p><p><strong>Right-click \/ Paste Here<\/strong>: Paste at the mouse cursor from center.<\/p><p><strong>Alt &#x2318; C<\/strong>: Copy Style.<\/p><p><strong>Alt &#x2318; V<\/strong>: Paste Style.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-tricks-copy-and-paste"},{"id":"11957","section_id":"66","order":"15","title":"Arrange","subhead":"","body":"<p>Layers and Groups can be arranged within a parent Group or Artboard.<\/p><p><strong>Alt &#x2318; &#x2191;<\/strong>: Forward.<\/p><p><strong>Alt &#x2318; &#x2193;<\/strong>: Backward.<\/p><p><strong>Ctrl Alt &#x2318; &#x2191;<\/strong>: to Front.<\/p><p><strong>Ctrl Alt &#x2318; &#x2193;<\/strong>: to Back.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-tricks-arrange"},{"id":"11958","section_id":"66","order":"16","title":"Zoom and Focus","subhead":"","body":"<p>Artboards and Layers can be focused on.<\/p><p><strong>&#x2318; 1<\/strong>: Focus on all the elements in the screen.<\/p><p><strong>&#x2318; 2<\/strong>: Focus on the element selected.<\/p><p><strong>&#x2318; 3<\/strong>: Center Selection<\/p><p><strong>&#x2318; 0<\/strong>: Zoom to Actual Size (100%).<\/p><p><strong>&#x2318; +<\/strong>: Zoom In.<\/p><p><strong>&#x2318; -<\/strong>: Zoom Out.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-tricks-zoom-and-focus"},{"id":"11959","section_id":"66","order":"17","title":"Grids and Rulers","subhead":"","body":"<p>In Preferences, enable Pixel Fitting to make sure that shapes land accurately in the Pixels Grid. Use Show Pixels to determine if your shapes are sharp.<\/p><p><strong>Ctrl G<\/strong>: Toggle Grid.<\/p><p><strong>Ctrl R<\/strong>: Toggle Rulers. To create a guide, click in the Ruler zone. Use Shift to move by 10 px. Drag outside to remove.<\/p><p><strong>Ctrl L<\/strong>: Toggle Layout.<\/p><p><strong>Ctrl P<\/strong>: Toggle Pixels.<\/p><p><strong>Ctrl X<\/strong>: Toggle Pixels Grid.<\/p><p>The Pixels Grid can only be seen at 1000% zoom.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-PixelFitting.mp4","bookmark_id":"sketch-tricks-grids-and-rulers"},{"id":"11960","section_id":"66","order":"18","title":"Window","subhead":"","body":"<p><strong>&#xA0;&#x2318; ~<\/strong>: Switch to next window.<\/p><p><strong>&#x2318; .<\/strong>: Toggle Presentation Mode.<\/p><p><strong>Alt &#x2318; 1<\/strong>: Toggle Layers List.<\/p><p><strong>Alt &#x2318; 2<\/strong>: Toggle Inspector.<\/p><p><strong>Alt &#x2318; 3<\/strong>: Toggle Layers List, Inspector.<\/p><p><strong>Alt &#x2318; T<\/strong>: Toggle Toolbar.<\/p><p><strong>Ctrl &#x2318; F<\/strong>: Toggle Fullscreen.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-LayersList.mp4","bookmark_id":"sketch-tricks-window"},{"id":"11961","section_id":"66","order":"19","title":"Layers List","subhead":"","body":"<p>These shortcuts only apply to the Layers List.<\/p><p><strong>Alt<\/strong>: Switch to Lock instead of Hide.<\/p><p><strong>&#x2318; R or Double-click<\/strong>: Rename Layer<\/p><p><strong>&#x2318; Click<\/strong>: select multiple layers.<\/p><p><strong>Shift Click<\/strong>: select multiple layers in a group.<\/p><p><strong>Option Click Expand Arrow<\/strong>: Expand and Collapse all layers and groups.<\/p><p><strong>Tab<\/strong>: Next Layer.<\/p><p><strong>Shift Tab<\/strong>: Previous Layer.<\/p><p><strong>&#x2318; F<\/strong>: Find Layer by name.<\/p><p><strong>Fn &#x2191;<\/strong>: Previous Page.<\/p><p><strong>Fn &#x2193;<\/strong>: Next Page.<\/p><p><strong>Drag Outside<\/strong>: Export 1x PNG asset based on Layer, Group or Artboard. You may override that setting by using Make Exportable.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-DragOut.mp4","bookmark_id":"sketch-tricks-layers-list"},{"id":"11962","section_id":"66","order":"20","title":"Inspector","subhead":"","body":"<p>You can use Math (+, -, *, \/) and percentage (%) in fields.<\/p><p><strong>Alt Tab<\/strong> (Repeated): Focus on next field.<\/p><p><strong>Drag Left or Right<\/strong>: Increase or decrease number. Must hover the label.<\/p><p><strong>&#x2191; or &#x2193;<\/strong>: Increase or decrease by 1.<\/p><p><strong>Shift &#x2191; or &#x2193;<\/strong>: Increase or decrease by 10.<\/p><p><strong>Alt &#x2191; or &#x2193;<\/strong>: Increase or decrease by 0.1.<\/p><p><strong>Drag Outside<\/strong>: you can drag out Fills, Borders and Shadows to remove.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-Inspector-1.mp4","bookmark_id":"sketch-tricks-inspector"},{"id":"11963","section_id":"66","order":"21","title":"Custom Shortcuts","subhead":"","body":"<p>Shortcuts can be customized in the System Preferences pane. To add, go to Keyboard &#x2192; Shortcuts &#x2192; App Shortcuts.<\/p><p><strong>&#x2318; Shift C<\/strong>: Create Symbol<\/p><p><strong>&#x2318; Shift M<\/strong>: Make Grid&#x2026;<\/p><p><strong>&#x2318; Shift P<\/strong>: Round to Nearest Pixel Edge<\/p><p><strong>&#x2318; Alt [<\/strong>: Horizontally (Align Objects)<\/p><p><strong>&#x2318; Alt ]<\/strong>: Vertically (Align Objects)<\/p><p><strong>&#x2318; Alt <\/strong>: Collapse Artboards and Groups<\/p><p><strong>&#x2318; Shift &#x2018;<\/strong>: Remove Unused Styles<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-Custom.jpeg","image_width":"1932","image_height":"982","video":"","bookmark_id":"sketch-tricks-custom-shortcuts"},{"id":"11964","section_id":"66","order":"22","title":"Additional Resources","subhead":"","body":"<p>There are two additional resources that I highly recommend for further reading: <a href=\"http:\/\/sketchshortcuts.com\">Sketch Shortcuts<\/a> and the official <a href=\"https:\/\/www.sketchapp.com\/docs\/shortcuts\/shortcuts\/\">Sketch documentation<\/a>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-tricks-additional-resources"}]},{"id":"67","chapter_id":"2","order":"4","slug":"sketch-essential-plugins","title":"Sketch Plugins","caption":"Essential Sketch Plugins for Designers and Developers","body":"<p>There are hundreds of Sketch plugins out there, and more released each week. These plugins are my absolute favorites for boosting my productivity in Sketch. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-essential-plugins.jpg","video":"https:\/\/player.vimeo.com\/external\/244758162.hd.mp4?s=cd908788fbf4485241dc97d49ddf91f03e8f3f2a&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-essential-plugins.zip","contents":[{"id":"10032","section_id":"67","order":"1","title":"Looper 2.0","subhead":"","body":"<p>Looper is a fun and experimental plugin that lets you duplicate a shape hundreds of times to get an interesting effect. You can loop in rotation, translation, with different opacities&#x2026; you name it. <\/p>","image":"","image_width":"0","image_height":"0","video":" https:\/\/designcode.io\/cloud\/sketch4\/Looper.mp4","bookmark_id":"sketch-essential-plugins-looper-2-0"},{"id":"10033","section_id":"67","order":"2","title":"Measure","subhead":"","body":"<p>Style guides usually take days, sometimes weeks to create. The biggest hurdle is to iterate over them every time a change is needed. <a href=\"https:\/\/github.com\/utom\/sketch-measure\">Measure<\/a> strips all the boring parts and lets you generate style guides in minutes. All you need to do is select an element and generate the Properties, Distances and Units in a way that makes sense to developers.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Measure.mp4","bookmark_id":"sketch-essential-plugins-measure"},{"id":"10034","section_id":"67","order":"3","title":"Relabel","subhead":"","body":"<p>A tiny <a href=\"https:\/\/github.com\/kenmoore\/sketch-relabel-button\">plugin<\/a>, but so useful for wrapping your buttons around the text, a problem all too common. All you need to do is select the Group or Symbol with a text in it, and press <strong>Command + J<\/strong>. Relabel will automatically reposition based on original padding and relative layout.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Relabel.mp4","bookmark_id":"sketch-essential-plugins-relabel"},{"id":"10035","section_id":"67","order":"4","title":"Magic Mirror","subhead":"","body":"<p>Presentation has always played a big part in my workflow. Like a nice icon, it shows the care that went into the app. It gives people a story before they jump in. Apple is famous for presenting beautiful photography and mockups in 3D. I used to rely on Photoshop to do that sort of image editing, but with <a href=\"http:\/\/magicmirror.design\">Magic Mirror<\/a>, you can achieve the same results in Sketch.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/comp14.jpg","image_width":"800","image_height":"600","video":"","bookmark_id":"sketch-essential-plugins-magic-mirror"},{"id":"10036","section_id":"67","order":"5","title":"Sketch Runner","subhead":"","body":"<p>Probably the most popular and efficient plugin of all is <a href=\"http:\/\/sketchrunner.com\">Sketch Runner<\/a>. It&rsquo;s absolutely the first thing you need to download. Runner is an essential multi-purpose Plugin (on steroids) for inserting UI elements and installing new plugins. It&rsquo;s like the Mac&rsquo;s Spotlight or <a href=\"https:\/\/www.alfredapp.com\">Alfred<\/a> within Sketch. To developers, this is the equivalent of Packages in <a href=\"https:\/\/atom.io\">Atom<\/a> and it can do so much more.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Runner.mp4","bookmark_id":"sketch-essential-plugins-sketch-runner"},{"id":"10037","section_id":"67","order":"6","title":"Auto Layout by Animaa","subhead":"","body":"<p><a href=\"https:\/\/animaapp.github.io\/docs\/v1\/guide\/\">Auto Layout<\/a> truly closes the gap between design and development. When you work with so many resolutions (iPhone X, iPhone 8, Android, Web), you can save a ton of edits by setting up constraints, similarly to how you&rsquo;d use Auto Layout in Xcode. Working with adaptive layouts has been a major need for designers and this is the answer.<\/p><p>While Sketch has its own Constraints feature, it is still fairly basic compared to Xcode&rsquo;s Auto Layout and Stack Views. For example, you can&rsquo;t pin real pixel values against the borders. You can&rsquo;t stack similar elements, so that they become dynamic with each other, reacting to resizing in a way that a dynamic layout would. With Anima&rsquo;s Auto Layout, you can take this to the next level.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Start-StackView.mp4","bookmark_id":"sketch-essential-plugins-auto-layout-by-animaa"},{"id":"10038","section_id":"67","order":"7","title":"Image Optim","subhead":"","body":"<p>Images exported from Sketch (or any other app) are not well-optimized for consumption. Apps and Websites tend to have a bloat issue. That&rsquo;s why plugins like <a href=\"https:\/\/imageoptim.com\/sketch\">Image Optim<\/a> is a necessa ry step whenever you export a PNG or JPG file. From my experience, you can shave up to 80% of the original file size. Plus, there&rsquo;s very little compromise in term of quality, even less apparent today because of Retina screens.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Start-ImageOptim.jpg","image_width":"1490","image_height":"806","video":"","bookmark_id":"sketch-essential-plugins-image-optim"},{"id":"10039","section_id":"67","order":"8","title":"Sketch SF Font Fixer","subhead":"","body":"<p>The <a href=\"https:\/\/developer.apple.com\/fonts\/\">San Francisco<\/a> font in iOS was designed with great readability in mind. It has a strict <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UserExperience\/Conceptual\/MobileHIG\/ColorImagesText.html#\/\/apple_ref\/doc\/uid\/TP40006556-CH58-SW1\">guideline<\/a> on how to use it with differences between Display and Text and a Tracking table to follow. In Sketch, you must follow a formula to transform the tracking values to character spacing. The <a href=\"https:\/\/github.com\/kylehickinson\/Sketch-SF-UI-Font-Fixer\">SF UI Font Fixer<\/a> plugin will definitely help.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/iOS-Tracking2.jpg","image_width":"1320","image_height":"1120","video":"","bookmark_id":"sketch-essential-plugins-sketch-sf-font-fixer"},{"id":"10040","section_id":"67","order":"9","title":"Sketch Palettes","subhead":"","body":"<p>Colors have never been this important in design. That&rsquo;s why it&rsquo;s crucial to have a well-curated palette to start with. <a href=\"https:\/\/github.com\/andrewfiorillo\/sketch-palettes\">Sketch Palettes<\/a> lets you easily save and import palettes for both global and document colors. I started a <a href=\"http:\/\/cl.ly\/2k1g3h1w1c1y\">palette<\/a> using <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UserExperience\/Conceptual\/MobileHIG\/ColorImagesText.html\">iOS<\/a>, <a href=\"https:\/\/www.materialpalette.com\">Material Design<\/a> and <a href=\"https:\/\/flatuicolors.com\">Flat UI<\/a> colors.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Screenshot%202015-10-05%2023.06.01.jpeg","image_width":"1610","image_height":"1125","video":"","bookmark_id":"sketch-essential-plugins-sketch-palettes"},{"id":"10041","section_id":"67","order":"10","title":"Icon Fonts","subhead":"","body":"<p>This <a href=\"https:\/\/github.com\/keremciu\/sketch-iconfont\">plugin<\/a> lets you choose from <strong>thousands<\/strong> of icons from <a href=\"https:\/\/fortawesome.github.io\/Font-Awesome\/\">Font Awesome<\/a>, <a href=\"http:\/\/ionicons.com\">Ionicons<\/a> and <a href=\"https:\/\/www.google.com\/design\/icons\/\">Material icons<\/a>. You can browse, search and insert icons as text and <strong>Convert to outlines<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-IconFont.jpeg","image_width":"1854","image_height":"1110","video":"","bookmark_id":"sketch-essential-plugins-icon-fonts"},{"id":"10042","section_id":"67","order":"11","title":"Find and Replace","subhead":"","body":"<p>Making typos happens to the best of us. With <a href=\"https:\/\/github.com\/mscodemonkey\/Sketch-Find-And-Replace\">Find and Replace<\/a>, you search through all the text layers and replace keywords instantly. It&rsquo;s very powerful.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-FindAndReplace%202.jpeg","image_width":"1714","image_height":"1290","video":"","bookmark_id":"sketch-essential-plugins-find-and-replace"},{"id":"10043","section_id":"67","order":"12","title":"Sort Me","subhead":"","body":"<p>As you create new layers in rapid successions by using Make Grid or other duplication techniques, your Sketch document will become messy. <a href=\"https:\/\/github.com\/romashamin\/sort-me-sketch\">Sort Me<\/a> will help you get organized.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-SortMe.jpg","image_width":"962","image_height":"436","video":"","bookmark_id":"sketch-essential-plugins-sort-me"},{"id":"10044","section_id":"67","order":"13","title":"Sketch Content Generator","subhead":"","body":"<p>Working with large sets of content is time-consuming. Traditionally, we collect avatars and background images, so that we can populate them in our user interfaces using Pattern Fill or Mask. It&rsquo;s an arduous process when you deal with hundreds of items. With <a href=\"https:\/\/github.com\/timuric\/Content-generator-sketch-plugin\">Content Generator<\/a>, all those hours are effectively reduced to minutes as the grunt work is already done for you. You just need to apply the content.<\/p>","image":"","image_width":"0","image_height":"0","video":" ","bookmark_id":"sketch-essential-plugins-sketch-content-generator"},{"id":"10045","section_id":"67","order":"14","title":"Symbol Instance Renamer","subhead":"","body":"<p>Sometimes you want to change the name of the Symbols for various reasons. Once you change the Symbol&rsquo;s name in Symbol page, you can use <a href=\"https:\/\/github.com\/sonburn\/symbol-instance-renamer\">Symbol Instance Renamer<\/a> to rename that Symbol across the document. This will make your naming cleaner.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-essential-plugins-symbol-instance-renamer"},{"id":"10046","section_id":"67","order":"15","title":"Symbol Organizer","subhead":"","body":"<p>Whenever we create a new Symbol, it will show in Symbol page. And once you go to Symbol page to check out the Symbols you created, it is all over the place without proper placement. <a href=\"https:\/\/github.com\/sonburn\/symbol-organizer\">Symbol Organizer<\/a> will help us to organize the Symbol page and make it align and arrange appropriately according to your naming. It can help to remove all the unused Symbols from the document if you want to.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Symbol-Organizer.jpg","image_width":"1600","image_height":"1671","video":"","bookmark_id":"sketch-essential-plugins-symbol-organizer"},{"id":"10047","section_id":"67","order":"16","title":"Merge Duplicated Symbols","subhead":"","body":"<p>If there are Symbols that have the same name but not the same design, you can use the <a href=\"https:\/\/github.com\/oodesign\/merge-duplicate-symbols\">Merge Duplicated Symbols<\/a> plugin. It will help you find Symbols that have the same name in the document. You can choose the ones that you want to keep and merge others.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Merge-Duplicated-Symbols.jpg","image_width":"1600","image_height":"1645","video":"","bookmark_id":"sketch-essential-plugins-merge-duplicated-symbols"},{"id":"10048","section_id":"67","order":"17","title":"Calendar Creator","subhead":"","body":"<p><a href=\"https:\/\/lstore.graphics\/plugins\/calendar\/\" title=\"Calendar Creator\">Calendar Creator<\/a> is a very handy plugin when you want to add a calendar in your design. You can set the first day to Sunday or Monday. Also, you can customize the month and the year.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/CalendarCreator.mp4","bookmark_id":"sketch-essential-plugins-calendar-creator"},{"id":"10049","section_id":"67","order":"18","title":"Reduce App","subhead":"","body":"<p><a href=\"https:\/\/flawlessapp.io\/reduce\" title=\"Reduce App\">Reduce App<\/a> can compress Sketch Files in seconds, this is prefect when you need to share a sketch file or just to save some space in your hard drive.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Reduce%20App.mp4","bookmark_id":"sketch-essential-plugins-reduce-app"},{"id":"10050","section_id":"67","order":"19","title":"Map Generator","subhead":"","body":"<p>This is an amazing plugin that will help you to generate a map for your design in a couple of clicks. <a href=\"https:\/\/github.com\/eddiesigner\/sketch-map-generator\" title=\"Map Generator\">Map Generator<\/a> is powered by Google Maps and Mapbox, you just need to create a shape and select it, then run the plugin.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/MapGenerator.mp4","bookmark_id":"sketch-essential-plugins-map-generator"},{"id":"10051","section_id":"67","order":"20","title":"Chromatic Sketch","subhead":"","body":"<p>With <a href=\"https:\/\/github.com\/petterheterjag\/chromatic-sketch\" title=\"Chromatic Sketch\">Chromatic Sketch<\/a>, you can take the gradient of a layer and add new color stops. Also this plugin helps you to create a scale between the fill colors of two selected layers.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/ChromaticSketch.mp4","bookmark_id":"sketch-essential-plugins-chromatic-sketch"},{"id":"10052","section_id":"67","order":"21","title":"Sketch2AE","subhead":"","body":"<p>If you love After Effects as much as we do, <a href=\"https:\/\/google.github.io\/sketch2ae\/\" title=\"Skech 2AE\">Sketch2AE<\/a> will be perfect for your workflow. This plugin from Google will help you copy all your layers and organize them for After Effects. It is as simple as you copying your layers in Sketch and pasting them in After Effects.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch2AE.mp4","bookmark_id":"sketch-essential-plugins-sketch2ae"},{"id":"10053","section_id":"67","order":"22","title":"Nudg.it","subhead":"","body":"<p><a href=\"http:\/\/nudg.it\" title=\"Nudg.it\">Nudg.it<\/a> is perfect if you want to adjust your big and small nudges.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Nudgit.mp4","bookmark_id":"sketch-essential-plugins-nudg-it"},{"id":"10054","section_id":"67","order":"23","title":"Icon Slate","subhead":"","body":"<p><a href=\"http:\/\/www.kodlian.com\/apps\/icon-slate\" title=\"Icon Slate App\">Icon Slate<\/a> is a brilliant app that has a <a href=\"https:\/\/github.com\/kodlian\/IconSlate-sketchplugin\" title=\"Icon Slate plugin\">plugin<\/a> for Sketch, which will help you to export icons from Sketch. It exports in different formats such as: icns, Iconset, Ico, iOS, Android and the finder folder. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/IconSlate.mp4","bookmark_id":"sketch-essential-plugins-icon-slate"},{"id":"10055","section_id":"67","order":"24","title":"Swap Style","subhead":"","body":"<p><a href=\"https:\/\/github.com\/ozzik\/swap-styles\" title=\"Swap Style\">Swap Style<\/a> is really useful when you want to swap styles between two layers, especially for those cases when you want to change the state between them.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/SwapStyle.mp4","bookmark_id":"sketch-essential-plugins-swap-style"},{"id":"10056","section_id":"67","order":"25","title":"User Flows","subhead":"","body":"<p><a href=\"https:\/\/abynim.github.io\/UserFlows\/\" title=\"User Flows\">User Flows<\/a> is a plugin to generate flow diagrams from artboards. If you want to define a link between two artboards, you need to select a layer, the destination artboard and press <strong>&#xA0;Cmd+Shift+K<\/strong>. This plugin is really powerful, you can also add <strong>Conditional Logic<\/strong> (Cmd+Shift+D), <strong>Generate Flow Diagrams<\/strong> (Cmd+Shift+F) and <strong>Show or Hide Connections<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/UserFlow.mp4","bookmark_id":"sketch-essential-plugins-user-flows"}]},{"id":"68","chapter_id":"2","order":"5","slug":"sketch-symbols","title":"Nested Symbols","caption":"Design with More Flexibility by Nesting Symbols","body":"<p>In Sketch 47, Symbols make it easy to share the same elements across multiple Artboards or documents, and keep them up-to-date with <a href=\"https:\/\/www.sketchapp.com\/docs\/libraries\/\">Libraries<\/a>. This is remarkably useful when you reuse the same elements multiple times, like the Status Bar, Navigation Bar or Tab Bar. When changes need to happen, you won\u2019t need to edit those elements one by one. As you update one, it will synchronize to all the other ones.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-symbols.jpg","video":"https:\/\/player.vimeo.com\/external\/243924066.hd.mp4?s=539bdeea271d93ac49abd658c2035a28961a43ee&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-symbols.zip","contents":[{"id":"10263","section_id":"68","order":"1","title":"Workflow","subhead":"","body":"<p>Nested Symbols will open new possibilities to streamline your current workflow. Furthermore, Nested Overrides can override Nested Symbols to other Symbols with the same size. Now you can create reusable components and stop reinventing the wheel on every design.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Nested-Symbol-Workflow.jpg","image_width":"1600","image_height":"976","video":"","bookmark_id":"sketch-symbols-workflow"},{"id":"10264","section_id":"68","order":"2","title":"Creating a Nested Symbol","subhead":"","body":"<p>You can place a Symbol inside another Symbol&rsquo;s master Artboard. This Nested Symbol contains an icon placeholder, six icons for different benefits, and three text layers.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Nested-Symbols.jpg","image_width":"1600","image_height":"1000","video":"","bookmark_id":"sketch-symbols-creating-a-nested-symbol"},{"id":"10265","section_id":"68","order":"3","title":"","subhead":"Updating the Symbol","body":"<p>Any update you make to the Symbol will apply throughout your document, no matter if it is a Nested Symbol or not.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Update-Nested-Symbol.mp4","bookmark_id":"sketch-symbols-updating-the-symbol"},{"id":"10266","section_id":"68","order":"4","title":"","subhead":"Text Layers","body":"<p>For text layers, it is good to label them according to what type of text it contains. Like this, it will be easy to recognize what kind of content needs to be filled in the Overrides panel.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Text-Layer-Strings.jpg","image_width":"1600","image_height":"1340","video":"","bookmark_id":"sketch-symbols-text-layers"},{"id":"10267","section_id":"68","order":"5","title":"","subhead":"Naming Symbol","body":"<p>Give an easy name to the Symbol&apos;s Artboard to find it quickly. Using &#x201C;\/&#x201C; in the name will help you neatly organize the symbols menu.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Symbol-Dropdown-Menu.jpg","image_width":"1600","image_height":"496","video":"","bookmark_id":"sketch-symbols-naming-symbol"},{"id":"10268","section_id":"68","order":"6","title":"","subhead":"Sketch Runner","body":"<p>Use the <a href=\"http:\/\/sketchrunner.com\/\">Sketch Runner<\/a> plugin&#xA0;to search the symbol. Runner gives you a preview, and you can search any Symbol quickly if you&rsquo;ve established a good naming convention. After you downloaded and installed Sketch Runner, go to the Plugins menu, choose Runner &gt; Run to activate Sketch Runner. Then go to the Insert tab and search for your Symbol.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Runner.mp4","bookmark_id":"sketch-symbols-sketch-runner"},{"id":"10269","section_id":"68","order":"7","title":"","subhead":"Using Emojis","body":"<p>You can use Emojis in front of the text layers to help quickly identify what needs to be done in the Override panel. Edit the layer name and press <strong>Command + Control + Spacebar<\/strong> to bring up the Emoji quick panel. For the Benefits Symbol example, we use a pencil emoji &#x270F;&#xFE0F; to determine a text layer. Use &#x1F603; for avatar, &#x1F3A8; for colors, &#x1F4A1; for on\/off states, etc., based on what works for you.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Text-Layer-Naming-Emoji.jpg","image_width":"1600","image_height":"1225","video":"","bookmark_id":"sketch-symbols-using-emojis"},{"id":"10270","section_id":"68","order":"8","title":"","subhead":"Organizing Symbol Layers","body":"<p>The order of the Symbol layers is reflected in the Overrides panel. Make sure all of your Symbol layers are organized based on the hierarchy reflected in the Overrides panel. The common way to arrange is from Top to Bottom.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Text-Layer-Order.jpg","image_width":"1600","image_height":"915","video":"","bookmark_id":"sketch-symbols-organizing-symbol-layers"},{"id":"10271","section_id":"68","order":"9","title":"Nested Overrides","subhead":"","body":"<p>Nested Symbols can be overridden, along with images and text in a Symbol&rsquo;s instance. You can swap any symbols as long as they are all in the same size. With the power of overrides, you can change the Symbol with a different image, different state, different icon all in just one Symbol. <\/p><p>To take a step further, you can change the color of the background, add or remove shadows, etc. As long as it is a Symbol, anything is replaceable.<\/p><p>For Text Layers, to make it disappear in the Symbol, you can set the value to blank by pressing the <strong>Spacebar<\/strong> and then <strong>Return<\/strong> key in Overrides panel.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Nested-Overrides.mp4","bookmark_id":"sketch-symbols-nested-overrides"},{"id":"10272","section_id":"68","order":"10","title":"","subhead":"Disabled Overrides","body":"<p>If you don&rsquo;t want a Symbol inside a Nested Symbol to be overridden, you can lock the layer. The override option will be hidden in the panel. Disabled Overrides work for text layers too. Go to the Symbols Page and lock the layer by mouse over the layer, then press and hold the Option key and the Lock icon will show up. Click on it and the layer will lock. Return to Instance and select the Symbol, you will notice that the layer is now hidden from the Overrides panel. If you unlock the Symbol or Text, it will show again in the Overrides.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Disabled-Overrides.jpg","image_width":"1600","image_height":"905","video":"","bookmark_id":"sketch-symbols-disabled-overrides"},{"id":"10273","section_id":"68","order":"11","title":"","subhead":"Recover Original Image","body":"<p>You can reset the Symbol&rsquo;s image back to its original image by right-clicking the image in Overrides panel and then choose <strong>Remove Image Override<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Recover-Original-Image.mp4","bookmark_id":"sketch-symbols-recover-original-image"},{"id":"10274","section_id":"68","order":"12","title":"","subhead":"Replace Symbol","body":"<p>Sometimes, you might find it hard to override in the panel. There&rsquo;s a different way to change the content or states by using two similar Symbols. Sketch is smart enough to retain the overridden content.<\/p><p>However, the downside is that you will have multiple Symbols that are similar. If there are changes needed, then you will spend more time updating related Symbols.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Replace-Symbol.mp4","bookmark_id":"sketch-symbols-replace-symbol"},{"id":"10275","section_id":"68","order":"13","title":"Tips","subhead":"","body":"<p>With the flexibility of Nested Symbol, there is a lot of different ways to create a component. Most importantly, you can keep your Symbols organized and reusable. Like this, your design workflow will improve significantly.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-symbols-tips"},{"id":"10276","section_id":"68","order":"14","title":"","subhead":"Always Make Text Layer Fixed","body":"<p>Always make the Text Layer in Symbol Fixed, this will make it align properly and retain its padding and position when resizing.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-symbols-always-make-text-layer-fixed"},{"id":"10277","section_id":"68","order":"15","title":"","subhead":"Add Symbol Shortcut Into Toolbar","body":"<p>You can speed up your workflow by adding the Symbol icon to the toolbar. Go to the Toolbar and right click it, choose the Customize Toolbar, and a modal will show up. Find the Symbol icon and drag it to the Toolbar. You can place it anywhere you like. Like this, you can view your Symbols in a multi-level menu view. There are many icon shortcuts that you can add to the Toolbar to speed up your workflow.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Add-Symbol-Shortcut-Toolbar.jpg","image_width":"1600","image_height":"351","video":"","bookmark_id":"sketch-symbols-add-symbol-shortcut-into-toolbar"},{"id":"10278","section_id":"68","order":"16","title":"Plugins For Symbols","subhead":"","body":"<p>Here are some useful Sketch plugins that you can add to your Symbols workflow.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-symbols-plugins-for-symbols"},{"id":"10279","section_id":"68","order":"17","title":"","subhead":"Sketch Runner","body":"<p>Using <a href=\"http:\/\/sketchrunner.com\/\">Sketch Runner<\/a>, you can search and place Symbols very fast as long your naming convention is well-thought out. This plugin works best for other things too. You can press the shortcut Command Apostrophe to activate Sketch Runner.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-symbols-sketch-runner"},{"id":"10280","section_id":"68","order":"18","title":"","subhead":"Symbol Instance Renamer","body":"<p>Sometimes, you want to change the name of some Symbols across your documents, but the name won&rsquo;t be updated. You can use <a href=\"https:\/\/github.com\/sonburn\/symbol-instance-renamer\">Symbol Instance Renamer<\/a> to make this task a breeze. Go to Plugins and choose Symbol Instance Renamer &gt; Rename all Instances on All Pages. This will help you update their names across all your documents.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-symbols-symbol-instance-renamer"},{"id":"10281","section_id":"68","order":"19","title":"","subhead":"Symbol Organizer","body":"<p>Once you create a new Symbol, it will show up in the Symbols Page. And if you check the Symbols Page you will find the symbols all over the place without a proper placement. <a href=\"https:\/\/github.com\/sonburn\/symbol-organizer\">Symbol Organizer<\/a> will help us to organize the Symbols page and make it align and arrange appropriately according the naming of your symbols. It can help to remove all the unused Symbols from the document as well. <\/p><p>You can use Sketch Runner to install the Symbol Organizer plugin. Before we run the Symbol Organizer, you should configure its settings first. This is how I setup the settings for Symbol Organizer. Once you press Organize, the Symbols Page will arrange neatly according to the naming and the Symbol Organizer configuration.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Symbol-Organizer.jpg","image_width":"1600","image_height":"1671","video":"","bookmark_id":"sketch-symbols-symbol-organizer"},{"id":"10282","section_id":"68","order":"20","title":"","subhead":"Merge Duplicated Symbols","body":"<p>Often, you&rsquo;ll find duplicated Symbols in your document. A plugin called <a href=\"https:\/\/github.com\/oodesign\/merge-duplicate-symbols\">Merge Duplicated Symbols<\/a> will help you find Symbols that have the same name. You can choose the ones you want to keep and merge the others. Once you Run the plugin, a pop-up window will appear, there you will be able to choose the Symbols that you want to keep, then press OK and the Symbols will be merged. You can click on <strong>Continue Later<\/strong> or <strong>Don&rsquo;t Merge This One<\/strong>, if you&rsquo;re not sure yet. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Merge-Duplicated-Symbols.jpg","image_width":"1600","image_height":"1645","video":"","bookmark_id":"sketch-symbols-merge-duplicated-symbols"},{"id":"10283","section_id":"68","order":"21","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/pizza0502\">Pizza Yap<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-symbols-credit"}]},{"id":"69","chapter_id":"2","order":"6","slug":"sketch-libraries","title":"Sketch Libraries","caption":"Share Symbols with Other Designers","body":"<p>Design is all about collaboration, and with Sketch Libraries, you can sync, share and update Symbols across all your documents with your teammates. Your design can stay consistent, up-to-date, and be open for collaboration thanks to <strong>Sketch Libraries<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-libraries.jpg","video":"https:\/\/player.vimeo.com\/external\/243925804.hd.mp4?s=6a9a0befb5fd825d4360e54b5f73d952cc2fa4cf&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-libraries.zip","contents":[{"id":"10196","section_id":"69","order":"1","title":"What is a Library in Sketch?","subhead":"","body":"<p>A Library is a Sketch document that contains Symbols that can be used globally. You can share the Library by storing to a local server. Also, you can use cloud services like Dropbox, or a version control system like GitHub or Abstract. As a result, your teammates can have access to the same Libraries.<\/p><p>When you update any Symbol in that Library, everyone that are using that Library will receive a notification on the far top right of Sketch&apos;s UI. Like this, their Libraries will be always in&#xA0;sync!<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Collaborate-with-Libraries.jpg","image_width":"1600","image_height":"1124","video":"","bookmark_id":"sketch-libraries-what-is-a-library-in-sketch"},{"id":"10197","section_id":"69","order":"2","title":"How Libraries Can Be Used","subhead":"","body":"<p>Libraries will greatly improve the collaboration between team members. You can use them as components, icons, for your product&rsquo;s branding or marketing. There is no limit to how we can use them.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-libraries-how-libraries-can-be-used"},{"id":"10198","section_id":"69","order":"3","title":"Adding Libraries","subhead":"","body":"<p>Sketch have already added <strong>iOS UI Design template<\/strong> as a Library. You can enable or disable the Library by checking the checkbox. Once it is unchecked, you will stop seeing Symbols from this Library in the Insert&apos;s drop-down menu. Consequently, you can&rsquo;t use Symbols from that Library.<\/p><p>If you have downloaded some UI Kit, or your organization has created a design system, you can manually add it into Sketch as a Library. Just click <strong>Add Library&#x2026;<\/strong> and choose the Sketch file. Afterwards, the Sketch file become part of the Libraries that you can start using.<\/p><p>There is no limit to how many Libraries you can have. Every Library that you add will be separate and accessible from the <strong>Insert<\/strong> menu.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Adding-Library.mp4","bookmark_id":"sketch-libraries-adding-libraries"},{"id":"10199","section_id":"69","order":"4","title":"Insert a Symbol from Library","subhead":"","body":"<p>Now you can start using all the Libraries that are enabled by clicking the Insert button in the toolbar.<\/p><p>Additionally, you can use <strong>Sketch Runner<\/strong> to search and insert the Symbol.<\/p><p>The icons for <strong>Local Symbols<\/strong> and <strong>Library Symbols<\/strong> are different, and this helps us efficiently recognize them in the Layers List.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Local-Symbol-Library-Symbol-Icon.jpg","image_width":"1600","image_height":"360","video":"https:\/\/designcode.io\/cloud\/sketch4\/Adding-Library.mp4","bookmark_id":"sketch-libraries-insert-a-symbol-from-library"},{"id":"10200","section_id":"69","order":"5","title":"Editing Libraries Symbols","subhead":"","body":"<p>A Library is the same as a Symbol. It can be swapped by right-clicking it on the <strong>Inspector<\/strong> panel. You are also able to change the content in the <strong>Overrides<\/strong> panel. Constraints will work as expected and same for nesting Libraries.<\/p><p>If you want to edit the original Libraries Symbols, double-click on it to open a dialog to show if this Symbol belongs to a Library. Clicking on <strong>Open in Original Document<\/strong> will open up the Library file and automatically bring you directly to the Symbol you want to edit. There is a dialog below of Sketch app to remind you that you&rsquo;re editing the Library file.<\/p><p>Be aware that any change that you make will save the original Library file, which in turn will update to everyone&apos;s Library.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Library-Symbol-Dialog.jpg","image_width":"1600","image_height":"419","video":"https:\/\/designcode.io\/cloud\/sketch4\/Open-Original-Document.mp4","bookmark_id":"sketch-libraries-editing-libraries-symbols"},{"id":"10201","section_id":"69","order":"6","title":"Get Libraries Symbols up-to-date","subhead":"","body":"<p>When you update any Symbols in your Library, documents using those shared Symbols will receive a pink notification <strong>Library Update Available<\/strong> at top-right of Sketch app.<\/p><p>Click on that notification and a dialog window will let you preview. Check and confirm changes&#x200A; between <strong>Old<\/strong> and <strong>New<\/strong>. You can check or uncheck which Symbols you want it to be updated so that your designs are using the latest components. You can always come back later if you are unsure to update or not.<\/p><p>Any Symbol that is checked will be updated across all the pages when you click on the <strong>Update Symbols<\/strong> button.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Library-Update-Available.jpg","image_width":"1600","image_height":"426","video":"https:\/\/designcode.io\/cloud\/sketch4\/Update-Library-Symbol.mp4","bookmark_id":"sketch-libraries-get-libraries-symbols-up-to-date"},{"id":"10202","section_id":"69","order":"7","title":"Unlink a Library Symbol","subhead":"","body":"<p>You can converts the Library Symbol to a Local Symbol by double-clicking it and choosing <strong>Unlink from Library<\/strong>. It will become a normal Symbol, found in the <strong>Symbols Page<\/strong>. As a result, the Symbol will not be able to receive changes made from the Library.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Unlink-Detach-Library-Symbol.mp4","bookmark_id":"sketch-libraries-unlink-a-library-symbol"},{"id":"10203","section_id":"69","order":"8","title":"Keep track of imported Library Symbols","subhead":"","body":"<p>Select any Symbol and go to the Inspector dropdown. At the bottom of the drop-down menu, choose <strong>Organize Imported Symbols&#x2026;<\/strong> and then, you will see a popup window. All the imported Library Symbols you&rsquo;re using in this document will be listed in the <strong>Imported Symbols<\/strong> tab. You can select one of the Symbols and click on the gear icon at the bottom left of the window to <strong>Edit in Library&#x2026;<\/strong> or <strong>Unlink from Library<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Organize-Imported-Symbols.mp4","bookmark_id":"sketch-libraries-keep-track-of-imported-library-symbols"},{"id":"10204","section_id":"69","order":"9","title":"Sharing the Libraries with teammates","subhead":"","body":"<p>If you and your teammates want to use the same Library, you will need to find a place to store the Library file that everyone has read-access. There are a few options: local storage, cloud services like Dropbox, Google Drive, or Abstract for version control. Any of these options will let you save and share the Library file to everyone. The syncing speed is heavily dependent on the tools you are using like the internet connection and the file size.<\/p><p>If you&rsquo;re going to use Dropbox to store the Library, everyone will need to have permission to access that folder from their Dropbox desktop app. Once stored, tell your teammates to import the Library to their Sketch file. Voila, everyone on the team now have access to all the same Symbols.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-libraries-sharing-the-libraries-with-teammates"},{"id":"10205","section_id":"69","order":"10","title":"Create a preview image for your Library","subhead":"","body":"<p>You can use your Library with a Sketch file that contains a bunch of Symbols. A good preview will help distinguish itself in the Libraries window.<\/p><p>The thumbnails in the Libraries window is about <strong>200 px x 160 px<\/strong>. Make a Library&apos;s preview Page, then create an Artboard of that size on that Page. You can enlarge the Artboard to <strong>2x<\/strong> or <strong>3x<\/strong> for a crisper thumbnail image. Design the artwork to be related to the Library so that it is easily recognizable. Inserting a title on the preview image works well too. <\/p><p>Stay on the Library&apos;s preview Page, and save the Sketch file. Finally, import this Library file. You will notice that the preview image is the one that you&rsquo;ve designed!<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Preview-Image-of-Library.jpg","image_width":"1600","image_height":"1124","video":"","bookmark_id":"sketch-libraries-create-a-preview-image-for-your-library"},{"id":"10206","section_id":"69","order":"11","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/pizza0502\">Pizza Yap<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-libraries-credit"}]},{"id":"70","chapter_id":"2","order":"7","slug":"sketch-abstract","title":"Version Control","caption":"The Github for Designers","body":"<p>Before Sketch Libraries, we needed to manually send Sketch files via email or messaging, then upload and share on cloud services in order to collaborate with other teammates on a design.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-abstract.jpg","video":"https:\/\/player.vimeo.com\/external\/244759071.hd.mp4?s=fe59a44d9c4769167a86748028921e9305561fc7&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-abstract.zip","contents":[{"id":"9962","section_id":"70","order":"1","title":"The Problem","subhead":"","body":"<p>This is where the problem lies. Anyone that has access to that Sketch file will duplicate it and change the file name. You probably will see multiple different names of that Sketch file with some minor differences between them. <\/p><p>More problems arise when multiple designers are using the same Sketch file in Dropbox, and save it at the same time. In the end, you get multiple &#x201C;conflicted copy&#x201D;. To patch the issue, you had to compare and fix the conflicts manually. All this leads to a disorganized, inefficient workflow. <\/p><p>Now, we can share and use Symbols from the same Sketch files with Libraries. Also, we still lack recorded history, we don&rsquo;t know how the other designers progresses and there&rsquo;s no annotations. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Confusing-Files.jpg","image_width":"1600","image_height":"751","video":"","bookmark_id":"sketch-abstract-the-problem"},{"id":"9963","section_id":"70","order":"2","title":"Welcome to Abstract","subhead":"","body":"<p>If you know what <strong>Git<\/strong> is then, you&rsquo;ll be familiar with the workflow of <strong>Version Control<\/strong>. But if you&rsquo;re not, Version Control let us keep track of all the changes made to files and save every copy of each change. You can restore back to any previous version if something goes wrong. This workflow is heavily used in development by coders.<\/p><p><a href=\"https:\/\/www.goabstract.com\/\">Abstract<\/a> is a macOS app and web app with secure versioning system that builds on top of Git for design files, but without going through Command Line. By hiding the complexity of Git, Abstract app is more straightforward and designer-friendly.<\/p><p>It is a new way for multiple designers to manage and version their files, document their process and work on things in parallel without the fear of overwriting. It saves everything to let you keep track of all the changes and record the history. Now, every designer can work together on the same file, review the changes and differences, merge files, collaborate and comments, and finally with a clean and updated <strong>Master<\/strong> file.<\/p><blockquote><p>The best design happens when designers collaborate.<\/p><\/blockquote><p>Abstract is also a file management app that saves your design work in the cloud. It can replace your other cloud services. It comes with a well-structured and unified workspace.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Abstract-App.jpg","image_width":"1600","image_height":"526","video":"","bookmark_id":"sketch-abstract-welcome-to-abstract"},{"id":"9964","section_id":"70","order":"3","title":"Get started","subhead":"","body":"<p>Abstract comes with 30 days free trial. It has a macOS app which you&rsquo;ll need to download to do <strong>Branch<\/strong>, <strong>Commit<\/strong>, <strong>Merge<\/strong> and other features. The Web app can be used for reviewing and commenting.<\/p><p>You can switch between <strong>Personal Projects<\/strong> and <strong>Team Projects<\/strong> if you&rsquo;ve created an <strong>Organization<\/strong>. With Organization, you and your team can leverage the full potential of Version Control for the design files and also use other features such as&#xA0;commenting.<\/p><p>The app is very clean and straightforward for Version Control. From the dashboard to the way you go through the screens overview, everything feels right, with no clutter. It also makes you forget that it is built on Git by taking away terminal command line.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Get-Started.mp4","bookmark_id":"sketch-abstract-get-started"},{"id":"9965","section_id":"70","order":"4","title":"Create a new project","subhead":"","body":"<p>Let&rsquo;s start with creating a new project in Abstract. Click on the <strong>New Project<\/strong> button on the top-right of the app. Insert your project name, descriptions and color. If you&rsquo;re in an Organization, you can set the Project as private. Only invited members can view it.<\/p><p>Project type can be a native mobile app, a website or web app. Also, you can create projects for marketing work, UI library and style guides. Set a convention with your team to best fit your workflow.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Create-New-Project.mp4","bookmark_id":"sketch-abstract-create-a-new-project"},{"id":"9966","section_id":"70","order":"5","title":"Import Sketch File","subhead":"","body":"<p>After you&rsquo;ve set up your project and invited teammates to it, you can import your existing Sketch files. To do that, drag-and-drop your Sketch file into the project. Alternatively, you can click the Import Sketch File button.<\/p><p>Also, you can create a new file by clicking the <strong>Create Sketch File<\/strong> button. Just put in the file name, and choose whether you want to treat this file as <strong>Library<\/strong> or not. Click on <strong>Create Sketch File<\/strong> button again to confirm.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Import-Sketch-File-and-Create-Sketch-File.mp4","bookmark_id":"sketch-abstract-import-sketch-file"},{"id":"9967","section_id":"70","order":"6","title":"","subhead":"Master Files","body":"<p>Now, you will have <strong>Master<\/strong> files for all your design&#xA0;and assets. Every Project has a Master section.<\/p><p>Once the setup is done, everyone can just open Abstract and start collaborating. There is no need to use Finder to search the files and folders anymore. Abstract saves everything and you keep track of all the changes made to any <strong>Page<\/strong>, <strong>layer<\/strong>, <strong>Symbol<\/strong> and <strong>component<\/strong> within the Sketch file. You can have a quick glance of what&rsquo;s changed in the project without opening a file.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Master-Files.jpg","image_width":"1600","image_height":"1102","video":"","bookmark_id":"sketch-abstract-master-files"},{"id":"9968","section_id":"70","order":"7","title":"","subhead":"Available Offline","body":"<p>One of the impressive features of Abstract is that it works well offline. Everything is locally stored&#x200A; &#x2014;&#x200A; that includes all your <strong>Commits<\/strong>, <strong>Branches<\/strong>, <strong>Merging<\/strong> and other changes. When you have internet access, all of that will sync to the cloud. This means that you can work anywhere with any computer as long you have the Abstract access and internet.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-abstract-available-offline"},{"id":"9969","section_id":"70","order":"8","title":"Create new Branch","subhead":"","body":"<p>Branches are a safe space for all of your changes. Consider it as a duplication of files from Master. Creating a Branch from Master allows multiple designers to work on the same file at the same time without fear of overwriting. The Master file will remain unchanged until you Commit the changes and Merge the Branch to the Master. No more conflicted copies or duplicated files.<\/p><p>You and your team can create as many Branches as the workflow requires in your Project. You also can create <strong>sub-Branch<\/strong> from Branches if your teammates are working on same iterations. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Create-New-Branch.mp4","bookmark_id":"sketch-abstract-create-new-branch"},{"id":"9970","section_id":"70","order":"9","title":"","subhead":"Project Summary","body":"<p>Branches are listed in the <strong>Project Summary<\/strong> page. Each Branch can set the status. Like this, the team can follow the work-in-progress from each designer.<\/p><p>Depending on your team&rsquo;s workflow, you can go with one Branch per feature, then one sub-Branch per iteration or you can Branch off every sprint instead. There&rsquo;s no correct answer to this because it relies on your team, but try to stick to the habit of merging the sub-Branch every day. Once the feature is reviewed or confirmed by the client, then merge Branch to Master.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Project-Summary-Page.jpg","image_width":"1600","image_height":"1102","video":"","bookmark_id":"sketch-abstract-project-summary"},{"id":"9971","section_id":"70","order":"10","title":"Edit in Sketch","subhead":"","body":"<p>Since all the files are inside Projects, the first app you open when you want to start work is Abstract. All the files are saved locally without worry of being offline.<\/p><p>Just select the Sketch file that you want to edit, double-click it or click on the <strong>Edit in Sketch<\/strong> button on the right side. Sketch will open it. Notice that the Sketch file will have the Branch name on it.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Edit-in-Sketch.mp4","bookmark_id":"sketch-abstract-edit-in-sketch"},{"id":"9972","section_id":"70","order":"11","title":"","subhead":"Status","body":"<p>There&rsquo;s an Abstract status at the bottom of the screen. Every time you save the file, it will keep track of it. It works best if you enabled Auto Save while editing in Sketch Preferences.<\/p><p>You can open the Sketch file by right-clicking any file and choose <strong>Open Untracked<\/strong>. However, any change when Untracked won&rsquo;t be recorded.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Abstract-Plugin.jpg","image_width":"1600","image_height":"293","video":"","bookmark_id":"sketch-abstract-status"},{"id":"9973","section_id":"70","order":"12","title":"Commit","subhead":"","body":"<p>Commit is a snapshot of the changes you&rsquo;ve made to your Sketch file in the branch. Once you saved the Sketch file, you will notice the saving progress happening in the status. Then, the <strong>Preview &amp; Commit&#x2026;<\/strong> button will appear. <\/p><p>Click on it and it will bring you back to Abstract with a Commit window. You can view the updates on your Symbols and Artboards, including which Artboards have been deleted, layers renamed, etc.<\/p><p>It is required to enter a Commit title. The description is optional, but it supports <a href=\"https:\/\/github.com\/adam-p\/markdown-here\/wiki\/Markdown-Cheatsheet\">Markdown<\/a> which makes the text easier to format. Once you&rsquo;ve entered the title and description, you can <strong>Preview<\/strong>.<\/p><p>On the right column, you will see that your Commit is committing to the current Branch. There is an option to Commit these change to a new sub-Branch as well.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-abstract-commit"},{"id":"9974","section_id":"70","order":"13","title":"","subhead":"Changed Files","body":"<p><strong>Changed Files<\/strong> lets you know which files you&rsquo;re committing. Then, you&rsquo;re able to check which files to Commit.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Commit.mp4","bookmark_id":"sketch-abstract-changed-files"},{"id":"9975","section_id":"70","order":"14","title":"","subhead":"Discard Changes","body":"<p>If you forget to Commit your Sketch file, Abstract will remember the changes. But there is a <strong>Discard Changes&#x2026;<\/strong> in the button dropdown. It will undo and discard all the changes you&rsquo;ve done. Use that option carefully.<\/p><p>Be descriptive when you write about the changes you commit. It will help your team to stay organized and be aware of the changes made.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/In-App-Preview-and-Commit.jpg","image_width":"1600","image_height":"228","video":"","bookmark_id":"sketch-abstract-discard-changes"},{"id":"9976","section_id":"70","order":"15","title":"","subhead":"Timeline","body":"<p>Abstract lets you visualize the Commit history in a timeline view and show you the evolution of your Artboards on the left. At this point, you can go back to any previous Commits.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Commit-History.jpg","image_width":"1600","image_height":"1004","video":"","bookmark_id":"sketch-abstract-timeline"},{"id":"9977","section_id":"70","order":"16","title":"Comment and Annotation","subhead":"","body":"<p>You can comment on each Branch, Artboards or Symbols.&#xA0;You can also make Annotations to clarify the feedback. Everyone in the Project has the ability to Comment and Annotate. <\/p><p>Before you go ahead and Merge to Master, it is good to send over your Branch link to the team for review. Just right-click on the Branches, Artboards, Pages or Symbols and choose <strong>Copy Link<\/strong> to get the web URL.<\/p><p>Or, you can set the Branch status to <strong>Open for Feedback<\/strong> or <strong>Ready for Review<\/strong>, so your team knows the status of the Branch.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Branch-Status.jpg","image_width":"1600","image_height":"851","video":"","bookmark_id":"sketch-abstract-comment-and-annotation"},{"id":"9978","section_id":"70","order":"17","title":"","subhead":"Approval","body":"<p>Once approved, you can Merge that Branch to Master so that everyone can start using the components that you&rsquo;ve created.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Comment-and-Annotation.mp4","bookmark_id":"sketch-abstract-approval"},{"id":"9979","section_id":"70","order":"18","title":"Merge Branch","subhead":"","body":"<p>Merging Branches allows you to sync those changes to Master once the work is approved. You always need to Commit everything first before you can Merge to Master.<\/p><p>The timeline history of Merged Branches is a bit different. It has a nested view on the right&#xA0;panel.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Merged-Timeline.jpg","image_width":"1600","image_height":"1004","video":"","bookmark_id":"sketch-abstract-merge-branch"},{"id":"9980","section_id":"70","order":"19","title":"","subhead":"Merge Often","body":"<p>Try to Commit and Merge often, so that the whole team keep track with all the changes efficiently. Make sure that everyone is on the same page.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Merge.mp4","bookmark_id":"sketch-abstract-merge-often"},{"id":"9981","section_id":"70","order":"20","title":"Resolving Conflicts","subhead":"","body":"<p>If the same Artboards or Symbols have been changed in different Branches, Abstract will detect the conflicts. Abstract will allow you to resolve the conflicts and choose which of two versions should be kept.<\/p><p>There&rsquo;s no need to worry about choosing the wrong version because everything is saved. You can always go back to the previous version and see what your file looked like at that particular point in time. Restore to that version if needed.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Resolving-Conflicts.mp4","bookmark_id":"sketch-abstract-resolving-conflicts"},{"id":"9982","section_id":"70","order":"21","title":"Restore Commit","subhead":"","body":"<p>If you communicate often with the team, comment, and review all the Commits, there should be no issue at all. But if you make a mistake on some of your commits, you can restore back to any previous commits.<\/p><p>Go to Master, Commit page and simply select the Commit timeline that you want to restore to. Then, click a restore icon labeled as <strong>Restore Commit<\/strong> in the tooltip. Then, click on the <strong>Restore Commit<\/strong> button to restore.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Restore-Commit.mp4","bookmark_id":"sketch-abstract-restore-commit"},{"id":"9983","section_id":"70","order":"22","title":"Conclusions","subhead":"","body":"<p>So far, we&rsquo;ve learned about Abstract&rsquo;s Version Control system. This will allow us to collaborate with teammates in a productive way. Just like the co-founder of Abstract said: &#x201C;We don&rsquo;t need more visual tools. The truth is half of design work is based on managing changes, documenting decisions, getting feedbacks and keeping everyone in sync in the organization, and Abstract manages the other half of design elegantly.&#x201D;<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-abstract-conclusions"},{"id":"9984","section_id":"70","order":"23","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/pizza0502\">Pizza Yap<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-abstract-credit"}]},{"id":"71","chapter_id":"2","order":"8","slug":"sketch-data","title":"Working with Data","caption":"Make your design meaningful with real content","body":"<p>When you\u2019re designing in Sketch, you should know how the design is going to work after implementation. Sometimes, designs are bound to break if you\u2019re not replicating real data in the process.<\/p><p>Using real data in your work will help you have a better idea of how the interface is going to work, make better decisions, account for edge cases, or alignment issues that you might not have thought of. Clients often have a hard time visualizing how a prototype will lead to a final product. By using real data, they have a better idea and context, so the feedback that you get is far more accurate. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-data.jpg","video":"https:\/\/player.vimeo.com\/external\/243935611.hd.mp4?s=d8c590274852928b8b35e20463837e23d87cc8e6&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-data.zip","contents":[{"id":"10022","section_id":"71","order":"1","title":"Designing with Real Data","subhead":"","body":"<p>Still, using real data for your design is not necessarily a fast or straightforward workflow and you might end up wasting time searching quality images, names and descriptions. Some designers use Lorem Ipsum with the same image in one component and use it multiple times. However, with that, you will not have an elegant design or a realistic prototype.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Lorem-Ipsum.jpg","image_width":"1600","image_height":"1000","video":"","bookmark_id":"sketch-data-designing-with-real-data"},{"id":"10023","section_id":"71","order":"2","title":"Using Craft by InVision to populate data","subhead":"","body":"<p>We recommend using real data as early as possible in your design process. There are so many Sketch plugins that will help you generate content easily, like text and image assets into your design mockups.<\/p><p>The simplest way to work with data in Sketch is using <a href=\"https:\/\/www.invisionapp.com\/craft\">Craft Data<\/a>. Craft is a free design suite from InVision that lets designers add content quickly. It comes with multiple features like <strong>Stock<\/strong>, <strong>Freehand<\/strong>, <strong>Duplicate<\/strong>, <strong>Library<\/strong>, <strong>Data<\/strong>, <strong>Sync<\/strong> and <strong>Prototype<\/strong>; all these tools can save your time while designing.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Craft.jpg","image_width":"1600","image_height":"672","video":"","bookmark_id":"sketch-data-using-craft-by-invision-to-populate-data"},{"id":"10024","section_id":"71","order":"3","title":"Installing Craft","subhead":"","body":"<p><strong>Craft Data<\/strong> is a plugin that comes with predefined content, such as names, dates, addresses and photos. You can grab text and images directly from a website. Also, it allows you to use public API from a live site or JSON file to inject data into your design.<\/p><p>Once you&rsquo;ve installed Craft, open Sketch app and the first thing you will notice is the new panel on the right side. You can toggle on or off the Craft panel.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Craft-Data.mp4","bookmark_id":"sketch-data-installing-craft"},{"id":"10025","section_id":"71","order":"4","title":"Custom","subhead":"","body":"<p><strong>Custom<\/strong> comes with <strong>Type<\/strong> and <strong>Photos<\/strong>. Both of them already have a set of preset text lists and images to populate your design. You can click on the blank box to add more presets, which is hidden by default. Just select some text layer and start clicking on the value you want Craft to parse.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Custom-Type-Photos.mp4","bookmark_id":"sketch-data-custom"},{"id":"10026","section_id":"71","order":"5","title":"","subhead":"Custom Type List","body":"<p>You can even create your Custom Type list. Select <strong>Preserve Order<\/strong> to populate the list in a sequence way or just leave it blank to fill randomly. For Photos, you can load your local photos folder or a folder shared from Dropbox.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Custom-Type.mp4","bookmark_id":"sketch-data-custom-type-list"},{"id":"10027","section_id":"71","order":"6","title":"","subhead":"Download Lists","body":"<p>There is a good website that curates a bunch of useful lists:&#xA0;<a href=\"https:\/\/www.lists.design\/\">List Design<\/a>. Just copy the value you want into the Custom Type.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/List-Design.jpg","image_width":"1600","image_height":"938","video":"","bookmark_id":"sketch-data-download-lists"},{"id":"10028","section_id":"71","order":"7","title":"Web","subhead":"","body":"<p>The <strong>Web<\/strong> tab lets you grab photos and texts from any website. Enter the website URL and just pick a shape or text layer, and then click the text or image on the site. Hold the <strong>Command<\/strong> key to click and navigate the website.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Web.mp4","bookmark_id":"sketch-data-web"},{"id":"10029","section_id":"71","order":"8","title":"JSON","subhead":"","body":"<p>The <strong>JSON<\/strong> tab will let you access JSON data from any public APIs. You can easily find public APIs nowadays. If your company is building their own API, then your design will have more meaning and context. <\/p><p>It is a good practice to name your Sketch layers according to the JSON file variables. Enter the API URL or drop in JSON files into the panel and you can start assigning values to elements. It does take some coding knowledge to understand the JSON format, but once you know, you&rsquo;ll find it extremely useful. Here, we&rsquo;re using the <strong>Dribbble<\/strong> API in the demo to get their texts and images. You can get their API at this <a href=\"https:\/\/dribbble.com\/account\/applications\/new\">link<\/a>.<\/p><p>There are some tools that let you generate data into the JSON file. This opens up the ability to create your own API without any coding. Use <a href=\"https:\/\/sheetsu.com\/\">Sheetsu<\/a>, <a href=\"http:\/\/dummi.io\/\">Dummi<\/a>, or just search the keywords &#x201C;Google Spreadsheet into JSON&#x201D; .<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/JSON.mp4","bookmark_id":"sketch-data-json"},{"id":"10030","section_id":"71","order":"9","title":"Duplicate","subhead":"","body":"<p><strong>Craft Duplicate<\/strong> is not a basic tool that merely duplicates elements. It will remember the source of where you grab the data from, regardless if it is Custom Type, Custom Photos, Web or JSON. With this feature, you can save a lot of time from copying and pasting. We will use the JSON example that grabs data from Dribbble.<\/p><p>With the power of <strong>Craft Data<\/strong>, inserting images and texts from real data has never been more streamlined. This could help you make more informed design decisions and present a polished prototype with realistic data to your clients.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Duplicate.mp4","bookmark_id":"sketch-data-duplicate"},{"id":"10031","section_id":"71","order":"10","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/pizza0502\">Pizza Yap<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-data-credit"}]},{"id":"72","chapter_id":"2","order":"9","slug":"sketch-adaptive","title":"Adaptive Layouts","caption":"Working with Multiple Resolutions","body":"<p>When designing for mobile, it&#39;s important to consider the wide variety of screen sizes available across iOS and Android. Not everyone will be using the latest smartphones with the biggest screens, so we need to consider how our app\u2019s content will work when it renders on smaller or bigger screen sizes, as not doing so could lead to breaking. When iOS developers are building apps they need to think about how the content will adapt to the various iPhone screen sizes. The tool they use, Xcode, comes with a set of built-in features to help them do this. It\u2019s called <a href=\"https:\/\/developer.apple.com\/library\/content\/documentation\/UserExperience\/Conceptual\/AutolayoutPG\/index.html\">Auto layout<\/a> and it allows them to define constraints and relationships between views to control how the content adapts to different iPhone screen sizes.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-adaptive.jpg","video":"https:\/\/player.vimeo.com\/external\/244760931.hd.mp4?s=00d1d97b996d58bf8c7003875f5f40a1fefb4be8&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-adaptive.zip","contents":[{"id":"9985","section_id":"72","order":"1","title":"Auto Layout","subhead":"","body":"<p>Looks familiar? If you&apos;ve used Sketch before you may have noticed a similar feature in the properties panel on the right. It&apos;s not as complex as Xcode&apos;s Auto Layout but it does a good job at mimicking some of the constraints and acts as an excellent starting point when thinking about adaptive layouts.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/XCode-Auto-Layout.jpg","image_width":"1600","image_height":"900","video":"","bookmark_id":"sketch-adaptive-auto-layout"},{"id":"9986","section_id":"72","order":"2","title":"Making Your Design Adaptive","subhead":"","body":"<p>This is the screen we&apos;re going to make it adaptive. To do this, we&apos;re going to design on an iPhone 8 sized Artboard. Then we will set up our constraints, so our design scales up to iPhone 8 Plus and iPhone X, and down to a smaller screen like the iPhone SE, ensuring no matter what device our app is on, it looks great.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/App-Example.jpg","image_width":"1600","image_height":"900","video":"","bookmark_id":"sketch-adaptive-making-your-design-adaptive"},{"id":"9987","section_id":"72","order":"3","title":"","subhead":"Adding Constraints","body":"<p>When you select a layer in Sketch, you can modify its properties by changing values in the properties panel on the right panel. This is where the constraints panel lives. The panel is split into two parts, the box on the left is used to set which side of the Artboard of your selected layer will pin to when the artboard is resized. The two buttons on the right set whether the layer will stretch or retain its set width and height. Here are some simple examples that show how this works.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Constraints-Panel.jpg","image_width":"1600","image_height":"1000","video":"","bookmark_id":"sketch-adaptive-adding-constraints"},{"id":"9988","section_id":"72","order":"4","title":"","subhead":"No Constraint","body":"<p>The previous example shows what happens when we resize the Artboard without setting constraints on the layer.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/No-Constraint-Set.mp4","bookmark_id":"sketch-adaptive-no-constraint"},{"id":"9989","section_id":"72","order":"5","title":"","subhead":"Pin","body":"<p>In this new example, we&apos;ve pinned the layer to the top and left edges of our Artboard and locked the height. When we resize, the layer stays pinned in place and resizes horizontally only, as we didn&apos;t lock its width.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Constraints-Set.mp4","bookmark_id":"sketch-adaptive-pin"},{"id":"9990","section_id":"72","order":"6","title":"","subhead":"Content Break","body":"<p>By default with no constraints set, our design won&apos;t adapt to different layouts. Let&rsquo;s try with an iPhone 8, down to an iPhone SE and see what happens.<\/p><p>As you can see, with no constraints set, our design breaks when we change the Artboard size. Let&rsquo;s fix that and make the design adaptive.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Content-Break.mp4","bookmark_id":"sketch-adaptive-content-break"},{"id":"9991","section_id":"72","order":"7","title":"","subhead":"Title Constraints","body":"<p>Starting at the top and working our way down, let&rsquo;s apply constraints to our <strong>Title<\/strong> group which contains our search bar, title, and icons. As you apply the constraints to layers, it&rsquo;s important to think about how you want the layer to behave when the screen size changes. For example, in the <strong>Title<\/strong> group we want the search bar background to stretch, but the icon inside it to retain its position and size. Let&rsquo;s set up some constraints on our group and its child layers.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Setting-Title-Constraints.jpg","image_width":"1176","image_height":"733","video":"","bookmark_id":"sketch-adaptive-title-constraints"},{"id":"9992","section_id":"72","order":"8","title":"","subhead":"Group Constraints","body":"<p>First, we apply constraints to the Group, pinning it to the top left and top right and fixing its height. This ensures that when the device&rsquo;s height is changed the Group stays anchored to the top. When the width is changed, it changes with the device width.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Group-Constraints.mp4","bookmark_id":"sketch-adaptive-group-constraints"},{"id":"9993","section_id":"72","order":"9","title":"","subhead":"Child Constraints","body":"<p>When the Group&rsquo;s constraints have been set, we can work our way inwards, applying constraints to its child layers. Here, we set constraints on the search bars width and height.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Set-Child-Constraints01.mp4","bookmark_id":"sketch-adaptive-child-constraints"},{"id":"9994","section_id":"72","order":"10","title":"","subhead":"Child Constraints 2","body":"<p>As the search bar also contains its own children, we&apos;ll set constraints on these as well. We want the text box to change width with the bar, so let&rsquo;s pin that to the left and lock its height. The search icon should remain pinned to the left, and shouldn&apos;t stretch when the bars width changes, so we&apos;ll lock its size to prevent this from happening.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Set-Child-Constraints02.mp4","bookmark_id":"sketch-adaptive-child-constraints-2"},{"id":"9995","section_id":"72","order":"11","title":"","subhead":"Constraints Results","body":"<p>Using the same logic, the last thing to do is set the constraints on the &apos;Bookmarks&apos; title and the group of icons. When finished our title group is ready and adapts to iPhone 8, iPhone 8 Plus and iPhone SE screen sizes.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Adaptive-Title-Result.mp4","bookmark_id":"sketch-adaptive-constraints-results"},{"id":"9996","section_id":"72","order":"12","title":"","subhead":"Adaptive Tab Bar","body":"<p>As you can see our title group is adaptive, but the rest of our layout still breaks when we change the screen size. Next, we&apos;re going to set some constraints on our tab bar and its child elements. The tab bar should stay pinned to the bottom edge of the screen but stretch as the screens width changes, to do this we activate the bottom pin and lock its height, as we don&apos;t want it to stretch vertically when the screens height changes. Finally, select the five tab elements which are all symbols and lock the width and height. This ensures they stay nicely spaced when the width changes, and don&apos;t stretch.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Adaptive-Tab-Bar.mp4","bookmark_id":"sketch-adaptive-adaptive-tab-bar"},{"id":"9997","section_id":"72","order":"13","title":"","subhead":"Pro Tip","body":"<p>Constraints don&apos;t just apply to regular layers and groups. More complex shapes can be made adaptive too. Check out this tooltip. We may want its width to be variable, and change when the screen does, but the pin should retain its position, width, and height.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Pro-Tip.jpg","image_width":"1600","image_height":"900","video":"","bookmark_id":"sketch-adaptive-pro-tip"},{"id":"9998","section_id":"72","order":"14","title":"","subhead":"Pin Distorts","body":"<p>Constraints are applied to the overall shape, making sure its pinned to the left and right edges of the Artboard. When we resize the Artboard, the tooltips body resizes but see the pin? It changes position and becomes distorted.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Pro-Tip01.mp4","bookmark_id":"sketch-adaptive-pin-distorts"},{"id":"9999","section_id":"72","order":"15","title":"","subhead":"Making the Entire Shape Adaptive","body":"<p>By double-clicking inside the shape and selecting the pin itself, we can pin it to the left and lock its width and height. Now the entire tooltip becomes adaptive, and won&apos;t break when the screen size changes.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Pro-Tip02.mp4","bookmark_id":"sketch-adaptive-making-the-entire-shape-adaptive"},{"id":"10000","section_id":"72","order":"16","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/johnmpsherwin\">John Sherwin<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-adaptive-credit"}]},{"id":"73","chapter_id":"2","order":"10","slug":"sketch-vector","title":"Working with Vector","caption":"Vector Techniques in Sketch","body":"<p>Vector is traditionally something that\u2019s very hard to learn because you had to master the Bezier Curve and recreate complex shapes from scratch. Sketch makes this a little easier by combining simple shapes, rounding vector points and vectorizing borders. You can replicate 90% of all the icons found in iOS by applying these basic techniques.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-vector.jpg","video":"https:\/\/player.vimeo.com\/external\/244920972.hd.mp4?s=10ae463ffc7ffc0fcd083d1138ce846e656d82b2&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-vector.zip","contents":[{"id":"11965","section_id":"73","order":"1","title":"Working with Vector","subhead":"","body":"<p><em>Vector Techniques in Sketch<\/em><\/p><p>Vector is traditionally something that&rsquo;s very hard to learn because you had to master the Bezier Curve and recreate complex shapes from scratch. Sketch makes this a little easier by combining simple shapes, rounding vector points and vectorizing borders. You can replicate 90% of all the icons found in iOS by applying these basic techniques.<\/p><p>Here&rsquo;s a full video with step by step instructions on how to create an icon from scratch. You can download the <a href=\"http:\/\/cl.ly\/1v2I19420l1b\">Sketch file<\/a> to follow this tutorial.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-vector-icons.jpg","image_width":"2880","image_height":"1600","video":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-DrawingIcon.mp4.mp4","bookmark_id":"sketch-vector-working-with-vector"},{"id":"11966","section_id":"73","order":"2","title":"Drawing a Vector","subhead":"","body":"<p>While this book isn&rsquo;t a full course into vector illustration, I can try to explain the basics, so that you can start designing simple icons of your own. Vectors are composed of points, which can be curved using the <a href=\"https:\/\/medium.com\/sketch-app\/mastering-the-bezier-curve-in-sketch-4da8fdf0dbbb#.n6deji923\">Bezier Curve<\/a>. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-BezierCurve%202.jpeg","image_width":"1022","image_height":"830","video":"","bookmark_id":"sketch-vector-drawing-a-vector"},{"id":"11967","section_id":"73","order":"3","title":"","subhead":"The Bezier Curve","body":"<p>The Bezier Curve isn&rsquo;t something you&rsquo;ll master anytime soon but, we can certainly learn the fundamentals and apply some specific techniques in Sketch. Practice is key. As with a lot of practices, try to replicate something that&rsquo;s not too complex: a simple shape like the Refresh icon. That icon can be from any screenshot or photo. Lock the layer and start drawing on top of it.<\/p><p>To insert a new path from scratch, press <strong>V<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-Points.jpg","image_width":"1280","image_height":"750","video":"","bookmark_id":"sketch-vector-the-bezier-curve"},{"id":"11968","section_id":"73","order":"4","title":"","subhead":"Round to Full Pixels","body":"<p>Before even drawing your icon, you can make sure that each point will fall perfectly in the pixel grids by enabling <strong>Round to Full Pixels<\/strong>.<\/p><p>Notice that, you&rsquo;ll be drawing at the border of the shape, not inside. By default, borders have a <strong>Center<\/strong> outline, which may confuse you at first while drawing your shape but you can switch to border thickness (0.2 px black) to make it more precise.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-Round.jpg","image_width":"1280","image_height":"410","video":"","bookmark_id":"sketch-vector-round-to-full-pixels"},{"id":"11969","section_id":"73","order":"5","title":"","subhead":"Straight Point","body":"<p>The Straight Point is as easy as drawing a straight line. If we stopped here, we&rsquo;d only be able to draw perfect geometric shapes. Use <strong>Shift<\/strong> to draw perfectly straight lines.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-Straight.jpg","image_width":"1280","image_height":"560","video":"","bookmark_id":"sketch-vector-straight-point"},{"id":"11970","section_id":"73","order":"6","title":"","subhead":"Mirrored","body":"<p><strong>Mirrored<\/strong> is a symmetric bezier curve. As you change the angle or distance of one side, it&rsquo;ll update the other side as well.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-Mirrored.jpeg","image_width":"420","image_height":"322","video":"","bookmark_id":"sketch-vector-mirrored"},{"id":"11971","section_id":"73","order":"7","title":"","subhead":"Asymmetric","body":"<p>Similar to Mirrored, Asymmetric will keep the same angle, but allows for a different distance.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-Asymmetric.jpeg","image_width":"800","image_height":"478","video":"","bookmark_id":"sketch-vector-asymmetric"},{"id":"11972","section_id":"73","order":"8","title":"","subhead":"Disconnected","body":"<p>When the two handles are completely different, use <strong>Disconnected<\/strong>. You can even delete one handle and keep the other. This is especially useful when you have a sharp turn, followed by a curve.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-Disconnected.jpeg","image_width":"480","image_height":"254","video":"","bookmark_id":"sketch-vector-disconnected"},{"id":"11973","section_id":"73","order":"9","title":"","subhead":"Open \/ Close Path","body":"<p>When you begin a new Vector, it&rsquo;ll be open. In other words, you can draw as many points as you want before it completes itself. When you&rsquo;re ready to close the path, click on <strong>Close Path<\/strong>.<\/p><p>If you wish to re-open the paths again, click on <strong>Open Path<\/strong>. Notice that it&rsquo;ll open at the <strong>last<\/strong> point. Press <strong>Alt<\/strong> to show the first, which gives you an idea where the last point will be.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-OpenClosePath.mp4.mp4","bookmark_id":"sketch-vector-open-close-path"},{"id":"11974","section_id":"73","order":"10","title":"Set Style as Default","subhead":"","body":"<p>On any given day, you&rsquo;ll create no less than a hundred new layers. Every time, you most likely have to disable the default border style and change the Fill color. It&rsquo;s pretty rare that borders come into play when designing user interfaces for iOS or Android. So, to save you hundreds of clicks every day, you should set your own default style. To do that, set an example style and go to <strong>Layer<\/strong>, <strong>Style<\/strong>, <strong>Set Style as Default.<\/strong><\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-SetStyle.jpg","image_width":"1576","image_height":"784","video":"","bookmark_id":"sketch-vector-set-style-as-default"},{"id":"11975","section_id":"73","order":"11","title":"New Shape","subhead":"","body":"<p>It is important to be familiar with all the Shapes available as well as their keyboard shortcuts: Rectangle (<strong>R<\/strong>), Rounded Rectangle (<strong>U<\/strong>), Oval (<strong>O<\/strong>), Line (<strong>L<\/strong>).<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-InsertShape.mp4","bookmark_id":"sketch-vector-new-shape"},{"id":"11976","section_id":"73","order":"12","title":"Polygon Points","subhead":"","body":"<p>You can quickly create a <strong>Polygon<\/strong> with as many points as you want. This only works with the Polygon shape.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-PolygonPoints.mp4","bookmark_id":"sketch-vector-polygon-points"},{"id":"11977","section_id":"73","order":"13","title":"Star Points and Radius","subhead":"","body":"<p>The <strong>Star<\/strong> shape has not only Points, but Radius as well, which lets you design the perfect angle for your points.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-StarPoints.mp4","bookmark_id":"sketch-vector-star-points-and-radius"},{"id":"11978","section_id":"73","order":"14","title":"Combining Shapes","subhead":"","body":"<p><strong>Union<\/strong> will add shapes together. It&rsquo;s the simplest and most common technique.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Union.mp4","bookmark_id":"sketch-vector-combining-shapes"},{"id":"11979","section_id":"73","order":"15","title":"","subhead":"Subtract","body":"<p><strong>Subtract<\/strong> will subtract subsequent shapes from the main shape (the one at the bottom).<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Subtract.mp4","bookmark_id":"sketch-vector-subtract"},{"id":"11980","section_id":"73","order":"16","title":"","subhead":"Intersect","body":"<p><strong>Intersect<\/strong> will show the space where 2 shapes meet.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Intersect.mp4","bookmark_id":"sketch-vector-intersect"},{"id":"11981","section_id":"73","order":"17","title":"","subhead":"Difference","body":"<p><strong>Difference<\/strong> will show the space where 2 shapes don&rsquo;t meet.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Difference.mp4","bookmark_id":"sketch-vector-difference"},{"id":"11982","section_id":"73","order":"18","title":"","subhead":"None","body":"<p><strong>None<\/strong> lets the computer do the guessing. When you use Convert to Outlines or Flatten, Sketch will likely use <strong>None<\/strong>. However, I recommend switching back to one of 4 options since you&rsquo;ll be far more in control later on.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-None.mp4","bookmark_id":"sketch-vector-none"},{"id":"11983","section_id":"73","order":"19","title":"Flatten Vector","subhead":"","body":"<p>When you Transform or Combine shapes, they often keep their properties (transform values, border values, radius). When you <strong>Flatten<\/strong> a shape, it will no longer hold those properties or have a combination of multiple shapes. Like this, you can <strong>Edit<\/strong> the shape as you wish.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Flatten.mp4","bookmark_id":"sketch-vector-flatten-vector"},{"id":"11984","section_id":"73","order":"20","title":"Convert to Outlines","subhead":"","body":"<p>The <strong>Border<\/strong> is a property available to any shape. When you resize them, they keep the same thickness and position (center, outside, inside). With Convert to Outlines, you can convert those outlines into vectors that can be scalable. The resulting vector will be composed of multiple shapes combined.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Vectorize.mp4","bookmark_id":"sketch-vector-convert-to-outlines"},{"id":"11985","section_id":"73","order":"21","title":"Scissors","subhead":"","body":"<p>Scissors is a powerful new tool that lets you quickly cut parts of a vector. For instance, a circle can be cut in half, then close its paths to reform a new shape. It requires far less steps than using Subtract or editing the vector points manually. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-Scissors.mp4.mp4","bookmark_id":"sketch-vector-scissors"},{"id":"11986","section_id":"73","order":"22","title":"","subhead":"Combined Techniques","body":"<p>Combined with Border Options, Convert to Outlines and Flatten, you can create interesting new shapes, especially when it comes to using outlines. A lot of familiar icons out there may benefit this technique.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Scissors.mp4","bookmark_id":"sketch-vector-combined-techniques"},{"id":"11987","section_id":"73","order":"23","title":"Perspective Transform","subhead":"","body":"<p>The Transform tool may be harder to use than in your typical vector tool such as Illustrator, but it works if done right. Plus, you don&rsquo;t have to switch between two applications. <\/p><p>First, make sure to <strong>Convert to Outlines<\/strong> every text layer. Also, ungroup everything since Transform won&rsquo;t work on Groups. Finally, select all the layers together and do Transform (<strong>Cmd Shift T<\/strong>). The beautiful thing about this is everything will be kept in vector.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-PerspectiveTransform.mp4.mp4","bookmark_id":"sketch-vector-perspective-transform"},{"id":"11988","section_id":"73","order":"24","title":"Rotate","subhead":"","body":"<p>With the Rotate tool (<strong>Cmd Shift R<\/strong>), you can set the anchor point from which the rotation should occur. Once Rotation is active, you can drag one of the 8 points. You can do the same rotation by <strong>Holding Cmd<\/strong> and dragging those points. Likewise, rotation can be edited in the Inspector.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Vector-Rotate.mp4.mp4","bookmark_id":"sketch-vector-rotate"},{"id":"11989","section_id":"73","order":"25","title":"Rounded Corners Editing","subhead":"","body":"<p>You can be specific about which Point of your shape that you want rounded. Additionally, you can write numbers like this to target the corners (E.G., <strong>0;100;0;100<\/strong>).<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/RoundedCornersEditing.mp4?dl=0","bookmark_id":"sketch-vector-rounded-corners-editing"},{"id":"11990","section_id":"73","order":"26","title":"Reverse Order on the Path","subhead":"","body":"<p>In a shape you can press <strong>Tab<\/strong> to go to the next point of the shape, but sometimes you will need to reverse this order, for that go to <strong>Layer<\/strong>, <strong>Path<\/strong>, <strong>Reverse Order<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Reverse%20Order%20on%20the%20Path.mp4?dl=0","bookmark_id":"sketch-vector-reverse-order-on-the-path"},{"id":"11991","section_id":"73","order":"27","title":"Moving Shapes","subhead":"","body":"<p>This is a Pro Tip, when you start drawing a shape and you want to place it on a specific point on the canvas, you only have to press the space bar meanwhile holding the shape.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Moving%20Shapes.mp4?dl=0","bookmark_id":"sketch-vector-moving-shapes"}]},{"id":"74","chapter_id":"2","order":"11","slug":"sketch-exporting","title":"Exporting Assets","caption":"Delivering Assets to Multiple Devices in Sketch","body":"<p>One of the most frequent questions that I get asked is how to deliver assets to the engineering team. As we&#39;re dealing with an increased number of devices and resolutions, there is a steep learning curve attached to exporting assets for various Artboard resolutions, pixel densities and file formats. In this guide, I\u2019m hoping to shed some light in this workflow.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-exporting.jpg","video":"https:\/\/player.vimeo.com\/external\/244943122.hd.mp4?s=d0b197a5f4da121b9edcc7e0606ee3354433eeef&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-exporting.zip","contents":[{"id":"11992","section_id":"74","order":"1","title":"Designing in 1x","subhead":"","body":"<p>When you&apos;re designing in Sketch, you need to be aware of the pixel density that you&apos;re designing in. Ever since the introduction of <strong>@3x<\/strong> screens (iPhone 8 Plus), most designers are going back to designing in <strong>1x<\/strong>. That way, exporting assets for all 3 pixel densities is easier and far more accurate. For each asset, you need to create @1x, @2x and @3x files, so that they work on all iPhones and iPad devices.<\/p><p>If you&rsquo;re unsure with what Artboard to start with, go with the <strong>iPhone 8 at 375 x 667<\/strong>. That will effectively target most iPhone users today.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-Designing1x.jpg","image_width":"1280","image_height":"1346","video":"","bookmark_id":"sketch-exporting-designing-in-1x"},{"id":"11993","section_id":"74","order":"2","title":"Points and Pixels","subhead":"","body":"<p>Developers work with point values, so it is important to understand the difference with pixels. When the iPhone was first introduced, the two units were the same: 1pt equals 1px. Then, when retina screens came along, 1pt became 2px. So think of points as the values in the original iPhone, and pixels as the real values depending on the pixel density (iPhone 4, 5, 6, 7, 8 = <strong>@2x<\/strong>, iPhone 8 Plus, iPhone X = <strong>@3x<\/strong>). To better understand the different between points and pixels, I highly recommend watching this <a href=\"https:\/\/vimeo.com\/169809377\">video<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Design-Resolutions.jpg","image_width":"1404","image_height":"1012","video":"","bookmark_id":"sketch-exporting-points-and-pixels"},{"id":"11994","section_id":"74","order":"3","title":"What To Export?","subhead":"","body":"<p>Let&rsquo;s begin the topic with what should be an asset and what should be programmatically built in the code editor. As a rule of thumb, any vector that is more complex than a square should be rendered as an asset: <strong>icons<\/strong>, <strong>buttons<\/strong> and <strong>logos<\/strong>. Your goal should be to export as little as possible to allow maximum flexibility. Text, backgrounds, Navigation Bar, Tab Bar and even dialogs\/cards shouldn&rsquo;t be exported since they can be easily coded. Drop shadows, blurred effects can be rebuilt in code as well. Pictures and Avatars are part of the content, which just like text, are loaded from a set of data.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-What.jpg","image_width":"1280","image_height":"890","video":"","bookmark_id":"sketch-exporting-what-to-export"},{"id":"11995","section_id":"74","order":"4","title":"Slices","subhead":"","body":"<p>There are 2 ways to export assets: Make Exportable and Slice Tool. Slices are represented by a knife icon.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-exporting-slices"},{"id":"11996","section_id":"74","order":"5","title":"","subhead":"Make Exportable","body":"<p>This is the primary way to generate assets for implementation. It will create layer-specific assets that are transparent so that they can fit any background. To create an embedded slice, simply select any layer and click on Make Exportable on the bottom right of the Sketch UI.<\/p><p>Make Exportable can also work on Artboards, exporting the entire screen with all its layers merged. An image preview will appear giving you the ability to drag the image out.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-MakeExportable.png","image_width":"1260","image_height":"618","video":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-DragArtboard.mp4","bookmark_id":"sketch-exporting-make-exportable"},{"id":"11997","section_id":"74","order":"6","title":"","subhead":"Slice Tool","body":"<p>The <strong>Slice Tool<\/strong> (<strong>S<\/strong>) will allow you to draw a zone from which you can generate an image exactly as you see it. In other words, it&rsquo;ll Flatten every layer in that zone and create an image out of that. There two useful options attached to Slice layers: Trim and Background Color. Trim will remove all transparent pixels surrounding the object. You can set a Background color to replace the transparent pixels.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-SliceTool.mp4","bookmark_id":"sketch-exporting-slice-tool"},{"id":"11998","section_id":"74","order":"7","title":"Scaling The Assets","subhead":"","body":"<p>Once you click Make Exportable for your asset, Sketch will automatically create a 1x scaled asset, which will work for 1x screens. So far, only old iPhones will use that. We&rsquo;ll need to create assets for the newer iPhones as well, which has <strong>@2x<\/strong> and <strong>@3x<\/strong> screens. So, you need to create 2 more assets by clicking on the <strong>+<\/strong> button, scaling the asset to 2x and 3x.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-Scale.jpg","image_width":"1280","image_height":"376","video":"","bookmark_id":"sketch-exporting-scaling-the-assets"},{"id":"11999","section_id":"74","order":"8","title":"Filenames","subhead":"","body":"<p>For Xcode to understand your assets&rsquo;s pixel densities, you need to name the image files correctly. For 1x scale, it&apos;s just the name itself (asset.png). For 2x scale, you need to add a suffix of <strong>@2x<\/strong> (asset@2x.png). For 3x scale, you need to add <strong>@3x<\/strong> (asset@3x.png). Xcode will automatically merge all the resolutions together as one single asset. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-Xcode.jpeg","image_width":"2868","image_height":"1430","video":"","bookmark_id":"sketch-exporting-filenames"},{"id":"12000","section_id":"74","order":"9","title":"PNG Format","subhead":"","body":"<p>Typically, you&apos;ll use PNG files for most of your assets in iOS. They&apos;re versatile, sharp and accept transparency. They do come at a cost: they&rsquo;ll have a much bigger file size when a lot of colors are involved. That&rsquo;s why they&rsquo;re the perfect format for user interface assets. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-PNG.jpg","image_width":"1280","image_height":"444","video":"","bookmark_id":"sketch-exporting-png-format"},{"id":"12001","section_id":"74","order":"10","title":"JPG Format","subhead":"","body":"<p>JPG on the other hand are made for photos that don&rsquo;t need transparency. Avatar, photography images and fully merged screens will be better off rendered as JPG because of its smaller file size. The bigger the resolution, the larger the file size, especially for PNG.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-JPG.jpg","image_width":"1280","image_height":"558","video":"","bookmark_id":"sketch-exporting-jpg-format"},{"id":"12002","section_id":"74","order":"11","title":"Vector Format in PDF for iOS","subhead":"","body":"<p>Since Xcode 6, you can use vector files in PDF format, which makes things a lot easier to manage. For one, you don&apos;t have to worry about managing multiple pixel densities. You&rsquo;d only need a single file for each asset: <strong>@1x<\/strong>. From your scalable PDF asset, Xcode will automatically generate a version of @1x, @2x and @3x for you at build time.<\/p><p>PDF has <a href=\"https:\/\/bjango.com\/articles\/idontusepdfs\/\">weaknesses<\/a>, although minor ones. You may have troubles with blurred shapes, effects and masking. However, from my experience, 90% of all user interface assets won&rsquo;t encounter any issue since they&rsquo;re mostly flat vectors. Still, it&rsquo;s good to be aware of the issues for each image format.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-PDF.jpg","image_width":"1280","image_height":"454","video":"","bookmark_id":"sketch-exporting-vector-format-in-pdf-for-ios"},{"id":"12003","section_id":"74","order":"12","title":"SVG Format for Web","subhead":"","body":"<p>SVG is a format that is widely used for vectors, both for Web and Desktop. Most design tools accept that format and modern icons and logos always come in SVG. When you export in SVG, you have the flexibility to edit the code and animate in CSS or Javascript. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-toggle-slider.svg.jpeg","image_width":"1842","image_height":"1016","video":"","bookmark_id":"sketch-exporting-svg-format-for-web"},{"id":"12004","section_id":"74","order":"13","title":"Export All","subhead":"","body":"<p>When you&rsquo;re done slicing your document, you can decide to Export (<strong>Cmd Shift E<\/strong>) everything at once. This also gives you a full picture of all the slices you&rsquo;ve create so far, across all Artboards and Pages.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-ExportAll.jpg","image_width":"1280","image_height":"892","video":"","bookmark_id":"sketch-exporting-export-all"},{"id":"12005","section_id":"74","order":"14","title":"Export Tricks","subhead":"","body":"<p>If you drag out any Layer or Group out of the Sketch window, it&rsquo;ll automatically create a <strong>1x<\/strong> PNG asset without the need to slice anything. If you want the slice to be in <strong>2x<\/strong> or <strong>3x<\/strong>, or another file format, just use Make Exportable before.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-ExportFolder.mp4","bookmark_id":"sketch-exporting-export-tricks"},{"id":"12006","section_id":"74","order":"15","title":"","subhead":"Export to Folder","body":"<p>If you name your Layer or Group <strong>folder\/asset<\/strong>, it&rsquo;ll automatically export to the folder name before the forward slash.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/ExportToFolder.mp4?dl=0","bookmark_id":"sketch-exporting-export-to-folder"},{"id":"12007","section_id":"74","order":"16","title":"","subhead":"Max Width or Height","body":"<p>When you use Make Exportable, you can set a <strong>Max number<\/strong> for width or height. For example, <strong>800w<\/strong> will export the asset to a maximum of 800 px wide.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Assets-800w.jpg","image_width":"1280","image_height":"454","video":"","bookmark_id":"sketch-exporting-max-width-or-height"},{"id":"12008","section_id":"74","order":"17","title":"Export Presets","subhead":"","body":"<p>Export Presets is a handy feature, there is some pre-define presets as: <\/p><ul>\t<li>Default option, exports at 1x <\/li>\t<li>iOS, exports at 1x, 2x and 3x <\/li>\t<li>Android to export for 1x, 1.5x, 2x, 3x and 4x.<\/li><\/ul><p>Or you can customize one. For example if you want to add 1.5x to your existing iOS presets, click on the presets icon, a window will pop-up, there you can add 1.5x.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/ExportPresets.mp4?dl=0","bookmark_id":"sketch-exporting-export-presets"},{"id":"12009","section_id":"74","order":"18","title":"Share your layer","subhead":"","body":"<p>You can also share your layers via Airdrop, Twitter, Facebook, and many more there are many apps that have extensions for sharing.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/ShareLayer.mp4?dl=0","bookmark_id":"sketch-exporting-share-your-layer"},{"id":"12010","section_id":"74","order":"19","title":"Export Icons","subhead":"","body":"<p>There are some different ways to export icons and we will show you a few. <em>But first remember that the icon you will export has to have a square shape and not rounded corners<\/em>, iOS automatically adds the rounded corners to the background of the icon. <\/p><p>To export your icon you can either design the icon for all the different sizes that the different devices requires, it will take you more time yet you will end with pixel perfect results, there is a template in Sketch where you can find the different sizes for the App Icon.<\/p><p>You can also resize the icon when exporting, it will be fast but some of the icons could be little bit blurry.<\/p><p>You can also use apps like <a href=\"https:\/\/wearemothership.com\/work\/prepo\/\" title=\"Prepo MacApp\">Prepo<\/a>, you just drag and drop your icon into Prepo, and it will take care of the rest, exporting your icons in all the different sizes that Xcode requires, this is not a pixel perfect solution but is really handy if you are looking for a fast solution. Prepo has a <a href=\"https:\/\/itunes.apple.com\/app\/prepo\/id603076144?mt=8\" title=\"Prepo iOS App\">iOS companion App<\/a> which gives you a quick preview of your icon in you iOS device.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/ExportIcons3.mp4?dl=0","bookmark_id":"sketch-exporting-export-icons"}]},{"id":"77","chapter_id":"2","order":"11","slug":"sketch-styleguide","title":"Styleguide and Handoff","caption":"Consistent design language in your team","body":"<p>The only way to stop struggling with design inconsistencies in regards to font sizes, colors, spacing, is to set up a <strong>Styleguide<\/strong>. The Styleguide is a set of comprehensive documentations that involve reusable design elements for communicating the design practices with the team.<\/p>\n\n<p>A good Styleguide is <strong>reusable<\/strong>, <strong>scalable<\/strong> and <strong>maintainable<\/strong>. It will be used by all your teammates as well as your client. With that, you can save us a lot of time by focusing on function over form, collaborating and communicating with the team.<\/p>\n\n<p>Here are the basic Styleguide categories that we are going to cover: <strong>Principles<\/strong>, <strong>Typography<\/strong>, <strong>Colors<\/strong>, <strong>Icons<\/strong>, <strong>Grids and Spacing<\/strong>. But the list doesn&#x2019;t end here, creating a Styleguide is an iterative process and it will expand to more categories like motions, imagery, branding assets, components, accessibility and more.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-styleguide.jpg","video":"https:\/\/player.vimeo.com\/external\/245058628.hd.mp4?s=d421d66bd6302dbafbaceeb461d76ae085ac1137&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-styleguide.zip","contents":[{"id":"10249","section_id":"77","order":"1","title":"Principles","subhead":"","body":"<p>Design principles are a set of guidelines that explain what matters to the team and company values when designing products. What is the purpose? What kind of experience do you want to bring to your users? What is the look and feel you&rsquo;re aiming for? All these guidelines will impact how your team is solving the problem when building the product.<\/p><p>The design principles from <a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/overview\/themes\/\">Apple&rsquo;s Human Interface Guidelines<\/a> is an excellent example for guiding people when designing for iOS.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Apple-HIG.jpg","image_width":"1600","image_height":"1060","video":"","bookmark_id":"sketch-styleguide-principles"},{"id":"10250","section_id":"77","order":"2","title":"Typography","subhead":"","body":"<p>Typography is a fundamental principle for consistency. It is recommended to stick with two typefaces or less, and limit the number of font sizes to keep the textual content legible and clear.<\/p><p>We can define <strong>Text Styles<\/strong> in Sketch so that it is easy to change typefaces and sizes across the designs. Start with Headers and the Body text, and then expand from there.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Typography.jpg","image_width":"1600","image_height":"1000","video":"","bookmark_id":"sketch-styleguide-typography"},{"id":"10251","section_id":"77","order":"3","title":"","subhead":"Craft Library","body":"<p>You can use <a href=\"https:\/\/www.invisionapp.com\/craft#library\">Craft Library<\/a> to manage your Styleguide. Create a new <strong>Library<\/strong> in Craft and then save it to your cloud services so that your teammates can use it. With this, the team will always have an up-to-date Styleguide.<\/p><p>You can go to <a href=\"https:\/\/www.typewolf.com\/\">Typewolf<\/a>, <a href=\"http:\/\/typ.io\/\">Typ.io<\/a>, <a href=\"http:\/\/typecast.com\/\">Typecast<\/a>, <a href=\"http:\/\/app.fontflame.com\/\">Font Flame<\/a>, <a href=\"http:\/\/fontjoy.com\/\">Fontjoy<\/a> or <a href=\"http:\/\/fontpair.co\/\">FontPair<\/a> to look for ideas for pairing fonts. For font sizing, you can read more in <a href=\"http:\/\/typecast.com\/blog\/a-more-modern-scale-for-web-typography\">A More Modern Scale for Web Typography<\/a> and <a href=\"http:\/\/typecast.com\/blog\/contrast-through-scale\">Contrast Through Scale<\/a>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Craft-Library-Text-Styles.mp4","bookmark_id":"sketch-styleguide-craft-library"},{"id":"10252","section_id":"77","order":"4","title":"Colors","subhead":"","body":"<p>Colors help establish a visual hierarchy, a sense of familiarity and unity to the design. A good color system will help designers choose colors based on the context and focus more on content.<\/p><p>There are three subsections in Colors: <strong>Base Colors<\/strong>, <strong>UI Colors<\/strong> and <strong>Object Styles<\/strong>. Base Colors cover the brand color and primary call-to-action color as well as actionable texts like links and buttons. UI Colors cover different states of validations, warnings, alerts, successes and more. Object Styles cover the border width, border radius, shadows, etc.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Colors.jpg","image_width":"1600","image_height":"980","video":"","bookmark_id":"sketch-styleguide-colors"},{"id":"10253","section_id":"77","order":"5","title":"Icons","subhead":"","body":"<p>Icons can help communicate with less texts. But overusing it will make the design overwhelming, so it&rsquo;s good to state where and when to use icons.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Icons.jpg","image_width":"1600","image_height":"1168","video":"","bookmark_id":"sketch-styleguide-icons"},{"id":"10254","section_id":"77","order":"6","title":"Grids and spacing","subhead":"","body":"<p>The grids, columns, rows and margins are invisible elements in the design. Taking care of these will make your design look more balanced and have consistent negative spacing. Proper use of white space can emphasize the importance of the content.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/IBM-Grid-System.jpg","image_width":"1600","image_height":"760","video":"","bookmark_id":"sketch-styleguide-grids-and-spacing"},{"id":"10255","section_id":"77","order":"7","title":"","subhead":"8 Point Grid System","body":"<p>If you&rsquo;re working with the <a href=\"https:\/\/spec.fm\/specifics\/8-pt-grid\">8 Point Grid system<\/a>, you can change the <strong>Nudging<\/strong> value in Sketch Preferences.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Nudging.jpg","image_width":"1600","image_height":"880","video":"","bookmark_id":"sketch-styleguide-8-point-grid-system"},{"id":"10256","section_id":"77","order":"8","title":"Tools for making a Styleguide","subhead":"","body":"<p><strong>Craft Library<\/strong> is the most prominent among all the tools out there. It even can share <strong>Text Styles<\/strong> and <strong>Layer Styles<\/strong> with other designers, unlike Sketch Libraries which only works with Symbols. If you already have an existing design but don&rsquo;t have any Styleguide, you can use Craft Library to create one instantly. From there, you can find and fix the inconsistencies by syncing your styles.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Craft-Create-Styles.mp4","bookmark_id":"sketch-styleguide-tools-for-making-a-styleguide"},{"id":"10257","section_id":"77","order":"9","title":"","subhead":"Lingo","body":"<p>But Craft is not the only tool that let you create and manage Styleguides. <a href=\"https:\/\/www.lingoapp.com\/\">Lingo<\/a> is another app that can achieve similar results, and the workflow is almost identical. The main difference is that Lingo has a native macOS app that lets your team access the library anytime, anywhere.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Lingo.jpg","image_width":"1600","image_height":"1001","video":"","bookmark_id":"sketch-styleguide-lingo"},{"id":"10258","section_id":"77","order":"10","title":"A better handoff","subhead":"","body":"<p>The handoff from design to development is a much simpler workflow thanks to <a href=\"https:\/\/www.invisionapp.com\/craft#sync\">Craft Sync<\/a>, <a href=\"https:\/\/zeplin.io\/\">Zeplin<\/a> and <a href=\"https:\/\/sympli.io\/\">Sympli<\/a> that are made available for Sketch users. These tools will automatically generate the specifications of your design once you sync them to the platform. Developers can select the elements and properties to inspect. Also, they can export assets from those tools if you&rsquo;ve set <a href=\"https:\/\/www.sketchapp.com\/docs\/exporting\/exporting-layers\/\">Make Exportable<\/a>. This makes your Styleguide extremely useful, and everyone in your team, including the developers, will be kept in the loop.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-styleguide-a-better-handoff"},{"id":"10259","section_id":"77","order":"11","title":"","subhead":"Invision Inspect","body":"<p>Using Craft Sync is as easy as one-click. Once you&rsquo;ve created a project in InVision, go to Sketch and select the Artboards that you want to upload to InVision. Click the Sync icon. Once it&rsquo;s done, head over to the InVision website to view the project. <a href=\"https:\/\/www.invisionapp.com\/feature\/inspect\">InVision Inspect<\/a> will let you grab the texts, properties, and also some basic Swift code if you&rsquo;ve set the project as an iOS project.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/InVision-Inspect.mp4","bookmark_id":"sketch-styleguide-invision-inspect"},{"id":"10260","section_id":"77","order":"12","title":"","subhead":"Zeplin","body":"<p>Zeplin works the same way. However, they have a native macOS app. Once you&rsquo;ve synced using the <a href=\"https:\/\/support.zeplin.io\/sketch-integration\/installing-sketch-plugin\">Zeplin Sketch plugin<\/a>, your Artboards will be uploaded to your Zeplin project.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Zeplin.mp4","bookmark_id":"sketch-styleguide-zeplin"},{"id":"10261","section_id":"77","order":"13","title":"","subhead":"Sympli","body":"<p>Sympli has an advanced feature which works with Android Studio and Xcode to let developers implement the design faster. The upload process is just as simple as using the <a href=\"https:\/\/sympli.io\/downloads\/sketch\">Sympli plugin<\/a>. It has the version tracking with visual highlighting of changes between design iterations. This automated design handoff process is streamlining the communication and collaboration amongst your team.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sympli.mp4","bookmark_id":"sketch-styleguide-sympli"},{"id":"10262","section_id":"77","order":"14","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/pizza0502\">Pizza Yap<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-styleguide-credit"}]},{"id":"78","chapter_id":"2","order":"11","slug":"sketch-previewing","title":"Previewing and Sharing","caption":"Test drive on your devices","body":"<p>Good design requires constant iterations and testing. What looks great on your computer screen may not be usable on your devices. <a href=\"https:\/\/itunes.apple.com\/app\/sketch-mirror\/id677296955\">Sketch Mirror<\/a> is the free companion iOS app that can real-time preview designs on any iPhone or iPad.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-previewing.jpg","video":"https:\/\/player.vimeo.com\/external\/244760873.hd.mp4?s=2654aa570b37db2d256aa9d6119d61ab204a812c&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-previewing.zip","contents":[{"id":"10207","section_id":"78","order":"1","title":"Connecting via Wi-Fi and USB","subhead":"","body":"<p>Install Sketch Mirror on iPhone or iPad and connect both Mac and iOS device to the same Wi-Fi network. Click the <strong>Mirror<\/strong> icon in Sketch toolbar, and you will see a list of <strong>Connected Devices<\/strong>. Select any device, and then all the Pages and Artboards will now appear in the Sketch Mirror app.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Mirror.jpg","image_width":"1600","image_height":"680","video":"","bookmark_id":"sketch-previewing-connecting-via-wi-fi-and-usb"},{"id":"10208","section_id":"78","order":"2","title":"Showing Artboards","subhead":"","body":"<p>Through the overview, you can browse between Artboards on different Pages. Swipe left and right to change Artboards, swipe up and down to switch Pages. Set <strong>Show Current Artboard<\/strong> in Sketch Preferences so that those connected devices will automatically show the same Artboards selected in Mac.<\/p><p>You also can connect Sketch via USB Lightning cable to your Mac to instantly preview your works!<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Show-Current-Artboard.jpg","image_width":"1600","image_height":"968","video":"","bookmark_id":"sketch-previewing-showing-artboards"},{"id":"10209","section_id":"78","order":"3","title":"Connecting via IP Address","subhead":"","body":"<p>Sketch allows you to preview Sketch documents on any device with IP address. No matter if it is an Android or Windows PC, as long as the device has a web browser. Click on <strong>Mirror<\/strong> in the toolbar, and you will see an IP address. Enter the IP address into the browser. Click on the device in Sketch to connect, and the browser will start previewing the document.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Mirror-IP-Address.mp4","bookmark_id":"sketch-previewing-connecting-via-ip-address"},{"id":"10210","section_id":"78","order":"4","title":"Previewing in Apple Watch","subhead":"","body":"<p>Sketch Mirror is not supporting preview on Apple Watch currently. But we want to have a better context when designing for Apple Watch. You can use <a href=\"https:\/\/itunes.apple.com\/us\/app\/invision-design-collaboration\/id990700027?mt=8\">InVision<\/a> or <a href=\"https:\/\/itunes.apple.com\/us\/app\/marvel-app\/id765801658?mt=8\">Marvel<\/a> Apple Watch app to preview the designs. Both are collaboration and prototyping tools that let you create projects and upload your screens.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/InVision-Marvel-Apple-Watch.jpg","image_width":"1600","image_height":"968","video":"","bookmark_id":"sketch-previewing-previewing-in-apple-watch"},{"id":"10211","section_id":"78","order":"5","title":"Previewing in Android","subhead":"","body":"<p>Previewing in Android is also not supported by Sketch Mirror. But you can use <a href=\"https:\/\/bjango.com\/mac\/skalapreview\/\">Skala Preview<\/a>. It is a macOS app that let you drag exported screens into it and preview on your device. On top of that, you need to install Skala View on <a href=\"http:\/\/itunes.apple.com\/us\/app\/skala-view\/id498876303?mt=8\">iOS<\/a> or <a href=\"https:\/\/play.google.com\/store\/apps\/details?id=com.bjango.skalaview\">Android<\/a> device to receive the preview. Skala Preview support JPG, PNG, and TIFF image format.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Skala-Preview.jpg","image_width":"1600","image_height":"870","video":"","bookmark_id":"sketch-previewing-previewing-in-android"},{"id":"10212","section_id":"78","order":"6","title":"","subhead":"Auto Preview","body":"<p>Additionally, you can install <a href=\"https:\/\/github.com\/marcisme\/sketch-preview\">Sketch Preview<\/a> plugin together with Skala Preview to beam Artboards to your device. Set it as <strong>Auto Preview<\/strong> mode, and then it will work like Sketch Mirror. You can change the resolutions of preview based on your preference.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Preview-Setup.jpg","image_width":"1600","image_height":"770","video":"","bookmark_id":"sketch-previewing-auto-preview"},{"id":"10213","section_id":"78","order":"7","title":"Sharing with Sketch Cloud","subhead":"","body":"<p><a href=\"https:\/\/sketch.cloud\/\">Sketch Cloud<\/a> allows you to upload documents and share them publicly or privately with friends, clients, and colleagues. It is free if you have an active Sketch license. Create an account on the website, and then you&rsquo;re good to go!<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Cloud-Preferences.jpg","image_width":"1600","image_height":"684","video":"","bookmark_id":"sketch-previewing-sharing-with-sketch-cloud"},{"id":"10214","section_id":"78","order":"8","title":"","subhead":"Using Sketch Cloud","body":"<p>By using Sketch Cloud, all you need is upload your work in Sketch with just one click and it will generate a link. If you&apos;ve updated your designs, click <strong>Refresh<\/strong> and the same URL will update to the latest version. You can enable the comments to let anyone who can view the projects leave comments and get feedback.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Cloud.mp4","bookmark_id":"sketch-previewing-using-sketch-cloud"},{"id":"10215","section_id":"78","order":"9","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/pizza0502\">Pizza Yap<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-previewing-credit"}]},{"id":"75","chapter_id":"2","order":"12","slug":"sketch-advanced","title":"Advanced Techniques","caption":"Master Sketch with these Tricks ","body":"<p>There are several techniques that you won\u2019t discover at first, even after a few months of usage. Although deceptively simple, Sketch actually has many tricks up its sleeves. Even after all these years, I still learn new things I overlooked. These techniques are more hidden. They\u2019re not the ones you\u2019re likely to use on a daily basis, but they can change your workflow.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-advanced.jpg","video":"https:\/\/player.vimeo.com\/external\/244937151.hd.mp4?s=43e1d6e493dc711d69a6331e3fd6fa9c9d9b1330&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-advanced.zip","contents":[{"id":"12011","section_id":"75","order":"1","title":"Border Options","subhead":"","body":"<p>One of the most under-utilized features of Sketch is the border options, which is hidden in a small gear icon next to border styles. But you can do really cool things with it, like replicating the Apple Watch rings.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/CCzgdl3UUAAYFfu.mp4","bookmark_id":"sketch-advanced-border-options"},{"id":"12012","section_id":"75","order":"2","title":"","subhead":"Apple Watch Rings","body":"<p>To create a progress ring like Apple Watch, draw a circle of 256px with no fill,&#xA0;&#xA0;border position set to center,&#xA0;&#xA0;and 30 of thickness.<\/p><p>Set the border <strong>Gap<\/strong> to the ring size (<strong>diameter x Pi<\/strong>). Which means if your circle has a width and height of 256, then enter <strong>256 x Pi<\/strong> into the Gap, then switch to the <strong>Dash<\/strong> and start to increase it with the arrow up to arrive to the number you need.<\/p><p>Finally to replicate the Apple Watch&rsquo;s activity ring, set the <strong>Ends<\/strong> to curved, and flip your circle to a <strong>Vertical or Horizontal Flip<\/strong>. Or Rotate it with the arrow up to arrive to the exact place you need.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-BorderOptions.mp4","bookmark_id":"sketch-advanced-apple-watch-rings"},{"id":"12013","section_id":"75","order":"3","title":"Custom Shapes: Radius and Points","subhead":"","body":"<p>You can create a Polygon and Star with any number of points. For the Star, you can customize the Radius as well.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-Polygon.mp4","bookmark_id":"sketch-advanced-custom-shapes-radius-and-points"},{"id":"12014","section_id":"75","order":"4","title":"Rotate Copies","subhead":"","body":"<p>I found myself using this trick a few times for creating the clock designs in the <a href=\"https:\/\/designcode.io\/watch\">Apple Watch GUI<\/a>. Using a simple shape, you can create as many copies as you want in a circular design. The size and rotation can then be customized by dragging the center point.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-RotateCopies.mp4","bookmark_id":"sketch-advanced-rotate-copies"},{"id":"12015","section_id":"75","order":"5","title":"Option Click in Layers List","subhead":"","body":"<p>You can expand all the layers and subgroups by Option clicking the expand icon on the left of a Layer or Group.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-LayersListAlt.mp4","bookmark_id":"sketch-advanced-option-click-in-layers-list"},{"id":"12016","section_id":"75","order":"6","title":"Drag Out to Create Asset","subhead":"","body":"<p>In your Layers List, you can drag a Layer, Group or Artboard to your Desktop to instantly get a PNG 1x asset for it. If you wish to change the format of the asset, you can do so by customizing in Make Exportable.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-DragOut.mp4","bookmark_id":"sketch-advanced-drag-out-to-create-asset"},{"id":"12017","section_id":"75","order":"7","title":"Round to Nearest Pixel Edge","subhead":"","body":"<p>Whenever possible, it&rsquo;s important to avoid decimals in the <strong>X<\/strong>, <strong>Y<\/strong>, <strong>Width<\/strong>, <strong>Height<\/strong> numbers in the Inspector. Those decimals could be the reason why your assets are not as sharp as they should be. Use <strong>Round to Nearest Pixel Edge<\/strong> to fit your shapes in the Pixels Grid. <\/p><p><strong>Note<\/strong>: Round to Nearest Pixel Edge may destroy the integrity of your icon, so be ready to make adjustments afterwards, or manually fix the shape instead. Make sure to have <strong>Pixel Fitting<\/strong> enabled in your Preferences.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/RoundToNearestPixelEdge.mp4?dl=0","bookmark_id":"sketch-advanced-round-to-nearest-pixel-edge"},{"id":"12018","section_id":"75","order":"8","title":"Multiple Duplicate","subhead":"","body":"<p>When you start duplicating using <strong>Option + Drag<\/strong>, the next time you press Command + D, it&rsquo;ll duplicate at exactly the same distance over and over.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Duplicate-Multiple.mp4","bookmark_id":"sketch-advanced-multiple-duplicate"},{"id":"12019","section_id":"75","order":"9","title":"To Front, To Back","subhead":"","body":"<p>When you press <strong>Alt<\/strong> and have the <strong>Forward<\/strong> \/ <strong>Backward<\/strong> options in your Toolbar, it&rsquo;ll change to <strong>To Front<\/strong> \/ <strong>To Back<\/strong>. This allows you to quickly make layers jump to the back or front of the document.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-AltFront.mp4","bookmark_id":"sketch-advanced-to-front-to-back"},{"id":"12020","section_id":"75","order":"10","title":"Alpha Masking","subhead":"","body":"<p>Your Mask needs to have a gradient with alpha properties first. Any color will do. Then, do Use as Mask and Sketch will automatically switch to Alpha Masking.<\/p><p>Keep an eye on what you&rsquo;re masking because you may be scratching your head as to why some elements are hidden. Group layers to isolate Masks. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-AlphaMask.mp4.mp4","bookmark_id":"sketch-advanced-alpha-masking"},{"id":"12021","section_id":"75","order":"11","title":"Text Gradient","subhead":"","body":"<p>You must first convert your text to outlines before being able to apply a Gradient, just like any shape. This is particularly useful for creating a logotype.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-TextGradient.mp4","bookmark_id":"sketch-advanced-text-gradient"},{"id":"12022","section_id":"75","order":"12","title":"Rounded Corners Editing","subhead":"","body":"<p>You can be specific about which Point of your shape that you want rounded. Additionally, you can write numbers like this to target the corners (e.g., <strong>100;0;100;100<\/strong>).<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-RoundedCorners.mp4","bookmark_id":"sketch-advanced-rounded-corners-editing"},{"id":"12023","section_id":"75","order":"13","title":"Copy CSS Attributes","subhead":"","body":"<p>This feature is useful for getting the color codes, border-radius, and gradient properties. Since Sketch works with the same styling properties as CSS (Fills, Borders and Shadows), any shape with these options can be transformed into CSS code.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-CSS.mp4","bookmark_id":"sketch-advanced-copy-css-attributes"},{"id":"12024","section_id":"75","order":"14","title":"Convert to Outlines","subhead":"","body":"<p>The <strong>Border<\/strong> is a property available to any shape. When you resize them, they keep the same thickness and position (center, inside, outside). With Convert to Outlines, you can convert those outlines into vectors that can be scalable. The resulting vector will be composed of multiple shapes combined.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Vectorize.mp4","bookmark_id":"sketch-advanced-convert-to-outlines"},{"id":"12025","section_id":"75","order":"15","title":"Layout Grids","subhead":"","body":"<p>Sketch has a fantastic Grid feature. You can create virtually any grid you want such as the <a href=\"http:\/\/960.gs\">960 Grid<\/a>. Since grids are most efficient with big canvases, they work best with Web design. Start by creating a new Desktop Artboard. Then go to Layout Settings and customize your grid. With the grid, you can easily set 1, 2, 3 or 4-column layouts.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-LayoutGrids.mp4.mp4","bookmark_id":"sketch-advanced-layout-grids"},{"id":"12026","section_id":"75","order":"16","title":"Text on Path","subhead":"","body":"<p>You can create interesting effects with <strong>Text on Path<\/strong>. It&apos;s great for playful logotypes and perspectives. By simply creating a Path or any shape and by setting the subsequent text Layer to <strong>Type<\/strong> \/ <strong>Text on Path<\/strong>, the text will magically follow the shape of the path. It&rsquo;s a bit tricky to use, so make sure to drag around your text layer to find the sweet spot.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Advanced-TextonPath.mp4","bookmark_id":"sketch-advanced-text-on-path"},{"id":"12027","section_id":"75","order":"17","title":"Emoji &amp; Symbols","subhead":"","body":"<p>Emojis are increasingly popular thanks to iOS and messaging apps. It is not uncommon to use them in demos and presentation screens. &#x201C;Emojis &amp; Symbols&#x201D; (<strong>Ctrl Cmd Space<\/strong>) not only allows you to insert emojis but also all the other useful symbols. Note that this feature works across all Mac apps.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Emojis.jpeg","image_width":"1630","image_height":"970","video":"","bookmark_id":"sketch-advanced-emoji-symbols"},{"id":"12028","section_id":"75","order":"18","title":"Open Recent files","subhead":"","body":"<p>If you long press the Sketch app icon on your Mac&apos;s dock, you get a list of the recent files you&apos;ve opened.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-Recent.jpeg","image_width":"922","image_height":"680","video":"","bookmark_id":"sketch-advanced-open-recent-files"},{"id":"12029","section_id":"75","order":"19","title":"Flatten to Bitmap","subhead":"","body":"<p>The more Layers, Symbols, Blurred backgrounds you have, the slower Sketch may get. Transforming them to Bitmap can help performance greatly. With Bitmaps, you have the flexibility to use as a Fill background.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/FlattenToBitmap.mp4?dl=0","bookmark_id":"sketch-advanced-flatten-to-bitmap"},{"id":"12030","section_id":"75","order":"20","title":"Make Grid","subhead":"","body":"<p>When I discovered this method, it really affected the way I worked. Make Grid makes it easy to duplicate anything, for any amount of copies in a grid style. You can set the spacing between the elements or have them enclosed in boxes before duplicating. This is specifically useful for handling List (Table View) and Grid (Collection View) interfaces, or simply rearrange layers in an orderly fashion. Make Grid also works on Artboards.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Sketch-MakeGrid.mp4.mp4","bookmark_id":"sketch-advanced-make-grid"},{"id":"12031","section_id":"75","order":"21","title":"Expand and Collapse","subhead":"","body":"<p>As you work with hundreds of layers and nested groups, you&rsquo;ll want to be able to find your layers quickly.<\/p><p><strong>Alt Click Expand Arrow<\/strong> to expand and collapse all Artboards and groups.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Keyboard-LayersList.jpeg","image_width":"1598","image_height":"1060","video":"","bookmark_id":"sketch-advanced-expand-and-collapse"},{"id":"12032","section_id":"75","order":"22","title":"Set Layer as Default Style","subhead":"","body":"<p>When you create a Layer, it has by default a gray color with a gray border, maybe for a project it will be more handy to have already set up an specific color when you create a new layer. Fortunately Sketch gives you that option.<\/p><p>Create a new layer and give it the Color of the Fill or the Border as you will like, then select that Layer and go to <strong>Layer&gt;Style&gt;Set as Default Style<\/strong>, once you will do that, you will see that the next new layer you will create will have those new properties.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/SetAsDefaultStyle.mp4?dl=0","bookmark_id":"sketch-advanced-set-layer-as-default-style"},{"id":"12033","section_id":"75","order":"23","title":"Bezier Curves","subhead":"","body":"<p>When you select a vector point, you can easily change to any mode of the Bezier Curves just hitting 1, 2, 3 or 4 number key. It will swap between straight, mirrored, disconnected, and asymmetric.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/BezierCurves.mp4?dl=0","bookmark_id":"sketch-advanced-bezier-curves"}]},{"id":"89","chapter_id":"2","order":"13","slug":"framer-intro","title":"Intro to Framer","caption":"Design and code animations with Framer","body":"<p>In this tutorial, we&#39;re going to be introduced to <a href=\"http:\/\/framer.com\">Framer<\/a>, a code-based design and prototyping tool. We're going to explore the core concepts that make Framer a powerful prototyping option for designers and developers, and we&#39;re going to replicate one of the transitions found in the Design+Code app.<\/p>\n\n<p>Before we begin, download the <a href=\"https:\/\/www.dropbox.com\/s\/rmlllkfnkm1qxsi\/2.20.DesignCode-Chapters-New.framer.zip?dl=0\">project files<\/a> to follow the tutorial. You should open the &#39;DesignCode-Chapter-New.framer&#39; file to get started but if, at any time, you feel the need to see the solution, you can download <a href=\"https:\/\/www.dropbox.com\/s\/bmjps5nygat0ph2\/2.20.DesignCode-Chapters-Solution.framer.zip?dl=0\">here<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-framer.jpg","video":"https:\/\/player.vimeo.com\/external\/246867266.hd.mp4?s=b4edea984355a640dbd850b09e2c9dc844dc3bb1&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/framer-intro.zip","contents":[{"id":"11762","section_id":"89","order":"1","title":"Framer UI","subhead":"","body":"<p>When you open Framer for the first time you will see that it has a very familiar UI, very similar to many of the designs apps that we are use to, by default your new project will open on Design mode but you can work independently or combined with Code mode.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/FramerUI.mp4?dl=0","bookmark_id":"framer-intro-framer-ui"},{"id":"11763","section_id":"89","order":"2","title":"Design Tab","subhead":"","body":"<p>Framer&apos;s design tab can be broken down into four main parts.<\/p>","image":"https:\/\/designcode.io\/cloud\/framer\/DesignTab.jpg","image_width":"1600","image_height":"900","video":"","bookmark_id":"framer-intro-design-tab"},{"id":"11764","section_id":"89","order":"3","title":"","subhead":"1. Sidebar","body":"<p>Here we have tools for inserting artboards, rectangles, ovals, text, zooming the canvas and at the bottom, a built-in icon panel.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Sidebar.mp4?dl=0","bookmark_id":"framer-intro-1-sidebar"},{"id":"11765","section_id":"89","order":"4","title":"","subhead":"2. Layer Panel","body":"<p>Like most other design tools, Framer also has a layer panel. However, there are some key differences. We&apos;ll go into these in more detail later, so you can understand how layers work in Framer.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/LayerPanel.mp4?dl=0","bookmark_id":"framer-intro-2-layer-panel"},{"id":"11766","section_id":"89","order":"5","title":"","subhead":"3. Canvas","body":"<p>You can use the canvas to create artboards for a wide variety of phones, tablets, watches, desktops and even TV&apos;s.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Canvas.mp4?dl=0","bookmark_id":"framer-intro-3-canvas"},{"id":"11767","section_id":"89","order":"6","title":"","subhead":"4. Properties Panel","body":"<p>When you select a layer on an artboard, a list of available properties for styling and layout appears.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Properties%20Panel.mp4?dl=0","bookmark_id":"framer-intro-4-properties-panel"},{"id":"11768","section_id":"89","order":"7","title":"Code Tab","subhead":"","body":"<p>The Code Tab can be divided into five parts.<\/p>","image":"https:\/\/designcode.io\/cloud\/framer\/CodeTab.jpg","image_width":"1594","image_height":"443","video":"","bookmark_id":"framer-intro-code-tab"},{"id":"11769","section_id":"89","order":"8","title":"","subhead":"1. Sidebar","body":"<p>The sidebar is very similar like in design mode, you have different tools to quickly animate your layers, plus you can import your designs from other apps hitting the import button, you can also quickly access to the framer documentation or inspect your code.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/SideBarCodeMode.mp4?dl=0","bookmark_id":"framer-intro-1-sidebar"},{"id":"11770","section_id":"89","order":"9","title":"","subhead":"2. Layer Panel","body":"<p>It shows you all your layers similar like in design mode. If you hover any of your layers on the Layer Panel you can easily identify it on the preview window. Also if you right click any of your layers you can immediately add an animation, a state or and event. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/LayerPanelCodeMode.mp4?dl=0","bookmark_id":"framer-intro-2-layer-panel"},{"id":"11771","section_id":"89","order":"10","title":"","subhead":"3. Code Editor Area","body":"<p>It is really easy to start coding on framer. It has a very appealing and helpful syntax highlighting, the bottom of the editor area is reserved to show you the errors that you have in your code, and something that we love is the <a href=\"https:\/\/blog.framer.com\/write-better-code-with-smart-autocomplete-53f4036df7b8\" title=\"Smart Autocomplete\">Smart Autocomplete&#xA0;<\/a>feature that Framer has. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/CodeEditorArea.mp4?dl=0","bookmark_id":"framer-intro-3-code-editor-area"},{"id":"11772","section_id":"89","order":"11","title":"","subhead":"4. Preview Window","body":"<p>It is a canvas with the render prototype, which gives you real time visual feedback.<\/p><p>From the top of the navigation bar you can select different type of devices, and also, you can detach preview window. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Preview%20Window.mp4?dl=0","bookmark_id":"framer-intro-4-preview-window"},{"id":"11773","section_id":"89","order":"12","title":"","subhead":"5. Properties Panel","body":"<p>You can access it by clicking on the <strong>edit icon.<\/strong> On that panel you will see the different properties of your animation, state or event. <\/p><p>There is a nice feature in Framer called <a href=\"https:\/\/blog.framer.com\/introducing-auto-code-for-animation-design-d458603b6e8a\" title=\"Auto-code\">Auto-code<\/a>, if you modify a layer from the preview window you will see the changes in two more places: on the properties panel and in the code editor area. Auto-code keeps up the code with your visual modifications all the time.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/CodeEditorArea.mp4?dl=0","bookmark_id":"framer-intro-5-properties-panel"},{"id":"11774","section_id":"89","order":"13","title":"Design Essentials","subhead":"","body":"<p>Essential things to know about Framer.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"framer-intro-design-essentials"},{"id":"11775","section_id":"89","order":"14","title":"","subhead":"Layers","body":"<p>Layers in Framer are very similar to layers in any other design tool, but there are a few small differences that set them apart. We&apos;re all used to the concept of grouping in Sketch where you select two or more layers and create a group with those layers. Technically, there are no groups in Framer. Layers &apos;nest&apos; instead, like divs on a webpage. Take a look at the artboard called &apos;Page1&apos;. It has a number of child layers. iOSGuide is at the top of this tree and itself contains some child layers. iOSGuideImage contains the heading and body text. These text layers are &apos;nested&apos; and although they appear below the iOSGuideImage in the layer panel, they actually sit above the image and are still visible on the canvas. Let&apos;s see a quick video example of how nesting works.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Layers-Nesting.mp4","bookmark_id":"framer-intro-layers"},{"id":"11776","section_id":"89","order":"15","title":"","subhead":"Targets","body":"<p>We need to activated the layers in our design, so we can use them on code mode. The layers activated in design mode are highlighted. To target a layer we just need to click on the small icon next to it.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Targets.mp4?dl=0","bookmark_id":"framer-intro-targets"},{"id":"11777","section_id":"89","order":"16","title":"","subhead":"Responsive Layout","body":"<p>One of Framers power features is responsiveness by default. Depending on where and how you place layers on artboards, Framer will always try to work out how you want it to respond to changes in screen size. So for example, if you place a layer snapped to the right side of the screen, when the screen resizes, the layer will stay snapped to that position.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Responsive-Layers.mp4","bookmark_id":"framer-intro-responsive-layout"},{"id":"11778","section_id":"89","order":"17","title":"","subhead":"Layout Preview","body":"<p>The layout system obviously can&apos;t predict every situation. As your design gets more complex, it&rsquo;s worth heading over to the layout panel to make modifications yourself. What&rsquo;s really awesome about Framer&apos;s layout tool is that it gives you a preview of how your layer will behave with currently selected settings. Let&apos;s see it in action to get a better understanding of how it works.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Layout-Preview.mp4","bookmark_id":"framer-intro-layout-preview"},{"id":"11779","section_id":"89","order":"18","title":"Code Essentials","subhead":"","body":"<p>The core concepts of prototyping in Framer can be broken into four parts. They&apos;re simple but mastering them will take your prototyping to the next level.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"framer-intro-code-essentials"},{"id":"11780","section_id":"89","order":"19","title":"","subhead":"1. Layers","body":"<p>Layers in Framer are not unlike the layers you&apos;ll find in Sketch. When you create a layer, you can style it and add images, texts and videos. Layers can be parented to other layers and animated too. They&apos;re the building blocks of Framer.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Layers.mp4?dl=0","bookmark_id":"framer-intro-1-layers"},{"id":"11781","section_id":"89","order":"20","title":"","subhead":"2. Animation","body":"<p>Animation is what brings your layers to life. You can animate layer properties like background color, height, width, size, opacity, border radius , etc&#x2026;<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Animation.mp4?dl=0","bookmark_id":"framer-intro-2-animation"},{"id":"11782","section_id":"89","order":"21","title":"","subhead":"3. States","body":"<p>States are stored sets of layer properties. You can create multiple states of pretty much anything in Framer and switch or animate between them.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/States.mp4?dl=0","bookmark_id":"framer-intro-3-states"},{"id":"11783","section_id":"89","order":"22","title":"","subhead":"4. Events","body":"<p>Events are used to detect and respond to user input or interaction like taps, double taps, drags and more. Normally, events trigger animations or state changes.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Events.mp4?dl=0","bookmark_id":"framer-intro-4-events"},{"id":"11784","section_id":"89","order":"23","title":"The Exercise","subhead":"","body":"<p>For this exercise we will work only on the <strong>Code Tab<\/strong>, I already added the designs on the Design Tab and I targeted all the different layers that we will use. What we will do in the exercise, is to replicate the animation when we tap into one of the section cards, this card will unfolds showing us the content of the section, and then we will animate when we tap on the close button and the card folds again.<\/p><p>Most of the first part of our code will focus to set up all our different elements into the artboard, yet in parts <strong>Transition 1 (Open Event)<\/strong> and <strong>&#xA0;Transition 2 (Close Event)<\/strong>, we will work on the unfold and fold animations respectively.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/App-Example.mp4","bookmark_id":"framer-intro-the-exercise"},{"id":"11785","section_id":"89","order":"24","title":"","subhead":"Setup","body":"<p>Before we get into the fun stuff, we&apos;re going to do a bit of set up to our exercise. <\/p><p>First we&apos;re going to define the spring curve for the animations that we&apos;ll use in our example. Then we will write some text that will show up the moment when the card will unfold, you will see it again almost at the end of the exercise.<\/p><p>And finally we will set the default states for the Play and Close buttons.<\/p><p>We will move out of the canvas the close button, then we will scale down the play button to .5 and give an opacity 0.<\/p><pre><code class=\"language-coffeescript\"><span class=\"token comment\"># Setup<\/span><br><br>defaultSpring <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;spring(280, 27, 5)&quot;<\/span><br><br>textExample <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Three years ago, Apple completely revamped their design language for modern users. It is now much simpler, allowing designers to focus on animation and function rather than intricate visual details.&quot;<\/span><br><br>closeBtn<span class=\"token punctuation\">.<\/span>y <span class=\"token operator\">=<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">40<\/span> <br>playBtn<span class=\"token punctuation\">.<\/span>scale <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token number\">5<\/span><br>playBtn<span class=\"token punctuation\">.<\/span>opacity <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br><\/code><\/pre><p>Then we will select all this code, right click and select &apos;Fold&apos;. This is where Framer&apos;s &apos;Code Fold&apos; feature really shines. This will create a new section for this code.<\/p><p> It&apos;s good to keep this away from our main code to keep it clean. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/setupFold.mp4","bookmark_id":"framer-intro-setup"},{"id":"11786","section_id":"89","order":"25","title":"Page Component","subhead":"","body":"<p>To introduce paging to our cards, we need to use a PageComponent.<\/p><p>We will make it a child layer of PageView which is the layer from the Chapters artboard in design it should be parented to. Then the Y position is set. As the PageComponent now has PageView as a parent layer, any position values it&apos;s given is in relation to its parent. When we set it&apos;s Y position to 60, what we&apos;re actually doing is setting it 60px down from the top of the PageView layer. To offset this positioning, we&apos;ve set our PageComponent&apos;s height with a simple calculation. This is a quick way to set the value of a property on a layer, if you don&apos;t want to set it manually that is. As this PageComponent should only scroll horizontally, we&apos;ve set scrollVertical to &apos;false&apos;. Finally, setting the contentInset gives our pages some margin on the left and right. Feel free to play around with some of these values to see how they change the layout.<\/p><pre><code class=\"language-coffeescript\">pageComp <span class=\"token operator\">=<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">PageComponent<\/span><br>    <span class=\"token property\">parent<\/span><span class=\"token punctuation\">:<\/span> PageView<br>    <span class=\"token property\">y<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">60<\/span><br>    <span class=\"token property\">height<\/span><span class=\"token punctuation\">:<\/span> PageView<span class=\"token punctuation\">.<\/span>height <span class=\"token operator\">-<\/span> <span class=\"token number\">60<\/span><br>    <span class=\"token property\">width<\/span><span class=\"token punctuation\">:<\/span> PageView<span class=\"token punctuation\">.<\/span>width<br>    <span class=\"token property\">scrollVertical<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">false<\/span><br>    <span class=\"token property\">contentInset<\/span><span class=\"token punctuation\">:<\/span><br>        <span class=\"token property\">left<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">10<\/span><br>        <span class=\"token property\">right<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">10<\/span><br><\/code><\/pre><p>You now have the PageComponent set up, but it needs some content. Adding content is extremely easy. We just need to add pages to our PageComponent.<\/p><pre><code class=\"language-coffeescript\">pageComp<span class=\"token punctuation\">.<\/span><span class=\"token function\">addPage<\/span><span class=\"token punctuation\">(<\/span>Page1<span class=\"token punctuation\">)<\/span><br>pageComp<span class=\"token punctuation\">.<\/span><span class=\"token function\">addPage<\/span><span class=\"token punctuation\">(<\/span>Page2<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>The code inside the brackets is the layer, or in this case the artboard we want as the content of that page.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Page-Component.mp4","bookmark_id":"framer-intro-page-component"},{"id":"11787","section_id":"89","order":"26","title":"","subhead":"Setting States","body":"<p>It&apos;s important that some states are set up for elements so we can animate between them. Let&apos;s set up the Play Button.<\/p><pre><code class=\"language-coffeescript\">playBtn<span class=\"token punctuation\">.<\/span>states<span class=\"token punctuation\">.<\/span>Show <span class=\"token operator\">=<\/span><br>    <span class=\"token property\">opacity<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><br>    <span class=\"token property\">scale<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><br>    <span class=\"token property\">animationOptions<\/span><span class=\"token punctuation\">:<\/span><br>        <span class=\"token property\">curve<\/span><span class=\"token punctuation\">:<\/span> defaultSpring<br><br>playBtn<span class=\"token punctuation\">.<\/span>states<span class=\"token punctuation\">.<\/span>Hide <span class=\"token operator\">=<\/span><br>    <span class=\"token property\">opacity<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><br>    <span class=\"token property\">scale<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token number\">5<\/span><br>    <span class=\"token property\">animationOptions<\/span><span class=\"token punctuation\">:<\/span><br>        <span class=\"token property\">time<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token number\">2<\/span><br><\/code><\/pre><p>Here we have two states &apos;Show&apos; and &apos;Hide&apos;. Think of states as a way of storing properties we can toggle between. We&apos;ve also added animation options so we get a nice transition between the two states controlled by the spring curve we created in setup. Let&apos;s do the same with the Close Button.<\/p><pre><code class=\"language-coffeescript\">closeBtn<span class=\"token punctuation\">.<\/span>states<span class=\"token punctuation\">.<\/span>Show <span class=\"token operator\">=<\/span><br>    <span class=\"token property\">y<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">40<\/span><br>    <span class=\"token property\">animationOptions<\/span><span class=\"token punctuation\">:<\/span><br>        <span class=\"token property\">curve<\/span><span class=\"token punctuation\">:<\/span> defaultSpring<br><br>closeBtn<span class=\"token punctuation\">.<\/span>states<span class=\"token punctuation\">.<\/span>Hide <span class=\"token operator\">=<\/span><br>    <span class=\"token property\">y<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">50<\/span><br>    <span class=\"token property\">animationOptions<\/span><span class=\"token punctuation\">:<\/span><br>        <span class=\"token property\">time<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token number\">2<\/span><br><\/code><\/pre><p>Next, we&apos;ll store some default properties from the iOS Guide layer we&apos;ll need to use later.<\/p><pre><code class=\"language-coffeescript\">origX <span class=\"token operator\">=<\/span> iOSGuide<span class=\"token punctuation\">.<\/span>x<br>origY <span class=\"token operator\">=<\/span> iOSGuide<span class=\"token punctuation\">.<\/span>y<br>origSize <span class=\"token operator\">=<\/span> iOSGuide<span class=\"token punctuation\">.<\/span>size<br>origPos <span class=\"token operator\">=<\/span> iOSGuide<span class=\"token punctuation\">.<\/span>screenFrame<br><\/code><\/pre><p>Like what we&apos;ve done with our Play and Close buttons above, we&apos;ll set up states for the iOSGuide and the image inside it.<\/p><pre><code class=\"language-coffeescript\">iOSGuide<span class=\"token punctuation\">.<\/span>states<span class=\"token punctuation\">.<\/span>Open <span class=\"token operator\">=<\/span><br>    <span class=\"token property\">size<\/span><span class=\"token punctuation\">:<\/span> Screen<span class=\"token punctuation\">.<\/span>size<br>    <span class=\"token property\">x<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><br>    <span class=\"token property\">y<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><br>    <span class=\"token property\">borderRadius<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><br>    <span class=\"token property\">animationOptions<\/span><span class=\"token punctuation\">:<\/span><br>        <span class=\"token property\">curve<\/span><span class=\"token punctuation\">:<\/span> defaultSpring<br><br>iOSGuide<span class=\"token punctuation\">.<\/span>states<span class=\"token punctuation\">.<\/span>Close <span class=\"token operator\">=<\/span><br>    <span class=\"token property\">size<\/span><span class=\"token punctuation\">:<\/span> origSize<br>    <span class=\"token property\">parent<\/span><span class=\"token punctuation\">:<\/span> Page1<br>    <span class=\"token property\">x<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">23<\/span><br>    <span class=\"token property\">y<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">258<\/span><br>    <span class=\"token property\">borderRadius<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">15<\/span><br>    <span class=\"token property\">animationOptions<\/span><span class=\"token punctuation\">:<\/span><br>        <span class=\"token property\">curve<\/span><span class=\"token punctuation\">:<\/span> defaultSpring<br><br>iOSGuideImage<span class=\"token punctuation\">.<\/span>states<span class=\"token punctuation\">.<\/span>Expanded <span class=\"token operator\">=<\/span><br>    <span class=\"token property\">height<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">400<\/span><br>    <span class=\"token property\">animationOptions<\/span><span class=\"token punctuation\">:<\/span><br>        <span class=\"token property\">curve<\/span><span class=\"token punctuation\">:<\/span> defaultSpring<br><br>iOSGuideImage<span class=\"token punctuation\">.<\/span>states<span class=\"token punctuation\">.<\/span>Initial <span class=\"token operator\">=<\/span><br>    <span class=\"token property\">height<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">250<\/span><br>    <span class=\"token property\">animationOptions<\/span><span class=\"token punctuation\">:<\/span><br>        <span class=\"token property\">curve<\/span><span class=\"token punctuation\">:<\/span> defaultSpring<br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"framer-intro-setting-states"},{"id":"11788","section_id":"89","order":"27","title":"","subhead":"Add Text","body":"<p>The final bit of setting up before we begin coding the transition is to add some extra content to the iOSGuide, as seen in the example. Framer&apos;s TextLayer makes this easy.<\/p><pre><code class=\"language-coffeescript\">articleText <span class=\"token operator\">=<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">TextLayer<\/span><br>    <span class=\"token property\">text<\/span><span class=\"token punctuation\">:<\/span> textExample<br>    <span class=\"token property\">parent<\/span><span class=\"token punctuation\">:<\/span> iOSGuide<br>    <span class=\"token property\">x<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">25<\/span><br>    <span class=\"token property\">y<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">430<\/span><br>    <span class=\"token property\">width<\/span><span class=\"token punctuation\">:<\/span> Screen<span class=\"token punctuation\">.<\/span>width <span class=\"token operator\">-<\/span> <span class=\"token number\">50<\/span><br>    <span class=\"token property\">fontSize<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">17<\/span><br>    <span class=\"token property\">fontFamily<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;SF-Pro-Text-Regular, -apple-system&quot;<\/span><br>    <span class=\"token property\">lineHeight<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">1.75<\/span><br>    <span class=\"token property\">color<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;#000&quot;<\/span><br><br>headerText <span class=\"token operator\">=<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">TextLayer<\/span><br>    <span class=\"token property\">text<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Core Philosophies&quot;<\/span><br>    <span class=\"token property\">parent<\/span><span class=\"token punctuation\">:<\/span> iOSGuide<br>    <span class=\"token property\">x<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">25<\/span><br>    <span class=\"token property\">y<\/span><span class=\"token punctuation\">:<\/span> articleText<span class=\"token punctuation\">.<\/span>maxY <span class=\"token operator\">+<\/span> <span class=\"token number\">20<\/span><br>    <span class=\"token property\">width<\/span><span class=\"token punctuation\">:<\/span> Screen<span class=\"token punctuation\">.<\/span>width <span class=\"token operator\">-<\/span> <span class=\"token number\">50<\/span><br>    <span class=\"token property\">fontSize<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">17<\/span><br>    <span class=\"token property\">fontWeight<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">900<\/span><br>    <span class=\"token property\">fontFamily<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;SF-Pro-Text-Bold, -apple-system&quot;<\/span><br>    <span class=\"token property\">lineHeight<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">1.75<\/span><br>    <span class=\"token property\">color<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;#000&quot;<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Text.mp4","bookmark_id":"framer-intro-add-text"},{"id":"11789","section_id":"89","order":"28","title":"","subhead":"Transition 1 (Open Event)","body":"<p>We want the transition to begin when the iOSGuide is tapped. To do this, we&apos;re going to use the &apos;onTap&apos; event.<\/p><pre><code class=\"language-coffeescript\">iOSGuide<span class=\"token punctuation\">.<\/span>onTap <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span><br><\/code><\/pre><p> When this happens, we want to remove it from the PageComponent and parent it to the Chapters screen. This is so when it expands, it isn&apos;t clipped by its parent layer and appears above everything else. By default, parenting the iOSGuide layer to a new layer on an event would change its position on screen, but we want the transition to start from the same position it was in when inside the PageComponent. To do this, we&apos;re going to use one of the properties from iOSGuide we stored earlier, called &apos;screenFrame&apos;. In Framer, this property gets the exact position and size of an element on screen.<\/p><pre><code class=\"language-coffeescript\">   <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>parent <span class=\"token operator\">=<\/span> Chapters<br>   <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>screenFrame <span class=\"token operator\">=<\/span> origPos<br><\/code><\/pre><p>For now we&apos;ll use &apos;this&apos;.<\/p><p>Next, let&apos;s change the appearance of the Status Bar and place the iOSGuide under it. This is obviously optional but when designing for iOS, it&apos;s good practice to make use of both light and dark versions of the Status Bar so there&apos;s always good contrast when changing the context it&apos;s displayed in.<\/p><pre><code class=\"language-coffeescript\">   StatusLight<span class=\"token punctuation\">.<\/span>visible <span class=\"token operator\">=<\/span> <span class=\"token keyword\">true<\/span><br>   StatusDark<span class=\"token punctuation\">.<\/span>visible <span class=\"token operator\">=<\/span> <span class=\"token keyword\">false<\/span><br>   <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">placeBehind<\/span><span class=\"token punctuation\">(<\/span>StatusLight<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p> We&apos;re going to use the states we set up earlier and animate the iOSGuide and the iOSGuideImage to these states.<\/p><pre><code class=\"language-coffeescript\">   <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;Open&quot;<\/span><span class=\"token punctuation\">)<\/span><br>   iOSGuideImage<span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;Expanded&quot;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>To animate to different states, we&apos;ve used the .animate() method and passed in the name of the state we want to animate to. The state name should always be a string- so, it should be enclosed in quotation marks.<\/p><p>We should now have a transition between screens. For the moment, there&apos;s no way to reverse this though. We need to show the Close and Play buttons. To do this, we&apos;ll use .animate() again and pass in the state &quot;Show&quot; for each to animate to these states. We&apos;ll also place them above the iOSGuide to make sure they&apos;re visible.<\/p><pre><code class=\"language-coffeescript\">    closeBtn<span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;Show&quot;<\/span><span class=\"token punctuation\">)<\/span><br>    closeBtn<span class=\"token punctuation\">.<\/span><span class=\"token function\">placeBefore<\/span><span class=\"token punctuation\">(<\/span>iOSGuide<span class=\"token punctuation\">)<\/span><br>    playBtn<span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;Show&quot;<\/span><span class=\"token punctuation\">)<\/span><br>    playBtn<span class=\"token punctuation\">.<\/span><span class=\"token function\">placeBefore<\/span><span class=\"token punctuation\">(<\/span>iOSGuide<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Transition-1.mp4","bookmark_id":"framer-intro-transition-1-open-event"},{"id":"11790","section_id":"89","order":"29","title":"Transition 2 (Close Event)","subhead":"","body":"<p>We need a way to close the article screen and return back to Chapters. To do this, we&apos;re going to add an &apos;onTap&apos; event to the close button and reverse our components back to their initial states.<\/p><pre><code class=\"language-coffeescript\">closeBtn<span class=\"token punctuation\">.<\/span>onTap <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span><br>    iOSGuide<span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;Close&quot;<\/span><span class=\"token punctuation\">)<\/span><br>    iOSGuideImage<span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;Initial&quot;<\/span><span class=\"token punctuation\">)<\/span><br><br>    StatusLight<span class=\"token punctuation\">.<\/span>visible <span class=\"token operator\">=<\/span> <span class=\"token keyword\">false<\/span><br>    StatusDark<span class=\"token punctuation\">.<\/span>visible <span class=\"token operator\">=<\/span> <span class=\"token keyword\">true<\/span><br><br>    closeBtn<span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;Hide&quot;<\/span><span class=\"token punctuation\">)<\/span><br>    playBtn<span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;Hide&quot;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>The final thing we need to do is put the iOSGuide back into the PageComponent when the close animation ends. To do this, we&apos;re going to listen for when the iOSGuide&apos;s current state name is &apos;Close&rsquo;. This is because we&apos;re going to .onAnimationEnd to check for when it stops animating, but we don&apos;t want to put it back into the PageComponent when the opening animation ends.<\/p><pre><code class=\"language-coffeescript\">iOSGuide<span class=\"token punctuation\">.<\/span>onAnimationEnd <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span><br>    <span class=\"token keyword\">if<\/span> iOSGuide<span class=\"token punctuation\">.<\/span>states<span class=\"token punctuation\">.<\/span>current<span class=\"token punctuation\">.<\/span>name <span class=\"token keyword\">is<\/span> <span class=\"token string\">&quot;Close&quot;<\/span><br>        <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>parent <span class=\"token operator\">=<\/span> Page1<br>        <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>x <span class=\"token operator\">=<\/span> origX<br>        <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>y <span class=\"token operator\">=<\/span> origY<br><\/code><\/pre><p>We used an &apos;if&apos; statement to check if the iOSGuide&apos;s current state name is &apos;Close&apos;, and if it is, do something. In this case, putting it back into Page1 in the PageComponent, and setting it&apos;s <strong>X<\/strong> and <strong>Y<\/strong> properties back to their initial values inside Page1, which we stored in <strong>origX<\/strong> and <strong>origY<\/strong> earlier in the prototype.<\/p><p>Now we can tap on the card, and we can see how it opens, and then we can tap on the close button and we can see how it closes. If we want we can add an iPhone frame to our prototype, as well.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/framer\/Transition-2.mp4","bookmark_id":"framer-intro-transition-2-close-event"},{"id":"11791","section_id":"89","order":"30","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/johnmpsherwin\">John Sherwin<\/a> and <a href=\"https:\/\/twitter.com\/dnisttahuz\">Daniel Nisttahuz<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"framer-intro-credit"}]},{"id":"76","chapter_id":"2","order":"13","slug":"sketch-keynote","title":"Prototyping in Keynote","caption":"Prototyping in Keynote Using Magic Move","body":"<p>Keynote is a great tool for presentation. Yet, it can do far more than that. Designers, including those at Apple, use it for prototyping for one very good reason: the Magic Move tool. <\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/sketch-keynote.jpg","video":"https:\/\/player.vimeo.com\/external\/244758761.hd.mp4?s=297c636597ddd6f64f87d1c47785a191631b0474&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/sketch-keynote.zip","contents":[{"id":"12034","section_id":"76","order":"1","title":"The Result","subhead":"","body":"<p>We will work on an exercise where you will create an animation that shows how the layout adapts from iPhone to iPad Pro. It was made in 15 minutes using Copy and Paste from Sketch and Magic Move. Download the <a href=\"http:\/\/cl.ly\/2q33271g2W1h\">Sketch file<\/a> and the <a href=\"https:\/\/www.dropbox.com\/s\/a9zac6xsahn2lhe\/Adaptive-Layout.key.zip?dl=0\" title=\"Keynote Prototype\">Keynote template<\/a>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/Adaptive-Layout-iOS.mp4  ","bookmark_id":"sketch-keynote-the-result"},{"id":"12035","section_id":"76","order":"2","title":"Document Size","subhead":"","body":"<p>For prototyping, you can change the document size to a custom size. Keynote uses points, so if you&rsquo;re designing at 1x, you should treat it the same unit as pixels. For our example we will change the default background color for a gray one, so the design can be more aesthetic. <\/p><p> Also we will add some titles to our screens, we will use San Francisco Pro Display, Regular, 36 points , in white.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Screen%205.jpeg","image_width":"2880","image_height":"1800","video":"","bookmark_id":"sketch-keynote-document-size"},{"id":"12036","section_id":"76","order":"3","title":"Export Vector From Sketch to Keynote","subhead":"","body":"<p>A unique feature to Keynote is the ability to <strong>Copy and Paste<\/strong> from Sketch to Keynote and keep the vector format. In this example, I pasted an entire Artboard from Sketch. Afterwards, I&rsquo;m able to resize it to any size.<\/p><p>With this technique, you can copy and paste any vector shape from Sketch one by one and keep its ability to resize infinitely. That&rsquo;s insanely useful for animating.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/2015-10-23 18_30_00.mp4  ","bookmark_id":"sketch-keynote-export-vector-from-sketch-to-keynote"},{"id":"12037","section_id":"76","order":"4","title":"Duplicate","subhead":"","body":"<p>To duplicate the slide use (<strong>Command + D<\/strong>).<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Untitled%202.jpeg","image_width":"740","image_height":"550","video":"","bookmark_id":"sketch-keynote-duplicate"},{"id":"12038","section_id":"76","order":"5","title":"","subhead":"Transition","body":"<p>For the <strong>rest of the slides<\/strong> we need to adjust all the UI elements to their end states.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/sketch4\/MagicMove.mp4","bookmark_id":"sketch-keynote-transition"},{"id":"12039","section_id":"76","order":"6","title":"Finalize","subhead":"","body":"<p>Now to finalize, select the <strong>previous slide<\/strong>, go to the Animate tab, and add a Magic Move transition.<\/p>","image":"https:\/\/designcode.io\/cloud\/sketch4\/Screenshot%202015-10-23%2011.16.08.jpeg","image_width":"744","image_height":"602","video":"","bookmark_id":"sketch-keynote-finalize"},{"id":"12040","section_id":"76","order":"7","title":"What&rsquo;s Magic Move?","subhead":"","body":"<p>To put it simply: <strong>Magic Move<\/strong> does the transition for you from slide A to slide B without needing to set up individual layers. What makes it so special is that it recognizes multiple similar layers from a duplicated slide.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"sketch-keynote-what-s-magic-move"},{"id":"12041","section_id":"76","order":"8","title":"Great Alternative","subhead":"","body":"<p>Keynote is not a prototyping tool. It wasn&rsquo;t made for that purpose. As a result, options will be limited. For example, there&rsquo;s no spring\/bounce animation for Magic Move and you can&rsquo;t control the layers as you would in Sketch.<\/p><p><a href=\"http:\/\/principleformac.com\">Principle<\/a> is a great alternative to Magic Move. It&rsquo;s just as effortless as Keynote and has a user interface that is much closer to Sketch. It&rsquo;s an order of magnitude more powerful for prototyping. It&rsquo;s not free, but comes with a 15-day trial.<\/p><blockquote><p>Principle can do a lot more than Keynote, but for simple prototyping and presentation, Keynote is worth considering.<\/p><\/blockquote>","image":"https:\/\/designcode.io\/cloud\/sketch4\/KeynoteVSPrinciple.png","image_width":"802","image_height":"566","video":"","bookmark_id":"sketch-keynote-great-alternative"}]}]},{"id":"3","title":"Learn Xcode 9","sections":[{"id":"84","chapter_id":"3","order":"10","slug":"swift4","title":"Learn Swift 4","caption":"Code an iOS 11 app from scratch","body":"<p>We\u2019ve come a long way since the release of Swift. In a surprising turn of events, code has become a common skill for designers, thanks to designer-friendly tools like <a href=\"https:\/\/framer.com\">Framer<\/a>, <a href=\"https:\/\/developer.apple.com\/xcode\/interface-builder\/\">Storyboard<\/a>, and emerging languages like <a href=\"https:\/\/reactjs.org\">React<\/a>. Interesting, many believed that it would be the other way around, that code would slowly disappear. What they tend to forget is that people will always choose power if the convenience gain is marginal. Code has become much simpler and more standardized over the years. It\u2019s also an order of magnitude more powerful than it was, in a way that design tools can\u2019t quite catch up to. <\/p><p>For example, today you can do <a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2017\/602\/\">ARKit<\/a>, a way to bring virtual 3D assets into reality through the lens of the phone. This can\u2019t be achieved yet in a drag and drop user interface.<\/p><p>Animation is another hot topic for designers. What many don\u2019t realize is that the cost of executing intricate animations in code is almost the same as learning another animation tool. Design tools like Origami are increasingly complex while code continues to be simplified. At the same time, you learn a valuable skill that has no ceiling set by a graphic user interface. That coding experience can easily transfer between Swift, Framer and React.<\/p><blockquote id=\"blockquote\"> <p id=\"p\">A designer that can code is more valuable than one that doesn\u2019t, given that both designers are equally skilled in design. <\/p> <\/blockquote>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4.jpg","video":"","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4.zip","contents":[{"id":"10732","section_id":"84","order":"1","title":"State of Swift","subhead":"","body":"<p>We&rsquo;re currently in the <a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2017\/402\/\">4th release<\/a>, which means that your code will less likely to break when an upgrade is around the corner. Swift is now simpler and more stable. In 2017, it became one of the <a href=\"https:\/\/spectrum.ieee.org\/static\/interactive-the-top-programming-languages-2017\">top 10 languages<\/a>, even as a relatively new language.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-state-of-swift"},{"id":"10733","section_id":"84","order":"2","title":"Xcode 9","subhead":"","body":"<p>Xcode 9 introduces <a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2017\/245\/\">Dynamic Type<\/a>, <a href=\"https:\/\/developer.apple.com\/videos\/play\/fall2017\/801\/\">Safe Area<\/a> guides and a better experience previewing on multiple devices. The code editor now supports <a href=\"https:\/\/github.com\/adam-p\/markdown-here\/wiki\/Markdown-Cheatsheet\">Markdown<\/a>, a simpler format for writing. Code styling and highlighting is more powerful, and scrolling is butter smooth, even for large files. Refactoring is another fantastic addition, making it effortless to rename your classes and objects. <\/p><p>The new GitHub integration is much deeper, allowing you to commit and pull changes without leaving Xcode. Finally, you can now test on your app on multiple iOS Simulators at once, or on your own device wirelessly, which wasn&rsquo;t possible before.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/Safe%20Area%20Guides.mp4","bookmark_id":"swift4-xcode-9"},{"id":"10734","section_id":"84","order":"3","title":"Empowering Designers","subhead":"","body":"<p>Personally, I spent close to 20 years making Websites. Beyond Photoshop and Sketch, I learned CSS, HTML and Javascript. I wouldn&rsquo;t trade anything for those skills. It allowed me to be where I am today. I can <a href=\"https:\/\/twitter.com\/MengTo\/status\/908033983610531841\">design and build<\/a> fairly ambitious Web and iOS apps in a way that isn&rsquo;t restrictive or unrealistic.<\/p><p>Knowing how to implement your own designs is both empowering and informative. It&rsquo;s like getting feedback in real-time, as you design. That feedback is fed by your understanding of engineering, preventing you from making common design mistakes, which can cost weeks of lost time.<\/p><blockquote><p>No designer wants to spend a week putting together something only to be told that it can&rsquo;t be done.<\/p><\/blockquote>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-empowering-designers"},{"id":"10735","section_id":"84","order":"4","title":"You Don&rsquo;t Have to be an Expert","subhead":"","body":"<p>Knowing how to use Storyboard, <a href=\"https:\/\/developer.apple.com\/library\/content\/documentation\/UserExperience\/Conceptual\/AutolayoutPG\/index.html\">Auto Layout<\/a> and a little bit of Swift will not only allow you to build your own app, but also share the workload with your developer. You don&rsquo;t work in a silo, you iterate at the same pace as your team. A project can only move as fast as its slowest link. Development takes 80% of the time; the first 20% is attributed to visual design. There is 30% up for grab. Since designers are especially trained for that part, there can be a huge win.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/appworkload.png","image_width":"1100","image_height":"280","video":"","bookmark_id":"swift4-you-don-t-have-to-be-an-expert"},{"id":"10736","section_id":"84","order":"5","title":"Building Your First App","subhead":"","body":"<p>In this large chapter, we won&rsquo;t skip any steps. You&rsquo;ll learn everything in great detail: the Xcode user interface, Storyboard, Auto Layout, Animation, the Swift language and a whole lot more. Each section is extremely visual and has videos with voice as well as downloadable Xcode projects. The whole process has been simplified for both designers and beginners.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-building-your-first-app"},{"id":"10737","section_id":"84","order":"6","title":"Quick Prototyping","subhead":"","body":"<p>While Xcode allows you to do really powerful interactions, it can also create simple prototypes. And without writing a single line of code. Unlike a lot of prototyping tools out there, Xcode uses Storyboard, which is a lot more visual and a lot closer to the way designers work in Sketch.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/Prototype-Demo.mp4","bookmark_id":"swift4-quick-prototyping"},{"id":"10738","section_id":"84","order":"7","title":"Designing in Storyboard","subhead":"","body":"<p>The Storyboard works very similarly to Artboards in Sketch. It&apos;s incredibly intuitive once you get past that fear of Xcode. In Storyboard, you manipulate your UI in a very visual way. It&apos;s even easier than HTML and CSS because you don&apos;t need to code.<\/p><p>As a designer, to be able to implement your own design is empowering, not to mention fun as well. We&rsquo;re fortunate to have a functional visual tool like Storyboard that even developers use. Not only can you prototype with it, but also you can create production-quality layouts that co-exist with production code.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/StackViews.mp4","bookmark_id":"swift4-designing-in-storyboard"},{"id":"10739","section_id":"84","order":"8","title":"Auto Layout and Stack Views","subhead":"","body":"<p>Adaptive Layouts is one of the most important skills you can develop. As there is a growing number of mobile devices and screen sizes, we can no longer afford to focus on just static designs.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/CenterX.mp4","bookmark_id":"swift4-auto-layout-and-stack-views"},{"id":"10740","section_id":"84","order":"9","title":"Adapting for iPhone X","subhead":"","body":"<p>The iPhone X introduces the need to follow the Safe Area layout guides. The Safe Area ensures that your content won&rsquo;t be hidden by the Notch or corner radius. In general, background elements such as background images and colors should follow the Superview while the content such as labels, avatars and medias should follow the Safe Area.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-viewasiphonex.jpg","image_width":"2550","image_height":"1486","video":"","bookmark_id":"swift4-adapting-for-iphone-x"},{"id":"10741","section_id":"84","order":"10","title":"Learning Swift as a Designer","subhead":"","body":"<p>With Swift Playground, you can experiment with code in real-time. It&rsquo;s a perfect place to experiment with all the possibilities without the limitations of a GUI. Learning how to use functions, classes and working with UIKit can make your app infinitely more powerful.<\/p><blockquote><p>I like to think of code as another design tool. Software is made of code, it is unavoidable.<\/p><\/blockquote><p>This book was written in a way that it respects all the latest standards encouraged by Apple. I consulted seasoned iOS engineers in the process and they kindly reviewed all the code to make sure that I respect the best practices.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/PlaygroundAnimation.mp4","bookmark_id":"swift4-learning-swift-as-a-designer"},{"id":"10742","section_id":"84","order":"11","title":"Why Learn Code?","subhead":"","body":"<p>As a designer learning code, you can perform any animation, complex interactions and work with real data from any database or API. Also, you can collaborate better with engineers by understanding their constraints, and pushing beyond those constraints.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-why-learn-code"},{"id":"10743","section_id":"84","order":"12","title":"Animate in Playground","subhead":"","body":"<p><a href=\"https:\/\/developer.apple.com\/swift\/\">Playground<\/a> allows you to quickly test snippets of code and see the results in real time. There are a few techniques that you need to know in order to start on the right foot. The beautiful thing about Playground is that there is zero setup, and you just need to write a bunch of words that make sense to the computer. But you need to enable a couple of options. <\/p><p>We&rsquo;re going to learn how to build a simple transition from the Main screen to the Section screen. While Playground may not allow you to test on devices, the code that you create here can easily be transported to Xcode. We&rsquo;re using Playground to get a firm grasp at some of the basic concepts of animating in Swift.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/Playground-Animate-Demo.mp4","bookmark_id":"swift4-animate-in-playground"},{"id":"10744","section_id":"84","order":"13","title":"3D Animation","subhead":"","body":"<p>A lot of interesting interactions happen as a result of scroll events. In the Design+Code app, we use the scroll information to capture the read progress, to show or hide the navigation bar, and to apply a parallax effect on the visual elements. <\/p><p><strong>CATransform3D<\/strong> is a fantastic way to take your animation to the next level. There is so much more to explore in term of using the matrix values and playing with <strong>rotate<\/strong>, <strong>scale<\/strong> and <strong>translate<\/strong>. Our final result is something that will leave quite an impression on our users.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/3danimation-conclusion.mp4?dl=0","bookmark_id":"swift4-3d-animation"},{"id":"10745","section_id":"84","order":"14","title":"The Final App","subhead":"","body":"<p>In this course, you&rsquo;re not doing a sample app. You&rsquo;re building a real app that&rsquo;s been published to the <a href=\"https:\/\/itunes.apple.com\/app\/design-code\/id1281776514?ls=1&amp;mt=8\">App Store<\/a>. You&rsquo;re facing real world problems and you&rsquo;ll learn advanced techniques like using Libraries, gesture interactions, implementing Dark Mode, JSON parsing, Realm database and publishing to the App Store. To start the step-by-step course, head over to <a href=\"https:\/\/designcode.io\/swift4-xcode9\">Intro to Xcode 9<\/a>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/swift4-finalapp.mp4?dl=0","bookmark_id":"swift4-the-final-app"}]},{"id":"85","chapter_id":"3","order":"20","slug":"swift4-xcode9","title":"Intro to Xcode 9","caption":"Create your first Xcode Project","body":"<p>Every year, Apple introduces a new version of Xcode, greatly improving the tools and making available a number of new APIs in order to make iOS development easier and more powerful. There is a lot to explore in Xcode. Before going too deep, I\u2019d like to start with the basics. Let\u2019s go ahead and make our first app!<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-xcode.jpg","video":"https:\/\/player.vimeo.com\/external\/242842331.hd.mp4?s=197530eb49ea5f31bbe793ef39558f7fc6b50ca9&profile_id=175","subtitles":"https:\/\/designcode.io\/cloud\/swift4\/3.1.Xcode.vtt","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-xcode9.zip","contents":[{"id":"10713","section_id":"85","order":"1","title":"Downloads for Introduction to Xcode 9","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need&#xA0;<a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a>&#xA0;and the <a href=\"https:\/\/www.dropbox.com\/s\/hw8pteoyimi295t\/3.1.DesignCodeApp-Assets.zip?dl=0\">assets<\/a>. You can download the&#xA0;<a href=\"https:\/\/www.dropbox.com\/s\/iazbk8q3agmmwi3\/3.1.DesignCodeApp-Xcode.zip?dl=0\">final&#xA0;Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-xcode9-downloads-for-introduction-to-xcode-9"},{"id":"10714","section_id":"85","order":"2","title":"Xcode&rsquo;s Welcome Screen","subhead":"","body":"<p>First, let&rsquo;s download <a href=\"https:\/\/itunes.apple.com\/en\/app\/xcode\/id497799835?mt=12\">Xcode<\/a> in the App Store. The first time you run Xcode, you&rsquo;ll see this screen. This is the starting window, allowing you to start a Playground file, create a new Xcode project or Clone an existing project. <\/p><p>A Playground allows you to experiment your code and see results in real-time. Before writing a lot of code, I think it&rsquo;s important to have fun with the user interface first. As for Cloning, this is something we&rsquo;ll explore later.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Xcode-WelcomeScreen.jpg","image_width":"1600","image_height":"1004","video":"","bookmark_id":"swift4-xcode9-xcode-s-welcome-screen"},{"id":"10715","section_id":"85","order":"3","title":"","subhead":"Create a New Xcode Project","body":"<p>Let&rsquo;s click <strong>Create a new Xcode project<\/strong>. In this screen, you&rsquo;ll find a bunch of starting templates for different needs, ranging from iOS, macOS to tvOS. Normally for an iOS app, you&rsquo;ll want to use Single-View Application. Go to iOS &gt; Application &gt; <strong>Single View Application<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Xcode-NewProject.jpg","image_width":"1458","image_height":"1050","video":"","bookmark_id":"swift4-xcode9-create-a-new-xcode-project"},{"id":"10716","section_id":"85","order":"4","title":"","subhead":"Project Name","body":"<p>This is where you&rsquo;ll set your project and organization names. Set the name of the app <strong>DesignCodeApp<\/strong>. <\/p><p>The <strong>Organization Name<\/strong> is your name, or your company name. The <strong>Organization Identifier<\/strong> is typically your domain name in reverse. Language will be <strong>Swift<\/strong>. Let&rsquo;s <strong>check CoreData<\/strong> since we&rsquo;ll need it later. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-01%20at%209.47.49%20PM.png","image_width":"1456","image_height":"1048","video":"","bookmark_id":"swift4-xcode9-project-name"},{"id":"10717","section_id":"85","order":"5","title":"","subhead":"Saving the Project","body":"<p>Click Next. Now, save the Project to your Mac, typically in Downloads or Documents. Make sure to enable <strong>Create git repository on my Mac<\/strong>; this allows you to keep a <a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2017\/405\/\">version history<\/a> of your project. It&rsquo;s similar to <a href=\"https:\/\/www.goabstract.com\">Abstract<\/a>.<\/p><p>Finally, click <strong>Create<\/strong>. That&rsquo;s it, you&rsquo;ve created your first iOS app!<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Xcode-Save.jpg","image_width":"1424","image_height":"850","video":"","bookmark_id":"swift4-xcode9-saving-the-project"},{"id":"10718","section_id":"85","order":"6","title":"Xcode&rsquo;s Layout","subhead":"","body":"<p>The first time you land in Xcode, it&rsquo;ll look overwhelming. Rest easy, I&rsquo;m here to guide you. I like to compare Xcode to a big, do-it-all application like Photoshop, because as a tool, you can really do anything with it. You can build your dream app without jumping between many applications. It&rsquo;s scary at first, but once you learn how to navigate through the complex layout, you&rsquo;ll love features such as Assets Catalog, Storyboard and the iOS Simulator.<\/p><p>But unlike Photoshop, Xcode is unavoidable. The large majority of iOS developers use it. You need everything in Xcode for designing, coding, testing, debugging and a multitude of other tasks. After 3 years of developing for iOS, I still find myself learning simpler ways to design things and that&rsquo;s really exciting. So that&rsquo;s why I&rsquo;m writing this book. I want to teach you my workflow and guide you through this experience. Now, let&rsquo;s explore some of the most important aspects of Xcode. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Xcode-FirstTime.jpg","image_width":"1600","image_height":"1140","video":"","bookmark_id":"swift4-xcode9-xcode-s-layout"},{"id":"10719","section_id":"85","order":"7","title":"The Toolbar","subhead":"","body":"<p>First, the toolbar. Just like most Mac apps, the toolbar is always present. It allows you to quickly do things that you often perform.<\/p><p>The left part of the toolbar lets you <strong>run<\/strong>, <strong>stop<\/strong> and <strong>select<\/strong> which device to test on. If you have a registered device, you can even test on your iPhone. Since we&rsquo;re working with an iPhone 8 design, let&rsquo;s select the <strong>iPhone 8<\/strong>.<\/p><p>The middle portion shows you what&rsquo;s going on with your app. Whenever you have <strong>warnings<\/strong> or <strong>errors<\/strong>, it&rsquo;ll show up there.<\/p><p>The right part shows the editor and utilities. The show\/hide tools on the far right are especially useful for showing and hiding parts of your Xcode UI. Because Xcode can be pretty busy, I suggest hiding parts that you don&rsquo;t need. Useful keyboard shortcuts are: <strong>Command + 0<\/strong> to show\/hide the Navigator and <strong>Command + Option + 0<\/strong> to show\/hide the Inspector.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Xcode-Toolbar.jpg","image_width":"1869","image_height":"465","video":"","bookmark_id":"swift4-xcode9-the-toolbar"},{"id":"10720","section_id":"85","order":"8","title":"Project Settings","subhead":"","body":"<p>Your project is already set up and ready to go thanks to the first dialog you filled. But if you need to edit settings, this is where you go. For example, you can select which device orientations to support. Also, you can change your status bar style to Light or Dark, or completely hide it.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Xcode-Settings.jpg","image_width":"2214","image_height":"1160","video":"","bookmark_id":"swift4-xcode9-project-settings"},{"id":"10721","section_id":"85","order":"9","title":"The Project Navigator","subhead":"","body":"<p>If you&rsquo;ve ever built a Website, you&rsquo;ll remember that a site always starts with a few files: index.html, images, css and javascript files. Well, the same concept applies here. The project navigator is a reflection of your own Xcode project folder. <\/p><p><strong>.swift<\/strong> files are the equivalent of your javascript files. They allow you to script your app.<\/p><p><strong>AppDelegate.swift<\/strong> is where you put all the scripting at launch.<\/p><p><strong>ViewController.swift<\/strong> is your screen. Normally, you create a new script per screen.<\/p><p><strong>Main.storyboard<\/strong> is where you do all the layout and styling.<\/p><p><strong>Assets.xassets<\/strong> is where you put all your images.<\/p><p><strong>LaunchScreen.storyboard<\/strong> is where you set up the first launch screen.<\/p><p>The <strong>M<\/strong> means that the file has been modified. That&rsquo;s because we enabled up <strong>Create git repository on my Mac<\/strong>. It&rsquo;s like in Abstract for Sketch. If you&rsquo;re not familiar with Git, I suggest watching this <a href=\"https:\/\/git-scm.com\/video\/what-is-version-control\">video<\/a>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Xcode-Navigator.jpg","image_width":"1600","image_height":"518","video":"","bookmark_id":"swift4-xcode9-the-project-navigator"},{"id":"10722","section_id":"85","order":"10","title":"The Other Navigators","subhead":"","body":"<p>Above the main Project Navigator, you&rsquo;ll notice a bunch of sub-navigators. They&rsquo;re mostly for source control, searching and debugging, which you can ignore at this stage. However, whenever your app crashes, Xcode will automatically change to the Debug Navigator tab. As a beginner, you probably won&rsquo;t understand much, so I suggest to always go back to the first <strong>Project Navigator<\/strong> to avoid being lost.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Xcode-Debugging.jpg","image_width":"1600","image_height":"552","video":"","bookmark_id":"swift4-xcode9-the-other-navigators"},{"id":"10723","section_id":"85","order":"11","title":"Inspectors","subhead":"","body":"<p>Just like most Mac apps, Inspectors on the right are used for editing selected elements. This is purely contextual, so we&rsquo;ll explore more when we edit specific elements.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-xcode9-inspectors"},{"id":"10724","section_id":"85","order":"12","title":"The Asset Catalog","subhead":"","body":"<p>One of my favorite features about Xcode is how easy it is to organize images for different resolutions. In the Asset Catalog, you can quickly edit your AppIcon and images for your app.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-xcode9-the-asset-catalog"},{"id":"10725","section_id":"85","order":"13","title":"","subhead":"App Icon","body":"<p>Using Apple&rsquo;s Icon template, you can quickly export icons of all sizes and resolutions for both iPhone and iPad. You can drag and drop the images to their respective fields, by following the size in pt, at 1x, 2x or 3x. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Xcode-AppIcon.jpg","image_width":"1600","image_height":"1084","video":"","bookmark_id":"swift4-xcode9-app-icon"},{"id":"10726","section_id":"85","order":"14","title":"","subhead":"PDF Assets","body":"<p>For the rest of the assets, we&rsquo;ll mostly use PDF files, since it can be challenging to manage 3 resolutions per asset. Except for backgrounds, photos and avatars, PDF is the perfect choice for glyphs and other flat vector assets. But, just like SVG, PDF can act weirdly sometimes, depending on how you set up your glyphs. So, it&rsquo;s nice to have the PNG format as a backup.<\/p><p>Instead of generating 3 images (1x, 2x, 3x) per asset, you only need <strong>one single file<\/strong>. In Sketch, you need to export them in <strong>PDF at 1x<\/strong>. However, there are a few things to note. The resolution matters. You must export at 1x to make sure that it looks good in Storyboard. Xcode re-renders them to PNG files to 1x, 2x and 3x for you.<\/p><p>To import your assets, simply drop the entire folder. If named correctly, Xcode will automatically bundle the assets together in their respective resolution.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Xcode-Assets.jpg","image_width":"1600","image_height":"966","video":"","bookmark_id":"swift4-xcode9-pdf-assets"},{"id":"10727","section_id":"85","order":"15","title":"Themes for Xcode","subhead":"","body":"<p>Xcode is filled with options. It&rsquo;s best not to cover all of them right now, since it would only distract you from building the actual product. But there&rsquo;s a pretty neat feature that allows you to change the code theme in Xcode. Go to Xcode &gt; Preferences &gt; <strong>Fonts &amp; Colors<\/strong>. There you can choose the Dusk theme, which is my favorite. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Xcode-Dusk.jpg","image_width":"1600","image_height":"1074","video":"","bookmark_id":"swift4-xcode9-themes-for-xcode"},{"id":"10728","section_id":"85","order":"16","title":"Running your first App!","subhead":"","body":"<p>Now that you&rsquo;re getting familiar with the way the layout works, let&rsquo;s run your first app by clicking on the <strong>Run<\/strong> button. If you didn&rsquo;t do anything terrible, like deleting files by accident, an iOS Simulator will come up. This how your app will look like as you build it. It&rsquo;s fully interactive.<\/p><p>The first time that you&rsquo;re running your app, it&rsquo;ll just be a blank white screen. <\/p><p>While it may be tempting to run your app on iPhone X, one thing to note is that the performance isn&rsquo;t great. That&rsquo;s because the iPhone X renders at 3x, so on the iOS Simulator, the experience isn&rsquo;t great. On the other hand, running on the device is butter smooth!<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Xcode-Simulators.jpg","image_width":"1600","image_height":"844","video":"","bookmark_id":"swift4-xcode9-running-your-first-app"},{"id":"10729","section_id":"85","order":"17","title":"Customizing the iOS Simulator","subhead":"","body":"<p>You can change the size of your iOS Simulator by going to <strong>Window<\/strong> &gt; <strong>Scale<\/strong> &gt; <strong>100%<\/strong>, or by pressing Command + 1, 2 or 3.<\/p><p>You can press <strong>Command + Shift + H<\/strong> to go back to the Home screen and play with iOS&rsquo;s default apps like Safari or Settings. Safari is extremely useful for testing your site, especially on the iPhone X device. <\/p><p>New in Xcode 9, you can open multiple Simulators at once!<\/p><p>To rotate, use <strong>Command + Right Arrow<\/strong> or Left Arrow. To reset the content, just go to File menu &gt; iOS Simulator &gt; <strong>Reset Content and Settings<\/strong>. Finally, you can take screenshots by pressing on <strong>Command + S<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-xcode9-customizing-the-ios-simulator"},{"id":"10730","section_id":"85","order":"18","title":"Xcode Source Control","subhead":"","body":"<p>Let&rsquo;s go back to Xcode and save our current changes into a version, so that we can keep a history. This also allows us to go back to previous versions when mistakes happen, or collaborate with teammates. To do that, go to <strong>Source Control<\/strong> and click <strong>Commit&#x2026;<\/strong>. Then, enter a description of your commit like &#x201C;Added the assets&#x201D; and click <strong>Commit Files<\/strong>. Once that is done, you&rsquo;ll notice that the <strong>M<\/strong> next to <strong>Assets.xcassets<\/strong> will disappear. This simply means that the changes were saved in a version. <\/p><p>Every time you finish a feature, task or section, it is recommended to commit your changes.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-08%20at%202.20.34%20PM.png","image_width":"1778","image_height":"674","video":"","bookmark_id":"swift4-xcode9-xcode-source-control"},{"id":"10731","section_id":"85","order":"19","title":"Conclusion","subhead":"","body":"<p>This concludes the short intro to Xcode. These are the features that I use the most for building apps. As for the rest, you&rsquo;ll learn them progressively as we face problems.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-xcode9-conclusion"}]},{"id":"86","chapter_id":"3","order":"30","slug":"swift4-storyboard","title":"Intro to Storyboard","caption":"Visual Editor for editing your user interface","body":"<p>Storyboard works similarly to Artboards in Sketch. It&#39;s incredibly intuitive once you get past that fear of Xcode. In Storyboard, you manipulate your user interface in a very visual way. It&#39;s easier than HTML and CSS because you don&#39;t need to code. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-storyboard.jpg","video":"https:\/\/player.vimeo.com\/external\/242847618.hd.mp4?s=49f6e6d5e579d36965213584e27c11fdfcc512b0&profile_id=175","subtitles":"https:\/\/designcode.io\/cloud\/swift4\/3.2.Storyboard.vtt","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-storyboard.zip","contents":[{"id":"10704","section_id":"86","order":"1","title":"Storyboard Layout","subhead":"","body":"<p>To reach Storyboard, click on <strong>Main.storyboard<\/strong> in your left Navigator. First, let&rsquo;s hide the left Navigator by click on the left icon in the <strong>far right<\/strong> of the Toolbar. Then, let&rsquo;s show the Document Outline by clicking on the little icon at <strong>bottom left<\/strong> of the Storyboard UI.<\/p><p>Once you do these steps, your Xcode app should look like the image below. iOS development has a different naming structure. When talking to a seasoned developer, it&apos;s important to be on the same page as them. They may not understand what an Artboard is, but they&apos;ll get what a View Controller is.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Storyboard-Layout.jpg","image_width":"1600","image_height":"1014","video":"","bookmark_id":"swift4-storyboard-storyboard-layout"},{"id":"10705","section_id":"86","order":"2","title":"Document Outline","subhead":"","body":"<p>Just like in Sketch, this is where you&rsquo;ll find all your layers. In Xcode, we call them objects. When you&rsquo;ll drag and drop elements, you&rsquo;ll be able to navigate them here. To enable this, click on the small icon at the bottom. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-06%20at%209.23.14%20PM.png","image_width":"1344","image_height":"948","video":"","bookmark_id":"swift4-storyboard-document-outline"},{"id":"10706","section_id":"86","order":"3","title":"View Controller","subhead":"","body":"<p>The middle part is your Storyboard editor. You&rsquo;ll find all the screens for your app. They&rsquo;re like your Artboards in Sketch. We call them <strong>View Controllers<\/strong>. But, unlike Artboards, we&rsquo;re building a truly interactive experience, with animations, data and constraints.<\/p><p>You can quickly preview different iOS devices in Portrait or Landscape by clicking <strong>View as: iPhone 8<\/strong>. This will bring up 8 different devices to preview on. This option is especially useful for checking if your app is adapting well across devices.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/Storyboard-ViewControllers.mp4","bookmark_id":"swift4-storyboard-view-controller"},{"id":"10707","section_id":"86","order":"4","title":"","subhead":"Zooming Out","body":"<p>Sometimes, you&rsquo;ll find yourself with a lot of screens. You&rsquo;ll need a way to zoom out. You can do so by pinching your trackpad or simply <strong>double clicking<\/strong> outside the View Controller.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-zooming-out"},{"id":"10708","section_id":"86","order":"5","title":"Inspectors","subhead":"","body":"<p>On the right, you&rsquo;ll find the <strong>Inspectors<\/strong>. Just like in Sketch, this is where you&rsquo;ll edit the colors, font size, images of your objects. 90% of the time, you&rsquo;ll use the <strong>Attribute<\/strong> and <strong>Size<\/strong> Inspectors. It&rsquo;s important to be familiar with them since most of the user interface changes will happen in these two inspectors. They are very specific to the object that you select.<\/p><p>For example, select the <strong>View<\/strong> in the Document Outline, and you&rsquo;ll find these <strong>Attribute<\/strong> options. You can change the background color, the Alpha opacity and a bunch more options.<\/p><p>In the <strong>Size<\/strong> Inspector, you can change the <strong>x<\/strong>, <strong>y<\/strong> position as well as the <strong>width<\/strong> and <strong>height<\/strong>. Since the View is just a background, those properties can&rsquo;t be changed. Once we bring in new elements like buttons and texts, we&rsquo;ll be able to.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/main-inspectors.png","image_width":"1150","image_height":"460","video":"","bookmark_id":"swift4-storyboard-inspectors"},{"id":"10709","section_id":"86","order":"6","title":"","subhead":"Other Inspectors","body":"<p>The File, Identity and Connections inspectors are more global.<\/p><p>The <strong>File<\/strong> Inspector is Storyboard-specific. You can disable Auto Layout or Size Classes for the entire Storyboard.<\/p><p>The <strong>Identity<\/strong> Inspector lets you connect your View Controller to a Class. Classes are your Swift files &#x2013; they let you script animations and data to attach to your objects. A View Controller in Storyboard can be connected to a ViewController.swift Class file, similar to how you include a javascript file to an HTML file.<\/p><p>The <strong>Connections<\/strong> Inspector manages the connections between your View Controller&rsquo;s Objects to your Swift file&rsquo;s code. We&rsquo;ll see this more in action later.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/sec-inspectors.jpg","image_width":"1600","image_height":"432","video":"","bookmark_id":"swift4-storyboard-other-inspectors"},{"id":"10710","section_id":"86","order":"7","title":"Object Library","subhead":"","body":"<p>On the bottom right, you&rsquo;ll find the <strong>Object Library<\/strong>. That&rsquo;s the 3rd tab. The Object Library has all the UI components that you can use for your layout. It&rsquo;s like Insert in Sketch.<\/p><p>This is where you drag and drop the objects you need for your app: <strong>buttons<\/strong>, <strong>images<\/strong>, <strong>texts<\/strong>, etc. I suggest playing with them as much as you can and see what works. It&apos;s really fun to discover new ways to use them! As designers, we love to customize things and break that &quot;default&quot; look. Learning these objects will empower you to customize as much as you&apos;d like without being completely unrealistic.<\/p><p>To change between List View and Grid View, you can click on the small icon in the bottom left.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/objectslibrary.png","image_width":"652","image_height":"732","video":"","bookmark_id":"swift4-storyboard-object-library"},{"id":"10711","section_id":"86","order":"8","title":"The Media library","subhead":"","body":"<p>Right next to the Object Library, you&rsquo;ll find the <strong>Media Library<\/strong>. Once you have imported all your assets, you&apos;ll be able to access them from the Media Library. This is really useful because every time you add assets to your <strong>Asset Catalog<\/strong>, they&rsquo;ll appear here, allowing you to drag and drop to your View Controller.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-06%20at%2010.35.47%20PM.png","image_width":"1806","image_height":"958","video":"","bookmark_id":"swift4-storyboard-the-media-library"},{"id":"10712","section_id":"86","order":"9","title":"Conclusion","subhead":"","body":"<p>So far, we&rsquo;ve become familiar with the Xcode user interface and learned how Storyboard is composed. We&rsquo;ll need this to be able to start implementing screens in Xcode.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-conclusion"}]},{"id":"87","chapter_id":"3","order":"40","slug":"swift4-prototyping","title":"Prototyping in Xcode","caption":"Your app flow in Xcode","body":"<p>While Xcode allows you to do really powerful interactions, it can also create simple prototypes. And without writing a single line of code. Unlike a lot of prototyping tools out there, Xcode uses Storyboard, which is a lot more visual and a lot closer to the way designers work in Sketch.<\/p><p>Just by learning how to replace images in the Asset Catalog can be a huge help to your team. No longer should designers be constantly nagging developers to do simple pixel perfect fixes. Instead, they can just do these tasks themselves.<\/p><p>As a result, you\u2019ll learn pretty neat tricks. For example, did you know that you can animate elements strictly in Storyboard. For each object, you have a hefty amount of options, giving all the tools to set interactions, animations and ultimately, make your layout adaptive.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-prototyping.jpg","video":"https:\/\/player.vimeo.com\/external\/247624863.hd.mp4?s=75eec40bc864d0bbaf1d8913c8c923cd72269322&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-prototyping.zip","contents":[{"id":"10642","section_id":"87","order":"1","title":"Downloads for Quick Prototyping in Xcode","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need&#xA0;<a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a>&#xA0;and the <a href=\"https:\/\/www.dropbox.com\/s\/uyysr2pul50jpb5\/DesignCodeApp%20Assets.zip?dl=0\">assets<\/a>. You can download the&#xA0;<a href=\"https:\/\/www.dropbox.com\/s\/62k97ijyn54nfha\/3.3.DesignCodeApp-QuickPrototyping.zip?dl=0\">final&#xA0;Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-prototyping-downloads-for-quick-prototyping-in-xcode"},{"id":"10643","section_id":"87","order":"2","title":"Import the Screens","subhead":"","body":"<p>It is important to hide the status bar in your screens, since the device has its own bar that shows the time and status icons. In Asset Catalog, drag and drop the Screens folder.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-07%20at%202.29.40%20PM.png","image_width":"2158","image_height":"1488","video":"","bookmark_id":"swift4-prototyping-import-the-screens"},{"id":"10644","section_id":"87","order":"3","title":"Creating New View Controllers","subhead":"","body":"<p>Go back to Storyboard. In your <strong>Object Library<\/strong>, let&rsquo;s drag in new View controllers for our screens: <strong>Home<\/strong>, <strong>Chapters<\/strong>, <strong>Bookmarks<\/strong>, <strong>Exercises<\/strong>, <strong>More<\/strong> and <strong>Article<\/strong>. You can definitely import as many screens as you want, but to simplify this tutorial, we&rsquo;ll just focus on these 6 screens. You can zoom out by double-clicking outside the View Controller to make things easier. Your Storyboard should look like this.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-07%20at%201.19.16%20PM.png","image_width":"3510","image_height":"1890","video":"","bookmark_id":"swift4-prototyping-creating-new-view-controllers"},{"id":"10645","section_id":"87","order":"4","title":"New Screens from Media Library","subhead":"","body":"<p>Now let&rsquo;s go to <strong>Media Library<\/strong> and find those screens. Scrolling through all the assets may be a little overwhelming, so let&rsquo;s use the filter at the bottom and type &#x201C;screen&#x201D;. If for some reason, you still can&rsquo;t find them, you may need to restart Xcode for them to appear. Finally, drag and drop each screen to a view controller, starting with <strong>Home<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-07%20at%202.21.17%20PM.png","image_width":"4180","image_height":"2210","video":"","bookmark_id":"swift4-prototyping-new-screens-from-media-library"},{"id":"10646","section_id":"87","order":"5","title":"Initial View Controller","subhead":"","body":"<p>You might have noticed the arrow next to the first View Controller. That arrow means that it&rsquo;s the first screen that&rsquo;s going to be loaded when the app is launched. You can move the arrow to whichever screen by dragging it around.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-07%20at%202.30.40%20PM.png","image_width":"1108","image_height":"860","video":"","bookmark_id":"swift4-prototyping-initial-view-controller"},{"id":"10647","section_id":"87","order":"6","title":"View Controller is Unreachable","subhead":"","body":"<p>If you Run the app, it&rsquo;ll get stuck on the first screen. You can&rsquo;t go anywhere from there.<\/p><p>In addition, you can see a warning in the Storyboard&rsquo;s top navigator. Click on it, and you&rsquo;ll see a message saying &#x201C;View Controller is unreachable&#x201D;. That simply means that you have screens that are not reachable.<\/p><p>As a side note, I suggest paying attention to these messages as they&rsquo;ll make suggestions on the best practices for your app. I always try to keep them at zero. Most importantly, if they&rsquo;re red, you have to fix them right away, or you won&rsquo;t be able to run your app at all.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-07%20at%202.38.28%20PM.png","image_width":"1668","image_height":"716","video":"","bookmark_id":"swift4-prototyping-view-controller-is-unreachable"},{"id":"10648","section_id":"87","order":"7","title":"Creating a Button","subhead":"","body":"<p>To connect one screen to another, you&rsquo;ll need a <strong>Segue<\/strong>. To create one, you&rsquo;ll need a <strong>Button<\/strong> in your View Controller. Let&rsquo;s drag a Button to the first screen. Like in Sketch, just drag the object around and double-click on it to remove the text. It&rsquo;s a transparent button.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-07%20at%202.47.41%20PM.png","image_width":"1522","image_height":"632","video":"","bookmark_id":"swift4-prototyping-creating-a-button"},{"id":"10649","section_id":"87","order":"8","title":"Creating a Segue","subhead":"","body":"<p>This is a very important technique for connecting objects together. It&rsquo;s not obvious at first, but essential to Storyboard. To create a segue, you&rsquo;ll need to <strong>Control + Drag<\/strong> the button, to the second screen. A blue line will appear. Drop it on the second screen.<\/p><p>When you create a segue, you get 3 options: <strong>Push<\/strong>, <strong>Modal<\/strong> and <strong>Custom<\/strong>. Push requires a Navigation Controller, so we can&rsquo;t use this for now. Modal is the most versatile one since it just loads the second screen on top of the first one. Custom is more advanced, so we don&rsquo;t need it for now.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/Storyboard-CreatingSegue.mp4","bookmark_id":"swift4-prototyping-creating-a-segue"},{"id":"10650","section_id":"87","order":"9","title":"Editing the Segue","subhead":"","body":"<p>Once created, you can click on the arrow between the 2 screens. When you do, you&rsquo;ll find a bunch of options in the <strong>Attribute Inspector<\/strong>. Let&rsquo;s select Transition and choose <strong>Cross Dissolve<\/strong>. It&rsquo;s a simple Fade In animation.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-07%20at%203.04.06%20PM.png","image_width":"1734","image_height":"804","video":"","bookmark_id":"swift4-prototyping-editing-the-segue"},{"id":"10651","section_id":"87","order":"10","title":"Transitions","subhead":"","body":"<p>There are 6 types of default transitions between screens in iOS: <strong>Cover Vertical<\/strong>,<strong>&#xA0;Flip Horizontal<\/strong>, <strong>Cross Dissolve<\/strong>, <strong>Partial Curl<\/strong>, <strong>None&#xA0;<\/strong>and <strong>Push<\/strong> (requires Navigation Controller).<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/TransitionsDemo.mp4","bookmark_id":"swift4-prototyping-transitions"},{"id":"10652","section_id":"87","order":"11","title":"Previous Screen","subhead":"","body":"<p>Once we reach to the second screen, we&rsquo;ll need a way to go back to the previous screen. In this case, we&rsquo;ll just create a <strong>Button<\/strong> that takes up the entire View Controller. Then, create a segue back, with the same Cross Dissolve transition.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-07%20at%205.20.54%20PM.png","image_width":"1146","image_height":"880","video":"","bookmark_id":"swift4-prototyping-previous-screen"},{"id":"10653","section_id":"87","order":"12","title":"Duplicating Buttons","subhead":"","body":"<p>Now we just need to repeat the same steps for every screen. From the first screen, we&rsquo;ll have 4 buttons for each Tab Bar icons. Like in Sketch, you can <strong>Option + Drag<\/strong> from the first Button to create duplicates. Then, for each Button, create a segue to <strong>Chapters<\/strong>, <strong>Bookmarks<\/strong>, <strong>Exercises<\/strong> and <strong>More<\/strong> respectively. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/Storyboard-Duplicate.mp4","bookmark_id":"swift4-prototyping-duplicating-buttons"},{"id":"10654","section_id":"87","order":"13","title":"Copy and Paste Buttons","subhead":"","body":"<p>For each of those 4 screens, create a Button back to the Home screen. You can <strong>Copy and Paste<\/strong> a Button from one screen to another. However, you&rsquo;ll need to adjust the Button a little by dragging and using the Smart Guides. Finally, create a segue back to the Home screen.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/Storyboard-CopyButtons.mp4","bookmark_id":"swift4-prototyping-copy-and-paste-buttons"},{"id":"10655","section_id":"87","order":"14","title":"Selecting from Document Outline","subhead":"","body":"<p>Once the segues are created, select all of them from the Document Outline and set the Transition to Cross Dissolve.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-07%20at%205.28.21%20PM.png","image_width":"2622","image_height":"1210","video":"","bookmark_id":"swift4-prototyping-selecting-from-document-outline"},{"id":"10656","section_id":"87","order":"15","title":"Scrollable Content","subhead":"","body":"<p>You may have noticed that we didn&rsquo;t do anything for Article screen. That&rsquo;s because the content there is taller than the actual View Controller. For this, we&rsquo;ll want to use a <strong>Table View Controller<\/strong> instead. It has an embedded Scroll View, which lets you scroll the content. Drag and drop a Table View Controller from the Object Library. Then, <strong>Command + C<\/strong> the image from Article and paste to that Table View Controller. Finally, you can delete the Article View Controller.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-07%20at%206.44.01%20PM.png","image_width":"2784","image_height":"1690","video":"","bookmark_id":"swift4-prototyping-scrollable-content"},{"id":"10657","section_id":"87","order":"16","title":"Button To Article","subhead":"","body":"<p>Now, let&rsquo;s create a connection to the Article screen. From Chapters, create a <strong>Button<\/strong> that covers one of the cards. The size is <strong>x15<\/strong>, <strong>y255<\/strong>, <strong>width310<\/strong> and <strong>height245<\/strong>. Then, create a segue to Article. Again, select the segue and apply the Cross Dissolve Transition.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-07%20at%205.30.49%20PM.png","image_width":"1848","image_height":"906","video":"","bookmark_id":"swift4-prototyping-button-to-article"},{"id":"10658","section_id":"87","order":"17","title":"Tap Gesture Recognizer","subhead":"","body":"<p>Since we can&rsquo;t put a Button on top of the Article image in the Table View Controller, due to some technicalities that will be explained later, we&rsquo;ll use a simple <strong>Tap Gesture Recognizer<\/strong>. A gesture can be attached to any element to recreate that same tap interaction that a Button has. Drag a Tap Gesture Recognizer from the <strong>Object Library<\/strong> and drop it on top of the Article image. Once completed, you&rsquo;ll find it in your Document Outline. From there, do the same Control + Drag to the Chapters Screen and set the segue to Cross Dissolve.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/Storyboard-TapGesture.mp4","bookmark_id":"swift4-prototyping-tap-gesture-recognizer"},{"id":"10659","section_id":"87","order":"18","title":"Remove Prototype Cell and Content Insets","subhead":"","body":"<p>You&rsquo;ll notice that the Table View Controller has Prototype Cells above the image. To remove that, simply click on Table View in the Document Outline and set <strong>Prototype Cells<\/strong> to <strong>0<\/strong>. Last but not least, you&rsquo;ll find an empty space left. To disable to that, go to Size Inspector, and set the <strong>Content Insets<\/strong> to <strong>Never<\/strong>. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/Storyboard-ContentInsets.mp4","bookmark_id":"swift4-prototyping-remove-prototype-cell-and-content-insets"},{"id":"10660","section_id":"87","order":"19","title":"Conclusion","subhead":"","body":"<p>With this, your prototype is done. Let&rsquo;s run it and give it a test. With these techniques, you can really build a simple flow using real development techniques. That knowledge, although basic for now, can really expand into something interesting in the future. It&rsquo;s like learning CSS all over again. Let&rsquo;s take a look at our prototype.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/Prototype-Demo.mp4","bookmark_id":"swift4-prototyping-conclusion"}]},{"id":"88","chapter_id":"3","order":"50","slug":"swift4-playground","title":"Swift Playground","caption":"Learn the basics of Swift","body":"<p>Since its release, I&#39;ve come to really enjoy coding in Swift. I have a Web background and over the past 20 years, I&#39;ve witnessed first-hand how programming languages have become simpler, more powerful and more modern.<\/p><p>Swift is Apple&#39;s way to modernize their decades-old language Objective-C. It&#39;s not only shorter, more familiar but also safer. All my new iOS app are completely written in Swift. I&#39;ve made the switch entirely. I&#39;d go as far as saying that I&#39;ve never enjoyed a language more than Swift.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-playground.jpg","video":"https:\/\/player.vimeo.com\/external\/242846131.hd.mp4?s=1c6030bedaaad0eeee7072cd3fc3c8fcf38be728&profile_id=175","subtitles":"https:\/\/designcode.io\/cloud\/swift4\/3.3.Playground.vtt","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-playground.zip","contents":[{"id":"12132","section_id":"88","order":"1","title":"Downloads for Swift 4 Playground","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need&#xA0;<a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a>. You can download the&#xA0;<a href=\"https:\/\/www.dropbox.com\/s\/vj87wjdjbihs670\/3.4.Playground-Swift4.playground.zip?dl=0\">final&#xA0;Playground file<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-downloads-for-swift-4-playground"},{"id":"12133","section_id":"88","order":"2","title":"Instant Feedback","subhead":"","body":"<p>Unlike many programming languages on the Web, Swift is safe. In other words, you&rsquo;re told in real-time when you make mistakes. This prevents you from having to trace back hundreds of steps to see what you did wrong. This is a feature that will blow your mind once you understand it, but will irritate you when you don&rsquo;t, because you won&rsquo;t be able to run your app until you fix your code. Imagine that you&rsquo;re drawing a rectangle and Sketch tells you that it&rsquo;s not well-centered. In code, that&rsquo;s actually a tremendous help.<\/p><blockquote><p>I wrote Card with a capital C and instantly, I was given an error. The code becomes white and autocompletion stops working.<\/p><\/blockquote>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-11%20at%209.38.43%20PM.png","image_width":"2500","image_height":"988","video":"","bookmark_id":"swift4-playground-instant-feedback"},{"id":"12134","section_id":"88","order":"3","title":"Xcode Code Completion","subhead":"","body":"<p><a href=\"https:\/\/developer.apple.com\/swift\/\">Swift Playground<\/a> is a big help for experimenting with code and checking the results in real-time. The autocompletion is one of my favorite features in Xcode. As a beginner, I don&rsquo;t encourage you to complete your code, because the autocompletion kicks in and you just need to select one of the options. It&rsquo;s safer this way. Swift is case sensitive, so there is a difference between <strong>uibutton<\/strong> and <strong>UIButton<\/strong>. Autocompletion knows automatically if that code can be used or not. If true, you have access to more contextual suggestions.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-11%20at%209.39.47%20PM.png","image_width":"1710","image_height":"964","video":"","bookmark_id":"swift4-playground-xcode-code-completion"},{"id":"12135","section_id":"88","order":"4","title":"Create your First Playground","subhead":"","body":"<p>First, let&rsquo;s create a new document in Swift Playground. On Xcode&rsquo;s welcome screen, click on <strong>Get started with a playground<\/strong>. Select <strong>Blank<\/strong>. Then, save <strong>DesignCode-Swift<\/strong> to a folder like Documents.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-10%20at%2012.44.15%20PM.png","image_width":"2270","image_height":"1396","video":"","bookmark_id":"swift4-playground-create-your-first-playground"},{"id":"12136","section_id":"88","order":"5","title":"Constants and Variables","subhead":"","body":"<p>Like most programming languages, you can declare variables and objects so that you can use it, or change it later. Think of variables as Sketch Symbols, where you can re-use them or modify its content. When you declare something, you can use <strong>let<\/strong> or <strong>var<\/strong>. The biggest difference is that a <strong>let<\/strong> will never change its value, but a <strong>var<\/strong> can.<\/p><p>I know that my name will never change.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> myName <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Meng&quot;<\/span><br><\/code><\/pre><p>But my age will change every year.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> myAge <span class=\"token operator\">=<\/span> <span class=\"token number\">35<\/span><br>myAge <span class=\"token operator\">=<\/span> <span class=\"token number\">36<\/span><br><\/code><\/pre><p>It is recommended to use <strong>let<\/strong> as often as you can to make your code clear, but hey, if you&rsquo;re starting, don&rsquo;t worry too much. Use <strong>var<\/strong> if you&rsquo;re not sure. That&rsquo;ll prevent you from getting errors that you may not understand. As you get more comfortable, you&rsquo;ll learn to use <strong>let<\/strong> more. Regardless, Xcode will make the correct recommendations if a var isn&rsquo;t properly used.<\/p><p>Some basic errors are pretty hard to understand for beginners. If you do get into this situation, just Google it and look for <a href=\"http:\/\/stackoverflow.com\">StackOverflow<\/a> answers. This error means that you can&rsquo;t change a <strong>let<\/strong> value. So you&rsquo;d have to use <strong>var<\/strong>. One of the great things about code is that it&rsquo;s fairly easy to Google for solutions, unlike visual design problems.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-constants-and-variables"},{"id":"12137","section_id":"88","order":"6","title":"Value Types","subhead":"","body":"<p>Unlike Objective-C, you don&rsquo;t have to write the type explicitly anymore. Swift will assign the type automatically, making the code shorter.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> myJob <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Designer&quot;<\/span>  <span class=\"token comment\">\/\/ String<\/span><br><span class=\"token keyword\">let<\/span> myYear <span class=\"token operator\">=<\/span> <span class=\"token number\">1982<\/span>       <span class=\"token comment\">\/\/ Int<\/span><br><span class=\"token keyword\">let<\/span> isLearning <span class=\"token operator\">=<\/span> <span class=\"token boolean\">true<\/span>   <span class=\"token comment\">\/\/ Bool<\/span><br><\/code><\/pre><p>Of course, you can still be explicit.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> myTwitter<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;@MengTo&quot;<\/span><br><\/code><\/pre><p>But different types can&rsquo;t be mixed.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> label <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;the width is &quot;<\/span><br><span class=\"token keyword\">let<\/span> width <span class=\"token operator\">=<\/span> <span class=\"token number\">100<\/span><br><span class=\"token keyword\">let<\/span> widthLabel <span class=\"token operator\">=<\/span> label <span class=\"token operator\">+<\/span> <span class=\"token function\">String<\/span><span class=\"token punctuation\">(<\/span>width<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>I had to convert the width (Int) to a String in order to be able to combine it with label (String).<\/p><blockquote><p>Tip: you can hold the <strong>Option<\/strong> key and click on a value to see its type.<\/p><\/blockquote>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-11%20at%209.42.57%20PM.png","image_width":"1338","image_height":"460","video":"","bookmark_id":"swift4-playground-value-types"},{"id":"12138","section_id":"88","order":"7","title":"Arrays","subhead":"","body":"<p>Wouldn&rsquo;t it be cool if we can store some colors in our palette so that we don&rsquo;t need to hard code it every time?<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> colors <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;red&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">&quot;green&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">&quot;blue&quot;<\/span><span class=\"token punctuation\">]<\/span><br><\/code><\/pre><p>Now, let&rsquo;s get our color. Notice that the index always start with 0.<\/p><pre><code class=\"language-swift\">colors<span class=\"token punctuation\">[<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">]<\/span> <span class=\"token comment\">\/\/ red<\/span><br><\/code><\/pre><p>What if we want to add a color to our list?<\/p><pre><code class=\"language-swift\">colors<span class=\"token punctuation\">.<\/span><span class=\"token function\">append<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;orange&quot;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Let&rsquo;s remove the <strong>green<\/strong> color.<\/p><pre><code class=\"language-swift\">colors<span class=\"token punctuation\">.<\/span><span class=\"token function\">remove<\/span><span class=\"token punctuation\">(<\/span>at<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-arrays"},{"id":"12139","section_id":"88","order":"8","title":"Control Flow","subhead":"","body":"<p>Often times, we want to set conditions before running something, or we want to loop and duplicate stuff.<\/p><p>Here&rsquo;s a condition.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> myAge <span class=\"token operator\">&gt;<\/span> <span class=\"token number\">30<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;I&apos;m old&quot;<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;I&apos;m not old&quot;<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>We&rsquo;re using <strong>print<\/strong> to print a message in our console, which is useful for checking if our code works. Console messages don&rsquo;t appear to your users.<\/p><p>But that&rsquo;s 5 lines of code. To make it shorter, you can do this instead.<\/p><pre><code class=\"language-swift\">myAge <span class=\"token operator\">&gt;<\/span> <span class=\"token number\">30<\/span> <span class=\"token operator\">?<\/span> <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;I&apos;m old&quot;<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;I&apos;m not old&quot;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>However, when you have too many <strong>if<\/strong> statements, it can become unreadable. So use <strong>switch<\/strong> for multiple conditions.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">switch<\/span> myAge <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">case<\/span> <span class=\"token number\">30<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token number\">100<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;I&apos;m old&quot;<\/span><br>    <span class=\"token keyword\">case<\/span> <span class=\"token number\">18<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token number\">29<\/span><span class=\"token punctuation\">:<\/span>  <span class=\"token string\">&quot;I&apos;m an adult&quot;<\/span><br>    <span class=\"token keyword\">case<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token number\">17<\/span><span class=\"token punctuation\">:<\/span>   <span class=\"token string\">&quot;I&apos;m young&quot;<\/span><br>    <span class=\"token keyword\">default<\/span><span class=\"token punctuation\">:<\/span>       <span class=\"token string\">&quot;Not sure&quot;<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>For Loops can be used to iterate over items in an array.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">for<\/span> color <span class=\"token keyword\">in<\/span> colors <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;This color is \\<span class=\"token interpolation\"><span class=\"token delimiter variable\">(<\/span>color<span class=\"token delimiter variable\">)<\/span><\/span>&quot;<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token comment\">\/\/ prints 3 times<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Notice that in our <strong>print<\/strong>, we can inject a variable by using <strong>()<\/strong> inside a String.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-control-flow"},{"id":"12140","section_id":"88","order":"9","title":"Functions","subhead":"","body":"<p>A <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/Swift\/Conceptual\/Swift_Programming_Language\/Functions.html\">function<\/a> is a re-usable task. Think of it like a <a href=\"http:\/\/bohemiancoding.com\/sketch\/support\/documentation\/07-symbols\/\">Sketch Symbol<\/a>, allowing you to re-use the same element or group of elements across the project.<\/p><p>Let&rsquo;s make a function that converts points to Retina pixels. We know that <a href=\"http:\/\/www.paintcodeapp.com\/news\/iphone-6-screens-demystified\">1pt equals 2px in Retina<\/a>. After we export assets at 2x, the size of the asset doubles.<\/p><p>This is how you write a function.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">pointToRetina<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>We&rsquo;ll need to feed it with a point value. Notice that we have to be specific with the type <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/General\/Reference\/SwiftStandardLibraryReference\/NumericTypes.html\">Int<\/a>, since we&rsquo;re working with numbers. Then, we&rsquo;re <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/Swift\/Conceptual\/Swift_Programming_Language\/BasicOperators.html#\/\/apple_ref\/doc\/uid\/TP40014097-CH6-ID60\">multiplying<\/a> the point by 2.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">pointToRetina<\/span><span class=\"token punctuation\">(<\/span>point<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    point <span class=\"token operator\">*<\/span> <span class=\"token number\">2<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>But of course, you want to return the Retina value, so you add this arrow sign <strong>-&gt;<\/strong>. But when you do that, your function needs a return line, otherwise Swift is going to give you an error.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">pointToRetina<\/span><span class=\"token punctuation\">(<\/span>point<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> point <span class=\"token operator\">*<\/span> <span class=\"token number\">2<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Let&rsquo;s call the function somewhere in our app.<\/p><pre><code class=\"language-swift\"><span class=\"token function\">pointToRetina<\/span><span class=\"token punctuation\">(<\/span>point<span class=\"token punctuation\">:<\/span> <span class=\"token number\">320<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token comment\">\/\/ Returns 640<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-functions"},{"id":"12141","section_id":"88","order":"10","title":"Class and Struct","subhead":"","body":"<p>All the above code is extremely useful for writing clean, re-usable code. But sometimes you&rsquo;ll want to create a profile instead of just performing tasks.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">struct<\/span> <span class=\"token builtin\">UserStruct<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">var<\/span> name<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><br>    <span class=\"token keyword\">var<\/span> age<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>    <span class=\"token keyword\">var<\/span> job<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Now you can create a new user.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> user <span class=\"token operator\">=<\/span> <span class=\"token function\">UserStruct<\/span><span class=\"token punctuation\">(<\/span>name<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Meng&quot;<\/span><span class=\"token punctuation\">,<\/span> age<span class=\"token punctuation\">:<\/span> <span class=\"token number\">35<\/span><span class=\"token punctuation\">,<\/span> job<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Designer&quot;<\/span><span class=\"token punctuation\">)<\/span><br>user<span class=\"token punctuation\">.<\/span>name <span class=\"token comment\">\/\/ Meng<\/span><br><\/code><\/pre><p>Classes and Stuctures are almost the same thing, except that the <strong>struct<\/strong> automatically provides an default initializer for all properties, the <strong>class<\/strong> doesn&rsquo;t. You don&rsquo;t need to assign a value to all properties. For the Class, you have to write an initializer.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">UserClass<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">var<\/span> name<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><br>    <span class=\"token keyword\">var<\/span> age<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>    <span class=\"token keyword\">var<\/span> job<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><br><br>    <span class=\"token keyword\">init<\/span><span class=\"token punctuation\">(<\/span>name<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span> age<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">,<\/span> job<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>name <span class=\"token operator\">=<\/span> name<br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>age <span class=\"token operator\">=<\/span> age<br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>job <span class=\"token operator\">=<\/span> job<br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>A <strong>struct<\/strong> is a <a href=\"https:\/\/developer.apple.com\/swift\/blog\/?id=10\">value type<\/a>. It gets copied if you pass it around. Now we have two separate objects. <strong>userB<\/strong> is a duplicate of <strong>userA<\/strong>. If you change a property of <strong>userB<\/strong>, <strong>userA<\/strong> won&rsquo;t change.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> userA <span class=\"token operator\">=<\/span> <span class=\"token function\">UserStruct<\/span><span class=\"token punctuation\">(<\/span>name<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Meng&quot;<\/span><span class=\"token punctuation\">,<\/span> age<span class=\"token punctuation\">:<\/span> <span class=\"token number\">32<\/span><span class=\"token punctuation\">,<\/span> job<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Designer&quot;<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">var<\/span> userB <span class=\"token operator\">=<\/span> userA<br>userB<span class=\"token punctuation\">.<\/span>name <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Marcos&quot;<\/span><br>userA<span class=\"token punctuation\">.<\/span>name <span class=\"token comment\">\/\/ Meng<\/span><br><\/code><\/pre><p>A <strong>class<\/strong> is a <a href=\"https:\/\/developer.apple.com\/swift\/blog\/?id=10\">reference type<\/a>. That means it gets referenced if you pass it around. If we change the name of <strong>userB<\/strong>, <strong>userA<\/strong> also change.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> userA <span class=\"token operator\">=<\/span> <span class=\"token function\">UserClass<\/span><span class=\"token punctuation\">(<\/span>name<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Meng&quot;<\/span><span class=\"token punctuation\">,<\/span> age<span class=\"token punctuation\">:<\/span> <span class=\"token number\">32<\/span><span class=\"token punctuation\">,<\/span> job<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Designer&quot;<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">var<\/span> userB <span class=\"token operator\">=<\/span> userA<br>userB<span class=\"token punctuation\">.<\/span>name <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Marcos&quot;<\/span><br>userA<span class=\"token punctuation\">.<\/span>name <span class=\"token comment\">\/\/ Marcos<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-class-and-struct"},{"id":"12142","section_id":"88","order":"11","title":"Comments","subhead":"","body":"<p>Comments are not always necessary as long as your code is readable and concise, and that there is no magic going on. A lot of iOS developers that I&rsquo;ve worked with don&rsquo;t like comments because it adds distractions to the code. But for complex logics, it&rsquo;s okay to comment.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ My comment<\/span><br><span class=\"token comment\">\/* This is a comment<br> written over multiple lines *\/<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-comments"},{"id":"12143","section_id":"88","order":"12","title":"Markdown","subhead":"","body":"<p>New in Xcode 9, you can use <a href=\"https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/MarkupSyntax.html#\/\/apple_ref\/doc\/uid\/TP40016497-CH105-SW1\">Markdown<\/a> to inject rich content in your Swift files like titles, links and images. In order to view the rendered Markup, you need to enable it in <strong>Editor<\/strong> &gt; <strong>Show Rendered Markup<\/strong>.<\/p><p>Headings are important for setting a structure to your texts. The more #, the smaller the title gets.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/: # Heading<\/span><br><span class=\"token comment\">\/\/: ## Second Level Heading<\/span><br><span class=\"token comment\">\/\/: ### Third Level Heading<\/span><br><\/code><\/pre><p>Typically, you&rsquo;d use this for single-paragraph comments.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/: Markdown text<\/span><br><br><span class=\"token comment\">\/*:<br> Markdown text over multiple lines. To use bold, do **bold**, like this. For italic, use *italic*.<br>*\/<\/span><br><\/code><\/pre><p>One of the biggest advantages of using <strong>Markdown<\/strong> is the ability to cleanly transform words into clickable links.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/: Learn Swift 4: [Design+Code](http:\/\/designcode.io)<\/span><br><\/code><\/pre><p>When you&rsquo;re creating a tutorial in Swift, having images can help a lot to help visualize the code. To insert an image in your Playground, make sure to enable the Navigator by pressing <strong>Command + 1<\/strong>. Then, drag and drop an image to Resources.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/: Logo: ![Image](Logo.jpg)<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-11%20at%209.24.50%20PM.png","image_width":"1856","image_height":"1034","video":"https:\/\/designcode.io\/cloud\/swift4\/playground-insertimage.mp4","bookmark_id":"swift4-playground-markdown"},{"id":"12144","section_id":"88","order":"13","title":"Code Sections","subhead":"","body":"<p>Xcode has a pretty useful way to browse code. You can click on the navigation bar of your code editor and search by typing the word. It is recommended to put similar functions together in your Class file and give them a section title.<\/p><p>Marking your section<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ MARK: Section<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/browingcode.jpeg","image_width":"902","image_height":"430","video":"","bookmark_id":"swift4-playground-code-sections"},{"id":"12145","section_id":"88","order":"14","title":"Naming Convention","subhead":"","body":"<p>In this book, we&rsquo;re going to follow the Apple standards of naming things. <\/p><p>For variables and functions, we&rsquo;re going to use camel case starting with a lowercase.<\/p><pre><code class=\"language-swift\">name<br>userName<br><span class=\"token function\">changeColor<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>For Classes and Structs we&rsquo;ll capitalize the first letter. Notice that ViewController.swift is a Class.<\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">ViewController<\/span><br><span class=\"token builtin\">UserProfile<\/span><br><span class=\"token builtin\">Comment<\/span><br><\/code><\/pre><p>Avoid using abbreviations. Your code has to be readable by anyone. It has to read like English.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> u <span class=\"token operator\">=<\/span> <span class=\"token function\">UserProfile<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>What the hell is &#x201C;u&#x201D;? Just like in design, don&rsquo;t make your code ambiguous. Make it clear, clean and functional.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-naming-convention"},{"id":"12146","section_id":"88","order":"15","title":"Optionals","subhead":"","body":"<p>One of the hardest things to work with is data. That&rsquo;s because data often returns no value.<\/p><p>Swift introduced Optionals to make your code safer. You apply a question mark (?) to variable that may return no value.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> answer<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token operator\">?<\/span><br><span class=\"token function\">UILabel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> answer<br><\/code><\/pre><p>This means that you&rsquo;re expecting that <strong>answer<\/strong> sometimes has no value.<\/p><p>When you&rsquo;re sure that there is a value, you can add an exclamation mark (!).<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> answerString<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-optionals"},{"id":"12147","section_id":"88","order":"16","title":"Optional Binding","subhead":"","body":"<p>Sometimes, to avoid breaking code, you may not want to run your code unless there is a value. So you use <strong>Optional Binding<\/strong>. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> sureAnswer <span class=\"token operator\">=<\/span> answer <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">UILabel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> sureAnswer<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>You can make that code shorter by doing this.<\/p><pre><code class=\"language-swift\"><span class=\"token function\">UILabel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> answer <span class=\"token operator\">?<\/span><span class=\"token operator\">?<\/span> <span class=\"token string\">&quot;&quot;<\/span><br><\/code><\/pre><p>If <strong>answer<\/strong> has a value, use it, otherwise return an empty string.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-optional-binding"},{"id":"12148","section_id":"88","order":"17","title":"Conclusion","subhead":"","body":"<p>That&rsquo;s it, we&rsquo;ve learned some Swift basics. We&rsquo;re going to use all of this for the making of our app. It&rsquo;s okay if you didn&rsquo;t understand everything, at least you have some idea of what they when you encounter them. You&rsquo;re definitely going to get better with practice.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-conclusion"}]},{"id":"93","chapter_id":"3","order":"60","slug":"swift4-design","title":"Design in Playground","caption":"Design and code UI in Swift Playground","body":"<p><a href=\"https:\/\/developer.apple.com\/swift\/\">Playground<\/a> allows you to quickly test snippets of code and see the results in real time. There are a few techniques that you need to know in order to start on the right foot. The beautiful thing about Playground is that there is zero setup, and you just need to write a bunch of words that make sense to the computer. But you need to enable a couple of options. We're going to recreate some basic UI elements.<\/p>\n\n<p>Normally, we're not gonna need to design the user interface in code. We would use objects in Storyboard for that. But for things that needs to be dynamic and interactive like Labels, Buttons and Colors, we'll want to edit them in code. In turn, that will allow us to animate those elements and feed in real data later.<\/p>\n","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-design.jpg","video":"https:\/\/player.vimeo.com\/external\/242852934.hd.mp4?s=c93f62205aefeca4245ad9a661f1c9a2c37db46c&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-design.zip","contents":[{"id":"10489","section_id":"93","order":"1","title":"Downloads for Design in Playground","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need&#xA0;<a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a>&#xA0;and the <a href=\"https:\/\/www.dropbox.com\/s\/zqyd4cwn03xwkq2\/3.4.Playground-Design-Assets.zip?dl=0\">assets<\/a>. You can download the&#xA0;<a href=\"https:\/\/www.dropbox.com\/s\/76i6zfzrvkk6p9m\/3.5.Playground-Design.playground.zip?dl=0\">final&#xA0;Playground file<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-downloads-for-design-in-playground"},{"id":"10490","section_id":"93","order":"2","title":"Create a Playground","subhead":"","body":"<p>Let&rsquo;s create a new document in Swift Playground. Let&rsquo;s go to Xcode&rsquo;s welcome screen and click on <strong>Get started with a playground<\/strong>. We&rsquo;ll select <strong>Single View<\/strong>. Then, save <strong>DesignCode-Design<\/strong> to a folder like Documents. At this time, we&rsquo;re not too interested in application logics. We want to code UIs. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-08%20at%208.16.55%20PM.png","image_width":"2574","image_height":"1560","video":"","bookmark_id":"swift4-design-create-a-playground"},{"id":"10491","section_id":"93","order":"3","title":"Single View Playground","subhead":"","body":"<p>Single View gives us a starting template that includes a white View Controller, with a Label of <strong>200 x 20 pt<\/strong>. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-08%20at%208.30.35%20PM.png","image_width":"2418","image_height":"1480","video":"","bookmark_id":"swift4-design-single-view-playground"},{"id":"10492","section_id":"93","order":"4","title":"Enable the Preview","subhead":"","body":"<p>To see the live preview of your code, you can enable <strong>Show the Assistant editor<\/strong> in the far right of the toolbar. Once enabled, it&rsquo;ll show you what the View Controller looks like. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/afasd325athsfghdf.jpg","image_width":"1383","image_height":"751","video":"","bookmark_id":"swift4-design-enable-the-preview"},{"id":"10493","section_id":"93","order":"5","title":"UIKit","subhead":"","body":"<p>In the first line, you&rsquo;ll find <strong>import UIKit<\/strong>. This simply means that we&rsquo;re using the iOS framework called <a href=\"https:\/\/developer.apple.com\/documentation\/uikit\">UIKit<\/a> by Apple, which pretty much powers everything you see in iOS. Apple has made it really easy to design and build powerful apps without the need of a single library. Anything from ARKit, to multiple ways to animate, in-app purchases are provided in UIKit.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-uikit"},{"id":"10494","section_id":"93","order":"6","title":"Playground Support","subhead":"","body":"<p>In the second line, we&rsquo;re using <strong>import PlaygroundSupport<\/strong>, which allows us to preview animations thanks to the following code at the end:<\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">PlaygroundPage<\/span><span class=\"token punctuation\">.<\/span>current<span class=\"token punctuation\">.<\/span>liveView <span class=\"token operator\">=<\/span> <span class=\"token function\">MyViewController<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>This last line simply means that we&rsquo;re using <strong>PlaygroundPage<\/strong> from the library <strong>PlaygroundSupport<\/strong> to create a live preview of the View Controller.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-playground-support"},{"id":"10495","section_id":"93","order":"7","title":"View Controller","subhead":"","body":"<p>We&rsquo;re starting a View Controller class called <strong>MyViewController<\/strong>. A View Controller is the equivalent of an Artboard in Sketch. This screen is already set up with a white background and a black text that says &#x201C;Hello World&#x201D;. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">MyViewController<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewController<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">loadView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">let<\/span> view <span class=\"token operator\">=<\/span> <span class=\"token function\">UIView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>        view<span class=\"token punctuation\">.<\/span>backgroundColor <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>white<br><br>        <span class=\"token keyword\">let<\/span> label <span class=\"token operator\">=<\/span> <span class=\"token function\">UILabel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>        label<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">150<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">200<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">200<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">)<\/span><br>        label<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Hello World!&quot;<\/span><br>        label<span class=\"token punctuation\">.<\/span>textColor <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>black<br><br>        view<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>label<span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>view <span class=\"token operator\">=<\/span> view<br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-view-controller"},{"id":"10496","section_id":"93","order":"8","title":"UILabel","subhead":"","body":"<p>Let&rsquo;s customize the label to recreate the title in the final screen. Change the frame&rsquo;s position and size to the following. Pretty straightforward, since these values are common in most design tools.<\/p><pre><code class=\"language-swift\">label<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">16<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">16<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">272<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">38<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Let&rsquo;s change the <strong>label.text<\/strong> to <strong>&#x201D;Learn Swift 4&#x201D;<\/strong>. Already, you can see how changing the code affects the screen content.<\/p><pre><code class=\"language-swift\">label<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Learn Swift 4&quot;<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-uilabel"},{"id":"10497","section_id":"93","order":"9","title":"UIView","subhead":"","body":"<p>For the card, we&rsquo;ll use a <strong>UIView<\/strong>. The UIView can be compared to a <strong>Rectangle<\/strong> in your design tool. You can set a bunch of properties like background colors, rounded corners and drop shadows. We&rsquo;ll name it cardView. The first word <strong>card<\/strong> is for describing what the object is. <strong>View<\/strong> is important for calling the type of element. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> cardView <span class=\"token operator\">=<\/span> <span class=\"token function\">UIView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>As soon as you type UIView, you&rsquo;ll notice an autocompletion window that shows you the suggestions based on what you&rsquo;re typing. We can just press Enter to complete <strong>UIView<\/strong>. Then, type the <strong>left parenthesis<\/strong>, <strong>right parenthesis<\/strong>. This simply means that we&rsquo;re initializing the object UIView.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/cardView.mp4","bookmark_id":"swift4-design-uiview"},{"id":"10498","section_id":"93","order":"10","title":"Frame","subhead":"","body":"<p>With cardView declared, we&rsquo;re going set the frame property. When you type frame, you&rsquo;ll see what kind of value it is. In this case, it expects a <strong>CGRect<\/strong>. A CGRect is basically a rectangle. Type <strong>equal<\/strong>, <strong>CGRect<\/strong>, then press Enter to autocomplete. Type <strong>(<\/strong> in front to show another suggestion window and select the 5th one. Start filling the x, y, width and height values. You can use <strong>Tab<\/strong> to move to the next value.<\/p><pre><code class=\"language-swift\">cardView<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">255<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">300<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">250<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/playground-frame.mp4","bookmark_id":"swift4-design-frame"},{"id":"10499","section_id":"93","order":"11","title":"UIColor","subhead":"","body":"<p>Let&rsquo;s set a background color for <strong>cardView<\/strong> using the property <strong>backgroundColor<\/strong>. What you&rsquo;ll notice here is that backgroundColor is expecting a UIColor as a value. You can type UIColor, dot, blue. Blue is a preset color among a few others like white, black, red, etc.<\/p><pre><code class=\"language-swift\">cardView<span class=\"token punctuation\">.<\/span>backgroundColor <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UIColor<\/span><span class=\"token punctuation\">.<\/span>blue<br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-uicolor"},{"id":"10500","section_id":"93","order":"12","title":"Adding a Subview","subhead":"","body":"<p>Once we have a cardView with a frame and a color, it should be visible. Let&rsquo;s go ahead and add it to the screen. In order to do that, we&rsquo;ll use the <strong>addSubview<\/strong> method.<\/p><pre><code class=\"language-swift\">view<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>cardView<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-10%20at%207.30.28%20PM.png","image_width":"2608","image_height":"1622","video":"","bookmark_id":"swift4-design-adding-a-subview"},{"id":"10501","section_id":"93","order":"13","title":"Avoiding Repetition","subhead":"","body":"<p>Since Swift already knows that backgroundColor is a UIColor, when you choose blue as a color, you don&rsquo;t need to repeat UIColor, making the code more concise.<\/p><pre><code class=\"language-swift\">cardView<span class=\"token punctuation\">.<\/span>backgroundColor <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>blue<br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-avoiding-repetition"},{"id":"10502","section_id":"93","order":"14","title":"Color Literal","subhead":"","body":"<p>Except for black and white, the preset colors are not very good-looking. Blue, for example, is oversaturated. Sure, we can initialize UIColor with RGBA, but you have to divide by its maximum value. In this case, it&rsquo;s 255. <\/p><pre><code class=\"language-swift\">cardView<span class=\"token punctuation\">.<\/span>backgroundColor <span class=\"token operator\">=<\/span> <span class=\"token function\">UIColor<\/span><span class=\"token punctuation\">(<\/span>red<span class=\"token punctuation\">:<\/span> <span class=\"token number\">255<\/span><span class=\"token operator\">\/<\/span><span class=\"token number\">255<\/span><span class=\"token punctuation\">,<\/span> green<span class=\"token punctuation\">:<\/span> <span class=\"token number\">45<\/span><span class=\"token operator\">\/<\/span><span class=\"token number\">255<\/span><span class=\"token punctuation\">,<\/span> blue<span class=\"token punctuation\">:<\/span> <span class=\"token number\">85<\/span><span class=\"token operator\">\/<\/span><span class=\"token number\">255<\/span><span class=\"token punctuation\">,<\/span> alpha<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Color Literal allows you to set a color using the GUI. By typing Color Literal, you&rsquo;ll get the autocompletion for that. Then, just double-click to pick the color.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/playground-color-literal.mp4","bookmark_id":"swift4-design-color-literal"},{"id":"10503","section_id":"93","order":"15","title":"Corner Radius","subhead":"","body":"<p>Every object is a UIView. The UIView has a layer property that allows you to set additional properties such as rounded corners, shadows, etc. <\/p><pre><code class=\"language-swift\">cardView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">14<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-corner-radius"},{"id":"10504","section_id":"93","order":"16","title":"Drop Shadows","subhead":"","body":"<p>To add a shadow, you need to set the opacity, offset and radius. <\/p><pre><code class=\"language-swift\">cardView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>shadowOpacity <span class=\"token operator\">=<\/span> <span class=\"token number\">0.25<\/span><br>cardView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>shadowOffset <span class=\"token operator\">=<\/span> <span class=\"token function\">CGSize<\/span><span class=\"token punctuation\">(<\/span>width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">10<\/span><span class=\"token punctuation\">)<\/span><br>cardView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>shadowRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">10<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-drop-shadows"},{"id":"10505","section_id":"93","order":"17","title":"Renaming Label","subhead":"","body":"<p>Because we&rsquo;re going to have multiple labels, we shouldn&rsquo;t name it label, so that it doesn&rsquo;t confuse with other labels. Let&rsquo;s rename to <strong>titleLabel<\/strong>. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> titleLabel <span class=\"token operator\">=<\/span> <span class=\"token function\">UILabel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>titleLabel<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">16<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">16<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">272<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">38<\/span><span class=\"token punctuation\">)<\/span><br>titleLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Learn Swift 4&quot;<\/span><br><\/code><\/pre><p>Let&rsquo;s also move the label to be inside the <strong>cardView<\/strong>. Just like how we have the cardView to be inside view (the View Controller&rsquo;s background), we now have label inside cardView. It&rsquo;s the same organization as the Groups in Sketch.<\/p><pre><code class=\"language-swift\">cardView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>titleLabel<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-renaming-label"},{"id":"10506","section_id":"93","order":"18","title":"UIFont","subhead":"","body":"<p>The Label can have a property called <strong>font<\/strong>, which enables you to set the typeface, size and weight. Let&rsquo;s set it to system font, which is <strong>San Francisco<\/strong> by default, size <strong>32<\/strong> and weight <strong>Semibold<\/strong>.<\/p><pre><code class=\"language-swift\">titleLabel<span class=\"token punctuation\">.<\/span>font <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UIFont<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">systemFont<\/span><span class=\"token punctuation\">(<\/span>ofSize<span class=\"token punctuation\">:<\/span> <span class=\"token number\">32<\/span><span class=\"token punctuation\">,<\/span> weight<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>semibold<span class=\"token punctuation\">)<\/span><br>titleLabel<span class=\"token punctuation\">.<\/span>textColor <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>white<br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-uifont"},{"id":"10507","section_id":"93","order":"19","title":"Caption","subhead":"","body":"<p>The <strong>captionLabel<\/strong> will have a similar settings to the titleLabel. Let&rsquo;s add Caption to the cardView.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> captionLabel <span class=\"token operator\">=<\/span> <span class=\"token function\">UILabel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>captionLabel<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">16<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">204<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">272<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">40<\/span><span class=\"token punctuation\">)<\/span><br>captionLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Design directly in Playground&quot;<\/span><br>captionLabel<span class=\"token punctuation\">.<\/span>textColor <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>white<br>cardView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>captionLabel<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-caption"},{"id":"10508","section_id":"93","order":"20","title":"Adding images to Resources","subhead":"","body":"<p>To use images in our Playground, you need to open the Navigator by pressing <strong>Command + 1<\/strong>. Then, drag and drop the image files found in the assets provided. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/PlaygroundDesign-ImportAssets.mp4","bookmark_id":"swift4-design-adding-images-to-resources"},{"id":"10509","section_id":"93","order":"21","title":"UIImageView","subhead":"","body":"<p>With UIImageView, you can use an image file and set its <strong>contentMode<\/strong>. Let&rsquo;s set up <strong>coverImageView<\/strong>, with <strong>scaleAspectFill<\/strong>, which always make sure that the image covers the entire width or height, whichever is the highest, while keeping the aspect ratio. ImageView is basically a View that wraps around an Image. Now, let&rsquo;s set the image inside. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> coverImageView <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImageView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>coverImageView<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">300<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">250<\/span><span class=\"token punctuation\">)<\/span><br>coverImageView<span class=\"token punctuation\">.<\/span>contentMode <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>scaleAspectFill<br>coverImageView<span class=\"token punctuation\">.<\/span>image <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImage<\/span><span class=\"token punctuation\">(<\/span>named<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Cover.jpg&quot;<\/span><span class=\"token punctuation\">)<\/span><br>cardView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>coverImageView<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-uiimageview"},{"id":"10510","section_id":"93","order":"22","title":"Image Literal","subhead":"","body":"<p>You can simplify the code by dragging and dropping from the Resources. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/Playground-DropImage.mp4","bookmark_id":"swift4-design-image-literal"},{"id":"10511","section_id":"93","order":"23","title":"Clip To Bounds","subhead":"","body":"<p>You might have noticed that the cover image is larger than its cardView container. We need to use something like Mask in Sketch. In Xcode, you can use the property clipToBounds to create a masking. Then, set the rounded corners.<\/p><pre><code class=\"language-swift\">coverImageView<span class=\"token punctuation\">.<\/span>clipsToBounds <span class=\"token operator\">=<\/span> <span class=\"token boolean\">true<\/span><br>coverImageView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">14<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-clip-to-bounds"},{"id":"10512","section_id":"93","order":"24","title":"Hierarchy","subhead":"","body":"<p>Just like when you read a page, there is an order in how you process the information: from top to bottom. Code works the same way. If you insert the image after the texts, the program will think that the image sits on top of the texts. To fix this, you need to re-arrange the order of the code.<\/p><pre><code class=\"language-swift\">view<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>cardView<span class=\"token punctuation\">)<\/span><br>cardView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>coverImageView<span class=\"token punctuation\">)<\/span><br>cardView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>captionLabel<span class=\"token punctuation\">)<\/span><br>cardView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>titleLabel<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-hierarchy"},{"id":"10513","section_id":"93","order":"25","title":"Background Image","subhead":"","body":"<p>Since this is a prototype, we don&rsquo;t need to recreate the elements we don&rsquo;t want to animate or modify. For the rest of the elements, we&rsquo;ll just use an image that takes the entire screen and add that to the main <strong>view<\/strong>. Make sure that the backgroundImageView is added before cardView.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> backgroundImageView <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImageView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>backgroundImageView<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">375<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">667<\/span><span class=\"token punctuation\">)<\/span><br>backgroundImageView<span class=\"token punctuation\">.<\/span>image <span class=\"token operator\">=<\/span> #<span class=\"token function\">imageLiteral<\/span><span class=\"token punctuation\">(<\/span>resourceName<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Chapters Screen@2x.png&quot;<\/span><span class=\"token punctuation\">)<\/span><br>view<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>backgroundImageView<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-design-background-image"},{"id":"10514","section_id":"93","order":"26","title":"Conclusion","subhead":"","body":"<p>Your final Playground should look something like this. The code has been re-arranged a little to make sure that the hierarchy works as expected. Don&rsquo;t hesitate to play with your code after this session. The best way to learn new lessons is by breaking the code and figuring out how to fix it afterwards.<\/p><p>So far, you&rsquo;ve learned the basics of coding the UI objects in code. This is the initial setup we&rsquo;ll need to start animating the card.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/playground-design-final.jpg","image_width":"1600","image_height":"972","video":"","bookmark_id":"swift4-design-conclusion"}]},{"id":"103","chapter_id":"3","order":"70","slug":"swift4-animate","title":"Animate in Playground","caption":"Prototyping animations with Swift 4 and Xcode 9","body":"<p>High-fidelity prototyping tools have become incredibly popular over the past years with <a href=\"http:\/\/framer.com\">Framer<\/a>, <a href=\"http:\/\/flinto.com\">Flinto<\/a> and <a href=\"http:\/\/principleformac.com\">Principle<\/a> leading the way. What those tools allow you to do is to animate specific elements of your user interface.<\/p><blockquote><p>If a picture is worth 1000 words, a prototype is worth 1000 meetings. &#x2014;saying at Ideo<\/p><\/blockquote><p>Prototyping is an essential skill to have. It has always been. If you look at how Apple build their products, you get a sense of how much they prototype everything, not just for their software but also for their hardware.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-animate.jpg","video":"https:\/\/player.vimeo.com\/external\/247047480.hd.mp4?s=edaed34e72b03ae65270075f08ada78a5b7b5348&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-animate.zip","contents":[{"id":"10600","section_id":"103","order":"1","title":"Prototyping in Swift","subhead":"","body":"<p>Personally, I consider prototyping a little differently. I don&rsquo;t separate the process from actual development. I don&rsquo;t like to add extra processes between design and development. After all, even if your prototype ends up looking great, you&rsquo;re not actually reducing the build time. You may in fact add to it. Your developer may reject it, because understandably they have too much on their plate. They do 70% of the work, hence why iOS apps traditionally take 10x longer than Websites.<\/p><blockquote><p>What if your prototype can actually be a real product?<\/p><\/blockquote><p>Most designers today know how to build a Website. We can certainly apply the same attitude towards making apps, by learning Swift and Storyboard instead of CSS and Javascript.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-prototyping-in-swift"},{"id":"10601","section_id":"103","order":"2","title":"Downloads for Design in Playground","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the starting <a href=\"https:\/\/www.dropbox.com\/s\/76i6zfzrvkk6p9m\/3.5.Playground-Design.playground.zip?dl=0\">Playground<\/a> file. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/37ulq5pdosgiu7i\/3.6.Playground-Animate.playground.zip?dl=0\">Final Playground file<\/a> to help you compare with your own progress. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-downloads-for-design-in-playground"},{"id":"10602","section_id":"103","order":"3","title":"Final Result","subhead":"","body":"<p>We&rsquo;re building a simple transition from the Main screen to the Section screen. While Playground may not allow you to test on devices, the code that you create here can easily be transported to Xcode. We&rsquo;re using Playground to get a firm grasp at some of the basic concepts of animating in Swift.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/Playground-Animate-Demo.mp4","bookmark_id":"swift4-animate-final-result"},{"id":"10603","section_id":"103","order":"4","title":"Open Playground File","subhead":"","body":"<p>We&rsquo;re going to use the Playground file we created from Design in Playground. Basically, we have set up the basic UI elements from scratch, so that we can animate them here.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-open-playground-file"},{"id":"10604","section_id":"103","order":"5","title":"Animation Basics","subhead":"","body":"<p>iOS 11 and Material Design set new standards for animations. Now, we expect screens to transition gracefully from one to another. If you plan your animations carefully, you can transition multiple elements to end like the next screen&rsquo;s beginning state.<\/p><p>How do you animate, you may ask? To understand some of the theory behind animation, I suggest heading to the <a href=\"http:\/\/designcode.io\/ios11-animations\">Animations<\/a> section. Basically, you need to set the <strong>beginning<\/strong> state and <strong>end<\/strong> state. The beginning state is our current view. The end state is the Section view.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/playground-animate-screens.jpg","image_width":"1600","image_height":"1200","video":"","bookmark_id":"swift4-animate-animation-basics"},{"id":"10605","section_id":"103","order":"6","title":"UIViewPropertyAnimator","subhead":"","body":"<p>Let&rsquo;s look at the <strong>&#xA0;UIViewPropertyAnimator<\/strong> class. This is just one of the many ways to animate in Swift. With this, you can move things, change colors and sizes and have complete control over the animation later. In the <strong>End state<\/strong>, we&rsquo;ll make sure to align and resize the same elements, like the cardView, coverImageView, titleLabel and captionLabel.<\/p><p>Let&rsquo;s type this after we set up <strong>backgroundImageView<\/strong>. Also, make sure that the <strong>Assistant Editor<\/strong> is open.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> animator <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewPropertyAnimator<\/span><span class=\"token punctuation\">(<\/span>duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">,<\/span> dampingRatio<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token comment\">\/\/ End state<\/span><br><span class=\"token punctuation\">}<\/span><br>animator<span class=\"token punctuation\">.<\/span><span class=\"token function\">startAnimation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/animateplayground-uiviewpropertyanimator.jpg","image_width":"2836","image_height":"1583","video":"","bookmark_id":"swift4-animate-uiviewpropertyanimator"},{"id":"10606","section_id":"103","order":"7","title":"","subhead":"Duration","body":"<p>Set how long you want your animation to run. Typically, it would be somewhere between 0.5 seconds to 2 seconds. In this case, set the Duration to <strong>0.7<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-duration"},{"id":"10607","section_id":"103","order":"8","title":"","subhead":"Damping Ratio","body":"<p>Spring and bouncing animations are used everywhere in iOS, so we&rsquo;re going to replicate that with the Damping Ratio combined with the duration. The great thing about this technique is that it&rsquo;s fully customizable. Let&rsquo;s set the Damping Ratio to <strong>0.7<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-damping-ratio"},{"id":"10608","section_id":"103","order":"9","title":"Animate Card","subhead":"","body":"<p>You can change the <strong>position<\/strong>, the <strong>size<\/strong> and other properties available to your UI object. New in Xcode 9, you can now animate the cornerRadius as well. In this animation, we want to expand the card so that it takes the full size of the screen. Make sure that the cardView has a white background.<\/p><p>Write this code in the animator, between the curly brackets.<\/p><pre><code class=\"language-swift\">cardView<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">375<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">667<\/span><span class=\"token punctuation\">)<\/span><br>cardView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br><\/code><\/pre><p>Finally, outside of the curly brackets, we&rsquo;re going to start the animation by referencing the animator that we created and use the <strong>startAnimation<\/strong> method.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/DesignCode-Animate_playground-Animator.jpg","image_width":"1838","image_height":"320","video":"","bookmark_id":"swift4-animate-animate-card"},{"id":"10609","section_id":"103","order":"10","title":"Customizing the Animation","subhead":"","body":"<p>At this point, you can start customizing the springiness of the animation. If you wish to have less bouncing and overshooting, you can use <strong>duration 1, damping 1<\/strong>. If you want more, you can use <strong>duration 0.5, damping 0.5<\/strong>. The lesser the values, the more exaggerated the animation is going to be.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-customizing-the-animation"},{"id":"10610","section_id":"103","order":"11","title":"Animate the Cover","subhead":"","body":"<p>The Cover image will be animated similarly to the Card. It&rsquo;ll take the full width, but the height will be limited to <strong>420<\/strong>. Also, the rounded corners will be set to 0.<\/p><pre><code class=\"language-swift\">coverImageView<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">375<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">420<\/span><span class=\"token punctuation\">)<\/span><br>coverImageView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-animate-the-cover"},{"id":"10611","section_id":"103","order":"12","title":"Animate the Labels","subhead":"","body":"<p>Since we have more space for our design, we&rsquo;ll push the margins a little for our <strong>titleLabel<\/strong> and <strong>captionLabel<\/strong>. Instead of a <strong>16 pt<\/strong> margin, we&rsquo;ll use a <strong>20 pt<\/strong> margin. Additionally, the captionLabel will be further down.<\/p><pre><code class=\"language-swift\">titleLabel<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">374<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">38<\/span><span class=\"token punctuation\">)<\/span><br>captionLabel<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">370<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">272<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">40<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-animate-the-labels"},{"id":"10612","section_id":"103","order":"13","title":"Description Label","subhead":"","body":"<p>In the Section screen, we&rsquo;ll want to have a body text. Let&rsquo;s create one right before we declared the <strong>animator<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> descriptionLabel <span class=\"token operator\">=<\/span> <span class=\"token function\">UILabel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>descriptionLabel<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">448<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">335<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">132<\/span><span class=\"token punctuation\">)<\/span><br>descriptionLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Three years ago, Apple completely revamped their design language for the modern users. It is now much simpler, allowing designers to focus on animation and function rather than intricate visual details.&quot;<\/span><br>descriptionLabel<span class=\"token punctuation\">.<\/span>textColor <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>black<br><\/code><\/pre><p>Add the descriptionLabel to cardView, right after captionLabel.<\/p><pre><code class=\"language-swift\">cardView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>descriptionLabel<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-description-label"},{"id":"10613","section_id":"103","order":"14","title":"Number of Lines","subhead":"","body":"<p>Notice that our long paragraph of text is not showing everything. We&rsquo;ll need to spread that over multiple lines of text. Let&rsquo;s use the property <strong>numberOfLines<\/strong>.<\/p><pre><code class=\"language-swift\">descriptionLabel<span class=\"token punctuation\">.<\/span>numberOfLines <span class=\"token operator\">=<\/span> <span class=\"token number\">10<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-number-of-lines"},{"id":"10614","section_id":"103","order":"15","title":"Add Delay","subhead":"","body":"<p>As we preview the animation on the right, we can see that our animation is happening too fast at the beginning, so it&rsquo;s really hard to follow what&rsquo;s going on. Let&rsquo;s add a slight 1 second delay at the beginning. This is completely optional and will need to be removed at the end of the tutorial when we use tap events.<\/p><pre><code class=\"language-swift\">animator<span class=\"token punctuation\">.<\/span><span class=\"token function\">startAnimation<\/span><span class=\"token punctuation\">(<\/span>afterDelay<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-add-delay"},{"id":"10615","section_id":"103","order":"16","title":"Fade In Animation","subhead":"","body":"<p>We can animate the opacity to give a nice fade in animation. Let&rsquo;s set the descriptionLabel <strong>opacity<\/strong> to <strong>0 at the beginning<\/strong>, and opacity to <strong>1 at the end state<\/strong>.<\/p><p>Outside of the <strong>animator<\/strong> class, right below where you set up descriptionLabel.<\/p><pre><code class=\"language-swift\">descriptionLabel<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br><\/code><\/pre><p>Inside the <strong>animator<\/strong>&rsquo;s curly brackets.<\/p><pre><code class=\"language-swift\">descriptionLabel<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-fade-in-animation"},{"id":"10616","section_id":"103","order":"17","title":"UIButton","subhead":"","body":"<p>Once we reach the Section screen, we need a way to go back to the Chapters screen after the animation is completed. Let&rsquo;s create a close button.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> closeButton <span class=\"token operator\">=<\/span> <span class=\"token function\">UIButton<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>closeButton<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">328<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">28<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">28<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>For the background color, we want to get a 50% black. Let&rsquo;s use Color Literal and set it in the color picker.<\/p><pre><code class=\"language-swift\">closeButton<span class=\"token punctuation\">.<\/span>backgroundColor <span class=\"token operator\">=<\/span> #<span class=\"token function\">colorLiteral<\/span><span class=\"token punctuation\">(<\/span>red<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> green<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> blue<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> alpha<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.5<\/span><span class=\"token punctuation\">)<\/span><br>closeButton<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">14<\/span><br>closeButton<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br><\/code><\/pre><p>One of the things that set buttons apart is that they have different states. As a result, we must use the <strong>setImage<\/strong> method and specify not only the image, but also for which button state. The <strong>normal<\/strong> state is the state that you see by default.<\/p><pre><code class=\"language-swift\">closeButton<span class=\"token punctuation\">.<\/span><span class=\"token function\">setImage<\/span><span class=\"token punctuation\">(<\/span>#<span class=\"token function\">imageLiteral<\/span><span class=\"token punctuation\">(<\/span>resourceName<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Action-Close@2x.png&quot;<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>normal<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>When a user presses the button, we need to fire an event by using <strong>addTarget<\/strong>. Here, we&rsquo;re firing the function <strong>&#xA0;closeButtonTapped<\/strong>. <\/p><pre><code class=\"language-swift\">closeButton<span class=\"token punctuation\">.<\/span><span class=\"token function\">addTarget<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> action<span class=\"token punctuation\">:<\/span> #<span class=\"token function\">selector<\/span><span class=\"token punctuation\">(<\/span>closeButtonTapped<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>touchUpInside<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-uibutton"},{"id":"10617","section_id":"103","order":"18","title":"Close Tap Function","subhead":"","body":"<p>Since the Close Button is calling a function called <strong>&#xA0;closeButtonTapped<\/strong>, we&rsquo;ll create that function outside of the <strong>loadView<\/strong> main function. It&rsquo;s right before the last closing curly bracket.<\/p><p>Notice that new in Swift 4, we must add @objc in front when calling from a <strong>#selector<\/strong>, which is what the error recommends us to do.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">closeButtonTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token comment\">\/\/ Do something when user taps on close button<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-close-tap-function"},{"id":"10618","section_id":"103","order":"19","title":"Moving Objects to Class","subhead":"","body":"<p>When you start referencing objects in the <strong>closeButtonTapped<\/strong> function, you&rsquo;ll notice that the autocompletion doesn&rsquo;t kick in. That&rsquo;s because those objects were initialized inside of <strong>loadView<\/strong>, which is not inherited by <strong>closeButtonTapped<\/strong>. We need to move those object declarations at the root level of <strong>MyViewController<\/strong> instead, which then will be inherited by all functions inside.<\/p><p>For every object that we initialized, we&rsquo;ll move them right before the func loadView.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> cardView <span class=\"token operator\">=<\/span> <span class=\"token function\">UIView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> coverImageView <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImageView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> titleLabel <span class=\"token operator\">=<\/span> <span class=\"token function\">UILabel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> captionLabel <span class=\"token operator\">=<\/span> <span class=\"token function\">UILabel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> descriptionLabel <span class=\"token operator\">=<\/span> <span class=\"token function\">UILabel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> backgroundImageView <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImageView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> closeButton <span class=\"token operator\">=<\/span> <span class=\"token function\">UIButton<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-28%20at%2011.12.53%20AM.png","image_width":"1774","image_height":"1040","video":"","bookmark_id":"swift4-animate-moving-objects-to-class"},{"id":"10619","section_id":"103","order":"20","title":"Using Self in a Nested Class","subhead":"","body":"<p>Class-wide objects can get conflicted with newly declared objects. For example, if you create a second object <strong>cardView<\/strong> in <strong>loadView<\/strong>, how do you differentiate between the two <strong>cardView<\/strong>?<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> cardView <span class=\"token operator\">=<\/span> <span class=\"token function\">UIView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>In that case, you&rsquo;ll need to be explicit and use <strong>self<\/strong> to specifically target the Class-wide <strong>cardView<\/strong>. Now <strong>self.cardView<\/strong> references the Class-wide object, but just <strong>cardView<\/strong> references the newly created object.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>cardView<br><\/code><\/pre><p>However, inside a nested Class, you cannot reference a Class-wide object unless you use <strong>self<\/strong>. So, inside our animator Class, we&rsquo;ll have to use <strong>self<\/strong> for every object referenced.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> animator <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewPropertyAnimator<\/span><span class=\"token punctuation\">(<\/span>duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">,<\/span> dampingRatio<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>cardView<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">375<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">667<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>cardView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>coverImageView<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">375<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">420<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>coverImageView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>titleLabel<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">374<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">38<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>captionLabel<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">370<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">272<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">40<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>descriptionLabel<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>closeButton<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br><span class=\"token punctuation\">}<\/span><br>animator<span class=\"token punctuation\">.<\/span><span class=\"token function\">startAnimation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-using-self-in-a-nested-class"},{"id":"10620","section_id":"103","order":"21","title":"Dismiss Animation","subhead":"","body":"<p>Now that all our objects are accessible Class-wide, we can finally reference them in the <strong>closeButtonTapped<\/strong> function. Let&rsquo;s create the animation. Essentially, we need to set all the states back to their original properties before the first animation starts. You almost copy and paste the same properties found in the objects, before animation.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">closeButtonTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> animator <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewPropertyAnimator<\/span><span class=\"token punctuation\">(<\/span>duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">,<\/span> dampingRatio<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>cardView<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">255<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">300<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">250<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>cardView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">14<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>titleLabel<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">16<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">16<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">272<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">38<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>captionLabel<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">16<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">204<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">272<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">40<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>descriptionLabel<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>coverImageView<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">300<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">250<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>coverImageView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">14<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>closeButton<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>    <span class=\"token punctuation\">}<\/span><br>    animator<span class=\"token punctuation\">.<\/span><span class=\"token function\">startAnimation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-dismiss-animation"},{"id":"10621","section_id":"103","order":"22","title":"Tap Event","subhead":"","body":"<p>Currently, the first animation is triggered 1 second after the view is loaded. The real interaction that we&rsquo;re looking for is to start the animation when the user taps on the cardView. For this to happen, we&rsquo;ll need to use a <strong>UITapGestureRecognizer<\/strong> class, which will call a <strong>cardViewTapped<\/strong> function. Additionally, we&rsquo;re going to attach the tap gesture to cardView, and set <strong>isUserInteractionEnabled<\/strong> to <strong>true<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> tap <span class=\"token operator\">=<\/span> <span class=\"token function\">UITapGestureRecognizer<\/span><span class=\"token punctuation\">(<\/span>target<span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> action<span class=\"token punctuation\">:<\/span> #<span class=\"token function\">selector<\/span><span class=\"token punctuation\">(<\/span>cardViewTapped<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br>cardView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addGestureRecognizer<\/span><span class=\"token punctuation\">(<\/span>tap<span class=\"token punctuation\">)<\/span><br>cardView<span class=\"token punctuation\">.<\/span>isUserInteractionEnabled <span class=\"token operator\">=<\/span> <span class=\"token boolean\">true<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-tap-event"},{"id":"10622","section_id":"103","order":"23","title":"Present Tap Function","subhead":"","body":"<p>Let&rsquo;s create the missing <strong>cardViewTapped<\/strong> function.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">cardViewTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token comment\">\/\/ Do something when user taps on cardView<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-present-tap-function"},{"id":"10623","section_id":"103","order":"24","title":"Move the Animator Code","subhead":"","body":"<p>Let&rsquo;s move all our <strong>animator<\/strong> code from <strong>loadView<\/strong> to the <strong>cardViewTapped<\/strong> function. Make sure to remove the startAnimation delay.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">cardViewTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> animator <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewPropertyAnimator<\/span><span class=\"token punctuation\">(<\/span>duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">,<\/span> dampingRatio<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>cardView<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">375<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">667<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>cardView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>coverImageView<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">375<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">420<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>coverImageView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>titleLabel<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">374<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">38<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>captionLabel<span class=\"token punctuation\">.<\/span>frame <span class=\"token operator\">=<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">20<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">370<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> <span class=\"token number\">272<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token number\">40<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>descriptionLabel<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>closeButton<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br>    <span class=\"token punctuation\">}<\/span><br>    animator<span class=\"token punctuation\">.<\/span><span class=\"token function\">startAnimation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-move-the-animator-code"},{"id":"10624","section_id":"103","order":"25","title":"Conclusion","subhead":"","body":"<p>Using these techniques, you can create a fairly complex animation prototype using real production code that can be used by you and your developer.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-animate-conclusion"}]},{"id":"111","chapter_id":"3","order":"80","slug":"swift4-storyboard-design","title":"Design In Storyboard","caption":"Implementing your own designs","body":"<p>As a designer, to be able to implement your own design is empowering, not to mention fun as well. We&rsquo;re fortunate to have a functional visual tool like Storyboard that even developers use. Not only can you prototype on it, but you can also create production-quality layouts that co-exist with production code.<\/p><blockquote><p>It has come to a point where I find it easier to build an iOS app than a Web app. It&rsquo;s all thanks to Storyboard.<\/p><\/blockquote><p>It&rsquo;s time to design an entire screen based on a design delivered. We&rsquo;ll start with the <strong>Home<\/strong> screen. In this section, you&rsquo;ll learn more in-depth on how to use all the objects you find in the Object Library.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-storyboard-design.jpg","video":"https:\/\/player.vimeo.com\/external\/247874068.hd.mp4?s=803a47bd609853e44fe4e1d0b15d3cfe602a695a&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-storyboard-design.zip","contents":[{"id":"10681","section_id":"111","order":"1","title":"Downloads for Design in Storyboard","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-xcode9\">Introduction to Xcode 9<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/clx7f1777ytu5ba\/3.7.Storyboard-Design.zip?dl=0\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-design-downloads-for-design-in-storyboard"},{"id":"10682","section_id":"111","order":"2","title":"UIView for Group","subhead":"","body":"<p>Let&rsquo;s create the container for the Hero section. Usually, you want to use a <strong>UIView<\/strong> to group together a bunch of objects. Drag and drop the UIView and go to Size Inspector and change the properties to <strong>x 0<\/strong>, <strong>y 0<\/strong>, <strong>width 375<\/strong> and <strong>height 452<\/strong>. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Screen%20Shot%202017-11-27%20at%209.19.53%20PM.png","image_width":"2796","image_height":"1554","video":"","bookmark_id":"swift4-storyboard-design-uiview-for-group"},{"id":"10683","section_id":"111","order":"3","title":"UIImage for the Background","subhead":"","body":"<p>Drag and drop a <strong>UIImage<\/strong> inside the <strong>UIView<\/strong>, and set it to the same properties: <strong>x 0<\/strong>, <strong>y 0<\/strong>, <strong>width 375<\/strong> and <strong>height 452<\/strong>. Set the Image to <strong>Home<\/strong> and the Content Mode to <strong>Aspect Fill<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/uiimageforbackground.jpg","image_width":"1314","image_height":"604","video":"","bookmark_id":"swift4-storyboard-design-uiimage-for-the-background"},{"id":"10684","section_id":"111","order":"4","title":"UILabel for Text","subhead":"","body":"<p>For the main title, we&rsquo;ll drag in a <strong>UILabel<\/strong>. Double click on it and set the text to &#x201C;Learn to design &amp; code for iOS 11&#x201D;. Set the color to white and Lines to 0. The size will be: <strong>x 30<\/strong>, <strong>y 86<\/strong>, <strong>width 160<\/strong>, <strong>height 172<\/strong>. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-design-uilabel-for-text"},{"id":"10685","section_id":"111","order":"5","title":"","subhead":"Change Font","body":"<p>The font can be changed by clicking on the <strong>T icon<\/strong> in the Attribute Inspector. Set the style to <strong>Semibold<\/strong> and size to <strong>36<\/strong>. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/designstoryboard-changefont.jpg","image_width":"1070","image_height":"580","video":"","bookmark_id":"swift4-storyboard-design-change-font"},{"id":"10686","section_id":"111","order":"6","title":"Image","subhead":"","body":"<p>For the phone image, we&rsquo;ll drag in another UIImage. Set the size to: <strong>x 194<\/strong>, <strong>y 25<\/strong>, <strong>width 123<\/strong>, <strong>height 319<\/strong>. Set the image to <strong>Art-iPhoneX<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/design-iphonex.jpg","image_width":"1668","image_height":"864","video":"","bookmark_id":"swift4-storyboard-design-image"},{"id":"10687","section_id":"111","order":"7","title":"Background Blur","subhead":"","body":"<p>The Storyboard&rsquo;s Object Library has a lot of interactive objects such as buttons, text fields, date pickers, etc. One of them is the Background Blur layer, which is prominently used in iOS and can be replicated in Sketch. <\/p><p>We&rsquo;ll drop in a <strong>Visual Effect View with Blur<\/strong> object and set to the following size: <strong>x 0<\/strong>, <strong>y 322<\/strong>, <strong>width 375<\/strong>, <strong>height 130<\/strong>. The Blur Style is <strong>Dark<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/storyboard-design-backgroundblur.jpg","image_width":"1584","image_height":"790","video":"","bookmark_id":"swift4-storyboard-design-background-blur"},{"id":"10688","section_id":"111","order":"8","title":"Layer Ordering","subhead":"","body":"<p>Notice that the layers in the left are ordered the same way as Photoshop, or the opposite of Sketch. Layers in the back are further up, and layers in the front are further down.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Main_storyboard_%E2%80%94_Edited.jpg","image_width":"668","image_height":"454","video":"","bookmark_id":"swift4-storyboard-design-layer-ordering"},{"id":"10689","section_id":"111","order":"9","title":"Stats UILabels","subhead":"","body":"<p>At this point, we&rsquo;ll create 3 labels to show the stats of the book. Set the first label to <strong>WATCH<\/strong> with properties: Color white, Medium 15 pt, <strong>x 30<\/strong>, <strong>y 23<\/strong>, <strong>width 58<\/strong>, <strong>height 18<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-design-stats-uilabels"},{"id":"10690","section_id":"111","order":"10","title":"Changing Color","subhead":"","body":"<p>For the <strong>Watch<\/strong> text, we&rsquo;ll want to use a slightly opaque color. Clicking on the right part shows a list of preset colors for iOS. Clicking on the left part gives a custom Mac color picker and you can quickly change the opacity there. Set it to <strong>60%<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-design-changing-color"},{"id":"10691","section_id":"111","order":"11","title":"Duplicating Object","subhead":"","body":"<p>You can duplicate by pressing <strong>Command + D<\/strong> to create the second label. Double-click to change the text to &#x201C;44 hours&#x201D;. The position is: <strong>x 30<\/strong>, <strong>y 39<\/strong>. Set the font to Semibold 30 pt.<\/p><p>For the third text, duplicate again and set the text to &#x201C;of video lessons&#x201D;. The font will be: Medium 15 pt. Position: <strong>x 30<\/strong>, <strong>y 75<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-design-duplicating-object"},{"id":"10692","section_id":"111","order":"12","title":"Size to Fit Content","subhead":"","body":"<p>At any point, you can wrap the bounding box against the text by going to <strong>Editor<\/strong> &gt; <strong>Size to Fit Content<\/strong>. The keyboard shortcut is <strong>Command + =<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/designstoryboard-sizetofitcontent.mp4?dl=0","bookmark_id":"swift4-storyboard-design-size-to-fit-content"},{"id":"10693","section_id":"111","order":"13","title":"UIView for Line","subhead":"","body":"<p>Now, let&rsquo;s create the 3 pt line below the stats. We&rsquo;ll drag and drop a UIView object. Set the properties to: <strong>x 30<\/strong>, <strong>y 105<\/strong>, <strong>width 130<\/strong>, <strong>height 3<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-design-uiview-for-line"},{"id":"10694","section_id":"111","order":"14","title":"Rounded Corners with Runtime Attributes","subhead":"","body":"<p>To add a border radius to the UIView, we&rsquo;ll need to go to the Identity Inspector and create a new User Defined Runtime Attribute. <\/p><p>In the Key Path field, write <strong>layer.cornerRadius<\/strong>. In Type, choose <strong>Number<\/strong> and in Value, write <strong>3<\/strong>. Please note that Runtime Attributes won&rsquo;t be reflected in Storyboard, but will be shown when you run the app in iOS Simulator.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/designstoryboard-runtime-attributes.mp4?dl=0","bookmark_id":"swift4-storyboard-design-rounded-corners-with-runtime-attributes"},{"id":"10695","section_id":"111","order":"15","title":"Using a HEX color or Eyedropper","subhead":"","body":"<p>For the color of the line, you can go to the color picker and click on RGB Sliders to find the Hex Color # field. Paste the HEX color value <strong>AF47B9<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/designstoryboard-hexcolor.mp4?dl=0","bookmark_id":"swift4-storyboard-design-using-a-hex-color-or-eyedropper"},{"id":"10696","section_id":"111","order":"16","title":"Multiple Selections and Duplicate","subhead":"","body":"<p>Next, we&rsquo;ll select all 4 objects by holding <strong>Shift<\/strong>. Once selected, <strong>Option + drag<\/strong> to duplicate to the right. Make sure to use the smart guides (blue lines) to align perfectly. <strong>Hold Option<\/strong> to view the distances from the left and use the arrow keys to nudge those objects until you get a <strong>195 from the left<\/strong>.<\/p><p>Change the duplicated texts to: <strong>SEARCH<\/strong>, <strong>50,000<\/strong>, <strong>words and images<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/designstoryboard-multipleduplicates.mp4?dl=0","bookmark_id":"swift4-storyboard-design-multiple-selections-and-duplicate"},{"id":"10697","section_id":"111","order":"17","title":"Creating a Circle","subhead":"","body":"<p>For the Play Video background, we&rsquo;ll first need a blurred background wrapper. Drag and drop a Visual Effect View and set it to <strong>x 226<\/strong>, <strong>y 148<\/strong>, <strong>width 50<\/strong>, <strong>height 50<\/strong>. Go to Identity Inspector and set a new Runtime Attribute <strong>layer.cornerRadius<\/strong>, type <strong>number<\/strong>, value <strong>25<\/strong>. The value to get a perfect circle is the width divided by 2.<\/p><p>Because the Visual Effect View has a sub-View, we need to enable <strong>Clip to Bounds<\/strong> in the Attributes Inspector. This is the equivalent of Mask in Sketch, which enables you to ensure that any sub-elements don&rsquo;t appear outside of those bounds.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/designstoryboard-cliptobounds.jpg","image_width":"2232","image_height":"1310","video":"","bookmark_id":"swift4-storyboard-design-creating-a-circle"},{"id":"10698","section_id":"111","order":"18","title":"UIButton for Play Button","subhead":"","body":"<p>Drag and drop a UIButton inside of the Visual Effect View. Double-click on it to delete the text inside. Go to the Attributes Inspector, set the Image to <strong>Action-Play-Small<\/strong>. Set the size to <strong>x 0<\/strong>, <strong>y 0<\/strong>, <strong>width 50<\/strong>, <strong>height 50<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-design-uibutton-for-play-button"},{"id":"10699","section_id":"111","order":"19","title":"UIView for Book Container","subhead":"","body":"<p>Let&rsquo;s create a container for the book content. Drag and drop a UIView with the properties: <strong>x 0<\/strong>, <strong>y 452<\/strong>, <strong>width 375<\/strong>, <strong>height 348<\/strong>. Grouping similar objects makes it easy to move and set up constraints later.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-design-uiview-for-book-container"},{"id":"10700","section_id":"111","order":"20","title":"Media Library","subhead":"","body":"<p>For the book image, we&rsquo;ll drag and drop directly from the <strong>Media Library<\/strong>. What&rsquo;s great about this technique is that the asset gets perfectly sized from the start. You just need to <strong>center horizontally<\/strong> and set it at a distance of <strong>50<\/strong> from the container. Again, use the <strong>Option<\/strong> key to view the distances between elements.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-design-media-library"},{"id":"10701","section_id":"111","order":"21","title":"Adding Drop Shadows","subhead":"","body":"<p>Let&rsquo;s add a drop shadow to the book. Select the book and go to the Identity Inspector. In Runtime Attributes, add the following: <\/p><pre><code class=\"language-swift\">layer<span class=\"token punctuation\">.<\/span>shadowOpacity<span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">Number<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">0.25<\/span><br>layer<span class=\"token punctuation\">.<\/span>shadowRadius<span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">Number<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">10<\/span><br>layer<span class=\"token punctuation\">.<\/span>shadowOffset<span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">Size<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Because an image dropped from the Media Library has <strong>Clip to Bounds<\/strong> enabled automatically, we need to disable this in order to show the drop shadow.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-design-adding-drop-shadows"},{"id":"10702","section_id":"111","order":"22","title":"Naming Objects","subhead":"","body":"<p>Typically, objects inherit their properties. For example, a Label gets the name of its text property. But for UIViews that serve as containers, we can give them a custom name by going to the Identity Inspector and change the Label property. For the first Hero container, let&rsquo;s name it <strong>Hero View<\/strong> and for the book container, let&rsquo;s name it <strong>Book View<\/strong>. Again, it&rsquo;s good to be specific of the type of object it is by adding <strong>View<\/strong> at the end.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/designstoryboard-naming.jpg","image_width":"2342","image_height":"1518","video":"","bookmark_id":"swift4-storyboard-design-naming-objects"},{"id":"10703","section_id":"111","order":"23","title":"Conclusion","subhead":"","body":"<p>So far, we&rsquo;ve learned how to use basic objects in Storyboard such as views, buttons and images. On top of that, we got familiar with distances, smart guides and runtime attributes. We have yet to set constraints for adapting our layout, which is what we&rsquo;ll learn next.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-storyboard-design-conclusion"}]},{"id":"112","chapter_id":"3","order":"90","slug":"swift4-auto-layout","title":"Auto Layout","caption":"Auto Layout, Stack Views and Size Classes for adapting your layout in Xcode 9","body":"<p>With Auto Layout, Stack Views and Size Classes, you should have everything you need to build a truly adaptive layout that works across devices. We&rsquo;re going to learn how to apply dynamic constraints in order to make them adapt to any screen size.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-autolayout.jpg","video":"https:\/\/player.vimeo.com\/external\/247062577.hd.mp4?s=d891e50d473324f7beea737bc94ed3be2242a6ad&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-auto-layout.zip","contents":[{"id":"10401","section_id":"112","order":"1","title":"Downloads for Auto Layout and Stack Views","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-storyboard-design\">Design in Storyboard<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/bgo9o7lur8b8zez\/3.8.AutoLayout.zip?dl=0\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-auto-layout-downloads-for-auto-layout-and-stack-views"},{"id":"10402","section_id":"112","order":"2","title":"Previewing your Layout","subhead":"","body":"<p>If you click on &#x201C;View as: iPhone 8&#x201D;, you&rsquo;ll see a list of devices you can design on. As you can notice, the layout doesn&rsquo;t adapt well to the iPhone 8 Plus or the iPad. We need to apply Auto Layout to make the content adaptive to any device.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-previewing.mp4?dl=0","bookmark_id":"swift4-auto-layout-previewing-your-layout"},{"id":"10403","section_id":"112","order":"3","title":"Position and Size","subhead":"","body":"<p>Auto Layout requires 2 things: <strong>position<\/strong> and <strong>size<\/strong>. As long as you set those constraints, Auto Layout will be happy. There are 2 ways to respect those requirements: <strong>Align<\/strong> and <strong>Pin<\/strong>.<\/p><p><strong>Align<\/strong> allows you to <strong>center things<\/strong> and align elements with each other. <strong>Pin<\/strong> lets you set the <strong>size<\/strong> and the spacing from the edges of a container.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/alignandpin.jpg","image_width":"1392","image_height":"1000","video":"","bookmark_id":"swift4-auto-layout-position-and-size"},{"id":"10404","section_id":"112","order":"4","title":"First Rule of Auto Layout","subhead":"","body":"<p>The first rule of Auto Layout is that all new constraints must be against an element that already has known position and size. For example, the Superview, which is the root screen size, already has a position (x 0, y 0) and size (375 x 667 for iPhone 8) known to Xcode. So, when you <strong>Pin<\/strong> or <strong>Align<\/strong> against the Superview, Auto Layout will work perfectly.<\/p><p>On the other hand, if you <strong>Pin<\/strong> or <strong>Align<\/strong> the Hero View against the Book View, Auto Layout will give you warnings, since the Book View doesn&rsquo;t have any constraint set up.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-firstrule.jpg","image_width":"942","image_height":"568","video":"","bookmark_id":"swift4-auto-layout-first-rule-of-auto-layout"},{"id":"10405","section_id":"112","order":"5","title":"Add New Constraints","subhead":"","body":"<p>Before applying any constraint to inner elements, we need to make sure that containers are properly set up against the Superview. Without knowing the position and size of the container, any constraint set to the title, phone or play button will be ambiguous.<\/p><p>For the <strong>Hero View<\/strong>, let&rsquo;s click Add New Constraints and set to <strong>0<\/strong> for the <strong>top<\/strong>, <strong>right<\/strong> and <strong>left<\/strong> constraints. Also, set the <strong>height<\/strong> to <strong>452<\/strong>. With this, Auto Layout has enough information about its position (x, y) and size (width, height). <\/p><p>From those constraints, it knows that the <strong>Hero View<\/strong> has the same position (<strong>x 0, y 0<\/strong>) as the Superview. Then, thanks to the left and right constraints, it knows that the width is <strong>375<\/strong> on the iPhone 8, and is adaptive to the screen width. Finally, we manually set the height to <strong>452<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-addnewconstraints.mp4?dl=0","bookmark_id":"swift4-auto-layout-add-new-constraints"},{"id":"10406","section_id":"112","order":"6","title":"Book View Container","subhead":"","body":"<p>For the <strong>Book View<\/strong>, we&rsquo;ll set the values to <strong>0<\/strong> for the <strong>top<\/strong>, <strong>right<\/strong> and <strong>left<\/strong> constraints. The <strong>height<\/strong> will be manually set to <strong>348<\/strong>. With this, our 2 containers have constraints. This means that we can start setting up constraints for the objects inside them.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-bookviewcontainer.jpg","image_width":"768","image_height":"466","video":"","bookmark_id":"swift4-auto-layout-book-view-container"},{"id":"10407","section_id":"112","order":"7","title":"Home Image Constraints","subhead":"","body":"<p>Let&rsquo;s do the Home image constraints before the titles, since it&rsquo;s much simpler. The Home image needs to take the full width and height of the <strong>Hero View.<\/strong> So we&rsquo;ll Add New Constraints to <strong>0<\/strong> for <strong>top<\/strong>, <strong>right<\/strong>, <strong>bottom<\/strong> and <strong>left<\/strong>. This effectively satisfy both position and size.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-homeimageconstraints.jpg","image_width":"1380","image_height":"810","video":"","bookmark_id":"swift4-auto-layout-home-image-constraints"},{"id":"10408","section_id":"112","order":"8","title":"Centering with Offset","subhead":"","body":"<p>For the title, we want to center it both horizontally and vertically, but with an offset. Otherwise, it will overlap with the device image. <\/p><p>First, click on Add New Constraints and set the width to <strong>160<\/strong> and height to <strong>172<\/strong>. Then, click on <strong>&#xA0;Add Constraints<\/strong> . Click on <strong>Align<\/strong> and check both <strong>Horizontally in Container<\/strong> and <strong>Vertically in Container<\/strong>. This will automatically center the bounding box. <\/p><p>As expected, it overlaps with the device image. That&rsquo;s not what we want. To add some offset, we can go to the Size Inspector and change to the initial values: <strong>x 30<\/strong>, <strong>y 86<\/strong>. Like this, there is enough negative spacing between the title and the device image.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-centeringwithoffset.jpg","image_width":"2134","image_height":"1218","video":"","bookmark_id":"swift4-auto-layout-centering-with-offset"},{"id":"10409","section_id":"112","order":"9","title":"Resolve Auto Layout Issues","subhead":"","body":"<p>Now, since the constraints are different from the values entered manually, Auto Layout will show a conflict. Auto Layout will make an assumption based on your constraints, as shown by the <strong>yellow dotted lines<\/strong>. You can solve the conflict by clicking on <strong>Resolve Auto Layout Issues<\/strong> which is next to <strong>Add New Constraints<\/strong>. Let me explain a little bit on the 4 options presented.<\/p><ul>\t<li><strong>Update Constraints<\/strong>: you think the yellow dotted lines are incorrect. Clicking this will adjust the constraints based on the values changed.<\/li>\t<li><strong>Add Missing Constraint<\/strong> will add whatever is missing in term of position or size.<\/li>\t<li><strong>Reset to Suggested Constraints<\/strong> will reset the constraints and let Auto Layout add new ones from scratch.<\/li>\t<li><strong>Clear Constraints<\/strong> will remove all constraints.<\/li><\/ul><p>All 4 of these options can specific to a single object or can apply to all objects on the screen.<\/p><p>Finally, you have the <strong>Update Frames<\/strong> icon at the far left. Use this if you think that the yellow dotted lines are correct and want the object to move exactly there.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-resolveautolayoutissues.jpg","image_width":"646","image_height":"463","video":"","bookmark_id":"swift4-auto-layout-resolve-auto-layout-issues"},{"id":"10410","section_id":"112","order":"10","title":"Updating Constraints for Title","subhead":"","body":"<p>In this specific case, we want to update the constraints to follow the values we&rsquo;ve set manually. Click on <strong>Resolve Auto Layout Issues<\/strong>, <strong>Update Constraints<\/strong>. This will effectively add the offsets of <strong>-77.5 from center X<\/strong> and <strong>-54 from center Y<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-fixingourissue.jpg","image_width":"1128","image_height":"424","video":"","bookmark_id":"swift4-auto-layout-updating-constraints-for-title"},{"id":"10411","section_id":"112","order":"11","title":"Device Image Constraint","subhead":"","body":"<p>The device image&rsquo;s position is entirely dependent on the position of the title. We&rsquo;d like to center it against the title, so that if the screen is bigger, it&rsquo;ll center nicely. First, we need to set the <strong>width<\/strong> constraint to <strong>123<\/strong>, and <strong>height<\/strong> constraint to <strong>319<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-deviceimageconstraint.jpg","image_width":"1380","image_height":"784","video":"","bookmark_id":"swift4-auto-layout-device-image-constraint"},{"id":"10412","section_id":"112","order":"12","title":"Constraints Between Two Objects","subhead":"","body":"<p>Two objects can have a constraint against each other. You can center objects together, align them or give them equal widths or heights. To set a constraint between two objects, <strong>Control + Drag<\/strong> from the device image to the title. While holding <strong>Shift<\/strong>, select <strong>Horizontal Spacing<\/strong> and <strong>Center Vertically<\/strong>. This allows you to enable multiple constraints at once.<\/p><p>Let&rsquo;s change the <strong>y<\/strong> position back to <strong>25<\/strong> and select <strong>Update Constraints<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-constraintsbetweentwoobjects.mp4?dl=0","bookmark_id":"swift4-auto-layout-constraints-between-two-objects"},{"id":"10413","section_id":"112","order":"13","title":"Set Constraints in Document Outline","subhead":"","body":"<p>The <strong>play<\/strong> visual effect view simply needs to be centered against the device image. Since it&rsquo;s hard to select it without selecting the UIButton, we&rsquo;ll do it in the Document Outline instead. <strong>Control Drag<\/strong> from the <strong>Visual Effect View<\/strong> to the <strong>Art-iPhoneX<\/strong> and select <strong>Center Horizontally<\/strong> and <strong>Center Vertically<\/strong> while holding <strong>Shift<\/strong>. Then, add the width and height constraints to <strong>50<\/strong>.<\/p><p>Set the position back to <strong>x 226<\/strong> and <strong>y 148<\/strong>, and click <strong>Update Constraints<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-setconstraintsindocumentoutline.mp4?dl=0","bookmark_id":"swift4-auto-layout-set-constraints-in-document-outline"},{"id":"10414","section_id":"112","order":"14","title":"Play Button Constraints","subhead":"","body":"<p>For the play button, we simply need to <strong>Add New Constraints<\/strong> to <strong>0<\/strong> for <strong>top<\/strong>, <strong>right<\/strong>, <strong>bottom<\/strong> and <strong>left<\/strong>. This will satisfy both position and size.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-playbuttonconstraints.jpg","image_width":"775","image_height":"444","video":"","bookmark_id":"swift4-auto-layout-play-button-constraints"},{"id":"10415","section_id":"112","order":"15","title":"Stats Visual Effect View","subhead":"","body":"<p>For the statistics container, we&rsquo;ll set <strong>0<\/strong> for the <strong>right<\/strong>, <strong>bottom<\/strong> and <strong>left<\/strong> constraints. Also, we&rsquo;ll set the height to <strong>128<\/strong>. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-auto-layout-stats-visual-effect-view"},{"id":"10416","section_id":"112","order":"16","title":"Stack View","subhead":"","body":"<p>Stack Views allow you to group together similar objects to apply automatic constraints based on the object type and its container properties. Instead of manually setting a bounding box for each object, you configure the <strong>Axis<\/strong>, <strong>Alignment<\/strong>, <strong>Distribution<\/strong> and <strong>Spacing<\/strong> to all objects inside the Stack.<\/p><p>Select the <strong>3 labels<\/strong> and <strong>line view<\/strong> and click on <strong>Embed in Stack<\/strong>. Once embedded, they all share the same Stack properties. Additionally, the Stack dynamically wraps around the objects in a way that respects the Alignment, Distribution and Spacing. It even makes it taller than we&rsquo;d like.<\/p><p>Let&rsquo;s add a <strong>top<\/strong> and <strong>bottom<\/strong> constraint of <strong>20<\/strong>, with a width of <strong>130<\/strong> to the Stack. Also, you&rsquo;ll notice that the line view takes the entire height of the box. To fix this, you can set a height constraint of <strong>3<\/strong> to it.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-stackviews.mp4?dl=0","bookmark_id":"swift4-auto-layout-stack-view"},{"id":"10417","section_id":"112","order":"17","title":"Stack View Distribution","subhead":"","body":"<p>Our Stack View doesn&rsquo;t seem to be distributing the content properly. The bigger title takes way more spacing than the line view, for example. We can fix this by playing with the different Distribution properties: <strong>Fill<\/strong>, <strong>Fill Equally<\/strong>, <strong>Fill Proportionally<\/strong>, <strong>Equal Spacing<\/strong>, <strong>Equal Centering<\/strong>. Let&rsquo;s set to <strong>Equal Centering<\/strong>, since this looks like the closest to what we have to the original design.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-stackviewsdistribution.mp4?dl=0","bookmark_id":"swift4-auto-layout-stack-view-distribution"},{"id":"10418","section_id":"112","order":"18","title":"Second Stack View","subhead":"","body":"<p>Let&rsquo;s repeat the same Stack View steps for the second column of labels and line view. Select the 4 objects and click on <strong>Embed in Stack View<\/strong>. Then, select the line view and set the width to <strong>130<\/strong> and height constraint to <strong>3<\/strong>. Finally, set the Stack View Distribution to <strong>Equal Centering<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-secondstackview.jpg","image_width":"1319","image_height":"790","video":"","bookmark_id":"swift4-auto-layout-second-stack-view"},{"id":"10419","section_id":"112","order":"19","title":"Horizontal Stack View","subhead":"","body":"<p>Stack Views can be stacked as well. Let&rsquo;s select the 2 Stack Views and stack them together. Since they&rsquo;re positioned left and right, it&rsquo;ll automatically set the <strong>Axis<\/strong> to <strong>Horizontal<\/strong> this time.<\/p><p>Since we want to center our content horizontally, we&rsquo;ll click on Align, and set to <strong>Horizontally in Container<\/strong>. Then, we&rsquo;ll set the constraints to top <strong>20<\/strong>, bottom <strong>20<\/strong> and width <strong>300<\/strong>. Next, let&rsquo;s change the <strong>Distribution<\/strong> to <strong>Equal Spacing<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-horizontalstackview.mp4?dl=0","bookmark_id":"swift4-auto-layout-horizontal-stack-view"},{"id":"10420","section_id":"112","order":"20","title":"Book Image Constraint","subhead":"","body":"<p>We want the book the <strong>center horizontally<\/strong> and have a fixed spacing of <strong>50<\/strong> from the top.<\/p><p>Let&rsquo;s click <strong>Align<\/strong>, <strong>Horizontally in Container<\/strong>. Then <strong>Add New Constraints<\/strong> with top constraint to 50.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-bookcontstraints.mp4?dl=0","bookmark_id":"swift4-auto-layout-book-image-constraint"},{"id":"10421","section_id":"112","order":"21","title":"Size Classes","subhead":"","body":"<p>This neat tool allows you to set specific Auto Layout constraints and content based on groups of devices. It looks confusing at first, but it makes total sense once you know how to use it.<\/p><p>There are 3 settings for each orientation: <strong>Any<\/strong>, <strong>Compact<\/strong> and <strong>Regular<\/strong>.<\/p><ul>\t<li><strong>Any<\/strong> x <strong>Any<\/strong> will apply to every device.<\/li>\t<li><strong>Compact<\/strong> x <strong>Regular<\/strong> will apply to all iPhone in portrait.<\/li>\t<li><strong>Compact<\/strong> x <strong>Compact<\/strong> will apply to all iPhones in landscape, except for the iPhone 8 Plus.<\/li>\t<li><strong>Regular<\/strong> x <strong>Regular<\/strong> will target the iPad in both portrait and landscape, except when in Split view.<\/li>\t<li>Otherwise, Size Classes will tell you which devices are being targeted.<\/li><\/ul><p>Use this illustration to see which ones are <strong>Compact<\/strong> or <strong>Regular<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/iOS-SizeClasses.jpg","image_width":"3030","image_height":"1694","video":"","bookmark_id":"swift4-auto-layout-size-classes"},{"id":"10422","section_id":"112","order":"22","title":"Vary for Traits","subhead":"","body":"<p>You can use the <strong>Vary for Traits<\/strong> feature to apply constraints for specific Size Classes. To do that, select any device and click on Vary for Traits. Then, choose width or height. <\/p><p>For example, if you choose <strong>iPad<\/strong> and select <strong>width<\/strong>, it means that you&rsquo;re applying constraints specific to <strong>Regular<\/strong> x <strong>Any<\/strong>, since the iPad has a <strong>Regular<\/strong> width trait. When you select the drop-down device, you&rsquo;ll see all the devices that these constraints will target.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-varyfortraits.jpg","image_width":"1809","image_height":"1217","video":"","bookmark_id":"swift4-auto-layout-vary-for-traits"},{"id":"10423","section_id":"112","order":"23","title":"New Stats Column only for Regular Width","subhead":"","body":"<p>Let&rsquo;s add a new column just for devices that have a <strong>Regular<\/strong> width. Select <strong>View as iPad (wR hR)<\/strong> and click <strong>Vary for Traits<\/strong>. Choose <strong>width<\/strong>. <\/p><p><strong>Option Drag<\/strong> a Stack View in the Document Outline and release right below the Stack View. This will create a third column. Now select the wrapping Stack View and go to Size Inspector to double-click the <strong>Width equals 300<\/strong> constraint. Click on the <strong>+<\/strong> icon next to 300 and press on <strong>Add<\/strong>. Type <strong>450<\/strong> next to the <strong>wR<\/strong> field. Change the text to: <strong>DOWNLOAD<\/strong>, <strong>10GB<\/strong>, <strong>of source files<\/strong>. Finally, click <strong>Done Varying<\/strong>.<\/p><p>This will show the third column on devices that has a <strong>Regular<\/strong> width.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-newstatscolumn.mp4?dl=0","bookmark_id":"swift4-auto-layout-new-stats-column-only-for-regular-width"},{"id":"10424","section_id":"112","order":"24","title":"Editing Constraints","subhead":"","body":"<p>Now, if we preview our layout, we&rsquo;ll notice that it reacts beautifully across all devices. The only minor adjustment is the left constraint for the title on the iPhone SE, which is a little too near to the border.<\/p><p>There are 3 ways to edit the constraints. <\/p><ol>\t<li>With the layer selected, you can find all the constraints in the Size Inspector.<\/li>\t<li>In your View Controller, you can also click the lines directly and edit them in the Size Inspector.<\/li>\t<li>Finally, the constraints can also be found in the Document Outline.<\/li><\/ol><p>Let&rsquo;s select the title and double-click the <strong>Align Center X<\/strong> constraint and set it to <strong>-70<\/strong> instead. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/autolayout-editingconstraints.mp4?dl=0","bookmark_id":"swift4-auto-layout-editing-constraints"},{"id":"10425","section_id":"112","order":"25","title":"Relation and Priority","subhead":"","body":"<p>I won&rsquo;t go too much into detail about these advanced Auto Layout techniques, but it&rsquo;s good to be aware of them. You probably won&rsquo;t need them as much. When you edit a constraint, you can double-click it in the Size Inspector.<\/p><ul>\t<li><strong>Relation<\/strong>: you can set a constraint to be <strong>Less Than or Equal<\/strong>, <strong>Equal<\/strong> or <strong>Great Than or Equal<\/strong>. This is useful for dynamic content that can expand. With this, you can give them a minimum or maximum size. It&rsquo;s sort of the equivalent of min-width and max-width in CSS. <\/li>\t<li><strong>Multiplier<\/strong>: you can also set a multiplier. This is useful to set an object to be half the size of another for example.<\/li>\t<li><strong>Priority<\/strong>: when you have potentially conflicting constraints, you can use Priority to give more importance to some.<\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-auto-layout-relation-and-priority"},{"id":"10426","section_id":"112","order":"26","title":"Conclusion","subhead":"","body":"<p>Our layout is now completely adaptive for the iPhone and iPad in both landscape and portrait modes. Combining Auto Layout, Stack Views and Size Classes will enable you to create layouts that work across current and future device resolutions.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-auto-layout-conclusion"}]},{"id":"113","chapter_id":"3","order":"100","slug":"swift4-iphone-x","title":"Adapting for iPhone X","caption":"Designing with Safe Area Layout Guides in mind","body":"<p>The iPhone X introduces the need to follow the Safe Area layout guides. The Safe Area ensures that your content won&rsquo;t be hidden by the Notch or corner radius. In general, background elements such as background images and colors should follow the Superview while the content such as labels, avatars and medias should follow the Safe Area. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-iphone-x.jpg","video":"https:\/\/player.vimeo.com\/external\/248045123.hd.mp4?s=9845730fcb70e775996eb734ac664026aa89e18c&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-iphone-x.zip","contents":[{"id":"10515","section_id":"113","order":"1","title":"Downloads for Adapting for iPhone X","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need&#xA0;<a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a>&#xA0;and the finished&#xA0;Xcode project&#xA0;from&#xA0;<a href=\"https:\/\/designcode.io\/swift4-auto-layout\">Auto Layout and Stack Views<\/a>. You can download the&#xA0;<a href=\"https:\/\/www.dropbox.com\/s\/kdq4wkffpiq2f10\/3.10.AdaptiveiPhoneX.zip?dl=0\">final&#xA0;Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-iphone-x-downloads-for-adapting-for-iphone-x"},{"id":"10516","section_id":"113","order":"2","title":"Safe Area Layout Guides","subhead":"","body":"<p>The Safe Area is enabled by default in Xcode 9 if you start a new project. As you can see from this illustration, the red area is your Safe Area where the Notch, corners and Home Indicator won&rsquo;t clip your content.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/iPhoneX-Portrait-Landscape.jpg","image_width":"4340","image_height":"2000","video":"","bookmark_id":"swift4-iphone-x-safe-area-layout-guides"},{"id":"10517","section_id":"113","order":"3","title":"Preview on iPhone X","subhead":"","body":"<p>To design for iPhone X, the first thing we need to do is to set <strong>View as: iPhone X<\/strong>. Like this, we can see how our screen looks with a Notch and with large corners visible. Already, we can see that the device image is being slightly clipped by the Notch.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-viewasiphonex.jpg","image_width":"2550","image_height":"1486","video":"","bookmark_id":"swift4-iphone-x-preview-on-iphone-x"},{"id":"10518","section_id":"113","order":"4","title":"UIScrollView","subhead":"","body":"<p>The content is often larger than the screen height, so scrolling is a key experience in iOS. Virtually all screens are wrapped in a UIScrollView. For the iPhone X, it&rsquo;s important to set the border constraints against the <strong>Superview<\/strong> and <strong>not<\/strong> the Safe Area, because often times, you&rsquo;ll want the background image to be underneath the Notch or the corners of the screen.<\/p><p>Let&rsquo;s drag and drop a <strong>UIScrollView<\/strong> from the Object Library to the Document Outline, right below the Safe Area. Let&rsquo;s set the Size to <strong>x 0<\/strong>, <strong>y 0<\/strong>, <strong>width 375<\/strong>, <strong>height 812<\/strong>, which happens to be the size of the iPhone X screen.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-uiscrollview.jpg","image_width":"2164","image_height":"1328","video":"","bookmark_id":"swift4-iphone-x-uiscrollview"},{"id":"10519","section_id":"113","order":"5","title":"Wrapping In Scroll View","subhead":"","body":"<p>We&rsquo;ll need to put the <strong>Hero View<\/strong> and <strong>Book View<\/strong> to be inside the Scroll View so that it can be scrolled vertically should the content height exceed the screen height. Drag and drop both the <strong>Hero View<\/strong> and <strong>Book View<\/strong> inside <strong>Scroll View<\/strong>. <\/p><p>Then, select <strong>Hero View<\/strong> and set the size <strong>y<\/strong> position to <strong>0<\/strong>. Select the <strong>Book View<\/strong> and set the <strong>y<\/strong> position to <strong>452<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-wrappinginscrollview.mp4?dl=0","bookmark_id":"swift4-iphone-x-wrapping-in-scroll-view"},{"id":"10520","section_id":"113","order":"6","title":"Add Missing Constraints","subhead":"","body":"<p>Thanks to these placements, Xcode will be smart enough to detect the missing constraints. Check the Auto Layout warnings by clicking on the red arrow in the Document Outline. Start Adding <strong>Missing Constraints<\/strong> one by one by clicking on the red square icon until you no longer have Auto Layout issues. <\/p><p>Keep in mind that this feature is not perfect. It may in fact add some unwanted constraints, but it really helps that we added a lot of important constraints manually.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-addmissingconstraints.mp4?dl=0","bookmark_id":"swift4-iphone-x-add-missing-constraints"},{"id":"10521","section_id":"113","order":"7","title":"Fixing the Device Image","subhead":"","body":"<p>Let&rsquo;s fix the clipping on the device image. Since the device image is relative to the <strong>y<\/strong> position of the title, we&rsquo;ll change the title. By doing that, it will affect both the device image and the play button inside.<\/p><p>Select the <strong>title<\/strong> and double-click on the middle line. You&rsquo;ll find a popover where you can change the <strong>-54<\/strong> value to <strong>-34<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-fixingdeviceimage.mp4?dl=0","bookmark_id":"swift4-iphone-x-fixing-the-device-image"},{"id":"10522","section_id":"113","order":"8","title":"Text with Multiple Lines","subhead":"","body":"<p>Drop a <strong>UILabel<\/strong> below the book and set the text to &#x201C;An interactive book on how to design and code an iOS 11 app.&#x201D;, at <strong>22pt<\/strong> <strong>Medium<\/strong> color <strong>404040<\/strong>. When you have multiple lines, you need to set the Lines property to <strong>0<\/strong>, which means that there can be an infinite number of lines. Set the Alignment to <strong>center<\/strong>. Additionally, set the size to <strong>x 30<\/strong>, <strong>y 220<\/strong>, <strong>width 315<\/strong>, <strong>height 53<\/strong>. <\/p><p>Let&rsquo;s duplicate the label and set the text to &#x201C;For beginners and designers.&#x201D;. Change the color to <strong>Light Gray Color<\/strong> by clicking on the right side of the Color property. <\/p><p>For the first label, control drag to the <strong>book<\/strong> image and select <strong>Center Horizontally<\/strong>. Set the constraints to <strong>top 20<\/strong> and <strong>width 315<\/strong>. <\/p><p>For the second label, <strong>control<\/strong> drag to the first label and <strong>shift<\/strong> select <strong>Center Horizontally<\/strong> and <strong>Equal Widths<\/strong>. Set the constraint to <strong>top 0<\/strong>. <\/p><p>Make sure that the constraint is against the first label and not the book with the arrow. Automatically, the bounding box for the labels will wrap around the expected size of the text.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-textwithmultiplelines.mp4?dl=0","bookmark_id":"swift4-iphone-x-text-with-multiple-lines"},{"id":"10523","section_id":"113","order":"9","title":"Custom View Controller Size","subhead":"","body":"<p>The content for our Home screen is getting larger than the viewable portion. To make it even taller than the iPhone X, select the View Controller and go to the Size Inspector. There, you can set the Simulated Size from Fixed to <strong>Freeform<\/strong>. Set the height to <strong>2000<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-viewcontrollersize.jpg","image_width":"2540","image_height":"1526","video":"","bookmark_id":"swift4-iphone-x-custom-view-controller-size"},{"id":"10524","section_id":"113","order":"10","title":"Chapter View Container","subhead":"","body":"<p>It&rsquo;s time to create the Chapter section where the Safe Area layout guides will be truly useful. Let&rsquo;s create a UIView with <strong>x 0<\/strong>, <strong>y 800<\/strong>, <strong>width 375<\/strong>, <strong>height 380<\/strong>. Set the background color to <strong>F5F5F5<\/strong>. Change the name to <strong>Chapter<\/strong> in the Identity Inspector&rsquo;s Label field.<\/p><p>Set the constraints to <strong>0 top<\/strong>, <strong>0 right<\/strong>, <strong>820 bottom<\/strong> and <strong>0 left<\/strong>. Afterwards, we&rsquo;ll need to resolve the conflicting constraints by deleting the one that makes the least sense: <strong>bottom = Book View + 12<\/strong>. It&rsquo;s confusing at first to keep track of all the constraints, but once you get the hang of it, you&rsquo;ll know quickly which constraints don&rsquo;t belong. <\/p><p>Finally, add the recommended missing Y constraint to the Scroll View.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-chapterviewcontainer.mp4?dl=0","bookmark_id":"swift4-iphone-x-chapter-view-container"},{"id":"10525","section_id":"113","order":"11","title":"Chapter Title Label","subhead":"","body":"<p>For the title, create a <strong>UILabel<\/strong> with text &#x201C;CHAPTER 1: 12 SECTIONS&#x201D;. Set the font to <strong>Semibold 15 pt<\/strong>, color <strong>404040<\/strong>. Set the constraints to <strong>top 50<\/strong>, <strong>right 20<\/strong> and <strong>left 20<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-chaptertitle.mp4?dl=0","bookmark_id":"swift4-iphone-x-chapter-title-label"},{"id":"10526","section_id":"113","order":"12","title":"Chapter Section View","subhead":"","body":"<p>Let&rsquo;s create a card UI for each section. Drop a UIView and set the constraints to <strong>left 20<\/strong>, <strong>bottom 50<\/strong>, <strong>width 304<\/strong>, <strong>height 248<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-chaptersectionview.jpg","image_width":"1308","image_height":"851","video":"","bookmark_id":"swift4-iphone-x-chapter-section-view"},{"id":"10527","section_id":"113","order":"13","title":"Testing on iPhone X","subhead":"","body":"<p>It&rsquo;s important to constantly test your interface on the iOS Simulator or the device. To do that, select <strong>iPhone X<\/strong> and click on the Play button in Xcode (<strong>Command R<\/strong>). <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-testingiphonex.mp4?dl=0","bookmark_id":"swift4-iphone-x-testing-on-iphone-x"},{"id":"10528","section_id":"113","order":"14","title":"Fixing the Status Bar Background","subhead":"","body":"<p>Some visual problems won&rsquo;t be noticeable in Storyboard but will be obvious when testing. For example, as you scroll back up, you&rsquo;ll notice that there is a big white space. To fix this, select the Scroll View and go to the Size Inspector to change the <strong>Content Insets<\/strong> to <strong>Never<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-fixingstatusbar.jpg","image_width":"2330","image_height":"1252","video":"","bookmark_id":"swift4-iphone-x-fixing-the-status-bar-background"},{"id":"10529","section_id":"113","order":"15","title":"Enabling Safe Area Layout Guide","subhead":"","body":"<p>We also need to fix the Chapter content to have more margin on the iPhone X&rsquo;s landscape mode. The Safe Area layout guide is perfect for solving this problem. By default, the layout guide is enabled at the Superview level, but not in subviews. To enable the guide, select <strong>Chapter View<\/strong> and go to the Size Inspector and check <strong>Safe Area Layout Guide<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-enablingsafearea.jpg","image_width":"2330","image_height":"1252","video":"","bookmark_id":"swift4-iphone-x-enabling-safe-area-layout-guide"},{"id":"10530","section_id":"113","order":"16","title":"Safe Area Constraint","subhead":"","body":"<p>Now we need to fix the left constraint for both the Chapter title and view. Select the title and click on the blue line on its left. Then, in the inspector, change the <strong>Second Item<\/strong> from <strong>Chapter View.Leading<\/strong> to <strong>Safe Area<\/strong>. Let&rsquo;s do the same for the view&rsquo;s left constraint. Change to Safe Area as well. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-safeareaconstraint.mp4?dl=0","bookmark_id":"swift4-iphone-x-safe-area-constraint"},{"id":"10531","section_id":"113","order":"17","title":"Conclusion","subhead":"","body":"<p>Designing for iPhone X is all about anticipating how the Notch, corners and Home indicator will affect your design. At the top of the screen, we pushed the device image down a little and we applied the Safe Area layout guide to our Chapter content. In addition, we learned how to continuously test our app on the iPhone X device. Now, our design works perfectly on the iPhone X&rsquo;s portrait and landscape mode.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/adaptingiphonex-conclusion.mp4?dl=0","bookmark_id":"swift4-iphone-x-conclusion"}]},{"id":"114","chapter_id":"3","order":"110","slug":"swift4-connect-storyboard","title":"Storyboard and Code","caption":"Connect the user interface objects to the code","body":"<p>After you learn Storyboard, you&rsquo;ll eventually want to take your interactions further. In Storyboard, you can only set up the objects and constraints. What if you want to animate when a button is tapped? Or, when an animation completes? That&rsquo;s when you need to script that in code. Then, you can use a lot more events.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-connecting.jpg","video":"https:\/\/player.vimeo.com\/external\/248925445.hd.mp4?s=8398ad711c1a06489e425ac226c14ddfdde2bf82&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-connect-storyboard.zip","contents":[{"id":"10446","section_id":"114","order":"1","title":"Downloads for Connect Storyboard and Code","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need&#xA0;<a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a>&#xA0;and the finished&#xA0;Xcode project&#xA0;from&#xA0;<a href=\"https:\/\/designcode.io\/swift4-iphone-x\">Adapting for iPhone X<\/a>. You can download the&#xA0;<a href=\"https:\/\/www.dropbox.com\/s\/f0svntzkpcwm821\/3.11.ConnectStoryboard.zip?dl=0\">final&#xA0;Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-connect-storyboard-downloads-for-connect-storyboard-and-code"},{"id":"10447","section_id":"114","order":"2","title":"One Class Per View Controller","subhead":"","body":"<p>Typically, you have one <strong>.swift<\/strong> file per Storyboard View Controller. When you first created your Xcode project, you had one View Controller, which is connected to <strong>ViewController.swift<\/strong>, as set up in the Identity Inspector. In the Project Navigator, you can select the Class file and find the Swift code inside.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-oneclasspervc.jpg","image_width":"2652","image_height":"1550","video":"","bookmark_id":"swift4-connect-storyboard-one-class-per-view-controller"},{"id":"10448","section_id":"114","order":"3","title":"Assistant Editor","subhead":"","body":"<p>We learned to use the <strong>Assistant Editor<\/strong> for previewing your code in Playground. The Assistant Editor can also be used for showing the Class file next to the Storyboard. This way, it&rsquo;s easier to connect the UI objects to the code.<\/p><p>Let&rsquo;s open the Assistant Editor by clicking the <strong>Circles icon<\/strong> in the Toolbar. Click the Circles again, but this time inside the Assistant Editor and select Automatic. <\/p><p><strong>Automatic<\/strong> will find the Class file attached to your View Controller in Storyboard if you connected to Identity Inspector.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-assistanteditor.jpg","image_width":"2570","image_height":"1526","video":"","bookmark_id":"swift4-connect-storyboard-assistant-editor"},{"id":"10449","section_id":"114","order":"4","title":"The Class File Explained","subhead":"","body":"<p>In the Assistant Editor, we can find the Swift code. Let me explain a little about what&rsquo;s going on.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">UIKit<\/span><br><\/code><\/pre><p>This is the framework that we&rsquo;re using. Think of it as React or Bootstrap (although way more complex). Swift itself isn&rsquo;t a framework &#x2014; it&rsquo;s a language. UIKit is the underlying framework. It&rsquo;s what allows us to code UI objects specific to iOS and use cool features like Storyboard or smaller things like Background Blur.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">ViewController<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewController<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Our Class <strong>ViewController<\/strong> is a subclass of UIViewController, meaning that it can use the same properties and methods, like <strong>viewDidLoad()<\/strong>. These are pre-made by Apple, allowing you to focus on building your app interactions, rather than building the framework. If you don&rsquo;t understand everything, that&rsquo;s fine because you&rsquo;ll get better with time.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewDidLoad<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>As the name suggests, <strong>viewDidLoad<\/strong> is when the screen loads. Whatever is coded inside the curly brackets will run.<\/p><p>We can delete <strong>didReceiveMemoryWarning()<\/strong> and the green comments below. This stuff is more advanced and not necessary for beginners to understand. So far, your Class file should look like this.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-classfileexplained.jpg","image_width":"2648","image_height":"1656","video":"","bookmark_id":"swift4-connect-storyboard-the-class-file-explained"},{"id":"10450","section_id":"114","order":"5","title":"Create an IBOutlet","subhead":"","body":"<p>Right now, the Class file is connected to the View Controller in Storyboard, but none of the UI objects are referenced. <\/p><p>Let&rsquo;s create an <strong>IBOutlet<\/strong> for the title. <strong>Control + Drag<\/strong> the title to the Class file. <strong>Important<\/strong>: it has to be dropped inside the <strong>ViewController<\/strong>&rsquo;s curly brackets and outside the <strong>viewDidLoad<\/strong> function.<\/p><p>When you drop the connection, a dialog will appear. We need to name the object to <strong>titleLabel<\/strong>. <strong>title<\/strong> is the name we give it and <strong>Label<\/strong> is the type. Once done, click <strong>Connect<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-createoutlet.mp4?dl=0","bookmark_id":"swift4-connect-storyboard-create-an-iboutlet"},{"id":"10451","section_id":"114","order":"6","title":"Storyboard Connections to IBOutlets","subhead":"","body":"<p>Let&rsquo;s create more IBOutlets for the <strong>device<\/strong> image and <strong>play<\/strong> button. This time, you can use the Document Outline to <strong>Control + Drag<\/strong> from, which is easier for the <strong>play<\/strong> Visual Effect View. <\/p><p>So far, our project should look like this. If you mouse over the <strong>circle<\/strong> on the left of that line of code, it&rsquo;ll show you where it&rsquo;s connected within Storyboard.<\/p><p><strong>Important<\/strong>: don&rsquo;t change the name of the IBOutlet or anything in your code. Once created, there is no going back unless you understand the steps it takes to refactor.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-moreoutlets.mp4?dl=0","bookmark_id":"swift4-connect-storyboard-storyboard-connections-to-iboutlets"},{"id":"10452","section_id":"114","order":"7","title":"Fade In Animation (Optional)","subhead":"","body":"<p>Now that we have declared our objects, we can manipulate them in the viewDidLoad. For example, we can set the <strong>alpha<\/strong> opacity to <strong>0<\/strong>.<\/p><pre><code class=\"language-swift\">titleLabel<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>deviceImageView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>playVisualEffectView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br><\/code><\/pre><p>Using <strong>UIView.animate<\/strong>, we can do a simple fade in animation. <\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">UIView<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span>withDuration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>titleLabel<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>deviceImageView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>playVisualEffectView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/connecstoryboard-fadeinanimation.jpg","image_width":"2478","image_height":"1448","video":"","bookmark_id":"swift4-connect-storyboard-fade-in-animation-optional"},{"id":"10453","section_id":"114","order":"8","title":"Creating an IBAction","subhead":"","body":"<p>As a designer learning code, we&rsquo;re interested in custom events, like when a user presses a button. Let&rsquo;s create one for the play button which would play the intro video. <\/p><p><strong>Control + Drag<\/strong> the <strong>Play Button<\/strong> right below the <strong>IBOutlets<\/strong>. Once you see the popover window, you have to change the Connection from Outlet to <strong>Action<\/strong>. This is only available for interactive elements such as the UIButton.<\/p><p>We&rsquo;re naming it <strong>play<\/strong> + <strong>type<\/strong> + <strong>action<\/strong>. So <strong>playButtonTapped<\/strong>. That&rsquo;s the naming convention recommended by Apple. The IBAction creates a function. You can code inside the curly brackets.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-creatinganibaction.mp4?dl=0","bookmark_id":"swift4-connect-storyboard-creating-an-ibaction"},{"id":"10454","section_id":"114","order":"9","title":"Play Video When Button is Tapped","subhead":"","body":"<p>Now that we connected the Play button, we can write some code for playing the intro video. The following code is a little more advanced, so if you feel a little lost, I suggest heading back to the Swift Playground sections. <\/p><p>First, we must import the AVKit framework. Type this code right underneath <strong>import UIKit<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">AVKit<\/span> <br><\/code><\/pre><p>Inside your playButtonTapped&rsquo;s curly brackets, let&rsquo;s start with declaring the URL of the video file.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> urlString <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;https:\/\/player.vimeo.com\/external\/235468301.hd.mp4?s=e852004d6a46ce569fcf6ef02a7d291ea581358e&amp;profile_id=175&quot;<\/span><br><\/code><\/pre><p>Then, we must transform the <strong>String<\/strong> into a <strong>URL<\/strong>, so that the AVPlayer class can read it. The <strong>AVPlayer<\/strong> is a UI object used to play the video with default controls such as play, pause and forward.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> url <span class=\"token operator\">=<\/span> <span class=\"token function\">URL<\/span><span class=\"token punctuation\">(<\/span>string<span class=\"token punctuation\">:<\/span> urlString<span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> player <span class=\"token operator\">=<\/span> <span class=\"token function\">AVPlayer<\/span><span class=\"token punctuation\">(<\/span>url<span class=\"token punctuation\">:<\/span> url<span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Let&rsquo;s create a View Controller for showing our Video player, then attach the <strong>player<\/strong> to it.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> playerController <span class=\"token operator\">=<\/span> <span class=\"token function\">AVPlayerViewController<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>playerController<span class=\"token punctuation\">.<\/span>player <span class=\"token operator\">=<\/span> player<br><\/code><\/pre><p>Finally, as with any View Controller, we can use the <strong>present<\/strong> function to animate it like a modal. When the animation is complete, we&rsquo;ll start the video right away.<\/p><pre><code class=\"language-swift\"><span class=\"token function\">present<\/span><span class=\"token punctuation\">(<\/span>playerController<span class=\"token punctuation\">,<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    player<span class=\"token punctuation\">.<\/span><span class=\"token function\">play<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-playvideo.mp4?dl=0","bookmark_id":"swift4-connect-storyboard-play-video-when-button-is-tapped"},{"id":"10455","section_id":"114","order":"10","title":"Section View Controller","subhead":"","body":"<p>Let&rsquo;s learn how to create a second View Controller in Storyboard for the <strong>Section<\/strong> screen. Disable the Assistant Editor to give full space to the Storyboard by clicking on the <strong>5 lines icon<\/strong>. <\/p><p>Drag and drop a <strong>View Controller<\/strong> from the Object library. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-sectionviewcontroller.jpg","image_width":"2476","image_height":"1450","video":"","bookmark_id":"swift4-connect-storyboard-section-view-controller"},{"id":"10456","section_id":"114","order":"11","title":"Create a New Class File","subhead":"","body":"<p>A <strong>Class<\/strong> file is needed to attach to the Section View Controller we&rsquo;ve just created. To create a new Class file, go to the Project Navigator (<strong>Command + 0<\/strong>), right-click the <strong>ViewController.swift<\/strong> and select <strong>New File<\/strong>. In the first window, select <strong>Cocoa Touch Class<\/strong>. <\/p><p>The Class name is <strong>Section<\/strong>. Since we&rsquo;re using a View Controller, we have to type <strong>UIViewController<\/strong> in the <strong>Subclass of<\/strong> field. <strong>ViewController<\/strong> will automatically be added to the Class name. Apple suggests that for every Class file, we should specify the type to avoid conflicts and to make things as clear as possible.<\/p><p>Once we created the <strong>SectionViewController.swift<\/strong> file, it&rsquo;ll appear right below <strong>ViewController.swift<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboar-createnewclassfile.mp4?dl=0","bookmark_id":"swift4-connect-storyboard-create-a-new-class-file"},{"id":"10457","section_id":"114","order":"12","title":"Connecting to Storyboard","subhead":"","body":"<p>The new Class file isn&rsquo;t connected to any Storyboard View Controller yet. So, let&rsquo;s head back to the new View Controller in Storyboard and open the <strong>Identity Inspector<\/strong>.<\/p><p>Type <strong>SectionViewController<\/strong>. Notice that the auto-completion kicks in, which makes it easier to avoid typing mistakes.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-connectingtostoryboard.jpg","image_width":"2476","image_height":"1452","video":"","bookmark_id":"swift4-connect-storyboard-connecting-to-storyboard"},{"id":"10458","section_id":"114","order":"13","title":"Both Ends of the Connections","subhead":"","body":"<p><strong>Important<\/strong>: when you create an <strong>IBOutlet<\/strong> or <strong>IBAction<\/strong>, it creates one connection in code and <strong>another connection<\/strong> that exists in the Storyboard&rsquo;s <strong>Connections Inspector<\/strong>. The two have to be in sync and have the same names. If you modify the name in the code, you also have to delete it in the Connections Inspector.<\/p><p>Select the View Controller in Storyboard and go to the Connections Inspector to find all the connections made.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-bothends.mp4?dl=0","bookmark_id":"swift4-connect-storyboard-both-ends-of-the-connections"},{"id":"10459","section_id":"114","order":"14","title":"Replicating a Connection Error","subhead":"","body":"<p><strong>Optional<\/strong>: don&rsquo;t follow this part if you don&rsquo;t feel comfortable yet. I&rsquo;m showing an example how the app can break if you&rsquo;re not careful with the connections.<\/p><ul>\t<li>I change <strong>titleLabel<\/strong> to <strong>title<\/strong> in <strong>ViewController.swift<\/strong> and immediately get errors. I then change the references to <strong>title<\/strong> to fix the errors.<\/li>\t<li>The <strong>circles<\/strong> in the left are no longer filled, hinting that there is no longer a connection.<\/li>\t<li>In the <strong>Connections Inspector<\/strong>, the old names are still there. That&rsquo;s the danger because Xcode will still try to make the connection, which ultimately will <strong>crash<\/strong> your app.<\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-replicatingerror.mp4?dl=0","bookmark_id":"swift4-connect-storyboard-replicating-a-connection-error"},{"id":"10460","section_id":"114","order":"15","title":"Debug Area","subhead":"","body":"<p>For those who have developed Websites before, you&rsquo;re probably used to inspecting elements in the browser and looking at console logs. The <strong>Debug area<\/strong> has similar features. Whenever you have errors, you can find them on the right side of the Debug area.<\/p><p>Development tools can be unforgiving when it comes to crashes. If you&rsquo;re lucky and followed all the steps successfully, you&rsquo;ll be fine. But should you run into a crash, you need to follow these instructions. <\/p><ol>\t<li>Look at the bottom Debug area and scroll the error messages to the top. Look for the word <strong>reason<\/strong>. Look for keywords that stand out. In this case, we can see <strong>mainButton<\/strong>. Google the sentence to look for solutions.<\/li>\t<li>Go back to the Project Navigator.<\/li>\t<li>In your main editor, click the <strong>left arrow button<\/strong> to go back to where you were.<\/li>\t<li>You can close the Debug area by clicking on the <strong>down arrow<\/strong> at the top left.<\/li><\/ol>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-debugarea.mp4?dl=0","bookmark_id":"swift4-connect-storyboard-debug-area"},{"id":"10461","section_id":"114","order":"16","title":"Fixing your Connections","subhead":"","body":"<p>The solution is to either Undo (Command Z) or rename back to the original name. Otherwise, if you wish to go forward with the new name, make sure to <strong>delete<\/strong> the old connections in the <strong>Connections Inspector<\/strong>, and repeat the steps. <\/p><p>If you don&rsquo;t wish to recreate the IBOutlet, you can click on the circle and connect back to the appropriate object. The lesson here is that both ends have to be in sync.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/connectstoryboard-fixconnection.mp4?dl=0","bookmark_id":"swift4-connect-storyboard-fixing-your-connections"},{"id":"10462","section_id":"114","order":"17","title":"Conclusion","subhead":"","body":"<p>This is the hardest part for anyone who&rsquo;s never used Storyboard before. It&rsquo;s an entirely new concept, even for many developers. Once you understand it, you can do so much. If you made it here, you should pat yourself on the back, because you made a giant step into iOS development.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-connect-storyboard-conclusion"}]},{"id":"117","chapter_id":"3","order":"120","slug":"swift4-parallax-animation","title":"Parallax Animation","caption":"Make scrolling more fun and delightful","body":"<p>A lot of interesting interactions happen as a result of scroll events. In the Design+Code app, we use the scroll information to capture the read progress, to show or hide the navigation bar, and to apply a parallax effect on the visual elements.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-parallax.jpg","video":"https:\/\/player.vimeo.com\/external\/249110641.hd.mp4?s=706571e5ad5cdb01e53e37e3f9af5cfee536d7ca&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-parallax-animation.zip","contents":[{"id":"10532","section_id":"117","order":"1","title":"Downloads for Parallax Animation Using Scroll","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need&#xA0;<a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a>&#xA0;and the finished&#xA0;Xcode project&#xA0;from&#xA0;<a href=\"https:\/\/designcode.io\/swift4-connect-storyboard\">Storyboard and Code<\/a>. You can download the&#xA0;<a href=\"https:\/\/www.dropbox.com\/s\/dn9o2wtza99n9wf\/3.12.ParallaxAnimation.zip?dl=0\">final&#xA0;Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-parallax-animation-downloads-for-parallax-animation-using-scroll"},{"id":"10533","section_id":"117","order":"2","title":"Setting up the IBOutlets","subhead":"","body":"<p>First, we&rsquo;ll need to set up the objects that we want to apply the parallax effect. In the template, we already have most of the work done, except for the background image. Let&rsquo;s control drag the <strong>Home<\/strong> image to the <strong>ViewController.swift<\/strong> underneath <strong>playVisualEffectView<\/strong>. Create an IBOutlet and name it <strong>backgroundImageView<\/strong>.<\/p><p>Also, select the Scroll View from the Document Outline and create an IBOutlet. Name it <strong>scrollView<\/strong>.<\/p><p>Repeat the same steps for the Hero View and Book View. Name them <strong>heroView<\/strong> and <strong>bookView<\/strong> respectively.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/parallax-settingupiboutlets.jpg","image_width":"2472","image_height":"1406","video":"","bookmark_id":"swift4-parallax-animation-setting-up-the-iboutlets"},{"id":"10534","section_id":"117","order":"3","title":"Swift Extension UIScrollViewDelegate","subhead":"","body":"<p>Extensions can be used to provide extra functionalities to an existing class. In this case, we&rsquo;re going to extend our ViewController with a <strong>UIScrollViewDelegate<\/strong> class. Additionally, I love using Extensions to separate sections of a Class file. Add this code at the end below the ViewController class.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">ViewController<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIScrollViewDelegate<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token comment\">\/\/ Put Scroll functionalities to ViewController<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-parallax-animation-swift-extension-uiscrollviewdelegate"},{"id":"10535","section_id":"117","order":"4","title":"Connecting the UIScrollViewDelegate","subhead":"","body":"<p>Whenever you use a Delegate protocol, you need to attach it to your Object. In this case, we need to attach it to the <strong>scrollView<\/strong>. Inside <strong>viewDidLoad<\/strong>, below <strong>super.viewDidLoad<\/strong>, put this code.<\/p><pre><code class=\"language-swift\">scrollView<span class=\"token punctuation\">.<\/span>delegate <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/parallax-scrollviewdelegate.jpg","image_width":"1600","image_height":"844","video":"","bookmark_id":"swift4-parallax-animation-connecting-the-uiscrollviewdelegate"},{"id":"10536","section_id":"117","order":"5","title":"scrollViewDidScroll","subhead":"","body":"<p>We need to capture the scrolling events so that we can animate our title, device image, play button and background image based on the vertical scroll position. <strong>UIScrollViewDelegate<\/strong> provides the extra functions that we&rsquo;ll need to gain that valuable info. Inside the Extension&rsquo;s curly brackets, let&rsquo;s use the <strong>scrollViewDidScroll<\/strong> function to get the <strong>scrollView<\/strong> info.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">scrollViewDidScroll<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> scrollView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIScrollView<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span>scrollView<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-parallax-animation-scrollviewdidscroll"},{"id":"10537","section_id":"117","order":"6","title":"scrollView Values","subhead":"","body":"<p>Receiving info from any object or event can be valuable to create an immersive experience. In this specific case, we&rsquo;re receiving info when the user scrolls thanks to the <strong>scrollView<\/strong> which is connected to the <strong>UIScrollViewDelegate<\/strong>. If we run the app, we&rsquo;ll find the info printed in the Debug Area.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/parallax-scrollViewPrint.mp4?dl=0","bookmark_id":"swift4-parallax-animation-scrollview-values"},{"id":"10538","section_id":"117","order":"7","title":"Capturing the Content Offset Y","subhead":"","body":"<p>The main info that we&rsquo;ll need from the scroll is just the <strong>Y<\/strong> position. Type this inside the new <strong>scrollViewDidScroll<\/strong> function.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> offsetY <span class=\"token operator\">=<\/span> scrollView<span class=\"token punctuation\">.<\/span>contentOffset<span class=\"token punctuation\">.<\/span>y<br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-parallax-animation-capturing-the-content-offset-y"},{"id":"10539","section_id":"117","order":"8","title":"Parallax Above Y Position 0","subhead":"","body":"<p>We only want to start animating when the user scrolls above the starting position, which is at <strong>Y position of 0<\/strong>. Let&rsquo;s add this condition.<br> if offsetY &lt; 0 { }<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-parallax-animation-parallax-above-y-position-0"},{"id":"10540","section_id":"117","order":"9","title":"Cancelling the Hero View","subhead":"","body":"<p>When the scroll happens, we want the Hero View to stop moving. So, we&rsquo;re using a trick which move the Hero View&rsquo;s Y Position to the same position as the <strong>offsetY<\/strong>. The <strong>transform<\/strong> property is the perfect way to translate, rotate or scale an object. In this case, we&rsquo;re using <strong>translation<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> offsetY <span class=\"token operator\">&lt;<\/span> <span class=\"token number\">0<\/span> <span class=\"token punctuation\">{<\/span><br>    heroView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>translationX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> offsetY<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Let&rsquo;s see a before and after we apply the scrolling effect.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/parallax-cancellingheroview.mp4?dl=0","bookmark_id":"swift4-parallax-animation-cancelling-the-hero-view"},{"id":"10541","section_id":"117","order":"10","title":"Moving at Different Speed","subhead":"","body":"<p>Parallax is all about moving multiple objects at different speed, creating a 3 dimensional effect as if you&rsquo;re watching the scenery while inside a car. Objects in the foreground moves faster than objects in the background. That&rsquo;s essentially what we&rsquo;ll be replicating. <\/p><p>We&rsquo;re dividing the Y position by a negative number, for speed. The bigger the number, the slower the object moves. Since the Y Position is negative, the two negatives becomes a positive. <\/p><p>For example, if Y position is <strong>-10<\/strong>, and we divide that number by <strong>-5<\/strong>(speed), the object moves down by <strong>2 pt<\/strong>. If we divide <strong>-10<\/strong> by <strong>-2<\/strong>, the object moves down by <strong>5 pt<\/strong>. Again, the bigger the number for speed, the slower the object moves.<\/p><pre><code class=\"language-swift\">heroView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>translationX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> offsetY<span class=\"token punctuation\">)<\/span><br>playVisualEffectView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>translationX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token operator\">-<\/span>offsetY<span class=\"token operator\">\/<\/span><span class=\"token number\">3<\/span><span class=\"token punctuation\">)<\/span><br>titleLabel<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>translationX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token operator\">-<\/span>offsetY<span class=\"token operator\">\/<\/span><span class=\"token number\">3<\/span><span class=\"token punctuation\">)<\/span><br>deviceImageView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>translationX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token operator\">-<\/span>offsetY<span class=\"token operator\">\/<\/span><span class=\"token number\">4<\/span><span class=\"token punctuation\">)<\/span><br>backgroundImageView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>translationX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token operator\">-<\/span>offsetY<span class=\"token operator\">\/<\/span><span class=\"token number\">5<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/parallax-movingatdifferentspeed.jpg","image_width":"2200","image_height":"578","video":"","bookmark_id":"swift4-parallax-animation-moving-at-different-speed"},{"id":"10542","section_id":"117","order":"11","title":"Masking with Clip to Bounds","subhead":"","body":"<p>The parallax seems to be working, but our background image is moving outside the Hero View. To fix that, let&rsquo;s select the Hero View and go to the Attributes Inspector to enable <strong>Clip to Bounds<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/parallax-fixingwithcliptobounds.jpg","image_width":"2478","image_height":"1182","video":"","bookmark_id":"swift4-parallax-animation-masking-with-clip-to-bounds"},{"id":"10543","section_id":"117","order":"12","title":"Expanding the Background Image Height","subhead":"","body":"<p>Another issue is that when we scroll, the background image moves too far, giving way to the white space. We can fix that by expanding the height. Select the Background Image and double-click the top constraint. Change the value to <strong>-50<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/parallax-expandingbackgroundimage.mp4?dl=0","bookmark_id":"swift4-parallax-animation-expanding-the-background-image-height"},{"id":"10544","section_id":"117","order":"13","title":"Conclusion","subhead":"","body":"<p>Finally, our parallax is working as intended. Using the scroll events, you can code a lot of interesting effects and animations such as parallax, pull to refresh or unlocking hidden content. It&rsquo;s a simple technique but can expand into much more as you figure out how to use it in new ways.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/parallax-conclusiondemo.mp4?dl=0","bookmark_id":"swift4-parallax-animation-conclusion"}]},{"id":"118","chapter_id":"3","order":"130","slug":"swift4-collection-view","title":"Collection View","caption":"The most flexible and dynamic layout for iOS","body":"<p>The Collection View allows you to create a grid type layout. It is also the most flexible type of layout. Virtually any layout can be created with it. Most commonly, you can see it in action in the Photos app, Music app or App Store. Additionally, it is perfect to set content that can scroll horizontally.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-collection-view.jpg","video":"https:\/\/player.vimeo.com\/external\/249119891.hd.mp4?s=6fb3fd9a11ea2394cd4725441c559c60144e41ad&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-collection-view.zip","contents":[{"id":"10427","section_id":"118","order":"1","title":"Downloads for Collection View","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-parallax-animation\">Parallax Animation<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/skg9jjviy4u8bb4\/3.13.CollectionView.zip?dl=0\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-collection-view-downloads-for-collection-view"},{"id":"10428","section_id":"118","order":"2","title":"Setting up a Collection View","subhead":"","body":"<p>We&rsquo;ll need a Collection View to create the horizontal scrolling cards on the Design+Code iOS app. <\/p><p>In the <strong>Scroll View<\/strong>, <strong>Chapter View<\/strong>, we must delete the existing <strong>View<\/strong> right below the CHAPTER label, since we&rsquo;ll be replacing it with the Collection View.<\/p><p>Then, we&rsquo;ll drag and drop a Collection View from the Object library. Add New Constraints: <strong>right 0<\/strong>, <strong>bottom 50<\/strong>, <strong>left 0<\/strong>, <strong>height 248<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-settingupacollectionview.mp4?dl=0","bookmark_id":"swift4-collection-view-setting-up-a-collection-view"},{"id":"10429","section_id":"118","order":"3","title":"The Collection View Cell","subhead":"","body":"<p>The cell is for reusable content. The Card will be repeated multiple times for each section of content that we have. First, let&rsquo;s set the size of the cells by clicking on the Collection View Cell and setting the Size to <strong>Custom<\/strong>, and configure to <strong>width 304<\/strong>, <strong>height 248<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-thecollectionviewcell.mp4?dl=0","bookmark_id":"swift4-collection-view-the-collection-view-cell"},{"id":"10430","section_id":"118","order":"4","title":"Card Container","subhead":"","body":"<p>It&rsquo;s a good practice to wrap your content inside a container so that you can easily move the whole thing later. Also, we&rsquo;d like to be able to apply rounded corners and drop shadows to that container.<\/p><p>Drag and drop a UIView from the Object library and set the constraints to <strong>0<\/strong> for <strong>top<\/strong>, <strong>right<\/strong>, <strong>bottom<\/strong>, <strong>left<\/strong>. Make sure to disable Constrain to Margins. <\/p><p>From the Identity Inspector, add Runtime Attributes for the drop shadows and corner radius.<\/p><ul>\t<li><strong>layer.cornerRadius<\/strong>, Number, 14<\/li>\t<li><strong>layer.shadowOpacity<\/strong>, Number 0.25<\/li>\t<li><strong>layer.shadowOffset<\/strong>, Size, {0, 10}<\/li>\t<li><strong>layer.shadowRadius<\/strong>, Number, 20<\/li><\/ul>","image":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-cardcontainer.jpg","image_width":"1598","image_height":"996","video":"","bookmark_id":"swift4-collection-view-card-container"},{"id":"10431","section_id":"118","order":"5","title":"Drop shadows cannot use Clip to Bounds","subhead":"","body":"<p>When you use drop shadows, you cannot use <strong>Clip to Bounds<\/strong> since that would simply not show them. Why use Clip to Bounds, you may ask? Well, that&rsquo;s because the card has rounded corners and the content needs to be masked within those bounds.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-collection-view-drop-shadows-cannot-use-clip-to-bounds"},{"id":"10432","section_id":"118","order":"6","title":"Card Second Container","subhead":"","body":"<p>The solution to our problem is to <strong>not<\/strong> use Clip to Bounds on the first container, and create <strong>another<\/strong> container that will use Clip to Bounds. Drag and drop a second UIView and set the constraints to <strong>0<\/strong> for <strong>top<\/strong>, <strong>right<\/strong>, <strong>bottom<\/strong> and <strong>left<\/strong>. Afterwards, in Identity Inspector, add a new Runtime attribute: <strong>layer.cornerRadius<\/strong>, <strong>Number<\/strong>, <strong>14<\/strong>. This time, check <strong>Clip to Bounds<\/strong> in the Attribute Inspector.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-cardsecondcontainer.jpg","image_width":"2478","image_height":"1402","video":"","bookmark_id":"swift4-collection-view-card-second-container"},{"id":"10433","section_id":"118","order":"7","title":"Card Background","subhead":"","body":"<p>Drag and drop a UIImage and set the constraints to <strong>0<\/strong> for <strong>top<\/strong>, <strong>right<\/strong>, <strong>bottom<\/strong> and <strong>left<\/strong>. Set Image to <strong>ios11<\/strong> and Content Mode to <strong>Aspect Fill<\/strong>. <\/p><p>If you&rsquo;re missing the new cover images, make sure to re-download the <a href=\"https:\/\/www.dropbox.com\/s\/v5050xy2aiwq14r\/3.1.DesignCodeApp-Assets.zip?dl=0\">assets<\/a> again and import to your Asset Catalog.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-cardbackground.jpg","image_width":"2478","image_height":"1406","video":"","bookmark_id":"swift4-collection-view-card-background"},{"id":"10434","section_id":"118","order":"8","title":"Card Title","subhead":"","body":"<p>For the title, let&rsquo;s drag and drop a Label and set it to &#x201C;Learn iOS 11 Design&#x201D;, <strong>32 pt Semibold<\/strong>, <strong>white<\/strong>. The constraints are <strong>20<\/strong> for <strong>top<\/strong>, <strong>left<\/strong> and <strong>right<\/strong>. Make sure to set the Number of Lines to <strong>3<\/strong>. Don&rsquo;t worry about the text not showing in multiple lines. Storyboard doesn&rsquo;t always preview objects accurately, but you&rsquo;ll be able to see it when you Run the app later.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-cardlabels.jpg","image_width":"1260","image_height":"688","video":"","bookmark_id":"swift4-collection-view-card-title"},{"id":"10435","section_id":"118","order":"9","title":"Card Description","subhead":"","body":"<p>Drag and drop another Label and set it to &#x201C;A complete guide to colors, typography and layout for iOS&#x201D;, <strong>17 pt Regular<\/strong>, <strong>white<\/strong>. The constraints are <strong>20<\/strong> for <strong>right<\/strong>, <strong>bottom<\/strong> and <strong>left<\/strong>. Set the Number of Lines to <strong>3<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-carddescription.jpg","image_width":"1256","image_height":"648","video":"","bookmark_id":"swift4-collection-view-card-description"},{"id":"10436","section_id":"118","order":"10","title":"Collection View Cell Identifier","subhead":"","body":"<p>If you Run the app, you&rsquo;ll notice that the Collection View is empty. That&rsquo;s because we need to fill it with actual data and set how many instances we want of it. The first thing we need to do is to set the Identifier to <strong>sectionCell<\/strong>. This ID is super important for declaring in the code.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-cellidentifier.jpg","image_width":"2476","image_height":"1404","video":"","bookmark_id":"swift4-collection-view-collection-view-cell-identifier"},{"id":"10437","section_id":"118","order":"11","title":"Collection View Outlet","subhead":"","body":"<p>In our Class file, we&rsquo;ll need to create an IBOutlet for the Collection View. Open the Assistant Editor so that we have both the Storyboard next to the Class file. Then, select the <strong>Collection View&#xA0;<\/strong>and <strong>Control Drag<\/strong> the object below your other IBOutlets. Name it <strong>chapterCollectionView<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-chaptercollectionview.mp4?dl=0","bookmark_id":"swift4-collection-view-collection-view-outlet"},{"id":"10438","section_id":"118","order":"12","title":"Setting the Delegate and Data Source","subhead":"","body":"<p>At this point, we can just go back to the Standard Editor since we&rsquo;ll be focusing on the code. Let&rsquo;s write a new <strong>extension<\/strong> where we will set up the Collection View&rsquo;s necessary data source. <\/p><p>As soon as we subclass these, there will be an error that says that &#x201C;ViewController does not conform to the protocol&#x201D;. Click <strong>Fix<\/strong>. Xcode will automatically add the missing functions for setting up the Collection View.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">ViewController<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionViewDelegate<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">UICollectionViewDataSource<\/span> <span class=\"token punctuation\">{<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-settingupthedelegate.mp4?dl=0","bookmark_id":"swift4-collection-view-setting-the-delegate-and-data-source"},{"id":"10439","section_id":"118","order":"13","title":"Number of Items in Section","subhead":"","body":"<p>One of the two necessary functions require us to set up the number of items. Let&rsquo;s start with an arbitrary number: 5. This means that 5 cards will be showing.<\/p><p>The <strong>-&gt;<\/strong> Int means that we have to return an integer that will determine the number of items.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> numberOfItemsInSection section<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> <span class=\"token number\">5<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-collection-view-number-of-items-in-section"},{"id":"10440","section_id":"118","order":"14","title":"Collection View Cell Data","subhead":"","body":"<p>Xcode provides us with the cell information and the indexPath. The indexPath is the index for both items and sections. In this case, there is one section and 5 items.<\/p><p>First, we&rsquo;re defining the cell to be reusable and we&rsquo;re calling the identifier <strong>sectionCell<\/strong> that we set up previously in Storyboard. Finally, as the function requires it, we&#x2018;re returning that cell.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> cellForItemAt indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">UICollectionViewCell<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">dequeueReusableCell<\/span><span class=\"token punctuation\">(<\/span>withReuseIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;sectionCell&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">return<\/span> cell<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-collection-view-collection-view-cell-data"},{"id":"10441","section_id":"118","order":"15","title":"Connecting the Collection View Outlet","subhead":"","body":"<p>While the data source is configured, Xcode still doesn&rsquo;t know how the Collection View is connected to the object we created in Storyboard. Let&rsquo;s connect the Collection View&rsquo;s <strong>delegate<\/strong> and <strong>dataSource<\/strong> to <strong>self<\/strong>. In <strong>viewDidLoad<\/strong>, add this code.<\/p><pre><code class=\"language-swift\">chapterCollectionView<span class=\"token punctuation\">.<\/span>delegate <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br>chapterCollectionView<span class=\"token punctuation\">.<\/span>dataSource <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-collection-view-connecting-the-collection-view-outlet"},{"id":"10442","section_id":"118","order":"16","title":"Collection View Cell Size","subhead":"","body":"<p>At the beginning, we set the Cell size to 304 x 248, but we didn&rsquo;t set how the cells will be dynamically sized when reused. To do that, select the Collection View and go to the Size Inspector to change the Cell Size to width 304, height 248. <\/p><p>To create a margin between cells, set the <strong>Min Spacing<\/strong>, <strong>For Lines<\/strong> to <strong>20<\/strong>. Additionally, we&rsquo;ll update the <strong>Section Insets<\/strong>, <strong>Left<\/strong> to <strong>20<\/strong> to add an overall margin on the left.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-collectionviewcellsize.jpg","image_width":"2058","image_height":"796","video":"","bookmark_id":"swift4-collection-view-collection-view-cell-size"},{"id":"10443","section_id":"118","order":"17","title":"Collection View Horizontal Scrolling","subhead":"","body":"<p>In order to make the cards scroll horizontally, we need to go to the Attribute Inspector and set the <strong>Scroll Direction<\/strong> to <strong>Horizontal<\/strong>. While we&rsquo;re at it, let&rsquo;s also set the <strong>Background<\/strong> to <strong>Clear<\/strong>, which is clear. Finally, let&rsquo;s make sure to hide the scroll indicators by unchecking <strong>Show Horizontal Indicator<\/strong> and <strong>Show Vertical Indicator<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-horizontalscrolling.jpg","image_width":"1282","image_height":"640","video":"","bookmark_id":"swift4-collection-view-collection-view-horizontal-scrolling"},{"id":"10444","section_id":"118","order":"18","title":"Drop Shadows Being Clipped","subhead":"","body":"<p>As we&rsquo;re testing the app, we&rsquo;re noticing that the drop shadows are being clipped. To fix this, we need to uncheck <strong>Clip to Bounds<\/strong> from both the <strong>Collection View Cell<\/strong> and the <strong>Collection View<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-dropshadowscliptobounds.mp4?dl=0","bookmark_id":"swift4-collection-view-drop-shadows-being-clipped"},{"id":"10445","section_id":"118","order":"19","title":"Conclusion","subhead":"","body":"<p>The Collection View is insanely useful for creating interesting layouts that reuse its cells multiple times. It&rsquo;s also perfect for populating dynamic data. With this lesson, you&rsquo;ll be able to take your layouts to the next level. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/collectionview-conclusiondemo.mp4?dl=0","bookmark_id":"swift4-collection-view-conclusion"}]},{"id":"119","chapter_id":"3","order":"140","slug":"swift4-static-data","title":"Static Data","caption":" Filling your reusable cells with data","body":"<p>With a few well-structured lines of code, you can create static data that can be dynamically used for your layout. It&rsquo;s especially useful for setting quick prototypes that are simple to set up for beginners and designers.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-static-data.jpg","video":"https:\/\/player.vimeo.com\/external\/248988289.hd.mp4?s=6c851c0b4645736d8c79ac58d2183ba61769a2b6&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-static-data.zip","contents":[{"id":"10661","section_id":"119","order":"1","title":"Downloads for Static Data","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-collection-view\">Collection View<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/c7dy0zr1h1zawrs\/3.14.StaticData.zip?dl=0\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-static-data-downloads-for-static-data"},{"id":"10662","section_id":"119","order":"2","title":"Creating a Data Class","subhead":"","body":"<p>The first thing we need to do is to create <strong>Data.swift<\/strong> where we&rsquo;ll put our static data. Go to your Project navigator and right-click SectionViewController.swift and <strong>New File&#x2026;<\/strong>. Select Cocoa Touch Class and name the file <strong>Data<\/strong>. Whenever you&rsquo;re not sure what Subclass to use, you can also select NSObject.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/staticdata-createnewdataclass.mp4?dl=0","bookmark_id":"swift4-static-data-creating-a-data-class"},{"id":"10663","section_id":"119","order":"3","title":"Data Array and Dictionary","subhead":"","body":"<p>To give a quick refresher, let&rsquo;s create a simple array.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> sections <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;Title 1&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">&quot;Title 2&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">&quot;Title 3&quot;<\/span><span class=\"token punctuation\">]<\/span><br><\/code><\/pre><p>The same array with indentation can be written like this:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> sections <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><br>    <span class=\"token string\">&quot;Title&quot;<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;Title 2&quot;<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;Title 3&quot;<\/span><br><span class=\"token punctuation\">]<\/span><br><\/code><\/pre><p>But that only stored a single value, so we&rsquo;ll need to take it up a notch and turn it into a <a href=\"https:\/\/developer.apple.com\/library\/content\/documentation\/Swift\/Conceptual\/Swift_Programming_Language\/CollectionTypes.html\">Dictionary<\/a> by adding more values: <strong>title<\/strong>, <strong>caption<\/strong>, <strong>body<\/strong>, <strong>image<\/strong> for each card. We&rsquo;re wrapping those 4 values between more brackets. Here&rsquo;s the data that we need. You can copy and paste this outside the class since it would take a very long time to type everything. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> sections <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Learn iOS 11 Design&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;caption&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;A complete guide to designing for iOS 11&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;While the flat design has become universal over the past 5 years, it wasn&rsquo;t so common before iOS 7. It was the shift that shaped the design landscape. But to say that it hasn&rsquo;t evolved would be inaccurate. iOS design has adapted to the bigger screens. What started as the ultimate opposite of hyper-realistic designs that preceded it, flat design is now much more nuanced, giving way to gradients, drop shadows and cards.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;ios11&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Designing for iPhone X&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;caption&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Guidelines to designing for iOS 11&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;iOS 11 marks the introduction of the iPhone X, a much taller iPhone that has virtually no bezel. The 5.8-inch OLED screen is larger than the iPhone 8 Plus&rsquo;s 5.5-inch, yet the body size is about the same as the iPhone 8. For designers, this means more freedom in our canvas.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;ios11-iphone-x&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Design for iPad&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;caption&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;How bigger screens affect your design&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Designing for the iPad isn&rsquo;t as simple as flipping a switch and just making everything bigger. A larger screen provides a real opportunity to present more content while respecting some basic rules in navigation, typography and visual hierarchy. Don&rsquo;t treat the iPad as just a big iPhone. Instead, treat it more like a desktop computer with touch capabilities. In other words, your users can be more productive, see more content and perform tasks faster like typing, and drag-and-drop and multi-tasking.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;ios11-ipad&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Design for Apple Watch&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;caption&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Designing for people on the go&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Apple Watch was introduced on April 24, 2015, and it was highly anticipated by developers, designers, and the media. It was truly the first wearable that broke every expectation, placing Apple as the number one watch manufacturer in the world.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;ios11-watch&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Learn Colors&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;caption&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;How to work with colors&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Colors are difficult to master because it&rsquo;s really easy to go overboard. When we design, we have a tendency to over-design. For colors, we tend to use competing colors that distract and just feels completely unnatural. What I can recommend is to simply stick to the basics and temper your use of colors by focusing on its utility and pleasantness. When in doubt, use colors only to draw attention to a button or element of importance.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;ios11-colors&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><br><span class=\"token punctuation\">]<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-static-data-data-array-and-dictionary"},{"id":"10664","section_id":"119","order":"4","title":"Collection View Cell Class","subhead":"","body":"<p>In order to fill our data, we&rsquo;ll need to connect the Card&rsquo;s Storyboard objects to a Class file. Right-click SectionViewController.swift and select <strong>New File&#x2026;<\/strong>. Select Cocoa Touch Class. Type <strong>Section<\/strong> as class name, then type <strong>UICollectionViewCell<\/strong> as the subclass of.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/staticdata-cellclass.mp4?dl=0","bookmark_id":"swift4-static-data-collection-view-cell-class"},{"id":"10665","section_id":"119","order":"5","title":"Connecting the Collection View Cell","subhead":"","body":"<p>Go back to Storyboard and select the Collection View Cell named <strong>sectionCell<\/strong>. In the Identity Inspector, set the Class to <strong>SectionCollectionViewCell<\/strong>. The autocompletion should help you fill the correct Class.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/staticdata-connectingcell.jpg","image_width":"2496","image_height":"1404","video":"","bookmark_id":"swift4-static-data-connecting-the-collection-view-cell"},{"id":"10666","section_id":"119","order":"6","title":"Manual Assistant Editor","subhead":"","body":"<p>Let&rsquo;s enable the Assistant Editor by clicking on the <strong>circles<\/strong> icon in the top right. Since Automatic doesn&rsquo;t give us the Cell Class specifically, we&rsquo;ll do it manually by clicking the 4 squares icon and then, go to Recent Files, <strong>SectionCollectionViewCell.swift<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/staticdata-manualassistanteditor.jpg","image_width":"2482","image_height":"1410","video":"","bookmark_id":"swift4-static-data-manual-assistant-editor"},{"id":"10667","section_id":"119","order":"7","title":"IBOutlets in Cell Class","subhead":"","body":"<p>Now, we can create the IBOutlets. Control + Drag the title, caption and cover image to create the IBOutlets in the class file.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> titleLabel<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> captionLabel<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> coverImageView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIImageView<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/staticdata-createoutlets.mp4?dl=0","bookmark_id":"swift4-static-data-iboutlets-in-cell-class"},{"id":"10668","section_id":"119","order":"8","title":"Populating the Data","subhead":"","body":"<p>With the data and outlets set up, we can finally populate the data in the cards. Go back to the <strong>Standard Editor<\/strong> and select <strong>ViewController.swift<\/strong> from the Project Navigator. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-static-data-populating-the-data"},{"id":"10669","section_id":"119","order":"9","title":"Array or Dictionary Count","subhead":"","body":"<p>In the Collection View&rsquo;s <strong>numberOfItemsInSection<\/strong> function, let&rsquo;s <strong>return<\/strong> the number of values that we have in the <strong>sections<\/strong> dictionary. We&rsquo;re using <strong>count<\/strong> to calculate the number of values.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">return<\/span> sections<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-static-data-array-or-dictionary-count"},{"id":"10670","section_id":"119","order":"10","title":"Populating the Cell","subhead":"","body":"<p>In <strong>cellForItemAt<\/strong>, we&rsquo;ll configure the <strong>cell<\/strong>. In the <strong>cell<\/strong> declaration, we&rsquo;ll need to specify exactly which Class we&rsquo;re using so that we can have access to its outlets.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">dequeueReusableCell<\/span><span class=\"token punctuation\">(<\/span>withReuseIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;sectionCell&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">SectionCollectionViewCell<\/span><br><\/code><\/pre><p>Now, let&rsquo;s declare a single <strong>section<\/strong> using the <strong>indexPath.row<\/strong> given to us.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> section <span class=\"token operator\">=<\/span> sections<span class=\"token punctuation\">[<\/span>indexPath<span class=\"token punctuation\">.<\/span>row<span class=\"token punctuation\">]<\/span><br><\/code><\/pre><p>Using the section, we can get access to the values for the <strong>title<\/strong>, <strong>caption<\/strong> and <strong>image<\/strong>. For the image, we needed to force unwrap, as suggested by Xcode.<\/p><pre><code class=\"language-swift\">cell<span class=\"token punctuation\">.<\/span>titleLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> section<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">]<\/span><br>cell<span class=\"token punctuation\">.<\/span>captionLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> section<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;caption&quot;<\/span><span class=\"token punctuation\">]<\/span><br>cell<span class=\"token punctuation\">.<\/span>coverImageView<span class=\"token punctuation\">.<\/span>image <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImage<\/span><span class=\"token punctuation\">(<\/span>named<span class=\"token punctuation\">:<\/span> section<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/staticdata-populatingcell.jpg","image_width":"2480","image_height":"1212","video":"","bookmark_id":"swift4-static-data-populating-the-cell"},{"id":"10671","section_id":"119","order":"11","title":"Conclusion","subhead":"","body":"<p>Boom! Our data is working and it&rsquo;s filling the cards in the Chapter section. This technique will take your prototype and iOS app very far since you can update parts of the app by just modifying the data file.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/staticdata-conclusiondemo.mp4?dl=0","bookmark_id":"swift4-static-data-conclusion"}]},{"id":"120","chapter_id":"3","order":"150","slug":"swift4-3d-animation","title":"3D Animation","caption":"Create a parallax animation that uses 3D transforms","body":"<p>Even for the horizontal scrolling that happens in the Collection View, we can capture the position. In the lesson, we&rsquo;ll learn how to apply a nice 3D transform when the user scrolls the cards, giving this smooth and beautiful parallax 3D effect.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-3d-animation.jpg","video":"https:\/\/player.vimeo.com\/external\/249120240.hd.mp4?s=fc72595aaf3b8c4719ab89636e48aa8b933f8f60&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-3d-animation.zip","contents":[{"id":"10363","section_id":"120","order":"1","title":"Downloads for 3D Animation using Scroll","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-static-data\">Static Data<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/50ijdnyku4ohqqa\/3.15.3DAnimation.zip?dl=0\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-3d-animation-downloads-for-3d-animation-using-scroll"},{"id":"10364","section_id":"120","order":"2","title":"Setting the Scroll Delegate","subhead":"","body":"<p>Let&rsquo;s write an extension with that is a subclass of <strong>UIScrollViewDelegate<\/strong> where we&rsquo;ll capture the scroll position. Looks like we&rsquo;ve already done that previously in the <strong>Parallax Animation using Scroll<\/strong> section. To refresh your memory. Here&rsquo;s the basic code:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">ViewController<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIScrollViewDelegate<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Also, make sure to connect that to the Scroll View object in <strong>viewDidLoad<\/strong>.<\/p><pre><code class=\"language-swift\">scrollView<span class=\"token punctuation\">.<\/span>delegate <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-3d-animation-setting-the-scroll-delegate"},{"id":"10365","section_id":"120","order":"3","title":"Getting the Collection View Cell","subhead":"","body":"<p>The information that we&rsquo;re looking for is the <strong>position<\/strong> and <strong>size<\/strong> of the card. To get that, we need to somehow select the Collection View Cell itself during scrolling. We know that scrollView gives us the information on scroll position, it also gives us that info when we&rsquo;re scrolling inside the Collection View. So it&rsquo;s safe to assume that scrollView can also become a collectionView, but only when scrolling horizontally. <\/p><p>Let&rsquo;s declare a <strong>collectionView<\/strong> only when scrollView happens to be a Collection View. Type the following code inside the <strong>scrollViewDidScroll<\/strong> function.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> collectionView <span class=\"token operator\">=<\/span> scrollView <span class=\"token keyword\">as<\/span><span class=\"token operator\">?<\/span> <span class=\"token builtin\">UICollectionView<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Thanks to the <strong>collectionView<\/strong>, we can capture all the cells that are visible on the screen. While we&rsquo;re at it, let&rsquo;s make it specific to <strong>SectionCollectionViewCell<\/strong> so that we can use its IBOutlets. Make sure to set it as an <strong>Array<\/strong> since visibleCells has multiple cells and not just one. Our full code is as follow.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> collectionView <span class=\"token operator\">=<\/span> scrollView <span class=\"token keyword\">as<\/span><span class=\"token operator\">?<\/span> <span class=\"token builtin\">UICollectionView<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">for<\/span> cell <span class=\"token keyword\">in<\/span> collectionView<span class=\"token punctuation\">.<\/span>visibleCells <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token builtin\">SectionCollectionViewCell<\/span><span class=\"token punctuation\">]<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token comment\">\/\/ Do something with the cell<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/3danimation-collectionviewcell.jpg","image_width":"2482","image_height":"1406","video":"","bookmark_id":"swift4-3d-animation-getting-the-collection-view-cell"},{"id":"10366","section_id":"120","order":"4","title":"Getting the Cell Frame","subhead":"","body":"<p>The road to getting the cell&rsquo;s <strong>frame<\/strong> is a little complex, but as far as I know, this is the only way I found. First, we need to get the <strong>indexPath<\/strong> from the cell using the <strong>collectionView<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> indexPath <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">indexPath<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> cell<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre><p>With the indexPath, we can get the cell attributes.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> attributes <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">layoutAttributesForItem<\/span><span class=\"token punctuation\">(<\/span>at<span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre><p>The cell attributes doesn&rsquo;t give us an accurate <strong>frame<\/strong> value of the cells when the scrolling happens. We&rsquo;ll need to convert those values to the <strong>view<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> cellFrame <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">convert<\/span><span class=\"token punctuation\">(<\/span>attributes<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">,<\/span> to<span class=\"token punctuation\">:<\/span> view<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-3d-animation-getting-the-cell-frame"},{"id":"10367","section_id":"120","order":"5","title":"Printing the Frame Values","subhead":"","body":"<p>Let&rsquo;s run the app and see what kind of values we get based on the scroll position. As you can see, we&rsquo;re getting the values we&rsquo;re looking for when we scroll the cards horizontally. <\/p><pre><code class=\"language-swift\"><span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span>cellFrame<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/3danimation-printingtheframevalues.mp4?dl=0","bookmark_id":"swift4-3d-animation-printing-the-frame-values"},{"id":"10368","section_id":"120","order":"6","title":"Cover Image Parallax","subhead":"","body":"<p>With the <strong>frame<\/strong> information, we can do so much. One of the simple things we can do is moving the X position of the Cover image found inside the cell using transform. Since we don&rsquo;t want it too fast, we&rsquo;ll divide <strong>origin.x<\/strong> by <strong>5<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> translationX <span class=\"token operator\">=<\/span> cellFrame<span class=\"token punctuation\">.<\/span>origin<span class=\"token punctuation\">.<\/span>x <span class=\"token operator\">\/<\/span> <span class=\"token number\">5<\/span><br>cell<span class=\"token punctuation\">.<\/span>coverImageView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>translationX<span class=\"token punctuation\">:<\/span> translationX<span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/3danimation-coverimageparallax.mp4?dl=0","bookmark_id":"swift4-3d-animation-cover-image-parallax"},{"id":"10369","section_id":"120","order":"7","title":"CATransform3D Rotate","subhead":"","body":"<p>Let&rsquo;s spice up the animation a little by using <strong>CATransform3D<\/strong>, which lets you add perspective to your transform, giving a 3 dimensional effect. This time, the transform will be applied to the <strong>layer<\/strong> of the object.<\/p><p>First, we&rsquo;re using the X position to convert that into the perspective degrees. The lower the number, the sharper the angle.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> angleFromX <span class=\"token operator\">=<\/span> <span class=\"token function\">Double<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">-<\/span>cellFrame<span class=\"token punctuation\">.<\/span>origin<span class=\"token punctuation\">.<\/span>x<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">\/<\/span> <span class=\"token number\">10<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> angle <span class=\"token operator\">=<\/span> <span class=\"token function\">CGFloat<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span>angleFromX <span class=\"token operator\">*<\/span> <span class=\"token builtin\">Double<\/span><span class=\"token punctuation\">.<\/span>pi<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">\/<\/span> <span class=\"token number\">180.0<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Let&rsquo;s customize the <strong>transform<\/strong> matrix values. It&rsquo;s pretty complex and not something I can explain, but if you wish to learn more, here&rsquo;s a pretty good <a href=\"http:\/\/www.thinkandbuild.it\/introduction-to-3d-drawing-in-core-animation-part-1\/\">post<\/a>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> transform <span class=\"token operator\">=<\/span> <span class=\"token builtin\">CATransform3DIdentity<\/span><br>transform<span class=\"token punctuation\">.<\/span>m34 <span class=\"token operator\">=<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">1.0<\/span><span class=\"token operator\">\/<\/span><span class=\"token number\">1000<\/span><br><\/code><\/pre><p>Finally, we&rsquo;re applying the angle and transform to <strong>CATransform3DRotate<\/strong>, which is basically like the normal <strong>rotate<\/strong>, but with perspective.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> rotation <span class=\"token operator\">=<\/span> <span class=\"token function\">CATransform3DRotate<\/span><span class=\"token punctuation\">(<\/span>transform<span class=\"token punctuation\">,<\/span> angle<span class=\"token punctuation\">,<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><br>cell<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> rotation<br><\/code><\/pre><p>This is the result so far. It looks almost identical to the official app.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/3danimation-catransform3drotate.mp4?dl=0","bookmark_id":"swift4-3d-animation-catransform3d-rotate"},{"id":"10370","section_id":"120","order":"8","title":"Adding CATransform3D Scale","subhead":"","body":"<p>We could stop here, but let&rsquo;s experiment a little with the 3D scale. You can create some really interesting effects. <\/p><p>Again, using the X position, we&rsquo;re creating a formula that translates well into scale. The goal is to get a value between <strong>0<\/strong> and <strong>1<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> scaleFromX <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token number\">1000<\/span> <span class=\"token operator\">-<\/span> <span class=\"token punctuation\">(<\/span>cellFrame<span class=\"token punctuation\">.<\/span>origin<span class=\"token punctuation\">.<\/span>x <span class=\"token operator\">-<\/span> <span class=\"token number\">200<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">\/<\/span> <span class=\"token number\">1000<\/span><br><\/code><\/pre><p>Then, we&rsquo;re making sure that there is a maximum and minimum scale by setting these conditions.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> scaleMax<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span> <span class=\"token operator\">=<\/span> <span class=\"token number\">1.0<\/span><br><span class=\"token keyword\">let<\/span> scaleMin<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span> <span class=\"token operator\">=<\/span> <span class=\"token number\">0.6<\/span><br><span class=\"token keyword\">if<\/span> scaleFromX <span class=\"token operator\">&gt;<\/span> scaleMax <span class=\"token punctuation\">{<\/span><br>    scaleFromX <span class=\"token operator\">=<\/span> scaleMax<br><span class=\"token punctuation\">}<\/span><br><span class=\"token keyword\">if<\/span> scaleFromX <span class=\"token operator\">&lt;<\/span> scaleMin <span class=\"token punctuation\">{<\/span><br>    scaleFromX <span class=\"token operator\">=<\/span> scaleMin<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Finally, we apply the 3D scale to our cell.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> scale <span class=\"token operator\">=<\/span> <span class=\"token function\">CATransform3DScale<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">CATransform3DIdentity<\/span><span class=\"token punctuation\">,<\/span> scaleFromX<span class=\"token punctuation\">,<\/span> scaleFromX<span class=\"token punctuation\">,<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span><br>cell<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> scale<br><\/code><\/pre><p>The result is much more pronounced in Landscape mode, so I recommend testing it in that mode. As with all these animations, you can definitely play with the numbers that match your specific need. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/3danimation-catransform3dscale.mp4?dl=0","bookmark_id":"swift4-3d-animation-adding-catransform3d-scale"},{"id":"10371","section_id":"120","order":"9","title":"Applying Both 3D Rotate and Scale","subhead":"","body":"<p>Since we want to apply both <strong>rotate<\/strong> and <strong>scale<\/strong> at the same time, we just need to use <strong>CATransform3DConcat<\/strong>.<\/p><pre><code class=\"language-swift\">cell<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">CATransform3DConcat<\/span><span class=\"token punctuation\">(<\/span>rotation<span class=\"token punctuation\">,<\/span> scale<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>We can remove this line because we&rsquo;ve replaced it.<\/p><pre><code class=\"language-swift\">cell<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> rotation <span class=\"token comment\">\/\/ remove or comment this line<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-3d-animation-applying-both-3d-rotate-and-scale"},{"id":"10372","section_id":"120","order":"10","title":"Fixing First Load","subhead":"","body":"<p>As you might have noticed, the rotation and scale don&rsquo;t apply until we start scrolling horizontally. That causes an issue where the animation jumps suddenly at the start. <\/p><p>To fix this, we need to create a function for the animation by only feeding the <strong>frame<\/strong> of the cell. Put this function after <strong>scrollViewDidScroll<\/strong> and name it <strong>animateCell<\/strong>. We&rsquo;re going to return the <strong>CATransform3D<\/strong> itself so that we can use that to apply to the cell. Move the animation code that starts with <strong>let angleFromX&#x2026;<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">animateCell<\/span><span class=\"token punctuation\">(<\/span>cellFrame<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGRect<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">CATransform3D<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token comment\">\/\/ Animation code<\/span><br><br>    <span class=\"token keyword\">return<\/span> <span class=\"token function\">CATransform3DConcat<\/span><span class=\"token punctuation\">(<\/span>rotation<span class=\"token punctuation\">,<\/span> scale<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>We&rsquo;re going to call the <strong>animateCell<\/strong> function from where we moved the code.<\/p><pre><code class=\"language-swift\">cell<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">animateCell<\/span><span class=\"token punctuation\">(<\/span>cellFrame<span class=\"token punctuation\">:<\/span> cellFrame<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/3danimation-fixingfirstload.jpg","image_width":"2484","image_height":"1404","video":"","bookmark_id":"swift4-3d-animation-fixing-first-load"},{"id":"10373","section_id":"120","order":"11","title":"Calling animateCell at Start","subhead":"","body":"<p>Thanks to the new <strong>animateCell<\/strong> function we made, we can call it as many times as we want to apply the 3D transform. It doesn&rsquo;t have to be solely attached to the scroll behavior. Again, to fix our issue at the start, we&rsquo;re going to call it from <strong>cellForItemAt<\/strong>.<\/p><pre><code class=\"language-swift\">cell<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">animateCell<\/span><span class=\"token punctuation\">(<\/span>cellFrame<span class=\"token punctuation\">:<\/span> cell<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/3danimation-animatecellatstart.jpg","image_width":"2482","image_height":"1404","video":"","bookmark_id":"swift4-3d-animation-calling-animatecell-at-start"},{"id":"10374","section_id":"120","order":"12","title":"Collection View Cell Spacing","subhead":"","body":"<p>Because of the 3D transforms, the spacing between each card is a little too wide, so we can fix it by changing the Collection View&rsquo;s <strong>Min Spacing<\/strong> <strong>For Lines<\/strong> to <strong>0<\/strong>. While we&rsquo;re at it, let&rsquo;s change the Section Insets to <strong>20<\/strong> for the <strong>Right<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/3danimation-collectionviewcellspacing.jpg","image_width":"2480","image_height":"1400","video":"","bookmark_id":"swift4-3d-animation-collection-view-cell-spacing"},{"id":"10375","section_id":"120","order":"13","title":"Conclusion","subhead":"","body":"<p><strong>CATransform3D<\/strong> is a fantastic way to take your animation to the next level. There is so much more to explore in term of using the matrix values and playing with <strong>rotate<\/strong>, <strong>scale<\/strong> and <strong>translate<\/strong>. Our final result is something that will leave quite an impression on our users.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/3danimation-conclusion.mp4?dl=0","bookmark_id":"swift4-3d-animation-conclusion"}]},{"id":"121","chapter_id":"3","order":"160","slug":"swift4-container-view","title":"Container View","caption":"Simplify your workflow child view controllers","body":"<p>Your View Controllers will get bloated as you keep adding new things over time. One of the ways to make separate the load and the logic is to create a Container View which contains a separate View Controller. Like this, it&rsquo;s easier to manage existing objects and apply new changes.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-container-view.jpg","video":"https:\/\/player.vimeo.com\/external\/249409302.hd.mp4?s=debda0f67eec5c6a6f950db28dabce8e164af0dc&profile_id=174","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-container-view.zip","contents":[{"id":"10463","section_id":"121","order":"1","title":"Downloads for Container View","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-3d-animation\">3D Animation<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/s5ri54hbyjw5dw2\/3.16.ContainerView.zip?dl=0\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-container-view-downloads-for-container-view"},{"id":"10464","section_id":"121","order":"2","title":"Create an Container View","subhead":"","body":"<p>In Storyboard, drag and drop a <strong>Container View<\/strong> from the Object Library. Set the constraints to <strong>0<\/strong> for <strong>top<\/strong>, <strong>right<\/strong> and <strong>left<\/strong>. Set the height to <strong>524<\/strong>. <\/p><p>At the bottom of the View Controller, you&rsquo;ll see another one floating below. Drag that to the right so that it becomes visible.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/containerview-createacontainerview.mp4?dl=0","bookmark_id":"swift4-container-view-create-an-container-view"},{"id":"10465","section_id":"121","order":"3","title":"New View Controller","subhead":"","body":"<p>The Container View creates a <strong>child<\/strong> View Controller that works exactly like any View Controller. The only difference is that it&rsquo;s now managed outside of the parent one.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-container-view-new-view-controller"},{"id":"10466","section_id":"121","order":"4","title":"Background View","subhead":"","body":"<p>Drag and drop a UIView to the new View Controller and set the constraints to <strong>0<\/strong> for <strong>top<\/strong>, <strong>right<\/strong>, <strong>bottom<\/strong> and <strong>left<\/strong>. Set the Background color to <strong>#323843<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-container-view-background-view"},{"id":"10467","section_id":"121","order":"5","title":"Collection View","subhead":"","body":"<p>For the Testimonials, we&rsquo;ll use the Collection View, which will allow us to scroll a bunch of cards horizontally. If you&rsquo;d like to learn more in detail about how to implement a Collection View, please head over to the <strong>Collection View<\/strong> section.<\/p><p>Let&rsquo;s drag and drop a Collection View. Set the constraints to <strong>top 50<\/strong>, <strong>right 0<\/strong>, <strong>left 0<\/strong> and <strong>height 235<\/strong>. Set the Background to <strong>Clear<\/strong>, Scroll Direction <strong>Horizontal<\/strong> and uncheck <strong>Show Horizontal Indictor<\/strong>.<\/p><p>In the Size Inspector, set the Cell Size to <strong>width 304<\/strong>, <strong>height 235<\/strong>, <strong>min spacing 20<\/strong>, <strong>line spacing 20<\/strong>, <strong>left 20<\/strong>, <strong>right 20<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/containerview-collectionview.mp4?dl=0","bookmark_id":"swift4-container-view-collection-view"},{"id":"10468","section_id":"121","order":"6","title":"Collection View Cell","subhead":"","body":"<p>Each reusable cell represents a testimonial. Let&rsquo;s select the Collection View Cell and go to the Size Inspector tom set the Size to <strong>Custom<\/strong>. Set the width to <strong>304<\/strong> and the height to <strong>235<\/strong>.<\/p><p>In the Attribute Inspector, set the Identifier to <strong>testimonialCell<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-container-view-collection-view-cell"},{"id":"10469","section_id":"121","order":"7","title":"Container with Drop Shadows","subhead":"","body":"<p>Drag and drop the first UIView and set the constraints to <strong>0<\/strong> to <strong>top<\/strong>, <strong>right<\/strong>, <strong>bottom<\/strong> and <strong>left<\/strong>. <\/p><p>Set the Runtime Attributes in the Identity Inspector to:<\/p><ul>\t<li><strong>layer.cornerRadius<\/strong>, Number, 14<\/li>\t<li><strong>layer.shadowOpacity<\/strong>, Number 0.25<\/li>\t<li><strong>layer.shadowOffset<\/strong>, Size, {0, 10}<\/li>\t<li><strong>layer.shadowRadius<\/strong>, Number, 20<\/li><\/ul>","image":"https:\/\/designcode.io\/cloud\/swift4\/containerview-containerdropshadows.jpg","image_width":"1652","image_height":"952","video":"","bookmark_id":"swift4-container-view-container-with-drop-shadows"},{"id":"10470","section_id":"121","order":"8","title":"Collection View and Cell Clip to Bounds","subhead":"","body":"<p>Drop shadows can be clipped by the <strong>Collection View<\/strong> and <strong>Cell<\/strong>, you&rsquo;ll need to uncheck <strong>Clip to Bounds<\/strong> on both of them.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/containerview-collectionviewcliptobounds.jpg","image_width":"2480","image_height":"1334","video":"","bookmark_id":"swift4-container-view-collection-view-and-cell-clip-to-bounds"},{"id":"10471","section_id":"121","order":"9","title":"Testimonial Text","subhead":"","body":"<p>Drag and drop a UILabel and set the constraints to <strong>top 20<\/strong>, <strong>right 20<\/strong>, <strong>left 54<\/strong>. Set the font to <strong>20 pt<\/strong>, <strong>Dark Gray<\/strong> and the number of lines to <strong>0<\/strong>, so that it can expand to multiple lines.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/containerview-testimonialtext.jpg","image_width":"1322","image_height":"592","video":"","bookmark_id":"swift4-container-view-testimonial-text"},{"id":"10472","section_id":"121","order":"10","title":"Quotes","subhead":"","body":"<p>For the beginning and end quote images, we&rsquo;ll go to Media Library and filter by typing quote.<\/p><p>Drag and drop <strong>Quote-Begin<\/strong> and set the constraint to <strong>top 20<\/strong>, <strong>left 16<\/strong>, <strong>width 23<\/strong>, <strong>height 18<\/strong>.<\/p><p>Then, drag and drop <strong>Quote-End<\/strong> and set the constraints to right 7, <strong>width 12<\/strong>, <strong>height 9<\/strong>. Because the quote has to follow the bottom end of the text, we&rsquo;ll have to use relative constraint by Control Dragging to the testimonial text label. Select <strong>Bottom<\/strong> so that it always anchors against the bottom of the label.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/containerview-quotes.mp4?dl=0","bookmark_id":"swift4-container-view-quotes"},{"id":"10473","section_id":"121","order":"11","title":"Person Labels","subhead":"","body":"<p>For the full name, we&apos;ll drag a UILabel and set to <strong>15 pt Medium<\/strong>, <strong>black<\/strong>. For the job description, drag another label at <strong>15 pt<\/strong>, <strong>Dark Gray<\/strong>. Select both labels and click on <strong>Embed in Stack<\/strong>. Then select the Stack View and set the constraints to <strong>right 20<\/strong>, <strong>bottom 14<\/strong>, <strong>left 54<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/containerview-person.mp4?dl=0","bookmark_id":"swift4-container-view-person-labels"},{"id":"10474","section_id":"121","order":"12","title":"Labels Content","subhead":"","body":"<p>Change the label texts to &#x201C;Design+Code is a wake-up call. Why should I learn a web based technology or a deprecated tool when the obvious choice is to learn Xcode?&#x201D;, &#x201C;Full name&#x201D;, &#x201C;Job&#x201D;. <\/p><p>Notice that when you set the testimonial text to multiple lines, the end quote follows the bottom of the text.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/containerview-labelscontent.mp4?dl=0","bookmark_id":"swift4-container-view-labels-content"},{"id":"10475","section_id":"121","order":"13","title":"Avatar","subhead":"","body":"<p>Drag and drop a UIImage. At first, it&rsquo;s a little big, so set the size to width 24, height 24 first. Drag it to the left of the person labels. Set the constraints to <strong>right 10<\/strong>, <strong>width 24<\/strong>, <strong>height 24<\/strong>. Finally, <strong>Control Drag<\/strong> to the Stack View in the Document Outline and select <strong>Center Vertically<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/containerview-avatar.mp4?dl=0","bookmark_id":"swift4-container-view-avatar"},{"id":"10476","section_id":"121","order":"14","title":"","subhead":"Avatar Rounded Corners","body":"<p>Go to the Identity Inspector and set the Runtime Attributes to <strong>layer.cornerRadius<\/strong>, <strong>Number<\/strong>, <strong>12<\/strong>, which is the width of the avatar divided by 2. Whenever you want to have rounded corners, make sure to enable <strong>Clip to Bounds<\/strong> in the Attributes Inspector.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/containerview-avatarcornerradius.mp4?dl=0","bookmark_id":"swift4-container-view-avatar-rounded-corners"},{"id":"10477","section_id":"121","order":"15","title":"Stats Stack View","subhead":"","body":"<p>These are similar to to the stats found at the top of the Home screen. We&rsquo;ll want to use Stack View and center it horizontally within the screen.<\/p><p>First, drag and drop a UILabel and set to <strong>30 pt Semibold<\/strong>, <strong>white<\/strong>. Second, drop a UILabel at <strong>15 pt<\/strong>, <strong>white<\/strong> with 50% opacity. Set their content to &#x201C;26,000 people&#x201D;, &#x201C;are learning from Design+Code&#x201D; respectively. Third, drag and drop a UIView and set the background color to <strong>#AF47B9<\/strong> and the Runtime Attributes to <strong>layer.cornerRadius<\/strong>, <strong>Number<\/strong>, <strong>1.5<\/strong>.<\/p><p>Finally, select all 3 elements and click on <strong>Embed in Stack<\/strong>. The Distribution should be <strong>Equal Centering<\/strong>. For the constraints, set the top to <strong>50<\/strong> and click <strong>Align<\/strong> to enable <strong>Horizontally in Container<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/containerview-statlabels.mp4?dl=0","bookmark_id":"swift4-container-view-stats-stack-view"},{"id":"10478","section_id":"121","order":"16","title":"Logos Stack View","subhead":"","body":"<p>From the Media Library, we&rsquo;re going to drag and drop <strong>Logo-Google<\/strong>, <strong>Logo-Apple<\/strong> and <strong>Logo-Stripe<\/strong>. Try to put them next to each other in a horizontal line. Then, select all 3 logos and click on <strong>Embed in Stack<\/strong> with the distribution set to <strong>Equal Centering<\/strong> and spacing set to <strong>50<\/strong>. The constraints should be bottom <strong>50<\/strong>, align <strong>Horizontally in Container<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/containerview-logosstackview.mp4?dl=0","bookmark_id":"swift4-container-view-logos-stack-view"},{"id":"10479","section_id":"121","order":"17","title":"Testimonial Class File","subhead":"","body":"<p>We&rsquo;ll need to create a Class file for the child View Controller. Go to the Project Navigator and right-click <strong>SectionViewController.swift<\/strong> and select <strong>New File&#x2026;<\/strong>. Select Cocoa Touch Class, type <strong>Testimonial<\/strong> in Class and make it a subclass of <strong>UIViewController<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/containerview-classfile.jpg","image_width":"2480","image_height":"1408","video":"","bookmark_id":"swift4-container-view-testimonial-class-file"},{"id":"10480","section_id":"121","order":"18","title":"Testimonial Collection View Cell Class","subhead":"","body":"<p>A Collection View Cell Class is also needed for each card used. Right-click <strong>TestimonialViewController.swift<\/strong> and select <strong>New File&#x2026;<\/strong>. Select Cocoa Touch, type <strong>Testimonial<\/strong>, subclass of <strong>UICollectionViewCell<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/containerview-testimonialcollectionviewcellclass.jpg","image_width":"1453","image_height":"1047","video":"","bookmark_id":"swift4-container-view-testimonial-collection-view-cell-class"},{"id":"10481","section_id":"121","order":"19","title":"Connect the Testimonial Class","subhead":"","body":"<p>Let&rsquo;s go back to the Storyboard and select the View Controller to set its Class to <strong>TestimonialViewController<\/strong> in the Identity Inspector.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/containerview-connectingtestimonialclass.jpg","image_width":"2482","image_height":"1404","video":"","bookmark_id":"swift4-container-view-connect-the-testimonial-class"},{"id":"10482","section_id":"121","order":"20","title":"Connect the Cell Class","subhead":"","body":"<p>Likewise, select the Collection View Cell and set its Class to <strong>TestimonialCollectionViewCell<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/connectionview-connectcellclass.jpg","image_width":"1368","image_height":"802","video":"","bookmark_id":"swift4-container-view-connect-the-cell-class"},{"id":"10483","section_id":"121","order":"21","title":"Collection View IBOutlet","subhead":"","body":"<p>We&rsquo;ll need to create IBOutlets for the items we want to modify, such as the testimonial <strong>text<\/strong>, <strong>name<\/strong>, <strong>job<\/strong>, <strong>avatar<\/strong> and the <strong>Collection View Cell<\/strong> itself. <\/p><p>Enable the Assistant Editor to show the Class file next to the Storyboard. Make sure to have <strong>Automatic<\/strong> on, so that it shows <strong>TestimonialViewController.swift<\/strong>. Control + drag the Collection View from the Document Outline and set the name to <strong>testimonial<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/containerview-collectionviewoutlet.jpg","image_width":"2480","image_height":"1402","video":"","bookmark_id":"swift4-container-view-collection-view-iboutlet"},{"id":"10484","section_id":"121","order":"22","title":"Collection View Cell IBOutlets","subhead":"","body":"<p>With the Project Navigator and Storyboard open, <strong>Option-click<\/strong> <strong>TestimonialCollectionViewCell.swift<\/strong>. This will automatically open the Class file in the Assistant Editor. This technique is especially useful when working with Cell Classes. <\/p><p>Let&rsquo;s drag and drop the <strong>text<\/strong>, <strong>name<\/strong>, <strong>job<\/strong> and <strong>avatar<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/containerview-celliboutlets.mp4?dl=0","bookmark_id":"swift4-container-view-collection-view-cell-iboutlets"},{"id":"10485","section_id":"121","order":"23","title":"Testimonial Data","subhead":"","body":"<p>Let&rsquo;s set up some a <strong>Dictionary<\/strong> for the Testimonial data. Paste this in <strong>Data.swift<\/strong>. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> testimonials <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Design+Code is a wake-up call. Why should I learn a web based technology or a deprecated tool when the obvious choice is to learn Xcode?&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;name&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Jean-Marc Denis&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;job&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Product Designer at Facebook&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;avatar&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;avatar-jean-marc&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;If you&apos;re comfortable with Framer, you can easily transfer your knowledge to Swift. You can animate pretty easily while building an app.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;name&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Min-Sang Choi&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;job&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Interaction Designer at Google&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;avatar&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;avatar-min-sang&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;First of all I am 12 years old, live in Britain and I just realised that all I want to do for the rest of my life is design amazing things. (Tom Fox won a scolarship for WWDC 2015)&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;name&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Tom Fox&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;job&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Student&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;avatar&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;avatar-tom-fox&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;As a developer, I really appreciated the chapters on Color Theory and Typography. It was just the right balance of theory combined with practical examples.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;name&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Chris Ching&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;job&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Teaches iOS Programming&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;avatar&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;avatar-chris-ching&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;I began a Swift learning plan 5 days ago, this is part of what I did in five days. I learned a lot from Meng To&apos;s Design+Code.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;name&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;MartinRGB&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;job&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Designer and Coder&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;avatar&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;avatar-martin-rgb&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Thanks to Design + Code, I just released my first app on the store: Sky Graph. It&apos;s been a great learning experience as a designer learning to code.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;name&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Wayne Sang&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;job&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Senior Product Manager at TWG&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;avatar&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;avatar-wayne-sang&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;I found and bought Design+Code by Meng To which takes you through each step of the process from design to code to app store submission.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;name&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Kenny Chen&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;job&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;User Experience Designer at Bankrate&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;avatar&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;avatar-kenny-chen&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Thanks to @MengTo, I was able to get a rough prototype of my first app working this weekend.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;name&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Andrew McCarthy&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;job&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Product Designer&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;avatar&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;avatar-andrew-mccarthy&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><br><span class=\"token punctuation\">]<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-container-view-testimonial-data"},{"id":"10486","section_id":"121","order":"24","title":"Setting Up Collection View","subhead":"","body":"<p>Once the Class files and IBOutlets are created, we&rsquo;re ready to configure the data source. In <strong>TestimonialViewController.swift<\/strong>, we&rsquo;re going to subclass <strong>UICollectionViewDelegate<\/strong> and <strong>UICollectionViewDataSource<\/strong> and set the necessary Collection View setup.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">TestimonialViewController<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionViewDelegate<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">UICollectionViewDataSource<\/span>  <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> numberOfItemsInSection section<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">return<\/span> testimonials<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span><br>    <span class=\"token punctuation\">}<\/span><br><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> cellForItemAt indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">UICollectionViewCell<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">dequeueReusableCell<\/span><span class=\"token punctuation\">(<\/span>withReuseIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;testimonialCell&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">return<\/span> cell<br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Don&rsquo;t forget to set the Collection View&rsquo;s <strong>delegate<\/strong> and <strong>dataSource<\/strong> to self in <strong>viewDidLoad<\/strong>.<\/p><pre><code class=\"language-swift\">testimonialCollectionView<span class=\"token punctuation\">.<\/span>delegate <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br>testimonialCollectionView<span class=\"token punctuation\">.<\/span>dataSource <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/containerview-settingupcollectionview.jpg","image_width":"2480","image_height":"1334","video":"","bookmark_id":"swift4-container-view-setting-up-collection-view"},{"id":"10487","section_id":"121","order":"25","title":"Cell Configuration","subhead":"","body":"<p>In order to populate the data to our cells, we&rsquo;ll need to specifically target <strong>TestimonialCollectionViewCell<\/strong>. Replace this line.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">dequeueReusableCell<\/span><span class=\"token punctuation\">(<\/span>withReuseIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;testimonialCell&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">TestimonialCollectionViewCell<\/span><br><\/code><\/pre><p>Then, we&rsquo;ll retrieve a single testimonial for each row.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> testimonial <span class=\"token operator\">=<\/span> testimonials<span class=\"token punctuation\">[<\/span>indexPath<span class=\"token punctuation\">.<\/span>row<span class=\"token punctuation\">]<\/span><br><\/code><\/pre><p>Finally, we can fill the correct IBOutlet with the appropriate data.<\/p><pre><code class=\"language-swift\">cell<span class=\"token punctuation\">.<\/span>textLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> testimonial<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">]<\/span><br>cell<span class=\"token punctuation\">.<\/span>nameLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> testimonial<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;name&quot;<\/span><span class=\"token punctuation\">]<\/span><br>cell<span class=\"token punctuation\">.<\/span>jobLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> testimonial<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;job&quot;<\/span><span class=\"token punctuation\">]<\/span><br>cell<span class=\"token punctuation\">.<\/span>avatarImageView<span class=\"token punctuation\">.<\/span>image <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImage<\/span><span class=\"token punctuation\">(<\/span>named<span class=\"token punctuation\">:<\/span> testimonial<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;avatar&quot;<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-container-view-cell-configuration"},{"id":"10488","section_id":"121","order":"26","title":"Conclusion","subhead":"","body":"<p>That was a long lesson that really put to test your ability to apply knowledge from past sections such as <strong>Collection View<\/strong>, <strong>Static Data<\/strong> and <strong>Storyboard<\/strong>. The more hours you spend repeating these steps, the more comfortable you&rsquo;ll get at implementing on your own. One of the things that really helped me get better is to execute already known lessons all by myself, using only my memory as the weapon. <\/p><p>The more we&rsquo;ll advance, the more you&rsquo;ll find that some of the steps are familiar. You should take it as a sign that you&rsquo;re improving.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-container-view-conclusion"}]},{"id":"122","chapter_id":"3","order":"170","slug":"swift4-passing-data","title":"Passing Data","caption":"Send data from one view controller to another","body":"<p>As you work with multiple View Controllers, you&rsquo;ll eventually want to pass data between them. This will in turn make your app more interactive and dynamic. For example, each time you press on a card, it&rsquo;ll show a screen filled with data specific to that article.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-passing-data.jpg","video":"https:\/\/player.vimeo.com\/external\/249849443.hd.mp4?s=285edde67f25946e4d56cdef2c2e270c5effdad4&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-passing-data.zip","contents":[{"id":"10545","section_id":"122","order":"1","title":"Downloads for Passing Data","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-container-view\">Container View<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/0xvqkpnuilyvmzw\/3.17.PassingData.zip?dl=0\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-passing-data-downloads-for-passing-data"},{"id":"10546","section_id":"122","order":"2","title":"Designing the Section Screen","subhead":"","body":"<p>We begin by applying the design in the Section View Controller in Storyboard. In summary, we need to create the <strong>title<\/strong>, <strong>caption<\/strong>, <strong>body<\/strong> text and <strong>cover<\/strong> image. In term of interactive items, we have a <strong>progress<\/strong> indicator in the top right and a <strong>close<\/strong> button on the top right.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-passing-data-designing-the-section-screen"},{"id":"10547","section_id":"122","order":"3","title":"Starting with Scroll View","subhead":"","body":"<p>Since the content will far exceed the screen height, we&rsquo;ll start with the Scroll View. Drag and drop a <strong>UIScrollView<\/strong> from the Object library. Set the constraints to <strong>top 0<\/strong>, <strong>right 0<\/strong>, <strong>bottom 0<\/strong>, <strong>left 0<\/strong>. Make sure that they&rsquo;re against the <strong>Superview<\/strong>.<\/p><p>There are 2 ways to do this. When you add new constraints, you can click on the down arrow to choose <strong>View<\/strong> instead. Or, You click on the parent View and uncheck <strong>Safe Area Layout Guide<\/strong>. Also, make sure that <strong>Constrain to Margin<\/strong> is disabled.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-startingwithscrollview.mp4?dl=0","bookmark_id":"swift4-passing-data-starting-with-scroll-view"},{"id":"10548","section_id":"122","order":"4","title":"Hero Container View","subhead":"","body":"<p>The Hero View isn&rsquo;t unlike the one in the Home screen. Let&rsquo;s drag and drop a <strong>UIView<\/strong> and set the constraints to <strong>top 0<\/strong>, <strong>right 0<\/strong>, <strong>bottom 500<\/strong>, <strong>left 0<\/strong> and <strong>height 420<\/strong>. It&rsquo;s also important to set the Align to <strong>Horizontally in Container<\/strong>, otherwise the Scroll View doesn&rsquo;t have a solid X position.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/passinddata-herocontainerview.mp4?dl=0","bookmark_id":"swift4-passing-data-hero-container-view"},{"id":"10549","section_id":"122","order":"5","title":"Background Cover Image","subhead":"","body":"<p>Drag and drop a <strong>UIImage<\/strong> and set its constraints to <strong>0<\/strong> on all sides: top, right, bottom and left. It&rsquo;s important to ensure that the object is inside the Hero View before applying the constraints. <\/p><p>The image should be configured to <strong>ios11<\/strong> with the Content Mode <strong>Aspect Fill<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-backgroundcoverimage.jpg","image_width":"1204","image_height":"646","video":"","bookmark_id":"swift4-passing-data-background-cover-image"},{"id":"10550","section_id":"122","order":"6","title":"Section Labels","subhead":"","body":"<p>Drag and drop a <strong>UILabel<\/strong> with the text &#x201C;Learn iOS 11 Design&#x201D; and set it to <strong>32 pt Semibold white<\/strong>. The constraints should be <strong>top 66<\/strong>, <strong>left 20<\/strong>, <strong>width 264<\/strong>. Set the number of lines to <strong>0<\/strong>.<\/p><p>Drag and drop a second <strong>UILabel<\/strong> with the text &#x201C;Learn colors, typography and layout for iOS&#x201D;, <strong>17 pt<\/strong>, <strong>80% white<\/strong> with the constraints <strong>bottom 30<\/strong>, <strong>left 20<\/strong>, <strong>width 264<\/strong>. Set the number of lines to <strong>0<\/strong> as well.<\/p><p>Drag and drop a third <strong>UILabel<\/strong>, but this time outside of the Hero View, right below it. Make the text to &#x201C;Three years ago Apple&#x2026;&#x201D;, <strong>19 pt Dark Gray<\/strong>. The constraints should be set to <strong>top 30<\/strong>, <strong>right 20<\/strong>, <strong>left 20<\/strong>. Again, the number of lines set to <strong>0<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-sectionlabels.mp4?dl=0","bookmark_id":"swift4-passing-data-section-labels"},{"id":"10551","section_id":"122","order":"7","title":"Progress Text Visual Effect View","subhead":"","body":"<p>The challenge with the progress text is that it&rsquo;s wrapped inside a Visual Effect View, which needs to grow if there is more text. <\/p><p>First, drag and drop a <strong>UIVisualEffectView<\/strong> with the Blur Style set to <strong>Dark<\/strong>. Set the constraints to <strong>top 20<\/strong>, <strong>left 20<\/strong>, <strong>height 36<\/strong>.<\/p><p>Then, drop a <strong>UILabel<\/strong> inside, set to &#x201C;1 \/ 12&#x201D;, <strong>15 pt Semibold<\/strong>, <strong>70% white<\/strong>. Set the Align to <strong>Horizontally in Container<\/strong> and <strong>Vertically in Container<\/strong>. <\/p><p>Here&rsquo;s the tricky part. Deselect everything by clicking outside and select the Visual Effect View and <strong>control drag<\/strong> to the label and click on <strong>Equal Widths<\/strong>. In the Size Inspector, double-click the <strong>Equal Width<\/strong> constraint and update the <strong>constant<\/strong> to <strong>20<\/strong>. This will add a 10 pt padding on the left and right. <\/p><p>As you can see from the video below, you the View changes its width depending on the text length. Pretty cool!<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-progresstext.mp4?dl=0","bookmark_id":"swift4-passing-data-progress-text-visual-effect-view"},{"id":"10552","section_id":"122","order":"8","title":"Progress Rounded Corners","subhead":"","body":"<p>Let&rsquo;s not forget to set the rounded corners. Select the Visual Effect View and add a new Runtime Attribute in the Identity Inspector: <strong>layer.cornerRadius<\/strong>, <strong>Number<\/strong>, <strong>12<\/strong>. In the Attribute Inspector, make sure to check <strong>Clip to Bounds<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-progressroundedcorners.jpg","image_width":"1324","image_height":"664","video":"","bookmark_id":"swift4-passing-data-progress-rounded-corners"},{"id":"10553","section_id":"122","order":"9","title":"Close Visual Effect View","subhead":"","body":"<p>What&rsquo;s particular with the Close button is that it won&rsquo;t move as you scroll. This simply means that we have to place it outside the <strong>UIScrollView<\/strong>. <\/p><p>In the Document Outside, collapse the Scroll View to make it easier to place an object outside of it. Then, drag and drop a Visual Effect View right below it. Be careful not to place it inside. The little circle should be on the <strong>left<\/strong> of the icon and not on the right.<\/p><p>Make the Blur Style to Dark. Set the constraints to <strong>top 20<\/strong>, <strong>right 20<\/strong>, <strong>width 36<\/strong>, <strong>height 36<\/strong> with <strong>Constrain to margins<\/strong> unchecked. To make the corners rounded, go to the Identity Inspector and add a Runtime Attribute: <strong>layer.cornerRadius<\/strong>, <strong>Number<\/strong>, <strong>12<\/strong>. Also, check the <strong>Clip to Bounds<\/strong> in the Attribute Inspector.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-closebuttonvisualeffect.mp4?dl=0","bookmark_id":"swift4-passing-data-close-visual-effect-view"},{"id":"10554","section_id":"122","order":"10","title":"Close Button","subhead":"","body":"<p>Drag and drop a <strong>UIButton<\/strong> inside the Visual Effect View and set its constraints to <strong>0<\/strong> for <strong>top<\/strong>, <strong>right<\/strong>, <strong>bottom<\/strong> and <strong>left<\/strong>. Set the text to nothing and the Image to <strong>Action-Close<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-closebutton.jpg","image_width":"1118","image_height":"630","video":"","bookmark_id":"swift4-passing-data-close-button"},{"id":"10555","section_id":"122","order":"11","title":"Connecting the Section&rsquo;s IBOutlets","subhead":"","body":"<p>Select the Section View Controller and enable the Assistant Editor with Automatic on, so that it detects <strong>SectionViewController.swift<\/strong>. <strong>Control drag<\/strong> the objects to the Class file to set the following IBOutlets and IBAction for the close button.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> titleLabel<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> captionLabel<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> coverImageView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIImageView<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> progressLabel<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> bodyLabel<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span><span class=\"token operator\">!<\/span><br><br><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">closeButtonTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-iboutlets.mp4?dl=0","bookmark_id":"swift4-passing-data-connecting-the-section-s-iboutlets"},{"id":"10556","section_id":"122","order":"12","title":"Section Data","subhead":"","body":"<p>In addition to the outlets, we need to declare the <strong>section<\/strong> data that we&rsquo;ll receive. Notice that we&rsquo;re using <strong>var<\/strong> because we&rsquo;re anticipating that the value will be changed when passed from Home. Type this code right below the IBOutlets.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> section<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre><p>Using that data, we can populate our objects in <strong>viewDidLoad<\/strong>. <\/p><pre><code class=\"language-swift\">titleLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> section<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">]<\/span><br>captionLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> section<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;caption&quot;<\/span><span class=\"token punctuation\">]<\/span><br>bodyLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> section<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">]<\/span><br>coverImageView<span class=\"token punctuation\">.<\/span>image <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImage<\/span><span class=\"token punctuation\">(<\/span>named<span class=\"token punctuation\">:<\/span> section<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-sectiondata.jpg","image_width":"2480","image_height":"1410","video":"","bookmark_id":"swift4-passing-data-section-data"},{"id":"10557","section_id":"122","order":"13","title":"Section Progress","subhead":"","body":"<p>In order to get the progress count, we&rsquo;ll need two things: 1) what is the current index and 2) how many sections there are. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> sections<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token punctuation\">[<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">!<\/span><br><span class=\"token keyword\">var<\/span> indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre><p>Let&rsquo;s use those two values to set the text for <strong>progressLabel<\/strong>. Since the <strong>indexPath.row<\/strong> starts with <strong>0<\/strong>, we&rsquo;ll have to add 1 to it.<\/p><pre><code class=\"language-swift\">progressLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;<span class=\"token interpolation\"><span class=\"token delimiter variable\">(<\/span>indexPath<span class=\"token punctuation\">.<\/span>row<span class=\"token operator\">+<\/span><span class=\"token number\">1<\/span><span class=\"token delimiter variable\">)<\/span><\/span> \/ <span class=\"token interpolation\"><span class=\"token delimiter variable\">(<\/span>sections<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span><span class=\"token delimiter variable\">)<\/span><\/span>&quot;<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-sectionprogress.jpg","image_width":"2484","image_height":"1408","video":"","bookmark_id":"swift4-passing-data-section-progress"},{"id":"10558","section_id":"122","order":"14","title":"Segue from Home to Section","subhead":"","body":"<p>In order to navigate and pass data from one screen to another, we need to create a segue between the two View Controllers. Go to the first View Controller and control drag the View Controller <strong>icon<\/strong> to the Section View Controller. Select <strong>Present Modally<\/strong>.<\/p><p>Then, select the Segue connection between them and change the name to <strong>HomeToSection<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-seguehometosection.mp4?dl=0","bookmark_id":"swift4-passing-data-segue-from-home-to-section"},{"id":"10559","section_id":"122","order":"15","title":"Calling the Segue from the Collection View Cell","subhead":"","body":"<p>Open your Project Navigator and go to <strong>ViewController.swift<\/strong>. Inside <strong>UICollectionViewDelegate<\/strong>, at the bottom, type <strong>didSelectItemAt<\/strong> to get its appropriate function from the autocompletion. <\/p><p>Then, do a <strong>performSegue<\/strong>. We&rsquo;re going to use the <strong>HomeToSection<\/strong> identifier that we set earlier. For the sender, we&rsquo;re going to send the <strong>indexPath<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> didSelectItemAt indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">performSegue<\/span><span class=\"token punctuation\">(<\/span>withIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;HomeToSection&quot;<\/span><span class=\"token punctuation\">,<\/span> sender<span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-callingtheseguefromcollectionview.jpg","image_width":"2484","image_height":"1412","video":"","bookmark_id":"swift4-passing-data-calling-the-segue-from-the-collection-view-cell"},{"id":"10560","section_id":"122","order":"16","title":"Prepare Segue","subhead":"","body":"<p>While the segue is performed, you can pass the sender and other types of data using <strong>prepare<\/strong>. Put this code after the <strong>viewDidLoad<\/strong> function. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">prepare<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">for<\/span> segue<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIStoryboardSegue<\/span><span class=\"token punctuation\">,<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Since you can have many segues, it&rsquo;s good practice to set a condition which identifies a specific segue first. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> segue<span class=\"token punctuation\">.<\/span>identifier <span class=\"token operator\">==<\/span> <span class=\"token string\">&quot;HomeToSection&quot;<\/span> <span class=\"token punctuation\">{<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In addition to identifier, the <strong>segue<\/strong> also holds the destination value, which gives us which <strong>View Controller<\/strong> it&rsquo;s connected to. We just need to specify <strong>SectionViewController<\/strong> in order to gain access to its objects.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> toViewController <span class=\"token operator\">=<\/span> segue<span class=\"token punctuation\">.<\/span>destination <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">SectionViewController<\/span><br><\/code><\/pre><p>When we called <strong>performSegue<\/strong>, we sent <strong>indexPath<\/strong> as the sender. With <strong>indexPath.row<\/strong>, we can get a specific <strong>section<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> indexPath <span class=\"token operator\">=<\/span> sender <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">IndexPath<\/span><br><span class=\"token keyword\">let<\/span> section <span class=\"token operator\">=<\/span> sections<span class=\"token punctuation\">[<\/span>indexPath<span class=\"token punctuation\">.<\/span>row<span class=\"token punctuation\">]<\/span><br><\/code><\/pre><p>Finally, we can send the 3 types of data that exist in <strong>SectionViewController<\/strong>.<\/p><pre><code class=\"language-swift\">toViewController<span class=\"token punctuation\">.<\/span>section <span class=\"token operator\">=<\/span> section<br>toViewController<span class=\"token punctuation\">.<\/span>sections <span class=\"token operator\">=<\/span> sections<br>toViewController<span class=\"token punctuation\">.<\/span>indexPath <span class=\"token operator\">=<\/span> indexPath<br><\/code><\/pre><p>Your code should look like this. If you run the app, you&rsquo;ll notice that the data is passed applied to the Section View Controller.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-preparesegue.jpg","image_width":"2484","image_height":"1354","video":"","bookmark_id":"swift4-passing-data-prepare-segue"},{"id":"10561","section_id":"122","order":"17","title":"Dismiss Section View Controller","subhead":"","body":"<p>The close button in the Section screen doesn&rsquo;t do anything for now. To make go back to Home, use the <strong>dismiss<\/strong> function in <strong>closeButtonTapped<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token function\">dismiss<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">,<\/span> completion<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-passing-data-dismiss-section-view-controller"},{"id":"10562","section_id":"122","order":"18","title":"Scroll View Content Insets","subhead":"","body":"<p>In the <strong>Section<\/strong> screen, you can fix extra spacing at the top of the Scroll View by going to the Storyboard, select Scroll View and set Content Insets to <strong>Never<\/strong> in the Size Inspector.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-scrollviewcontentinsets.jpg","image_width":"2486","image_height":"1282","video":"","bookmark_id":"swift4-passing-data-scroll-view-content-insets"},{"id":"10563","section_id":"122","order":"19","title":"Safe Area Fixes","subhead":"","body":"<p>In the Section screen, we set every constraints against the Superview or parent view. That won&rsquo;t look great on the iPhone X&rsquo;s landscape mode. To fix this, we must enable <strong>Safe Area Layout Guide<\/strong> on the Scroll View and Hero View in the Size Inspector. <\/p><p>Then, you must select the constraints and replace <strong>Superview<\/strong> by <strong>Safe Area<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-safearea.mp4?dl=0","bookmark_id":"swift4-passing-data-safe-area-fixes"},{"id":"10564","section_id":"122","order":"20","title":"Conclusion","subhead":"","body":"<p>Knowing how to transfer data from one screen to another can make your app a whole lot more interesting. You can build so many types of apps with this technique: blogs, photos, playlists, etc. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/passingdata-conclusion.mp4?dl=0","bookmark_id":"swift4-passing-data-conclusion"}]},{"id":"123","chapter_id":"3","order":"180","slug":"swift4-status-bar","title":"Status Bar","caption":"Mastering an element that is present in virtually every screen","body":"<p>The Status bar is ubiquitous on almost every screen. Having complete control over this piece of the puzzle is essential to giving a great user experience. It&rsquo;s important that the status bar is not in the way of the content. On a light background, it must be black and on a dark background, it must be white. Sometimes, when you&rsquo;re taking a photo or consuming medias, it&rsquo;s okay to hide it. You also have the option to animate it when a screen is loaded or dismissed.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-status-bar.jpg","video":"https:\/\/player.vimeo.com\/external\/249584181.hd.mp4?s=eacb5c696c00ff6c9bfab2ef8a7498e96b1bb0d2&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-status-bar.zip","contents":[{"id":"10672","section_id":"123","order":"1","title":"Downloads for Status Bar","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-passing-data\">Passing Data<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/2bqycicbpmqsrcb\/3.18.StatusBar.zip?dl=1\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-status-bar-downloads-for-status-bar"},{"id":"10673","section_id":"123","order":"2","title":"Optional: Use Safe Area","subhead":"","body":"<p>The first technique is to create a <strong>top constraint<\/strong> margin for the Scroll View using the <strong>Safe Area<\/strong>. Why the Safe Area? Because the status bar is <strong>40<\/strong> on the iPhone X and <strong>20<\/strong> on all the other iPhones. Safe Area will automatically make the distinction for you. Since the background is typically white, use the <strong>default<\/strong> bar style instead.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">var<\/span> preferredStatusBarStyle<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIStatusBarStyle<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token keyword\">default<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In Storyboard, select the Scroll View and go to the Size Inspector to double-click on the <strong>Top Space<\/strong> constraint. Set the Second Item to <strong>Safe Area<\/strong> instead and change the constant to <strong>0<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/statusbar-safearea.mp4?dl=0","bookmark_id":"swift4-status-bar-optional-use-safe-area"},{"id":"10674","section_id":"123","order":"3","title":"Optional: Use a Navigation Bar","subhead":"","body":"<p>One of the most common methods in managing the status bar is to use the Navigation Bar. This bar always sits on top of the content. Paired with a status bar, it will ensure that the text in the status bar has a background, making it legible at all times.<\/p><p>To create a Navigation Bar, click on the View Controller and go to <strong>Editor<\/strong>, <strong>Embed In<\/strong>, <strong>Navigation Controller<\/strong>. If you wish to learn more about the Navigation Bar, there is a full section on this.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/statusbar-navbar.mp4?dl=0","bookmark_id":"swift4-status-bar-optional-use-a-navigation-bar"},{"id":"10675","section_id":"123","order":"4","title":"Optional: Status Bar Blurred Background","subhead":"","body":"<p>Having a flat colored status bar background may be a bit boring, especially since Apple likes to use the blurred background for their status bar. <\/p><p>The issue with this technique is that it needs to be managed carefully since we&rsquo;re essentially adding a subview. For example, when switching to landscape mode the Status Bar needs to be updated. Also, make sure to run this only once, like from <strong>viewDidLoad<\/strong>. Otherwise, it will keep adding new subviews on top of each other.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">addBlurStatusBar<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> statusBarHeight <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UIApplication<\/span><span class=\"token punctuation\">.<\/span>shared<span class=\"token punctuation\">.<\/span>statusBarFrame<span class=\"token punctuation\">.<\/span>height<br>    <span class=\"token keyword\">let<\/span> blur <span class=\"token operator\">=<\/span> <span class=\"token function\">UIBlurEffect<\/span><span class=\"token punctuation\">(<\/span>style<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>dark<span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">let<\/span> blurStatusBar <span class=\"token operator\">=<\/span> <span class=\"token function\">UIVisualEffectView<\/span><span class=\"token punctuation\">(<\/span>frame<span class=\"token punctuation\">:<\/span> <span class=\"token function\">CGRect<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> width<span class=\"token punctuation\">:<\/span> view<span class=\"token punctuation\">.<\/span>bounds<span class=\"token punctuation\">.<\/span>width<span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> statusBarHeight<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br>    blurStatusBar<span class=\"token punctuation\">.<\/span>effect <span class=\"token operator\">=<\/span> blur<br>    view<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>blurStatusBar<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Call the <strong>addBlurStatusBar<\/strong> function from <strong>viewDidLoad<\/strong>. <\/p><pre><code class=\"language-swift\"><span class=\"token function\">addBlurStatusBar<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-status-bar-optional-status-bar-blurred-background"},{"id":"10676","section_id":"123","order":"5","title":"Light Status Bar","subhead":"","body":"<p>By default, the status bar is set to black, which is perfect for a white background. But since our Hero View in the Home screen has a background image, the light status bar will work better. To achieve this, use the following code in <strong>ViewController.swift<\/strong> right below <strong>viewDidLoad<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">var<\/span> preferredStatusBarStyle<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIStatusBarStyle<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">.<\/span>lightContent<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>The problem with this technique is that the status bar text won&rsquo;t be legible on a white background, so you&rsquo;ll have to rely on some scroll hacking.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/statusbar-lightstatusbar.jpg","image_width":"2032","image_height":"784","video":"","bookmark_id":"swift4-status-bar-light-status-bar"},{"id":"10677","section_id":"123","order":"6","title":"Adding a Status Bar Background","subhead":"","body":"<p>You can also add a status bar background color by adding the following function below <strong>viewDidLoad<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">setStatusBarBackgroundColor<\/span><span class=\"token punctuation\">(<\/span>color<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIColor<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">let<\/span> statusBar <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UIApplication<\/span><span class=\"token punctuation\">.<\/span>shared<span class=\"token punctuation\">.<\/span><span class=\"token function\">value<\/span><span class=\"token punctuation\">(<\/span>forKeyPath<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;statusBarWindow.statusBar&quot;<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">?<\/span> <span class=\"token builtin\">UIView<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">}<\/span><br>    statusBar<span class=\"token punctuation\">.<\/span>backgroundColor <span class=\"token operator\">=<\/span> color<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Then, you can call it from <strong>viewDidLoad<\/strong><\/p><pre><code class=\"language-swift\"><span class=\"token function\">setStatusBarBackgroundColor<\/span><span class=\"token punctuation\">(<\/span>color<span class=\"token punctuation\">:<\/span> #<span class=\"token function\">colorLiteral<\/span><span class=\"token punctuation\">(<\/span>red<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> green<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> blue<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> alpha<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.5<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/statusbar-statusbarbackground.jpg","image_width":"2473","image_height":"1273","video":"","bookmark_id":"swift4-status-bar-adding-a-status-bar-background"},{"id":"10678","section_id":"123","order":"7","title":"Hiding the Status Bar","subhead":"","body":"<p>When viewing a video or photo in full-screen mode, or when reading a book, it is sometimes appropriate to hide the status bar to let the user focus on the content without distraction. <\/p><p>In the <strong>SectionViewController.swift<\/strong>, write this code below <strong>viewDidLoad<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">var<\/span> prefersStatusBarHidden<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-status-bar-hiding-the-status-bar"},{"id":"10679","section_id":"123","order":"8","title":"Animating the Status Bar","subhead":"","body":"<p>The Status Bar can be animated in two ways: <strong>slide<\/strong> and <strong>fade<\/strong>. To make it happen, you must first declare a <strong>Bool<\/strong> so that we can set it in multiple places.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> isStatusBarHidden <span class=\"token operator\">=<\/span> <span class=\"token boolean\">false<\/span><br><\/code><\/pre><p>Type this function below <strong>viewDidLoad<\/strong> in order to update the status bar. We&rsquo;re also setting the type of animation to <strong>slide<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">var<\/span> prefersStatusBarHidden<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> isStatusBarHidden<br><span class=\"token punctuation\">}<\/span><br><br><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">var<\/span> preferredStatusBarUpdateAnimation<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIStatusBarAnimation<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">.<\/span>slide<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Then, we&rsquo;ll animate it in the <strong>prepare<\/strong> function, at the bottom.<\/p><pre><code class=\"language-swift\">isStatusBarHidden <span class=\"token operator\">=<\/span> <span class=\"token boolean\">true<\/span><br><span class=\"token builtin\">UIView<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span>withDuration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.5<\/span><span class=\"token punctuation\">,<\/span> animations<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">setNeedsStatusBarAppearanceUpdate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Finally, when we&rsquo;re coming back from the Section screen, we need to show the status bar again. Use <strong>viewWillAppear<\/strong>, since it runs before <strong>viewDidAppear<\/strong> and <strong>viewDidLoad<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewWillAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br>    isStatusBarHidden <span class=\"token operator\">=<\/span> <span class=\"token boolean\">false<\/span><br>    <span class=\"token builtin\">UIView<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span>withDuration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.5<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">setNeedsStatusBarAppearanceUpdate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/statusbar-animatingstatusbar.mp4?dl=0","bookmark_id":"swift4-status-bar-animating-the-status-bar"},{"id":"10680","section_id":"123","order":"9","title":"Conclusion","subhead":"","body":"<p>We&rsquo;ve looked at a bunch of different ways to modify the status bar depending on the layout and navigation. This should cover 90% of the use cases. Knowing how to master the status bar seems like a basic skill, but you&rsquo;d be surprised as to how many apps don&rsquo;t have that figured out. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-status-bar-conclusion"}]},{"id":"115","chapter_id":"3","order":"190","slug":"swift4-playground-storyboard","title":"Storyboard in Playground","caption":"A deeper look at Storyboard and the view hierarchy","body":"<p>Storyboards are the keystone of manageable user flows and getting to know how to layout, prototype and animate in them is fundamental for your development.<\/p><p>In this section, we are going to setup a Storyboard file inside a playground. In a later section, we will explore how to set basic constraints, make it work with code and animate it using all of the above.<\/p><p>This section will also extend some concepts of the <strong>Intro to Storyboard<\/strong> section and it may be advisable to review it.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-playground-storyboard.jpg","video":"https:\/\/player.vimeo.com\/external\/252360891.hd.mp4?s=caa49b3ac9b1ce6674ed3d19bbeb72a4da90405a&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-playground-storyboard.zip","contents":[{"id":"10565","section_id":"115","order":"1","title":"Disclaimer","subhead":"","body":"<p>This section uses an experimental technique. The errors you might encounter while performing this tutorial may be tied to the version of Xcode you are running. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-storyboard-disclaimer"},{"id":"10566","section_id":"115","order":"2","title":"Downloads for Storyboard in Playground","subhead":"","body":"<p>For completing this section, you will need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/3uvadfyjx2ecj94\/3.19.1.StoryboardInPlayground-Initial.zip?dl=1\">initial playground<\/a> that comes with the storyboard set. In the end, review the <a href=\"https:\/\/www.dropbox.com\/s\/2kpvd8pwz70fkqu\/3.19.2.StoryboardInPlayground-Final.zip?dl=1\">final playground<\/a> for comparison. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-storyboard-downloads-for-storyboard-in-playground"},{"id":"10567","section_id":"115","order":"3","title":"Card Controller","subhead":"","body":"<p>The initial playground file has been customized to have a Storyboard file linked to a custom <strong>UI View Controller<\/strong> children. By triggering <strong>Command+1<\/strong>, you will have access to all the inner files of this project.<\/p><p>Below the Sources folder, there is a <strong>Card Controller<\/strong> swift class file. Let&rsquo;s have a look:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">UIKit<\/span><br><br>open <span class=\"token keyword\">class<\/span> <span class=\"token class-name\">CardController<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewController<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">var<\/span> card <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIView<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">var<\/span> closeButton <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIButton<\/span><span class=\"token operator\">!<\/span><br><br>    <span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">var<\/span> cardConstraints <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">NSLayoutConstraint<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">!<\/span><br><br>    <span class=\"token atrule\">@IBAction<\/span> open <span class=\"token keyword\">func<\/span> tapCard <span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AnyObject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br>    <span class=\"token atrule\">@IBAction<\/span> open <span class=\"token keyword\">func<\/span> tapClose <span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AnyObject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This class is the one from which we are going to build our <strong>View Controller<\/strong> used in the interaction. It has <strong>outlets<\/strong> for the elements we are going to animate. It also has an <strong>outlet collection<\/strong> for some constraints we are going to use later. And it also has <strong>actions<\/strong> to enable user interaction.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/7yh7mq89byis14x\/storyboard-playground-01-card-controller.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-card-controller"},{"id":"10568","section_id":"115","order":"4","title":"XIB file","subhead":"","body":"<p>Below the <strong>Sources<\/strong> folder, there is a resources folder that contains the resources for the close button, the chapters screen, and the section cover image. This group also contains a file called <strong>View.xib<\/strong> in which we are going to place our views and set some constraints and actions. When opened it displays a view customized with a blue background. <\/p><p>You will also see that on the left side of it there is a drawer for three items: a file owner, a first responder, and a view. You are already familiar with views, but you might be confused about what is the file owner. Select the <strong>File Owner<\/strong> yellow cube and, using the <strong>Identity Inspector<\/strong> (Option + Command + 3) check out the value of <strong>Class<\/strong> under <strong>Custom Class<\/strong>.<\/p><p>Some outline items represent objects that otherwise would have no visual presence, being on the <strong>View Controller<\/strong>. Select the <strong>Connections Inspector<\/strong> (Option + Command + 6) and see that this object already treats the <strong>View<\/strong> as its own.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/qowbn2i3q5cp3ki\/storyboard-playground-02-xib.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-xib-file"},{"id":"10569","section_id":"115","order":"5","title":"View Controller","subhead":"","body":"<p>Let&rsquo;s go back to the actual playground and write some code to leverage what has already been set. Begin by creating a custom <strong>View Controller<\/strong> that draws from the functionality we have built on the <strong>Card View Controller<\/strong> with the following statements:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">ViewController<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CardController<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Then, set the storyboard to instantiate the view controller into the Storyboard Live View:<\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">PlaygroundPage<\/span><span class=\"token punctuation\">.<\/span>current<span class=\"token punctuation\">.<\/span>liveView <span class=\"token operator\">=<\/span> <span class=\"token function\">ViewController<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>And trigger the live view by selecting the <strong>Assistant Editor<\/strong> and selecting <strong>Live View<\/strong>. It will show a colored canvas with the <strong>View Controller<\/strong> we have just created. Nothing else to see for now.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/gt22ckw7yzsjkq5\/storyboard-playground-03-view-controller.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-view-controller"},{"id":"10570","section_id":"115","order":"6","title":"Loading the View","subhead":"","body":"<p>Now we are going to learn a little about what makes a storyboard file tick. Inside the <strong>View Controller<\/strong> class, set the following function:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">loadView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token builtin\">Bundle<\/span><span class=\"token punctuation\">.<\/span>main<span class=\"token punctuation\">.<\/span><span class=\"token function\">loadNibNamed<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;View&quot;<\/span><span class=\"token punctuation\">,<\/span> owner<span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> options<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This line is an explicit explanation of what an iOS app does under the hood when it launches. It creates a view controller and loads the view inside while also setting its properties and outlets.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/7l9pz93bkekgm3h\/storyboard-playground-04-loading-view.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-loading-the-view"},{"id":"10571","section_id":"115","order":"7","title":"Placing the elements in the view hierarchy","subhead":"","body":"<p>Views are like layers and folders at the same time as they have properties and may have children. If you use <a href=\"https:\/\/sketchapp.com\" title=\"Sketch - The digital design toolkit\">Sketch<\/a>, they correlate to a <strong>Symbol<\/strong> or an <strong>Artboard<\/strong>. If you use <a href=\"https:\/\/framer.com\" title=\"Framer - Interactive Screen Design Tool\">Framer<\/a>, they act like <strong>Layers<\/strong>. Let&rsquo;s go back to our <strong>View.xib<\/strong> file and place some elements.<\/p><p>Firstly, we might want to set a <strong>White Color<\/strong> for our background. Then, select the <strong>View<\/strong> and, under the <strong>Size Inspector<\/strong>, deactivate <strong>Safe Area Layout Guide<\/strong>. Also, lay the <strong>Chapter Screen.png<\/strong> centered inside. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/fhcs2gkgnfq0vxm\/storyboard-playground-05-placing-elements.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-placing-the-elements-in-the-view-hierarchy"},{"id":"10572","section_id":"115","order":"8","title":"Cover Image","subhead":"","body":"<p>Continue by also placing an <strong>Image View<\/strong> and using the <strong>Size Inspector<\/strong>, change the <strong>x 20<\/strong>, <strong>y 256<\/strong>, <strong>width 300<\/strong> and <strong>height 250<\/strong>. Under the <strong>Attribute Inspector<\/strong>, set the image field to be <strong>Cover.jpg<\/strong>, change the content mode to <strong>Aspect Fill<\/strong> so the image stays in ratio while also covering its dimensions and activate <strong>Clip to Bounds<\/strong>, so the image does not show outside of its bounds.<\/p><p>Using the <strong>Identity Inspector<\/strong>, set its label to <strong>Cover Image<\/strong> under the <strong>Document<\/strong> section.<\/p><p>As we are using an experimental technique, you should save the file using <strong>Command + S<\/strong> and close the playground. Then, reopen it and go back to the playground to see it show.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/2b1vh1u25m5xrab\/storyboard-playground-06-cover.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-cover-image"},{"id":"10573","section_id":"115","order":"9","title":"Building up the hierarchy","subhead":"","body":"<p>Let&rsquo;s examine the transition we are trying to replicate. Although it only has two states, we have to read and translate the layout precisely to constraints.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/lxup1gupmg4l9dh\/storyboard-playground-11-interaction.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-building-up-the-hierarchy"},{"id":"10574","section_id":"115","order":"10","title":"","subhead":"Object Library","body":"<p>The objective is to use the <strong>Object library<\/strong> to place some labels, buttons and views corresponding to the card, close button, title and subtitle.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/storyboard-playground-13-object-library.jpg","image_width":"1600","image_height":"900","video":"","bookmark_id":"swift4-playground-storyboard-object-library"},{"id":"10575","section_id":"115","order":"11","title":"","subhead":"Layout","body":"<p>In this part, we are going to translate the current layout into a constraint system layout that will help us build a multi-state interface that works on many screen sizes.<\/p><p>In this section, we encourage you to use the <strong>Add New Constraints<\/strong> dialog. It&rsquo;s a helper that makes it easy to create constraints simultaneously and helps avoid unwanted behavior in Xcode&rsquo;s automatic layout resolution.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/storyboard-playground-01-add-new-constraint.jpg","image_width":"1600","image_height":"900","video":"","bookmark_id":"swift4-playground-storyboard-layout"},{"id":"10576","section_id":"115","order":"12","title":"","subhead":"Card","body":"<p>Let&rsquo;s start by placing a <strong>View<\/strong> on top of the <strong>Cover Image<\/strong>. Select the <strong>Cover Image<\/strong> and trigger <strong>Editor &gt; Embed In &gt; View<\/strong> from the menu bar. Set its background color to <strong>White color<\/strong> and activate <strong>Clip To Bounds<\/strong>. Also, constrain it by <strong>left 20<\/strong>, <strong>top 256<\/strong>, <strong>width 300<\/strong> and <strong>height 250<\/strong>.<\/p><p>That is going to be our card and contain all of its subviews. Using the <strong>Identity Inspector<\/strong> set the label field to <strong>Card View<\/strong> and create a <strong>Runtime Attribute<\/strong> of <strong>layer.cornerRadius<\/strong> valued to the <strong>Number<\/strong> <strong>14<\/strong><\/p><p>Finish by moving the <strong>Cover Image<\/strong> to its center and constraining it to all sides.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/v18vs8v8y32egpf\/storyboard-playground-07-card.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-card"},{"id":"10577","section_id":"115","order":"13","title":"","subhead":"Title","body":"<p>Then we place the title using a Label. Filter for Label and place one under Card and edit its content to <strong>&#x201C;Storyboard in Playground&#x201D;<\/strong>. Change it to be a <strong>White Color<\/strong> <strong>32<\/strong> point <strong>System Font Bold<\/strong>. Also, set its number of lines to <strong>0<\/strong> so that it can resize itself.<\/p><p>Center it on the card and constrain it <strong>16<\/strong> points from the top, left and right. Let&rsquo;s name it <strong>Title<\/strong> in the <strong>Identity inspector<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/43wuxu9rljm6z6q\/storyboard-playground-08-title.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-title"},{"id":"10578","section_id":"115","order":"14","title":"","subhead":"Subtitle","body":"<p>Do the same for the subtitle. Filter for Label and place one under Card and edit its content to <strong>&#x201C;A deeper look at Storyboards and the view hierarchy&#x201D;<\/strong>. Change it to be a <strong>White Color<\/strong> <strong>17<\/strong> point <strong>System Font<\/strong>. Also, set its number of lines to <strong>0<\/strong> so that it can resize itself.<\/p><p>Center it on the card and constrain it <strong>16<\/strong> points from the bottom, left and right. Select its bottom constraint and, using the <strong>Size Inspector<\/strong>, set its relationship to the <strong>Cover Image<\/strong>.<\/p><p>Let&rsquo;s label it <strong>Subtitle<\/strong> on the <strong>Identity inspector<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/oh8klq5t8q9rxvi\/storyboard-playground-09-subtitle.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-subtitle"},{"id":"10579","section_id":"115","order":"15","title":"","subhead":"Close Button","body":"<p>Now, we place the button filtering <strong>Button<\/strong> on the <strong>Object library<\/strong>. Remove the text from it and constrain it at <strong>28<\/strong> points in width and height and <strong>&#xA0;20&#xA0;<\/strong> points from the right and top. Also, set its image to be <strong>Action-Close@2x.png<\/strong>. Don&rsquo;t forget to set its initial state to <strong>hidden<\/strong> under the <strong>&#xA0;Attributes inspector<\/strong>.<\/p><p>To make it more visible, let&rsquo;s set a background color of <strong>50% Black<\/strong> and, using the <strong>Identity Inspector<\/strong>, set a <strong>Runtime Attribute<\/strong> of <strong>layer.cornerRadius<\/strong> to the <strong>Number<\/strong> <strong>14<\/strong>. Also, set its label to <strong>Close Button<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/hcpk1pfhyphms4d\/storyboard-playground-10-close-button.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-close-button"},{"id":"10580","section_id":"115","order":"16","title":"Labeling Constraints","subhead":"","body":"<p>We have created a lot of constraints for out card view. When doing a complex layout, the <strong>Document Outline<\/strong> may get a little out of hand when we reach some 20 constraints. To help manage that we are going to label them for easy identification. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-storyboard-labeling-constraints"},{"id":"10581","section_id":"115","order":"17","title":"","subhead":"Card Layout Constraints","body":"<p>Let&rsquo;s begin by selecting the constraints for the top, leading, width and height of the <strong>&#xA0;Card View<\/strong> and changing their names to <strong>Card Layout Top<\/strong>, <strong>Card Layout Leading<\/strong>, <strong>Card Layout Width<\/strong>, and <strong>Card Layout Height<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/4ied82qm6gr5yzw\/storyboard-playground-12-card-layout.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-card-layout-constraints"},{"id":"10582","section_id":"115","order":"18","title":"","subhead":"Cover Image Constraints","body":"<p>Do that same process for the <strong>Cover Image<\/strong> constraints. Rename them to <strong>Cover Image Top<\/strong>, <strong>Cover Image Leading<\/strong>, <strong>Cover Image Trailing<\/strong>, and <strong>Cover Image Bottom<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/xczoj9rjsu59gpu\/storyboard-playground-13-cover-image.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-cover-image-constraints"},{"id":"10583","section_id":"115","order":"19","title":"Opening the card","subhead":"","body":"<p>Similarly to the last part, we are going to lay a couple of constraints that describe layout. Only this time, the full-screen layout. These new constraints are going live harmoniously amongst all the previous ones.<\/p><p>To make this possible, we are going to uninstall some of the constraints we already have, create new ones, decrease their priority and reinstall the uninstalled constraints. This process will help us build a conclusive layout using the minimum required information with no conflict.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-storyboard-opening-the-card"},{"id":"10584","section_id":"115","order":"20","title":"","subhead":"Fullscreen Card","body":"<p>Select all the <strong>Card Layout<\/strong> and <strong>Cover Image<\/strong> constraints and uninstall them simultaneously using the <strong>Attributes Inspector<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/spbqje695b3gn9w\/storyboard-playground-14-uninstall.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-fullscreen-card"},{"id":"10585","section_id":"115","order":"21","title":"","subhead":"Resize the Card","body":"<p>Resize the <strong>Card<\/strong> so it fills all the canvas size and set its constraints on top, bottom, leading and trailing to Superview. Prioritize them at <strong>999<\/strong> so they don&rsquo;t conflict with the constraints we just turned off. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/k1u3oqia3zcrnof\/storyboard-playground-15-resize.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-resize-the-card"},{"id":"10586","section_id":"115","order":"22","title":"","subhead":"Cover Image","body":"<p>Select the <strong>Cover Image<\/strong> and constrain it to <strong>420 height<\/strong>. Then edit this constraint to be <strong>Less Than or Equal<\/strong> to <strong>420<\/strong>.<\/p><p>The <strong>Cover image<\/strong> now grows vertically to as much as <strong>420<\/strong> when the card unfolds.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/en0gp1jkck9xale\/storyboard-playground-16-max-height.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-cover-image"},{"id":"10587","section_id":"115","order":"23","title":"","subhead":"Fitting","body":"<p>Then, simultaneously reinstall the leading, trailing and top constraints of the <strong>Cover image<\/strong>. Also, reinstall the bottom constraint, but first set its priority to <strong>998<\/strong>.<\/p><p>The <strong>Cover image<\/strong> now has the same size as the folded card without competing with other constraints such as its maximum height or its superview&apos;s height.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/bs3fhri7mj37cjr\/storyboard-playground-17-size-to-fit.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-fitting"},{"id":"10588","section_id":"115","order":"24","title":"","subhead":"The Switching States","body":"<p>To test how the layout works, we could try a neat trick. Installing and uninstalling the Interface Builder.<\/p><p>Select all the <strong>Card Layout<\/strong> constraints, and install and uninstall simultaneously using the <strong>Attributes Inspector<\/strong>. We can see how the layout is going to look at the two states of the animation.<\/p><p>Nice, right?<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/jy1n6n3h91twcl7\/storyboard-playground-18-switch.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-the-switching-states"},{"id":"10589","section_id":"115","order":"25","title":"Controller","subhead":"","body":"<p>We&rsquo;ve already established all we need for the animation to work. Now, we need to wire it to our controller.<\/p><p>Classes declared inside a playground file are not yet available to a <strong>.xib<\/strong> file inside a Playground. To work around this, we have already declared a subclass of UIViewController on a source file under the playground sources. It&rsquo;s the <strong>Card Controller<\/strong> we have already reviewed in the previous part.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">var<\/span> card <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIView<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">var<\/span> closeButton <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIButton<\/span><span class=\"token operator\">!<\/span><br><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">var<\/span> cardConstraints <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">NSLayoutConstraint<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">!<\/span><br><br><span class=\"token atrule\">@IBAction<\/span> open <span class=\"token keyword\">func<\/span> tapCard <span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AnyObject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><span class=\"token atrule\">@IBAction<\/span> open <span class=\"token keyword\">func<\/span> tapClose <span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AnyObject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This class is the open class from which we already derived our own. It&rsquo;s solely a bridge between the <strong>.xib<\/strong> file and the playground&rsquo;s main file. Apart from that, you might already know how to link elements to corresponding <strong>@IBOutlet<\/strong> and <strong>@IBAction<\/strong> statements. These statements are the hints Xcode uses to determine what variables and functions <strong>Interface Builder<\/strong> may set up.<\/p><p>Let&rsquo;s go back to the <strong>View.xib<\/strong> file and wire things up. In the <strong>Outline view<\/strong>, we already have the <strong>File&rsquo;s Owner<\/strong> set to be a <strong>Card Controller<\/strong>. Let&rsquo;s complete the required connections.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-storyboard-controller"},{"id":"10590","section_id":"115","order":"26","title":"","subhead":"Connections Inspector","body":"<p>Select the <strong>Connections Inspector<\/strong> with the <strong>File Owner<\/strong> selected. There should be a lot of connections, many of those placed by us.<\/p><p>Connect the <strong>card<\/strong>, <strong>closeButton<\/strong> and <strong>view<\/strong> to its corresponding counterparts on the <strong>Outline<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/ivaireroj8mz12w\/storyboard-playground-19-view-connections.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-connections-inspector"},{"id":"10591","section_id":"115","order":"27","title":"","subhead":"Outlet Collections","body":"<p>Under <strong>Outlet Collections<\/strong>, you will see there is a <strong>cardConstraints<\/strong>. This item is a special outlet for it can connect to many items. Connect it to all <strong>Card Layout<\/strong> constraints.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/m9gmvzkrkutbgww\/storyboard-playground-20-constraint-connection.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-outlet-collections"},{"id":"10592","section_id":"115","order":"28","title":"","subhead":"Close Button","body":"<p>Let&rsquo;s also connect our <strong>tapClose<\/strong> action to the <strong>Close Button<\/strong> on the <strong>Outline<\/strong> using the event <strong>Touch Up Inside<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/aeizc6o3aeoj2b4\/storyboard-playground-21-button-action.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-close-button"},{"id":"10593","section_id":"115","order":"29","title":"","subhead":"Tap Gesture","body":"<p>The last step is to go to the <strong>Object Library<\/strong> and filter on <strong>Tap Gesture Recognizer<\/strong>. Move it to the outline on top of the <strong>Card<\/strong> view. It should automatically be connected as a gesture recognizer to the <strong>Card<\/strong>. Also, connect its selector to the <strong>tapCard:<\/strong> action on <strong>File&rsquo;s Owner<\/strong>.<\/p><p>To have the playground acknowledge all the changes we have made to the <strong>View.xib<\/strong> file, save it and close the playground. Reopen it and go back to the playground&rsquo;s main file and trigger the <strong>Live View<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/orhbjjcfakcanzm\/storyboard-playground-22-tap-gesture.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-tap-gesture"},{"id":"10594","section_id":"115","order":"30","title":"Activating and Deactivating Constraints","subhead":"","body":"<p>We have everything from <strong>Card Controller<\/strong> file wired up to <strong>View.xib<\/strong>. <\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">Bundle<\/span><span class=\"token punctuation\">.<\/span>main<span class=\"token punctuation\">.<\/span><span class=\"token function\">loadNibNamed<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;View&quot;<\/span><span class=\"token punctuation\">,<\/span> owner<span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> options<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>As you may remember, upon loading the view from the <strong>View.xib<\/strong> file, we have it set as the <strong>File Owner<\/strong>. This will automatically give us access to the attributes such as <strong>card<\/strong>, <strong>closeButton<\/strong>, <strong>cardConstraints<\/strong>, and receive <strong>tapCard:<\/strong> and <strong>tapClose:<\/strong> actions.<\/p><p>The connections, view creation, and layout are what essentially happens under the hood when using <strong>Storyboards<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-storyboard-activating-and-deactivating-constraints"},{"id":"10595","section_id":"115","order":"31","title":"","subhead":"Overriding Functions","body":"<p>We&rsquo;ve already tested and proved that by installing and uninstalling certain constraints, we can switch between the closed and open state of the card. Now, we need to find a way to do just that on our view controller. A way to do it is to override the <strong>tapCard:<\/strong> and <strong>tapClose:<\/strong> function. Begin by setting their overrides inside the <strong>View Controller<\/strong> class:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">func<\/span> tapCard <span class=\"token punctuation\">(<\/span> sender <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AnyObject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br><span class=\"token punctuation\">}<\/span><br><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">func<\/span> tapClose <span class=\"token punctuation\">(<\/span> sender <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AnyObject<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-storyboard-overriding-functions"},{"id":"10596","section_id":"115","order":"32","title":"","subhead":"Opening","body":"<p>For it to unfold, the <strong>Card Layout Constraints<\/strong> have to be deactivated when the card is tapped. Symmetrically, we reactivate them to fold it back again. Luckily, we have already set a <strong>card constraints<\/strong> variable.<\/p><p>Deactivate them inside <strong>tapCard:<\/strong> like this:<\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">NSLayoutConstraint<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">deactivate<\/span><span class=\"token punctuation\">(<\/span>cardConstraints<span class=\"token punctuation\">)<\/span><br>closeButton<span class=\"token punctuation\">.<\/span>isHidden <span class=\"token operator\">=<\/span> <span class=\"token boolean\">false<\/span><br><\/code><\/pre><p>Activate them back again in <strong>tapClose<\/strong> like this:<\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">NSLayoutConstraint<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">activate<\/span><span class=\"token punctuation\">(<\/span>cardConstraints<span class=\"token punctuation\">)<\/span><br>closeButton<span class=\"token punctuation\">.<\/span>isHidden <span class=\"token operator\">=<\/span> <span class=\"token boolean\">true<\/span><br><\/code><\/pre><p>In this part, you can see that the <strong>View Controller<\/strong> will activate and deactivate the constraints that make the layout look like a card according to the action that was called while also showing and hiding the <strong>closeButton<\/strong>. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-storyboard-opening"},{"id":"10597","section_id":"115","order":"33","title":"","subhead":"Finer Details","body":"<p>Our interaction already opens and closes the card. Still, we have some layout inconsistencies while also doing the interaction with no animation. Let&rsquo;s fix that.<\/p><p>In the <strong>tapCard<\/strong> function we should animate like this:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> animator <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewPropertyAnimator<\/span><span class=\"token punctuation\">(<\/span>duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">,<\/span> dampingRatio<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>closeButton<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>opacity <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>card<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>card<span class=\"token punctuation\">.<\/span><span class=\"token function\">layoutIfNeeded<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><br>animator<span class=\"token punctuation\">.<\/span><span class=\"token function\">startAnimation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Symmetrically, let&rsquo;s do the opposite for <strong>tapClose<\/strong>:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> animator <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewPropertyAnimator<\/span><span class=\"token punctuation\">(<\/span>duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">,<\/span> dampingRatio<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>closeButton<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>opacity <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>card<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">14<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>card<span class=\"token punctuation\">.<\/span><span class=\"token function\">layoutIfNeeded<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><br>animator<span class=\"token punctuation\">.<\/span><span class=\"token function\">startAnimation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>This <strong>View Property Animator<\/strong> will interpolate all the values changes inside it. Additionally, when <strong>UI Kit<\/strong> tries to layout the card on <strong>layout if needed<\/strong>, it also animates the constraint changes.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-storyboard-finer-details"},{"id":"10598","section_id":"115","order":"34","title":"Conclusion","subhead":"","body":"<p>iOS and Xcode have a lot of untapped possibilities and functionalities, among those is the use of Storyboards in Playgrounds as a method of prototyping and learning about how the technology works.<\/p><p>In this section, we&rsquo;ve learned not only how to coordinate those two features together but also demystifies some of the allure behind how Interface Builder&rsquo;s Outlets and Actions work. We also saw how solving layouts and layout animations is part of Auto Layout functionality.<\/p><p>Don&rsquo;t forget to review the final playground and see if you can improve. There are countless ways to do the same layout, all with its potential and drawbacks.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/txo2m1iv58jgn9a\/storyboard-playground-23-interaction-complete.mp4?dl=0","bookmark_id":"swift4-playground-storyboard-conclusion"},{"id":"10599","section_id":"115","order":"35","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-playground-storyboard-credit"}]}]},{"id":"4","title":"Learn Xcode 9 Part 2","sections":[{"id":"125","chapter_id":"4","order":"9","slug":"swift4-tab-bar","title":"Tab Bar","caption":"Flat navigation using a bottom bar","body":"<p>The <strong>Tab Bar Controller<\/strong> is probably the one of most popular elements on any iOS app. It&rsquo;s the go-to way of displaying different aspects of the same content or unrelated functionality of the same app.<\/p><p>This interface is widely used by Apple on many of its stock apps like Music, Clock, Photos, Phone and Health.<\/p><p>In this section, we are going to learn about it as a UX pattern and how to apply and customize it on an app.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-tab-bar.jpg","video":"https:\/\/player.vimeo.com\/external\/252344768.hd.mp4?s=2b611f7767fa849b638e8ae92465da3f2c1224c2&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-tab-bar.zip","contents":[{"id":"12436","section_id":"125","order":"1","title":"Flat Navigation","subhead":"","body":"<p>Flat is the navigation paradigm that lets the user switch between a number of given context independent of order. Its inherent freedom and ease of use are the reasons it&rsquo;s widespread.<\/p><p>Being also the simplest navigation pattern, its key characteristic is free flow. It&rsquo;s built on the premise that the user is able to flow back and forth with no data loss or lock states.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Navigation%20bars.png","image_width":"1600","image_height":"1113","video":"","bookmark_id":"swift4-tab-bar-flat-navigation"},{"id":"12437","section_id":"125","order":"2","title":"Easy to Use","subhead":"","body":"<p>One main reason for choosing Tab Bar Navigation for your app is the convention behind it. Many of the most popular apps, these days, have it as their root navigation.<\/p><p>Among the examples of apps that converted to it is Airbnb. For many years, this app had used the sleekest of 3D animated hamburger menus. After being on the market for so long, it went back to basics on this.<\/p><p>The Tab Bar is easy to use and easy to place on your app because it leverages many iOS features and is widely recognized. For that reason, it&rsquo;s recommended to place the <strong>Tab Bar<\/strong> at the root of the navigation. This ensures high usability and behavior conformance with other apps.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/AirBnB.png","image_width":"1600","image_height":"1113","video":"","bookmark_id":"swift4-tab-bar-easy-to-use"},{"id":"12438","section_id":"125","order":"3","title":"Downloads for Tab Bar","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the final Xcode project from the <a href=\"https:\/\/designcode.io\/swift4-status-bar\">Status bar<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/jq5rqt10fbj6ri5\/4.01.2.TabBar-Project.zip?dl=1\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-tab-bar-downloads-for-tab-bar"},{"id":"12439","section_id":"125","order":"4","title":"Importing Assets","subhead":"","body":"<p>Before we begin, please download the <a href=\"https:\/\/www.dropbox.com\/s\/z58e1depecq3dev\/4.01.1.TabBar-Assets.zip?dl=1\" title=\"assets bundle\">assets bundle<\/a> that comes with the iconography and place-holding elements needed to set our layout. If you have knowledge on how to export assets from the Sketch file built on previous sections, feel free to do so. <\/p><p>On the project&rsquo;s outline, there is a file called <strong>Assets.xcassets<\/strong>. This file type is actually a folder that is interpreted in a symbolic fashion by Xcode. Drag and drop the assets bundle subfolders in its <strong>Outline<\/strong> so we have them accessible on <strong>Interface Builder<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-tab-bar-importing-assets"},{"id":"12440","section_id":"125","order":"5","title":"","subhead":"Namespacing Assets","body":"<p>A good way to organize your project is by using a convention called <strong>namespacing<\/strong>. You might already be familiar with it by coding some Swift. You may be familiar that the initials to all classes that are contained in <strong>UI Kit<\/strong> are <strong>UISomething<\/strong>.<\/p><p>In Xcode, we have the same functionality for the <strong>Asset Catalog<\/strong>. Select the 3 downloaded asset folders and then, at the <strong>Attributes Inspector<\/strong>, check <strong>Provides Namespace<\/strong>.<\/p><p>This will ensure that you can use the same asset name in different contexts and this feature may come in handy sooner than you think.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/ukod2n02c8rn7rn\/tabBar-nameSpacing.mp4?dl=0","bookmark_id":"swift4-tab-bar-namespacing-assets"},{"id":"12441","section_id":"125","order":"6","title":"","subhead":"Preparing Icons","body":"<p>A Tab Bar Item is the unit of both icon and labels you see in the Tab Bar. In the default Tab Bar, implementation all icons are tinted to your app&rsquo;s main color, which is the default color iOS blue.<\/p><p>In the Design+Code app, the design requires that the Tab Bar icons are displayed in full color. There are many ways to enable this, the simplest way is to configure the image assets.<\/p><p>For each assets folders, select all the images and edit their <strong>Render As<\/strong> to <strong>Original Image<\/strong> so they show in full RGBA. For the <strong>Resizing<\/strong> attribute, check the <strong>Preserve Vector Data<\/strong> so that it shows crisp vector drawing on any screen resolution. Finally, set the <strong>Scales<\/strong> attribute to <strong>Single Scale<\/strong> as vector drawing need no pixel density directive.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/pmr3ptxq2bqb1va\/tabBar-preparingIcons.mp4?dl=0","bookmark_id":"swift4-tab-bar-preparing-icons"},{"id":"12442","section_id":"125","order":"7","title":"Place-holding View Controllers","subhead":"","body":"<p>Before we place the Tab Bar, we need to create some place holding view controllers to act as the views we are going to develop further along.<\/p><p>In the <strong>Object Library<\/strong>, place beside the already present <strong>View Controller<\/strong> 4 additional View Controllers that are going to be worked on in the next sections according to this list.<\/p><ul>\t<li><strong>View Controller<\/strong> for <strong>Chapters<\/strong><\/li>\t<li><strong>Table View Controller<\/strong> for <strong>Bookmarks<\/strong><\/li>\t<li><strong>Table View Controller<\/strong> for <strong>Exercises<\/strong><\/li>\t<li><strong>View Controller<\/strong> for <strong>More<\/strong><\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/v4ryywzfsxryeg3\/tabBar-placeHolding.mp4?dl=0","bookmark_id":"swift4-tab-bar-place-holding-view-controllers"},{"id":"12443","section_id":"125","order":"8","title":"","subhead":"Placing the Tab Bar","body":"<p>To add a <strong>Tab Bar Controller<\/strong> to the Storyboard, select the 4 placeholders that we just created and the <strong>View Controller<\/strong>. Then, go to <strong>Editor<\/strong>, select <strong>Embed in<\/strong> and <strong>Tab Bar Controller<\/strong>. This will envelop all those scenes in a single <strong>Tab Bar Controller<\/strong>. Put the new <strong>Tab Bar Controller<\/strong> on top of the other controllers.<\/p><p>Don&rsquo;t forget to make the <strong>Tab Bar Controller<\/strong> the <strong>Initial View Controller<\/strong> in the <strong>Attributes Inspector<\/strong>. You may also use this <strong>Tab Bar Controller<\/strong> to customize the looks of the <strong>Tab Bar<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/u2lo8q0xlplezzo\/tabBar-placingTabBar.mp4?dl=0","bookmark_id":"swift4-tab-bar-placing-the-tab-bar"},{"id":"12444","section_id":"125","order":"9","title":"","subhead":"Coloring the Tab Bar","body":"<p>To style just like in the App, we are going to deselect the <strong>Translucent<\/strong> checkbox in the <strong>Attributes Inspector<\/strong> of the <strong>Tab Bar<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/g7q1h90ien3bret\/tabBar-coloringTabBar.mp4?dl=0","bookmark_id":"swift4-tab-bar-coloring-the-tab-bar"},{"id":"12445","section_id":"125","order":"10","title":"Optional: Code","subhead":"","body":"<p>Depending on your design, it may also be important to further customize the bar. This is possible using the <strong>Tab Bar&rsquo;s<\/strong> appearance upon launching your app.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">application<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> application<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIApplication<\/span><span class=\"token punctuation\">,<\/span> didFinishLaunchingWithOptions launchOptions<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token builtin\">UIApplicationLaunchOptionsKey<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Bool<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token builtin\">UITabBar<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">appearance<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span>barTintColor <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>black<br>    <span class=\"token builtin\">UITabBar<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">appearance<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span>tintColor <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>white<br>    <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In this code, we change the background color for all the Tab Bars to black and the tint of their text and icons to white.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-tab-bar-optional-code"},{"id":"12446","section_id":"125","order":"11","title":"","subhead":"Bar Items","body":"<p>To customize the looks of each item, you should use the <strong>Tab Bar Item<\/strong> inside each <strong>View Controller<\/strong>.<\/p><p>In the System Item field, there are preset styles used in various iOS Stock Apps. For this project, we are going to use the provided icons for the Design+Code app. Select and change the items images by typing the image name for each bar item.<\/p><p><strong>Home View Controller<\/strong>:<br>Selected image: Tab Bar\/home-active<br>Title: Home<br>Image: Tab Bar\/home<\/p><p><strong>Chapters View Controller<\/strong>:<br>Selected image: Tab Bar\/chapters-active<br>Title: Chapters<br>Image: Tab Bar\/chapters<\/p><p><strong>Bookmarks Table View Controller<\/strong>:<br>Selected image: Tab Bar\/bookmarks-active<br>Title: Bookmarks<br>Image: Tab Bar\/bookmarks<\/p><p><strong>Exercises Table View Controller<\/strong>:<br>Selected image: Tab Bar\/exercises-active<br>Title: Exercises<br>Image: Tab Bar\/exercises<\/p><p><strong>More View Controller<\/strong>:<br>Selected image: Tab Bar\/more-active<br>Title: More<br>Image: Tab Bar\/more<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/27karg5s8l5gj6s\/tabBar-barItems.mp4?dl=0","bookmark_id":"swift4-tab-bar-bar-items"},{"id":"12447","section_id":"125","order":"12","title":"","subhead":"Reordering Items","body":"<p>As the items are probably in the wrong order, in the Tab Bar Controller, re-order the items by <strong>Drag and drop<\/strong>. From left to right, it should be: Home, Chapters, Bookmarks, Exercises and More.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-tab-bar-reordering-items"},{"id":"12448","section_id":"125","order":"13","title":"More Scene","subhead":"","body":"<p>By now, the project already provides access to the root interfaces that are going to build the experience. Now, it is required that we continue populating them piece by piece. In this part, we are going to build upon the <strong>More Scene<\/strong> that has an inner <strong>Dialog View<\/strong>. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-tab-bar-more-scene"},{"id":"12449","section_id":"125","order":"14","title":"","subhead":"Card Scrolling","body":"<p>The <strong>More Scene<\/strong> is composed of a self-sized card view that moves inside a <strong>Scroll View<\/strong>. Let&rsquo;s start by opening the <strong>Document Outline<\/strong>, select the More View and uncheck <strong>Safe Area Layout Guide<\/strong>. Then, place a <strong>Scroll View<\/strong> inside the More View from the <strong>Object Library<\/strong>. Put constraints to <strong>20 top<\/strong> and <strong>0 for the rest<\/strong>. Don&rsquo;t forget to uncheck <strong>Constraints to margins<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/o7ogin3vfesp2px\/tabBar-cardScrolling.mp4?dl=0","bookmark_id":"swift4-tab-bar-card-scrolling"},{"id":"12450","section_id":"125","order":"15","title":"","subhead":"Dialog Inside","body":"<p>The <strong>Dialog View<\/strong> is going to float inside the <strong>Scroll View<\/strong>. Using the <strong>Object Library<\/strong>, place a view inside it and change the background color to <strong>Default<\/strong>. Proceed by constraining it to <strong>20<\/strong> points on every side. <\/p><p>So as to have rounded corners, turn on <strong>Clip to Bounds<\/strong> in the <strong>Attributes Inspector<\/strong>. Also, using the <strong>Identity Inspector<\/strong>, add a <strong>Runtime Attribute<\/strong> of <strong>layer.cornerRadius<\/strong> to the <strong>Number<\/strong> <strong>14<\/strong>.<\/p><p>To make it easy to identify this element, set the <strong>Label<\/strong> field under <strong>Document<\/strong> to <strong>Dialog View<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/skms3rq38wo9wkk\/tabBar-dialogInside.mp4?dl=0","bookmark_id":"swift4-tab-bar-dialog-inside"},{"id":"12451","section_id":"125","order":"16","title":"","subhead":"Self-sizing","body":"<p>By now, your view must be presenting red constrain elements for sizing. This is an issue that leads to an underlying lesson. A <strong>Scroll View<\/strong> does not know how to move its inner elements, it is up to them to describe in which direction to scroll by sizing themselves bigger than their container. These criteria have not been met because the <strong>Dialog View<\/strong> sizes itself in relation to the <strong>Scroll View<\/strong>.<\/p><p><strong>Auto Layout<\/strong> solves constraints by finding minimal situations in which all the criteria can be met. Let&rsquo;s include yet another view inside this <strong>Dialog View<\/strong> to guide the system.<\/p><p>In the <strong>Identity Inspector<\/strong> or <strong>Document Outline<\/strong>, label this view <strong>Sizing View<\/strong>. Using the <strong>Add New Constraints<\/strong>, place constraint on all sides to <strong>0<\/strong> points to its parent, the <strong>Dialog View<\/strong>. Then, center it horizontally to the <strong>Scroll View<\/strong>. And finally, constrain its height to <strong>680<\/strong> points.<\/p><p>Using the <strong>Attributes Inspector<\/strong>, set its background color to an <strong>F0F3F5<\/strong> blue color.<\/p><p>This gives <strong>Auto Layout<\/strong> enough information to infer the sizing and scrolling of elements. Later on, we will deactivate this constraint and have the inner elements fulfill this need.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/002lr35fnnd1lxa\/tabBar-selfSizing.mp4?dl=0","bookmark_id":"swift4-tab-bar-self-sizing"},{"id":"12452","section_id":"125","order":"17","title":"","subhead":"My Progress Label","body":"<p>From the <strong>Object Library<\/strong>, add a label near the top and name it <strong>MY PROGRESS<\/strong>. The progress element is made of a <strong>Black 50%<\/strong>, <strong>15<\/strong> point <strong>Semibold System Font<\/strong> label placed <strong>20<\/strong> points from the top of the <strong>Sizing View<\/strong>. Constrain it to the <strong>Sizing View<\/strong> with <strong>&#xA0;Control + drag<\/strong> and choose <strong>Center Horizontally in Container<\/strong>. It should suffice to constrain it from the top and to the center.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/aus696m7jbfsj7z\/tabBar-progressLabel.mp4?dl=0","bookmark_id":"swift4-tab-bar-my-progress-label"},{"id":"12453","section_id":"125","order":"18","title":"","subhead":"Progress Placeholders","body":"<p>Let&rsquo;s also put some placeholders for the <strong>Progress Rings<\/strong>, to which we are going to dedicate a whole section further on. Using the <strong>Object Library<\/strong>, place an <strong>Image View<\/strong> below the label and resize it a 70 point square in the <strong>Size Inspector<\/strong>. Then, constrain its width and height using the <strong>Add New Constraints<\/strong>.<\/p><p>Continue by triggering <strong>Embed In Stack<\/strong> and constrain this stack from the sides to <strong>20<\/strong> points and from the top nearest neighbor to <strong>8<\/strong> points. Using the <strong>Attributes Inspector<\/strong>, set its axis to <strong>Horizontal<\/strong> and its distribution to <strong>Equal Spacing<\/strong>.<\/p><p>Then, you just need to <strong>Copy and Paste<\/strong> it to have <strong>3<\/strong> elements inside the stack, which is going to size itself vertically accordingly. The image elements should be the placeholder rings provided in the <strong>assets bundle<\/strong>: Placeholder\/image-ring-1, Placeholder\/image-ring-2 and Placeholder\/image-ring-3.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/vqtu5mykvhduj8q\/tabBar-3Rings.mp4?dl=0","bookmark_id":"swift4-tab-bar-progress-placeholders"},{"id":"12454","section_id":"125","order":"19","title":"","subhead":"Action Button","body":"<p>The <strong>More Scene<\/strong> has 6 default action buttons. Place a <strong>Button<\/strong> element using the <strong>Object Library<\/strong>, customizing it with the <strong>More\/logo<\/strong> image and labeling it <strong>Login<\/strong>. Then, style the attributed text to a <strong>Dark Gray Color<\/strong> <strong>17<\/strong> point <strong>Semibold<\/strong> <strong>System Font<\/strong>.<\/p><p>To distance the inner elements of a given button, you may use the <strong>Size Inspector<\/strong> to adjust insets. In this button template, we are going to use a <strong>16<\/strong> point left inset for the content and a <strong>7<\/strong> point left inset for the title. Also, set the control alignment to left and its background color to <strong>White Color<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-tab-bar-action-button"},{"id":"12455","section_id":"125","order":"20","title":"More Action","subhead":"","body":"<p>The element we have just set is the template for all the actions. Push it under a stack by triggering <strong>Embed In Stack<\/strong>. Then, constrain the stack to <strong>0<\/strong> points to the left and right side, <strong>20<\/strong> points to the top nearest neighbor and to <strong>360<\/strong> of height. The stack should also be on the <strong>Vertical<\/strong> axis, on a <strong>Fill Equally<\/strong> distribution, and have a spacing of <strong>1<\/strong> point.<\/p><p>Finally, duplicate the button element until you reach 6 elements and customize name and image accordingly using the assets provided for:<\/p><p>Title: Login<br>Image: More\/logo<\/p><p>Title: Updates<br>Image: More\/info<\/p><p>Title: Read on Safari<br>Image: More\/safari<\/p><p>Title: Community<br>Image: More\/community<\/p><p>Title: Email Support<br>Image: More\/email<\/p><p>Title: Ambience<br>Image: More\/ambience<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/20733e6bzueqhrz\/tabBar-moreAction.mp4?dl=0","bookmark_id":"swift4-tab-bar-more-action"},{"id":"12456","section_id":"125","order":"21","title":"","subhead":"Epilogue","body":"<p>This element is a <strong>Label<\/strong> placed below the actions. If it gets difficult to reach elements in a small scene, you can always select the scene and set its simulated height using the <strong>Size Inspector<\/strong> under <strong>Freeform<\/strong>. A value that may be suitable is <strong>800<\/strong> points.<\/p><p>Place a <strong>Label<\/strong> element for the epilogue right below the <strong>Actions<\/strong> stack, center it horizontally and constrain it in width to <strong>170<\/strong> points and <strong>34<\/strong> points from the top nearest neighbor. The content of this epilogue on the app is <strong>Only made possible with your kind support. Thank you.<\/strong> Then, center its text and style it to <strong>System Font Italic<\/strong> <strong>15<\/strong> points in size, colored <strong>50<\/strong> percent <strong>Black Color<\/strong>. It should also be set to have <strong>0<\/strong> lines, simply put, decide how many lines it should have on its own. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/plgg7twv6b92v5y\/tabBar-epilogue.mp4?dl=0","bookmark_id":"swift4-tab-bar-epilogue"},{"id":"12457","section_id":"125","order":"22","title":"","subhead":"Twitter Button","body":"<p>The <strong>Twitter<\/strong> label should be an imaged <strong>Button<\/strong> just like the actions. Place a <strong>Button<\/strong> from the <strong>Object Library<\/strong> and style it to a <strong>10<\/strong> percent, <strong>Black Color<\/strong>, <strong>18<\/strong> point <strong>System Font<\/strong>.<\/p><p>Also, constrain it to the horizontal center with <strong>170<\/strong> of width and <strong>15<\/strong> points to the top nearest neighbor.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-tab-bar-twitter-button"},{"id":"12458","section_id":"125","order":"23","title":"","subhead":"Implicit Stack","body":"<p>To finish this layout, select the <strong>Twitter Button<\/strong> and, triggering the <strong>Add New Constraints<\/strong> dialog, apply the suggested constraint value for the bottom.<\/p><p>By now, you might have guessed that every element inside this <strong>Sizing View<\/strong> is able to position and size itself according to their parent and neighbors. This would correctly suggest that the height constraint for the <strong>Sizing View<\/strong> is no longer required.<\/p><p>Using the <strong>Outline View<\/strong>, select this constraint and uncheck <strong>Installed<\/strong> using the <strong>Size Inspector<\/strong>. No constraint should be marked red, indicating that <strong>Auto Layout<\/strong> has sufficient information to place and size all elements.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-tab-bar-implicit-stack"},{"id":"12459","section_id":"125","order":"24","title":"Conclusion","subhead":"","body":"<p>Also known as Bottom Navigation, the Tab Bar may be used to segregate content, advertise functionality, notify information, situate navigation, and much more. This is the stepping stone needed to access all other interfaces we are going to build forward.<\/p><p>The simplest way of building navigation on iOS is also the most recognizable. Don&rsquo;t be afraid to use it in your app and reap its benefit.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-tab-bar-conclusion"},{"id":"12460","section_id":"125","order":"25","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-tab-bar-credit"}]},{"id":"124","chapter_id":"4","order":"10","slug":"swift4-navigation-bar","title":"Navigation Bar","caption":"The anchor of the layout","body":"<p>Of the many ways of building navigation in iOS, there are a few stock options that come with a lot of convenience and built-in functionality. Among those is the Navigation Controller.<\/p><p>Although fundamental to most of the apps, the Navigation Controller is almost invisible apart form its bar.<\/p><p>In this section, we are going to learn about it as a UX pattern and how to apply and customize it on an app.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-navigation-bar.jpg","video":"https:\/\/player.vimeo.com\/external\/252597943.hd.mp4?s=594b30ed95a81b828594b90b3fec8b74701a496a&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-navigation-bar.zip","contents":[{"id":"10973","section_id":"124","order":"1","title":"Stack Navigation","subhead":"","body":"<p>The Navigation Controller is the iOS idiom to ordered navigation, meaning that it is usually use for nesting and sequences.<\/p><p>Its most notable appearances are in Notes and Files. In these cases, the Navigation Controller is mostly used to traverse through folders, artists, albums and playlists.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Shalow.png","image_width":"1600","image_height":"1113","video":"","bookmark_id":"swift4-navigation-bar-stack-navigation"},{"id":"10974","section_id":"124","order":"2","title":"User Experience Navigation","subhead":"","body":"<p>In another context like Apple Music, you can see it being used to locate and listen to songs through artists, albums and playlists. Still, it can also be used to navigate in an orderly but not predetermined fashion when you go from a playlist to the album of a song.<\/p><p>Hierarchical or Stack Navigation doesn&rsquo;t have to be tied to content or data. Another common way to use it is for step-by-step sequence like sign-ups and forms where it guides and helps users though a flow.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Deep%20navigation.png","image_width":"1600","image_height":"1113","video":"","bookmark_id":"swift4-navigation-bar-user-experience-navigation"},{"id":"10975","section_id":"124","order":"3","title":"Navigation Bar Styles","subhead":"","body":"<p>The Navigation Bar is one of the many hints that there is a Navigation Controller behind the scenes. It is mainly used in iOS as the primary way to situate the user of the context they are using.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Navigation%20bars.png","image_width":"1600","image_height":"1113","video":"","bookmark_id":"swift4-navigation-bar-navigation-bar-styles"},{"id":"10976","section_id":"124","order":"4","title":"Downloads for Navigation Bar","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-tab-bar\">Tab Bar<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/hbkdtdw7jh1093c\/4.02.NavigationBar.zip?dl=1\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-navigation-bar-downloads-for-navigation-bar"},{"id":"10977","section_id":"124","order":"5","title":"Embed Navigation Bar in Storyboard","subhead":"","body":"<p>The usual way to enable the navigation bar in a Storyboard Scene is to use the <strong>Editor &gt; Embed In<\/strong>, <strong>Navigation Controller<\/strong> menu option on Xcode Interface Builder. Apart from embedding the selected View Controller in a new Navigation Controller, it also directs all the segues that go to the View Controller to the parent Navigation.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/hhqy1a0iw4m2v8o\/NavBar-EmbedNavBar.mp4?dl=0","bookmark_id":"swift4-navigation-bar-embed-navigation-bar-in-storyboard"},{"id":"10978","section_id":"124","order":"6","title":"","subhead":"Optional: Navigation Bar in Code","body":"<p>Many apps display the Navigation Bar on the interface without leveraging the functionality of the Navigation Controller. This is not really uncommon although it is possible to enable it and customize it separately using code.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewDidLoad<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidLoad<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token comment\">\/\/ Don&apos;t forget to lay constraints to the Navigation Bar<\/span><br>    <span class=\"token keyword\">let<\/span> navigationBar <span class=\"token operator\">=<\/span> <span class=\"token function\">UINavigationBar<\/span><span class=\"token punctuation\">(<\/span>frame<span class=\"token punctuation\">:<\/span> frame<span class=\"token punctuation\">)<\/span><br>    view<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>navigationBar<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In this piece of code, a Navigation Bar is added to it while the view is loaded.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-navigation-bar-optional-navigation-bar-in-code"},{"id":"10979","section_id":"124","order":"7","title":"Navigation Bar In Home","subhead":"","body":"<p>You may style the navigation bar itself, as you do so the styling will apply to all the views that share the same navigation controller.<\/p><p>Styling the navigation bar should be done on the <strong>Attributes Inspector<\/strong> after selecting the <strong>Navigation Bar<\/strong> inside the <strong>Navigation Controller Scene<\/strong> on the <strong>Outline<\/strong>.<\/p><p>With the Navigation Controller selected, adjust the Top Bar to <strong>&#xA0;Translucent Black Navigation Bar&#xA0;<\/strong> under the Attributes Inspector.<\/p><p>After a given view does load or by subclassing UINavigationController, you can access the same styling attributes available on Interface Builder.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewWillAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> animated <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewWillAppear<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>navigationController<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>navigationBar<span class=\"token punctuation\">.<\/span>isTranslucent <span class=\"token operator\">=<\/span> <span class=\"token boolean\">true<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>navigationController<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>navigationBar<span class=\"token punctuation\">.<\/span>isOpaque <span class=\"token operator\">=<\/span> <span class=\"token boolean\">false<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>navigationController<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>navigationBar<span class=\"token punctuation\">.<\/span>largeTitleTextAttributes <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><br>        <span class=\"token builtin\">NSAttributedStringKey<\/span><span class=\"token punctuation\">.<\/span>font <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIFont<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">boldSystemFont<\/span><span class=\"token punctuation\">(<\/span>ofSize<span class=\"token punctuation\">:<\/span> <span class=\"token number\">50<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">]<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In this code, we set the translucency, opaqueness and customize the large title attributes right before the view appears. Apart from customizing the navigation, this prevents it from stuttering while changing. The customizations applied to the <strong>Navigation Bar<\/strong> will affect all <strong>Navigation Bar Items<\/strong> that share the same <strong>Navigation Controller<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/j9mh0lxi4zwwr8e\/NavBar-NavBarStyle.mp4?dl=0","bookmark_id":"swift4-navigation-bar-navigation-bar-in-home"},{"id":"10980","section_id":"124","order":"8","title":"","subhead":"Navigation Bar Item","body":"<p>The <strong>Navigation Controller<\/strong>, apart from managing the stack of View Controllers, also manages the stack of Navigation Bar Items. You may also style a given Navigation Bar Item, which is particular to a single View Controller.<\/p><p>In case it&rsquo;s not already available, drag a Navigation Item into a given View Controller Scene using the Object Library. This will override the stock Navigation Item that would be assigned to your view by the Navigation Controller.<\/p><p>This item will let you customize the appearance of the navigation in this particular view. It&rsquo;s especially useful if you don&rsquo;t want to use the <strong>Large Titles<\/strong> option in a given view.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewDidLoad<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidLoad<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    navigationItem<span class=\"token punctuation\">.<\/span>title <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;I have a new title&quot;<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This customizes the <strong>Navigation Item<\/strong> title assigned to this view controller. Accessing and customizing this item does not affect any other <strong>View Controller<\/strong> or <strong>Navigation Item&#xA0;<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/navigation-bar-Scene2.mp4?dl=0","bookmark_id":"swift4-navigation-bar-navigation-bar-item"},{"id":"10981","section_id":"124","order":"9","title":"","subhead":"Refactoring","body":"<p>Before we continue our project, let&rsquo;s first rename our <strong>View Controller<\/strong> that&rsquo;s responsible for the <strong>Home Scene<\/strong> to <strong>Home View Controller<\/strong> so we can be more specific when referring to it. To do that, let&rsquo;s use Xcode 9&rsquo;s refactor functionality.<\/p><p>On the ViewController.swift file, select the <strong>ViewController<\/strong> class name and right click to <strong>Refactor &gt; Rename&#x2026;<\/strong>. All the instances in which this name is used will be conveniently listed and you should just enter <strong>HomeViewController<\/strong> and trigger <strong>Rename<\/strong>.<\/p><p>This refactoring will act on storyboard, file names and code throughout your project in one single step. Build and run to ensure that everything is still working the same.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/bcly4clxywc039a\/NavBar-Refactoring.mp4?dl=0","bookmark_id":"swift4-navigation-bar-refactoring"},{"id":"10982","section_id":"124","order":"10","title":"","subhead":"Showing and Hiding","body":"<p>Once we reach the top of the layout, it would be nice to see the cover image take all the top space. Let&rsquo;s hide the Navigation Bar once the scroll hits the top. <\/p><p>Previously, we have set the <strong>Home View Controller<\/strong> to listen to the events of the Scroll View inside it. Let&rsquo;s extend that functionality so it also shows and hides the Navigation Bar.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ MARK : ScrollView<\/span><br><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">HomeViewController<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIScrollViewDelegate<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">scrollViewDidScroll<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> scrollView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIScrollView<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token comment\">\/\/ Other functionality<\/span><br>        <span class=\"token keyword\">let<\/span> navigationIsHidden <span class=\"token operator\">=<\/span> offsetY <span class=\"token operator\">&lt;=<\/span> <span class=\"token number\">0<\/span><br>        navigationController<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">setNavigationBarHidden<\/span><span class=\"token punctuation\">(<\/span>navigationIsHidden<span class=\"token punctuation\">,<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In this code, the <strong>View Controller<\/strong> will try to show or hide the <strong>Navigation Bar<\/strong> every time the user scrolls. It understands that, if the y position of the viewport inside the <strong>Scroll View<\/strong> is less than <strong>0<\/strong> it should have the <strong>Navigation Bar<\/strong> hidden. This also guarantees behavior consistency while over-dragging to values smaller than <strong>0<\/strong>.<\/p><p>A minor shortcoming of this implementation is that the navigation bar is shown automatically at startup.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewDidLoad<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidLoad<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><br>    navigationController<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">setNavigationBarHidden<\/span><span class=\"token punctuation\">(<\/span><span class=\"token boolean\">true<\/span><span class=\"token punctuation\">,<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">false<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This fixes it by hiding it without animation right after the view loads.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/n2ptl695ayfisze\/NavBar-ShowingHidingFix.mp4?dl=0","bookmark_id":"swift4-navigation-bar-showing-and-hiding"},{"id":"10983","section_id":"124","order":"11","title":"","subhead":"Remove Status Bar Coloring","body":"<p>As we will be using the <strong>Navigation Bar<\/strong> to distinguish the content from the <strong>Status Bar<\/strong>, changing the status bar&rsquo;s background color is no longer necessary for it might unintentionally affect other views in it. Comment out its calling from the <strong>view did load<\/strong> function.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ Line to be commented<\/span><br><span class=\"token comment\">\/\/ setStatusBarBackgroundColor(color:  colorLiteral(red: 0, green: 0, blue: 0, alpha: 0.5))<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/Nav%20Bar%20Remove%20Status%20Bar%20Coloring%20Landscape.png","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-navigation-bar-remove-status-bar-coloring"},{"id":"10984","section_id":"124","order":"12","title":"","subhead":"Adding Buttons","body":"<p>Bar button items act in almost the same way as a common button. There are 3 buttons present in the <strong>Navigation Bar<\/strong> at its initial state: the logo, the purchase and the login.<\/p><p>The easiest and most straightforward are the logo and login button. If you haven&rsquo;t already, enable a custom <strong>Navigation Bar Item<\/strong> on the <strong>Home Scene<\/strong> by placing it from the <strong>Object Library<\/strong>.<\/p><p>Continue by placing on top of it two <strong>Bar Button Items<\/strong> from the <strong>Object Library<\/strong>. Place one under <strong>Left Bar Button Items<\/strong> and the other under <strong>Right Bar Button Items<\/strong>.<\/p><p>The one on the left should be set to have no title and its image should be then <strong>&#x201C;logo-designcode&#x201D;<\/strong>. The right button should be titled <strong>&#x201C;Login&#x201D;<\/strong> and tinted white.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/a87n3o4lrtub65q\/NavBar-AddingButtons.mp4?dl=0","bookmark_id":"swift4-navigation-bar-adding-buttons"},{"id":"10985","section_id":"124","order":"13","title":"","subhead":"Image Tinting","body":"<p>Just like the tab bar item, a bar button item tints its image by default. To have full color image on the navigation bar, go to <strong>Assets.xcassets<\/strong> file and search for the <strong>logo-designcode<\/strong> image. Using the <strong>Attributes Inspector<\/strong>, set its <strong>Render As<\/strong> value to <strong>Original Image<\/strong>.<\/p><p>To do the same programmatically, you write it like this.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewDidLoad<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidLoad<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">let<\/span> item <span class=\"token operator\">=<\/span> <span class=\"token function\">UIBarButtonItem<\/span><span class=\"token punctuation\">(<\/span>title<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Login&quot;<\/span><span class=\"token punctuation\">,<\/span> style<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>done<span class=\"token punctuation\">,<\/span> target<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">,<\/span> action<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br>    navigationItem<span class=\"token punctuation\">.<\/span>rightBarButtonItem <span class=\"token operator\">=<\/span> item<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Right after the view loads, we create a new button and set it as the right button of the last <strong>Navigation Item<\/strong> of the <strong>Navigation Controller<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/c7ay1xseh6gxko8\/NavBar-ImageTinting.mp4?dl=0","bookmark_id":"swift4-navigation-bar-image-tinting"},{"id":"10986","section_id":"124","order":"14","title":"","subhead":"Title View","body":"<p>The buy button is actually a special case here because it does not conform specifically to the traits of a <strong>Bar Button<\/strong>. To apply it to the interface, we will have to place a view to the <strong>Navigation Bar Item<\/strong> and then place the Button inside it.<\/p><p>Place a view from the <strong>Object Library<\/strong> at the center of the <strong>Navigation Bar Item<\/strong>. It&rsquo;s normal that, upon dropping it, you will see it doesn&rsquo;t show on the main stage. The view is very well placed on the Outline but its width and height are both at zero. Size it to <strong>120width<\/strong> and <strong>28height<\/strong> and set its background color to <strong>Clear Color<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/1uthx21wulkonri\/NavBar-TitleView.mp4?dl=0","bookmark_id":"swift4-navigation-bar-title-view"},{"id":"10987","section_id":"124","order":"15","title":"","subhead":"Buy Button","body":"<p>Then, place a button on top of it and title it <strong>Get the book<\/strong>, styling it with an iOS blue background, white colored <strong>15<\/strong> point <strong>Semibold System Font<\/strong> text. Constrain its sizing to <strong>28<\/strong> of height and greater than or equal to <strong>120<\/strong> of width. If you have trouble centering the button within the view, you could set the x and y position to 0.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/7hhkn2kg0rxxu5p\/NavBar-BuyButton.mp4?dl=0","bookmark_id":"swift4-navigation-bar-buy-button"},{"id":"10988","section_id":"124","order":"16","title":"","subhead":"Rounded Corners","body":"<p>To make the button rounded, let&rsquo;s use <strong>Runtime Attributes<\/strong> support on Interface Builder&rsquo;s <strong>Identity Inspector<\/strong>. Set a <strong>layer.cornerRadius<\/strong> key to the <strong>Number<\/strong> <strong>14<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/kpam6dgchcjnyjs\/NavBar-RoundedCorners.mp4?dl=0","bookmark_id":"swift4-navigation-bar-rounded-corners"},{"id":"10989","section_id":"124","order":"17","title":"Chapters Scene","subhead":"","body":"<p>In this part, we are going to wire things on the <strong>Chapters Scene<\/strong> and set its navigation bar with large titles and one of its collections.<\/p><p>For starters, select the scene and trigger <strong>Embed In Navigation Controller<\/strong> from the menu bar. This is going to forward the segues that were directed to your view to its newly created <strong>Navigation Controller<\/strong> while also enabling a <strong>Navigation Bar Item<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/e0izphrpawf4n3b\/NavBar-ChaptersScene.mp4?dl=0","bookmark_id":"swift4-navigation-bar-chapters-scene"},{"id":"10990","section_id":"124","order":"18","title":"","subhead":"Large Titles","body":"<p>To enable <strong>Large Titles<\/strong>, select the <strong>Navigation Bar<\/strong> inside the <strong>Navigation Controller<\/strong>. Using the <strong>Attributes Inspector<\/strong>, enable <strong>Prefers Large Titles<\/strong>.<\/p><p>Now, on the <strong>Chapters Scene<\/strong>, select the <strong>Navigation Bar Item<\/strong> and set its title to &#x201C;Chapters&#x201D;. In an iOS 11 only app, this is the way to go and the only requirement.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/lvp7nmz6lq334lo\/NavBar-LargeTitles.mp4?dl=0","bookmark_id":"swift4-navigation-bar-large-titles"},{"id":"10991","section_id":"124","order":"19","title":"","subhead":"Scroll View","body":"<p>Inside the <strong>Chapters Scene<\/strong>, we are going to place a copy of the <strong>Chapter View<\/strong> built previously. Place a <strong>Scroll View<\/strong> from the <strong>Object Library<\/strong> inside the scene and constraining it to all sides.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/4bioa75iattqgw1\/NavBar-ScrollView.mp4?dl=0","bookmark_id":"swift4-navigation-bar-scroll-view"},{"id":"10992","section_id":"124","order":"20","title":"Chapters Collection","subhead":"","body":"<p>To set this view to life, we will also copy the previously mentioned <strong>Chapters View<\/strong> carousel. Paste this element from the <strong>Home Scene<\/strong> inside the <strong>Scroll View<\/strong>.<\/p><p>Move it inside the <strong>Scroll View<\/strong> and constrain it to <strong>0<\/strong> on all sides using the <strong>Add New Constrain<\/strong> dialog. Also, to give hint to <strong>Scroll View<\/strong> of its expected inner width, constrain it to the center.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/tj4c36s6sl466ax\/NavBar-ChaptersCollection.mp4?dl=0","bookmark_id":"swift4-navigation-bar-chapters-collection"},{"id":"10993","section_id":"124","order":"21","title":"","subhead":"View Controller","body":"<p>You might still remember that this <strong>Chapters View<\/strong> has a <strong>Collection View<\/strong> inside it that needs to draw its inner data from some source. This source would be most likely the view controller from which we are building this scene.<\/p><p>Begin by creating a new <strong>Cocoa Touch Class<\/strong> using the <strong>File &gt; New &gt; File&#x2026;<\/strong> option by right-clicking on <strong>HomeViewController.swift<\/strong>. That way, the new swift file will be automatically placed below the <strong>HomeViewController.swift<\/strong> file. This class is to be called <strong>ChaptersViewController<\/strong> and will draw primarily from <strong>UIViewController<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/fv0lwuc9oin3y05\/NavBar-ViewController.mp4?dl=0","bookmark_id":"swift4-navigation-bar-view-controller"},{"id":"10994","section_id":"124","order":"22","title":"","subhead":"Connecting to Storyboard","body":"<p>Before applying it, let&rsquo;s take care of linking this <strong>Chapters View Controller<\/strong> as the delegate and data source for the <strong>Collection View<\/strong>. Select the <strong>Main.storyboard<\/strong> file and class the <strong>Chapters Scene<\/strong>&rsquo;s view controller as the <strong>ChaptersViewController<\/strong> using the <strong>Identity Inspector<\/strong>.<\/p><p>Later, using the <strong>&#xA0;Assistant Editor<\/strong>, create an outlet for the collection view inside the <strong>Chapters View<\/strong> called <strong>chapter1CollectionView<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/sb631yskmzml2fh\/NavBar-ConnectingStoryboard.mp4?dl=0","bookmark_id":"swift4-navigation-bar-connecting-to-storyboard"},{"id":"10995","section_id":"124","order":"23","title":"","subhead":"Delegate and Data Source","body":"<p>Let&rsquo;s continue on the <strong>Chapters View Controller<\/strong> by making it capable of providing data to the <strong>Chapters Collection View<\/strong>. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">ChaptersViewController<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionViewDelegate<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">UICollectionViewDataSource<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> numberOfItemsInSection section<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">return<\/span> sections<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span><br>    <span class=\"token punctuation\">}<\/span><br><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> cellForItemAt indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">UICollectionViewCell<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">dequeueReusableCell<\/span><span class=\"token punctuation\">(<\/span>withReuseIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;sectionCell&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">SectionCollectionViewCell<\/span><br>        <span class=\"token keyword\">let<\/span> section <span class=\"token operator\">=<\/span> sections<span class=\"token punctuation\">[<\/span>indexPath<span class=\"token punctuation\">.<\/span>row<span class=\"token punctuation\">]<\/span><br>        cell<span class=\"token punctuation\">.<\/span>titleLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> section<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">]<\/span><br>        cell<span class=\"token punctuation\">.<\/span>captionLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> section<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;caption&quot;<\/span><span class=\"token punctuation\">]<\/span><br>        cell<span class=\"token punctuation\">.<\/span>coverImageView<span class=\"token punctuation\">.<\/span>image <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImage<\/span><span class=\"token punctuation\">(<\/span>named<span class=\"token punctuation\">:<\/span> section<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><br><br>        cell<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">animateCell<\/span><span class=\"token punctuation\">(<\/span>cellFrame<span class=\"token punctuation\">:<\/span> cell<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">)<\/span><br><br>        <span class=\"token keyword\">return<\/span> cell<br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This is the same implementation we have already looked over on building the <strong>Home View Controller<\/strong>&rsquo;s <strong>Chapters View<\/strong>. It draws from the <strong>section<\/strong> constant, builds and animates the cell to be displayed at the screen. The code responsible for <strong>animate cell<\/strong> is still missing. We will leave the error as is since it&rsquo;ll get fixed right away in the next part.<\/p><p>For it to work properly, we should set the <strong>Chapters View Controller<\/strong> as <strong>chapter1CollectionView<\/strong>&rsquo;s delegate and data source programmatically by completing the <strong>viewDidLoad<\/strong> method:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewDidLoad<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidLoad<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><br>    chapter1CollectionView<span class=\"token punctuation\">.<\/span>delegate <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br>    chapter1CollectionView<span class=\"token punctuation\">.<\/span>dataSource <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-navigation-bar-delegate-and-data-source"},{"id":"10996","section_id":"124","order":"24","title":"","subhead":"Animation","body":"<p>The animation code is also the same as in the <strong>Home View Controller<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">ChaptersViewController<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIScrollViewDelegate<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">scrollViewDidScroll<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> scrollView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIScrollView<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>        <span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> collectionView <span class=\"token operator\">=<\/span> scrollView <span class=\"token keyword\">as<\/span><span class=\"token operator\">?<\/span> <span class=\"token builtin\">UICollectionView<\/span> <span class=\"token punctuation\">{<\/span><br><br>            <span class=\"token keyword\">for<\/span> cell <span class=\"token keyword\">in<\/span> collectionView<span class=\"token punctuation\">.<\/span>visibleCells <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">SectionCollectionViewCell<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token punctuation\">{<\/span><br>                <span class=\"token keyword\">let<\/span> indexPath <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">indexPath<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> cell<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br>                <span class=\"token keyword\">let<\/span> attributes <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">layoutAttributesForItem<\/span><span class=\"token punctuation\">(<\/span>at<span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br>                <span class=\"token keyword\">let<\/span> cellFrame <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">convert<\/span><span class=\"token punctuation\">(<\/span>attributes<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">,<\/span> to<span class=\"token punctuation\">:<\/span> view<span class=\"token punctuation\">)<\/span><br><br>                <span class=\"token keyword\">let<\/span> translationX <span class=\"token operator\">=<\/span> cellFrame<span class=\"token punctuation\">.<\/span>origin<span class=\"token punctuation\">.<\/span>x <span class=\"token operator\">\/<\/span> <span class=\"token number\">5<\/span><br>                cell<span class=\"token punctuation\">.<\/span>coverImageView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>translationX<span class=\"token punctuation\">:<\/span> translationX<span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><br><br>                cell<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token function\">animateCell<\/span><span class=\"token punctuation\">(<\/span>cellFrame<span class=\"token punctuation\">:<\/span> cellFrame<span class=\"token punctuation\">)<\/span><br>            <span class=\"token punctuation\">}<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">animateCell<\/span><span class=\"token punctuation\">(<\/span>cellFrame<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGRect<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">CATransform3D<\/span> <span class=\"token punctuation\">{<\/span><br><br>        <span class=\"token keyword\">let<\/span> angleFromX <span class=\"token operator\">=<\/span> <span class=\"token function\">Double<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">-<\/span>cellFrame<span class=\"token punctuation\">.<\/span>origin<span class=\"token punctuation\">.<\/span>x<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">\/<\/span> <span class=\"token number\">10<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">let<\/span> angle <span class=\"token operator\">=<\/span> <span class=\"token function\">CGFloat<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span>angleFromX <span class=\"token operator\">*<\/span> <span class=\"token builtin\">Double<\/span><span class=\"token punctuation\">.<\/span>pi<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">\/<\/span> <span class=\"token number\">180.0<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">var<\/span> transform <span class=\"token operator\">=<\/span> <span class=\"token builtin\">CATransform3DIdentity<\/span><br>        transform<span class=\"token punctuation\">.<\/span>m34 <span class=\"token operator\">=<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">1.0<\/span><span class=\"token operator\">\/<\/span><span class=\"token number\">1000<\/span><br>        <span class=\"token keyword\">let<\/span> rotation <span class=\"token operator\">=<\/span> <span class=\"token function\">CATransform3DRotate<\/span><span class=\"token punctuation\">(<\/span>transform<span class=\"token punctuation\">,<\/span> angle<span class=\"token punctuation\">,<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><br><br>        <span class=\"token keyword\">var<\/span> scaleFromX <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token number\">1000<\/span> <span class=\"token operator\">-<\/span> <span class=\"token punctuation\">(<\/span>cellFrame<span class=\"token punctuation\">.<\/span>origin<span class=\"token punctuation\">.<\/span>x <span class=\"token operator\">-<\/span> <span class=\"token number\">200<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">\/<\/span> <span class=\"token number\">1000<\/span><br>        <span class=\"token keyword\">let<\/span> scaleMax<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span> <span class=\"token operator\">=<\/span> <span class=\"token number\">1.0<\/span><br>        <span class=\"token keyword\">let<\/span> scaleMin<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span> <span class=\"token operator\">=<\/span> <span class=\"token number\">0.6<\/span><br>        <span class=\"token keyword\">if<\/span> scaleFromX <span class=\"token operator\">&gt;<\/span> scaleMax <span class=\"token punctuation\">{<\/span><br>            scaleFromX <span class=\"token operator\">=<\/span> scaleMax<br>        <span class=\"token punctuation\">}<\/span><br>        <span class=\"token keyword\">if<\/span> scaleFromX <span class=\"token operator\">&lt;<\/span> scaleMin <span class=\"token punctuation\">{<\/span><br>            scaleFromX <span class=\"token operator\">=<\/span> scaleMin<br>        <span class=\"token punctuation\">}<\/span><br>        <span class=\"token keyword\">let<\/span> scale <span class=\"token operator\">=<\/span> <span class=\"token function\">CATransform3DScale<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">CATransform3DIdentity<\/span><span class=\"token punctuation\">,<\/span> scaleFromX<span class=\"token punctuation\">,<\/span> scaleFromX<span class=\"token punctuation\">,<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span><br><br>        <span class=\"token keyword\">return<\/span> <span class=\"token function\">CATransform3DConcat<\/span><span class=\"token punctuation\">(<\/span>rotation<span class=\"token punctuation\">,<\/span> scale<span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-navigation-bar-animation"},{"id":"10997","section_id":"124","order":"25","title":"Conclusion","subhead":"","body":"<p>There is a lot we have learned about the <strong>Navigation Bar<\/strong> and the <strong>Navigation Bar Item<\/strong>. We already have the foundation on how to enable it, how to customize its appearance, and how to use its design regardless of the iOS version.<\/p><p>This setup we have build will be further expanded throughout the sections. Understanding how they interplay between the pushing, popping, placing and removing of views will be covered later on the <strong>Default Transitions<\/strong> section. These functionalities will help you benefit the most out of the tools available in UI Kit and yield richer usability for your apps.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/i2c8an3wpdibb9q\/NavBar-Conclusion.mp4?dl=0","bookmark_id":"swift4-navigation-bar-conclusion"},{"id":"10998","section_id":"124","order":"26","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-navigation-bar-credit"}]},{"id":"126","chapter_id":"4","order":"30","slug":"swift4-table-view-controller","title":"Table View Controller","caption":"Contacts, messages, bookmarks and all other vertical data","body":"<p>The iPhone can be used as a one-handed device because of its physical properties but also because it uses some interface conventions. The one convention we are talking about in this section is the vertical scrolling list.<\/p><p>Like most brilliant design decisions, the Table View seems a bit too obvious. Nonetheless, its elements and behavior have been tinkered and enhanced throughout the years to become something really recognizable from a UX perspective.<\/p><p>In this section, we are going to learn how to setup and place elements in a Table View using its controller class Table View Controller.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-table-view-controller.jpg","video":"https:\/\/player.vimeo.com\/external\/252636497.hd.mp4?s=4bbcd4a10952c703978fb5911631ac0d1958a344&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-table-view-controller.zip","contents":[{"id":"11583","section_id":"126","order":"1","title":"Downloads for Table View Controller","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-navigation-bar\">Navigation Bar<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/fsevkg6tf13necw\/4.03.2.TableViewController-Project.zip?dl=1\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-table-view-controller-downloads-for-table-view-controller"},{"id":"11584","section_id":"126","order":"2","title":"The Table View","subhead":"","body":"<p>The <strong>Table View<\/strong> is versatile because it can be used to display sequenced content without the need to work too hard on layout and logic. To assist in different situations there are two basic kinds of table views. The static and the dynamic.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-table-view-controller-the-table-view"},{"id":"11585","section_id":"126","order":"3","title":"Static Cells","subhead":"","body":"<p>The static is usually meant to be used in contexts where the number of rows is countable and the number of variations of the rows is on the same order of magnitude as the number of rows. A good example of this application is the Settings app and many settings sections in different apps.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Static%20cells.jpg","image_width":"1600","image_height":"1219","video":"","bookmark_id":"swift4-table-view-controller-static-cells"},{"id":"11586","section_id":"126","order":"4","title":"Dynamic Cells","subhead":"","body":"<p>The dynamic is appropriate whenever there is an uncountable number of rows to very few layout variations. This applies to interfaces such as a song, message, friend and file listing.<\/p><p>In this tutorial, we are going to take a special look at a Table View with dynamic cells. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Dynamic%20prototypes.jpg","image_width":"1600","image_height":"1219","video":"","bookmark_id":"swift4-table-view-controller-dynamic-cells"},{"id":"11587","section_id":"126","order":"5","title":"Importing Assets","subhead":"","body":"<p>Before we begin, please download the <a href=\"https:\/\/www.dropbox.com\/s\/hv6bb6zmpg8qd3b\/4.03.1.TableViewController-Assets.zip?dl=1\" title=\"Assets to layout the More Scene\">assets bundle<\/a> that comes with the iconography needed to set our layout. If you have knowledge on how to export assets from the Sketch file built on previous sections, feel free to do so. <\/p><p>On the project&rsquo;s outline, there is a file called <strong>Assets.xcassets<\/strong>. This file type is actually a folder that is interpreted in a symbolic fashion by Xcode.<\/p><p>Drag and drop the folder named <strong>Bookmarks<\/strong> in its <strong>Outline<\/strong> so we have them accessible on <strong>Interface Builder<\/strong>. Also, enable <strong>Provides Namespace<\/strong> on the <strong>Attributes Inspector<\/strong>.<\/p><p>Select the 3 individual assets and check <strong>Preserve Vector Data<\/strong>. Put <strong>Render As<\/strong> to <strong>Original Image<\/strong> and <strong>Scales<\/strong> to <strong>Single Scale<\/strong>. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-table-view-controller-importing-assets"},{"id":"11588","section_id":"126","order":"6","title":"Table View Controller","subhead":"","body":"<p>In the <strong>Tab Bar<\/strong> section we have already placed a place-holding <strong>Table View Controller<\/strong> linked as the controller for the <strong>Bookmarks Scene<\/strong>. In this section, we are going to add <strong>Large Titles<\/strong> to it and populate it with <strong>Static Data<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-table-view-controller-table-view-controller"},{"id":"11589","section_id":"126","order":"7","title":"Large Titles","subhead":"","body":"<p>As previously reviewed, placing <strong>Large Titles<\/strong> is as easy as embedding in a <strong>Navigation Controller<\/strong>. Select the <strong>Bookmarks Scene&rsquo;s<\/strong> view controller and trigger <strong>Editor &gt; Embed in &gt; Navigation Controller<\/strong> on the menu bar. <\/p><p>Reposition your scenes and select the <strong>Navigation Bar<\/strong> on the newly created <strong>Navigation Controller<\/strong>. On the <strong>Attributes Inspector<\/strong>, activate <strong>Prefers Large Titles<\/strong>.<\/p><p>Finish by selecting the <strong>Navigation Bar Item<\/strong> on the <strong>Bookmarks Scene<\/strong> and titling it &#x201C;Bookmarks&#x201D;.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-table-view-controller-large-titles"},{"id":"11590","section_id":"126","order":"8","title":"Classing the Table View","subhead":"","body":"<p>To populate the Table View, we need to assign it a data source where it can draw the records from the database. There are a lot of ways to do that. In this example, we are going to benefit a lot from the built-in capabilities of the <strong>UITableViewController class<\/strong>.<\/p><p>Create a new file using Cocoa Touch Class by clicking on <strong>File<\/strong>, <strong>New<\/strong> and <strong>File<\/strong> or press <strong>Command + N<\/strong>. Choose Cocoa Touch Class and name it a <strong>BookmarksTableViewController<\/strong> that draws from <strong>UITableViewController<\/strong>.<\/p><p>If you were to delete all the functions, the minimal implementation for a given <strong>Table View Controller<\/strong> would be:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">UIKit<\/span><br><br><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">BookmarksTableViewController<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UITableViewController<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>These three lines suffice to say to Swift that we want to extend the functionality of a <strong>UITableViewController<\/strong> by subclassing it to <strong>BookmarksTableViewController<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/table-view-controller-Scene2.mp4?dl=0","bookmark_id":"swift4-table-view-controller-classing-the-table-view"},{"id":"11591","section_id":"126","order":"9","title":"Populating the Table View","subhead":"","body":"<p>Usually, a Table View Controller drags the content from a service. For the purpose of this article, we will only take care of relaying the data to the screen. Place inside the <strong>Data.swift<\/strong> file the following code:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> allBookmarks <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;type&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;code&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;chapter&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;3&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;section&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Intro to Storyboards&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;part&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Object Library&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;content&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;On the bottom right, you&rsquo;ll find the Object Library. That&rsquo;s the 3rd tab. The Object Library has all the UI components that you can use for your layout. It&rsquo;s like Insert in Sketch.&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;type&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;chapter&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;1&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;section&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Learn iOS 11 Design&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;part&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Large Titles&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;content&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;More than ever, iOS 11 is going back to its roots. Bold fonts are everywhere. Titles are big and black. Since screens are now about twice as tall as they were, it only makes sense to have large titles. Another reason for large fonts is accessibility. With billions of people using their phone daily from all age groups, it is important to make the content as clear and readable as possible. Accessibility lets users set very large fonts for apps that support it. In iOS 11, all of Apple&rsquo;s stock apps support that option.  Because of that reason, you&rsquo;ll find that users are now expecting it.&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;type&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;chapter&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;2&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;section&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Design for iOS 11&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;part&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Layout Margin&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;content&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;In this Home screen, we use a layout margin of 16px from the left and the right. Like this we ensure that the user interface stay focus in the middle of the screen and doen&apos;t look cramped against the edge.&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;type&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;chapter&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;2&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;section&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Status Bar&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;part&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Setting Up the Basics&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;content&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;We need a Status Bar for the top of the screen. You can find the Status Bar in the Insert menu at the Toolbar. If you&apos;ve installed Sketch Runner, you can search it easily. Go to Plugins &gt; Runner &gt; Run&#x2026; or press Command + &apos; (apostrophe) to activate Sketch Runner. Select the Insert tab and type keyword &quot;status bar black&quot; and double-click the Symbol and then, place it in the Artboard.&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;type&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;chapter&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;2&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;section&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Design for iOS 11&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;part&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Design+Code Home Screen&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;content&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;We will be designing the new Design+Code Home screen in this tutorial. It contains a hero image, headline, introduction, call-to-action button, chapter and people section.&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><br><span class=\"token punctuation\">]<\/span><br><\/code><\/pre><p>This code declares some bookmarks that have the necessary information to display a seemingly real life bookmarks list. Continue by copying this data to the <strong>Bookmarks Table View Controller<\/strong> by adding the following lines to it:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> bookmarks <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span><span class=\"token builtin\">String<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token operator\">=<\/span> allBookmarks<br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-table-view-controller-populating-the-table-view"},{"id":"11592","section_id":"126","order":"10","title":"","subhead":"Loading the Data","body":"<p>The UITableViewController is not a single definition but is a compound definition of two natures. It is both de Delegate from which the Table View is going to send its events and the Data Source from which the Table View is going to receive its cells. In this part, we are going to discuss some of the methods to make a <strong>UITableViewDataSource<\/strong>.<\/p><p>The Table View has many properties that make it efficient, fast and versatile. Among those, it is not required to manage its own data. We need to tell it how many rows and what are the cells it has to display every time it reloads the data. Place inside the <strong>BookmarksTableViewController<\/strong> the following statements. Lets read them one by one.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">)<\/span><br>    tableView<span class=\"token punctuation\">.<\/span><span class=\"token function\">reloadData<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This one asks the Table View to reload its data upon its appearance on the screen. If you had this scene enveloped by a Tab View Controller, this would be called every time you switched back to this scene.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">tableView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> tableView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UITableView<\/span><span class=\"token punctuation\">,<\/span> numberOfRowsInSection section<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> bookmarks<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Whenever the Table View is about to reload the data, it ask how many sections it should show the number of rows desired. We override this function to make it display as many bookmarks as there are.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">tableView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> tableView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UITableView<\/span><span class=\"token punctuation\">,<\/span> cellForRowAt indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">UITableViewCell<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> <span class=\"token function\">UITableViewCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    cell<span class=\"token punctuation\">.<\/span>textLabel<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> bookmarks<span class=\"token punctuation\">[<\/span>indexPath<span class=\"token punctuation\">.<\/span>row<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;content&quot;<\/span><span class=\"token punctuation\">]<\/span><br>    <span class=\"token keyword\">return<\/span> cell<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Lastly, the Table View needs to populate itself. For each <strong>index path<\/strong>, we return a cell. Apart for returning a valid UITableViewCell, we customize it with the content of a bookmark.<\/p><p>Opening the <strong>Main.storyboard<\/strong> file, select the <strong>Bookmarks Scene<\/strong> and, under the <strong>Identity Inspector<\/strong>, class its view controller as the <strong>BookmarksTableViewController<\/strong>.<\/p><p>Build and run to see on the device.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/table-view-controller-Scene3.mp4?dl=0","bookmark_id":"swift4-table-view-controller-loading-the-data"},{"id":"11593","section_id":"126","order":"11","title":"Customizing the Cell","subhead":"","body":"<p>Our data is loaded but its standard appearance is not pleasing to our app. In this part, we are going to do a lot of <strong>Auto Layout<\/strong> to customize a cell so it will be more appealing and informative.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-table-view-controller-customizing-the-cell"},{"id":"11594","section_id":"126","order":"12","title":"","subhead":"Reuse Identifier","body":"<p>Table View, like all collections, usually come from a principle of replicating a layout many times applying different data to it. The standard way of doing this in <strong>UITableViewController<\/strong> is to set cells with <strong>reuse identifiers<\/strong>.<\/p><p>You can create as many cells as you want in a dynamic <strong>Table View<\/strong>, but to have them accessible, you must set their reuse identifiers. In the <strong>Attributes Inspector<\/strong> identify the cell as <strong>bookmarkCell<\/strong>. This will enable its retrieval in code and make its use super efficient in our app.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/table-view-controller-Scene4.mp4?dl=0","bookmark_id":"swift4-table-view-controller-reuse-identifier"},{"id":"11595","section_id":"126","order":"13","title":"","subhead":"Layout","body":"<p>The bookmark cell layout has a chapter number, a section name, a part name and the content of the part. We are going to display it using these <strong>metrics<\/strong>.<\/p><p>Go to <strong>Size Inspector<\/strong> and change the row height to <strong>125<\/strong> and check its size as <strong>Custom<\/strong>. This will leave us some space to design freely.<\/p><p>Then, search the <strong>Object Library<\/strong> for an <strong>Image View<\/strong> and place it squared at <strong>44<\/strong> points inside the cell element. Place it <strong>16<\/strong> point to the left and <strong>19<\/strong> point for the top. Choose the image <strong>&#xA0;Bookmarks\/code<\/strong> and put constraints <strong>0<\/strong> left and <strong>9<\/strong> top. Also, <strong>44<\/strong> width and height.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Cell%20schematics.jpg","image_width":"1600","image_height":"737","video":"https:\/\/designcode.io\/cloud\/swift4\/table-view-controller-Scene5.mp4?dl=0","bookmark_id":"swift4-table-view-controller-layout"},{"id":"11596","section_id":"126","order":"14","title":"Chapter Badge","subhead":"","body":"<p>Now, place the chapter number badge by searching for a View. Put it on top of the <strong>Image View<\/strong> <strong>x37<\/strong> and <strong>y16<\/strong>. Size it squared at <strong>18<\/strong> points and set its background color to hexadecimal <strong>4A90E2<\/strong>. Using the <strong>Runtime Attributes<\/strong> support on the <strong>Identity Inspector<\/strong>, set a <strong>layer.cornerRadius<\/strong> value to the <strong>Number<\/strong> to <strong>9<\/strong>.<\/p><p>Constraint the height and the width. So the top is constrained to the Image View&rsquo;s top. Position the badge: left is <strong>31<\/strong> points and bottom is <strong>26<\/strong> points to the Image View&rsquo;s. Then, <strong>control + drag<\/strong> the badge to the Image View and select <strong>Top<\/strong> and <strong>Trailing<\/strong> constraints while holding <strong>shift<\/strong>. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/table-view-controller-Scene6.mp4?dl=0","bookmark_id":"swift4-table-view-controller-chapter-badge"},{"id":"11597","section_id":"126","order":"15","title":"Chapter Number","subhead":"","body":"<p>Inside the chapter badge, there is the chapter number. Place a <strong>Label<\/strong> on the badge. Change the color to <strong>white<\/strong> and the font to <strong>&#xA0;Bold 15&#xA0;<\/strong>. Then, <strong>control + drag<\/strong> the number to the badge and select <strong>Center horizontally and vertically in Container<\/strong> while holding <strong>Shift<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/table-view-controller-Scene7.mp4?dl=0","bookmark_id":"swift4-table-view-controller-chapter-number"},{"id":"11598","section_id":"126","order":"16","title":"Stack View","subhead":"","body":"<p>Use a <strong>Vertical Stack View<\/strong> for placing the section name, part name and content labels. We are going to place it inside the cell and the position of <strong>x73<\/strong>, <strong>y20<\/strong>, <strong>width286<\/strong> and <strong>height86<\/strong>. Constraint it <strong>20<\/strong> to the top, <strong>16<\/strong> to the right, <strong>18<\/strong> to the bottom and <strong>8<\/strong> to the left so we have enough spacing for the badge. <strong>Constraint to margins<\/strong> have to be unchecked and don&rsquo;t forget to add the missing constraints.<\/p><p>The <strong>Vertical Stack View<\/strong> has all the properties we need to work properly. Place 3 <strong>Labels<\/strong> on it and style them according to the <strong>metrics<\/strong>.<\/p><p>Now, there are 3 labels competing inside the Stack View to fill its space. So to resolute this dispute, reduce the vertical <strong>Content Hugging Priority<\/strong> and vertical <strong>Content Compression Resistance Priority<\/strong> by <strong>1<\/strong> of the third label.<\/p><p>Change the font of the first label to : <strong>&#xA0;Light gray , semibold 15<\/strong><\/p><p>Change the font of the second label to : <strong>&#xA0;Black, semibold 20<\/strong><\/p><p>Change the font of the third label to: <strong>&#xA0;Dark gray, Body<\/strong> and the number of lines to : 2<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/table-view-controller-Scene8.mp4?dl=0","bookmark_id":"swift4-table-view-controller-stack-view"},{"id":"11599","section_id":"126","order":"17","title":"Hairline","subhead":"","body":"<p>Another layout feature of our Table View is the separator, also known as the hairline. Select the cell, go to <strong>Attributes Inspector<\/strong> and change the <strong>Separator Inset<\/strong> to custom, left inset to <strong>70<\/strong> and a right inset to <strong>16<\/strong> points to match the label.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/table-view-controller-Scene9.mp4?dl=0","bookmark_id":"swift4-table-view-controller-hairline"},{"id":"11600","section_id":"126","order":"18","title":"","subhead":"Wiring the Cell","body":"<p>We have done a solid setup for the cell&rsquo;s layout. Now, we need to set up its outlet so we can customize it.<\/p><p>The cell is actually its own view and can have its own outlets. Create a new file using Cocoa Touch Class by clicking on <strong>File<\/strong>, <strong>New<\/strong> and <strong>File<\/strong> or press <strong>Command + N<\/strong>. Choose Cocoa Touch Class and name it a <strong>BookmarkTableViewCell<\/strong> that draws from <strong>UITableViewCell<\/strong>.<\/p><p>Then, we switch contexts back to the Main.storyboard file. In the <strong>Identity Inspector<\/strong>, set the <strong>bookmarkCell<\/strong> cell class to <strong>&#xA0;BookmarkTableViewCell<\/strong>. Launch and navigate the <strong>Assistant Editor<\/strong> on manual to the <strong>&#xA0;BookmarkTableViewCell. swift<\/strong> file. Now, it is ready to be wired up using outlets for:<\/p><ol>\t<li>Image View: badgeImageView<\/li>\t<li>Badge Label: chapterNumberLabel<\/li>\t<li>Label 1: chapterTitleLabel<\/li>\t<li>Label 2: titleLabel<\/li>\t<li>Label 3: bodyLabel<\/li><\/ol>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/table-view-controller-Scene10.mp4?dl=0","bookmark_id":"swift4-table-view-controller-wiring-the-cell"},{"id":"11601","section_id":"126","order":"19","title":"","subhead":"Setting the Content","body":"<p>To make use of the outlets that we just placed, we are going to go back to the <strong>BookmarksTableViewController<\/strong> and rewrite the function that customizes the cell.<\/p><p>The implementation we are currently using takes the default UITableViewCell and places the content of the bookmark in its title. Let&rsquo;s change the <strong>Table View cell for row<\/strong> implementation to this:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> tableView<span class=\"token punctuation\">.<\/span><span class=\"token function\">dequeueReusableCell<\/span><span class=\"token punctuation\">(<\/span>withIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;bookmarkCell&quot;<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">BookmarkTableViewCell<\/span><br><br><span class=\"token keyword\">let<\/span> bookmark <span class=\"token operator\">=<\/span> bookmarks<span class=\"token punctuation\">[<\/span>indexPath<span class=\"token punctuation\">.<\/span>row<span class=\"token punctuation\">]<\/span><br><br>cell<span class=\"token punctuation\">.<\/span>chapterTitleLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> bookmark<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;section&quot;<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">!<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">uppercased<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>cell<span class=\"token punctuation\">.<\/span>titleLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> bookmark<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;part&quot;<\/span><span class=\"token punctuation\">]<\/span><br>cell<span class=\"token punctuation\">.<\/span>bodyLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> bookmark<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;content&quot;<\/span><span class=\"token punctuation\">]<\/span><br>cell<span class=\"token punctuation\">.<\/span>chapterNumberLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> bookmark<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;chapter&quot;<\/span><span class=\"token punctuation\">]<\/span><br>cell<span class=\"token punctuation\">.<\/span>badgeImageView<span class=\"token punctuation\">.<\/span>image <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImage<\/span><span class=\"token punctuation\">(<\/span>named<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Bookmarks\/&quot;<\/span> <span class=\"token operator\">+<\/span> bookmark<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;type&quot;<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">return<\/span> cell<br><\/code><\/pre><p>The first line of this code uses the identifier that we&rsquo;ve set up in the Storyboard to ask the Table View to give back a copy of the prototype cell. It also casts it as a <strong>Bookmark Table View Cell<\/strong> so we can use the outlets. Then, we customize the cell labels using the bookmark data as well as its badge image for the bookmark content type.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/table-view-controller-Scene11.mp4?dl=0","bookmark_id":"swift4-table-view-controller-setting-the-content"},{"id":"11602","section_id":"126","order":"20","title":"Conclusion","subhead":"","body":"<p>For now, that should be it for displaying data in a <strong>Table View<\/strong>. In a later section, we are going to make this search work and explore some key concepts of searching using <strong>Realm<\/strong>.<\/p><p>There are many other <strong>Table View Controller<\/strong> features to explore such as animation, editing and selecting. Table View is a standard that has been built on throughout the years of iOS and there is always much to learn about it.<\/p><p>A good stretch goal for this section is to review Apple&rsquo;s documentation on the capabilities of <strong>Table View Delegate<\/strong> and <strong>Table View Data Source<\/strong> to understand the basics of how the view and its controller interplay at scale in iOS.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-table-view-controller-conclusion"},{"id":"11603","section_id":"126","order":"21","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-table-view-controller-credit"}]},{"id":"127","chapter_id":"4","order":"40","slug":"swift4-web-view","title":"Web View Controller","caption":"Display and control web content without leaving the app","body":"<p>There is a lot you can do and customize using iOS&rsquo; built-in views. For all the things that your views fall short, there is always the web. <\/p><p>Starting on iOS 8, Apple released <strong>WebKit View<\/strong> as the standard for displaying web content inside an app. In this tutorial, we are going to build on the <strong>More Scene<\/strong> of the Design+Code app and target some web pages.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-web-view.jpg","video":"https:\/\/player.vimeo.com\/external\/252596891.hd.mp4?s=7047227c63ab2d1441886e6a534234e49d954bee&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-web-view.zip","contents":[{"id":"11206","section_id":"127","order":"1","title":"Downloads for Web View Controller","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-table-view-controller\">Table View Controller<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/minbi4l5yt0ylsg\/4.04.WebViewController.zip?dl=1\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-web-view-downloads-for-web-view-controller"},{"id":"11207","section_id":"127","order":"2","title":"Storyboard","subhead":"","body":"<p>The Web View does not have a standard and customizable controller like Navigation, Tab, Table and Collection. For this reason, we will have to create our own in this tutorial.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-web-view-storyboard"},{"id":"11208","section_id":"127","order":"3","title":"","subhead":"Custom View Controller","body":"<p>Drop a <strong>View Controller<\/strong> next to the <strong>More Scene<\/strong> and then embed it into a <strong>Navigation Controller<\/strong>. We will be using this View Controller as the host of the Web View.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/web-view-Scene2.mp4?dl=0","bookmark_id":"swift4-web-view-custom-view-controller"},{"id":"11209","section_id":"127","order":"4","title":"","subhead":"Segue to Navigation","body":"<p>Create a new <strong>Present Modally<\/strong> segue from the <strong>More Scene<\/strong> to the <strong>Navigation Controller<\/strong> and name it <strong>&#xA0;More to Web<\/strong>.<\/p><p>This segue is going to enable the navigation from the <strong>More Scene<\/strong> to the <strong>Web View Controller<\/strong> we are building while also helping us pass information on what is the target website.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/web-view-Scene3.mp4?dl=0","bookmark_id":"swift4-web-view-segue-to-navigation"},{"id":"11210","section_id":"127","order":"5","title":"","subhead":"Navigation Bar and Toolbar","body":"<p>As we have set a <strong>Navigation Controller<\/strong> to envelop our custom view controller, we gain access to some of its benefits. The first one is the <strong>Navigation Item<\/strong> that is already present in our custom view controller.<\/p><p>Use the <strong>Attributes Inspector<\/strong> on the <strong>Navigation Controller<\/strong> to enable a <strong>Translucent Black Navigation Bar<\/strong> and a <strong>Translucent Black Toolbar<\/strong>.<\/p><p>These are going to be enabled by default on every child of this <strong>Navigation Controller<\/strong><\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/web-view-Scene4.mp4?dl=0","bookmark_id":"swift4-web-view-navigation-bar-and-toolbar"},{"id":"11211","section_id":"127","order":"6","title":"","subhead":"Controls","body":"<p>Let&rsquo;s set some controls in our navigation. Search in the <strong>Object Library<\/strong> for <strong>Bar Button Item<\/strong> and set one at each top side of the <strong>Navigation Bar Item<\/strong> and four additional buttons on the <strong>Toolbar<\/strong>.<\/p><p>Between the buttons in the <strong>Toolbar<\/strong>, place a <strong>Flexible Space Bar Button Items<\/strong> to space them evenly.<\/p><p>These buttons act a lot like a regular <strong>Button<\/strong> but they display either an image or text. Customize the image in the <strong>Bar image<\/strong> of each button as follows:<\/p><p>Top-left: <strong>Done<\/strong><\/p><p>Top-right: <strong>Web-Refresh<\/strong><\/p><p>Bottom 1: <strong>&#xA0;Web-Back<\/strong><\/p><p>Bottom 2: <strong>&#xA0;Web-Forward<\/strong><\/p><p>Bottom 3: <strong>Web-Action<\/strong><\/p><p>Bottom 4: <strong>Web-Safari<\/strong><\/p><p>Change the tint of all the items to <strong>9ECBFF<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/web-view-Scene6.mp4?dl=0","bookmark_id":"swift4-web-view-controls"},{"id":"11212","section_id":"127","order":"7","title":"","subhead":"Web View","body":"<p>Filter the <strong>Object Library<\/strong> for a <strong>WebKit View<\/strong>, place it at the center of the <strong>View Controller<\/strong> and constrain it to be <strong>0<\/strong> points from each margin of its superview. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/web-view-Scene7.mp4?dl=0","bookmark_id":"swift4-web-view-web-view"},{"id":"11213","section_id":"127","order":"8","title":"Web View Controller","subhead":"","body":"<p>Now, we need to create a class to control this view and receive its events. Select on Xcode&rsquo;s menu bar, <strong>File &gt; New &gt; File&#x2026;<\/strong> and create a new <strong>Cocoa Touch Class<\/strong> file, name it <strong>WebViewController<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-web-view-web-view-controller"},{"id":"11214","section_id":"127","order":"9","title":"","subhead":"Controller","body":"<p>Just keep these lines that are going to define our <strong>Web View Controller<\/strong> by extending it from <strong>UIViewController<\/strong> and navigate to the <strong>Main.storyboard<\/strong> file so we can continue.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">UIKit<\/span><br><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">WebKit<\/span><br><br><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">WebViewController<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewController<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In the <strong>Identity Inspector<\/strong>, apply to the <strong>View Controller<\/strong> this class: <strong>&#xA0;Web View Controller<\/strong>. <\/p><p>By classing a View Controller, you leverage a concept called inheritance. This let&rsquo;s you keep all the convenience of the parent class while being able to customize it to your needs.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/wyr11put2vphna7\/web-view-controller-09-controller.mp4?dl=0","bookmark_id":"swift4-web-view-controller"},{"id":"11215","section_id":"127","order":"10","title":"","subhead":"Assistant Editor","body":"<p>In case you are not familiar, we are going to use the <strong>Assistant Editor<\/strong> to set actions and outlets. This editor helps you interact with two files at the same time and automatically shows a convenient counterpart to your selection.<\/p><p>Let&rsquo;s select <strong>Web View Controller Scene<\/strong> and trigger the <strong>Assistant Editor<\/strong> on automatic.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/lzyhoh3aoxqh0sm\/web-view-controller-10-assitant-editor.mp4?dl=0","bookmark_id":"swift4-web-view-assistant-editor"},{"id":"11216","section_id":"127","order":"11","title":"","subhead":"Web View Outlet","body":"<p>To have control over the <strong>WebKit View<\/strong>, set an outlet and named it <strong>Web View<\/strong>.<\/p><p>This outlet variable is the <strong>Web View<\/strong> and is going to receive the load, reload, back and forward messages.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/bjci6nfm7ve45r1\/web-view-controller-11-web-view-outlet.mp4?dl=0","bookmark_id":"swift4-web-view-web-view-outlet"},{"id":"11217","section_id":"127","order":"12","title":"","subhead":"Loading a Webpage","body":"<p>To ask a web view to load a webpage we need to know its target address. Complete your view controller with the following lines.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">WebViewController<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewController<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> webView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">WKWebView<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token keyword\">var<\/span> urlString<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token operator\">!<\/span><br><br>    <span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">)<\/span><br><br>        <span class=\"token keyword\">let<\/span> url <span class=\"token operator\">=<\/span> <span class=\"token function\">URL<\/span><span class=\"token punctuation\">(<\/span>string<span class=\"token punctuation\">:<\/span> urlString<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br>        <span class=\"token keyword\">let<\/span> request <span class=\"token operator\">=<\/span> <span class=\"token function\">URLRequest<\/span><span class=\"token punctuation\">(<\/span>url<span class=\"token punctuation\">:<\/span> url<span class=\"token punctuation\">)<\/span><br>        webView<span class=\"token punctuation\">.<\/span><span class=\"token function\">load<\/span><span class=\"token punctuation\">(<\/span>request<span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>These lines ask the <strong>WebKit View<\/strong> to load a given web page onto it as soon as the view appears. It does it by transforming a String into a URL and then transforming it into a URL Request. That is finally used to ask the view to load. Later we are going to learn how to pass information to this <strong>Web View Controller<\/strong> using its <strong>urlString<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-web-view-loading-a-webpage"},{"id":"11218","section_id":"127","order":"13","title":"Creating Actions","subhead":"","body":"<p>Continuing in the <strong>Assistant Editor<\/strong> we are going to set up some additional actions to control the <strong>Web View Controller<\/strong>.<\/p><p>Let&rsquo;s create actions for the buttons:<\/p><ul>\t<li><strong>Done<\/strong>: doneButtonTapped<\/li>\t<li><strong>Action<\/strong>: actionButtonTapped<\/li>\t<li><strong>Safari<\/strong>: safariButtonTapped<\/li>\t<li><strong>Back<\/strong>: goBack<\/li>\t<li><strong>Forward<\/strong>: goForward<\/li>\t<li><strong>Reload<\/strong>: reload<\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/web-view-Scene11.mp4?dl=0","bookmark_id":"swift4-web-view-creating-actions"},{"id":"11219","section_id":"127","order":"14","title":"","subhead":"Done Button","body":"<p>The action for the <strong>Done<\/strong> button should be the dismissal of the current view controller so that the user goes back to the previous scene.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">doneButtonTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">dismiss<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-web-view-done-button"},{"id":"11220","section_id":"127","order":"15","title":"","subhead":"Action Button","body":"<p>The action button creates a standard iOS action sheet for sharing the webpage address.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">actionButtonTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token keyword\">let<\/span> activityItems <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span>urlString<span class=\"token punctuation\">]<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token operator\">&gt;<\/span><br>    <span class=\"token keyword\">let<\/span> activityController <span class=\"token operator\">=<\/span> <span class=\"token function\">UIActivityViewController<\/span><span class=\"token punctuation\">(<\/span>activityItems<span class=\"token punctuation\">:<\/span> activityItems<span class=\"token punctuation\">,<\/span> applicationActivities<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br>    activityController<span class=\"token punctuation\">.<\/span>excludedActivityTypes <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token punctuation\">.<\/span>postToFacebook<span class=\"token punctuation\">]<\/span><br>    <span class=\"token function\">present<\/span><span class=\"token punctuation\">(<\/span>activityController<span class=\"token punctuation\">,<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">,<\/span> completion<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>The process is a little bit more complex because the action sheet is handled as a <strong>View Controller<\/strong> by the class named <strong>UIActivityViewController<\/strong>. We create it, set it to exclude posting on <strong>Facebook<\/strong>, and then present it.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-web-view-action-button"},{"id":"11221","section_id":"127","order":"16","title":"","subhead":"Safari Button","body":"<p>The Safari Button is supposed to take us to the page using Safari.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">safariButtonTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token builtin\">UIApplication<\/span><span class=\"token punctuation\">.<\/span>shared<span class=\"token punctuation\">.<\/span><span class=\"token function\">open<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">URL<\/span><span class=\"token punctuation\">(<\/span>string<span class=\"token punctuation\">:<\/span> urlString<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>For this, we simply ask the shared application to open the URL.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-web-view-safari-button"},{"id":"11222","section_id":"127","order":"17","title":"","subhead":"Navigating the Web","body":"<p>Apart from loading webpages, the <strong>Web View<\/strong> is also very convenient as it knows how to keep its history and reload itself. We just have to tell it when to do so.<\/p><p>Using the <strong>Assistant Editor<\/strong> set <strong>actions<\/strong> for the <strong>Back Button<\/strong> and <strong>Forward Button<\/strong> located in the bottom bar. Also, set another action for the <strong>Reload Button<\/strong> located in the navigation bar.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> goBack <span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> webView<span class=\"token punctuation\">.<\/span><span class=\"token function\">goBack<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">}<\/span><br><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> goForward <span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> webView<span class=\"token punctuation\">.<\/span><span class=\"token function\">goForward<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">}<\/span><br><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> reload <span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> webView<span class=\"token punctuation\">.<\/span><span class=\"token function\">reload<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>These three actions ask the <strong>Web View<\/strong> to perform the webpage navigation under the hood.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-web-view-navigating-the-web"},{"id":"11223","section_id":"127","order":"18","title":"Connecting to the More Scene","subhead":"","body":"<p>We have already set up the <strong>Web View Controller<\/strong> being able to show, control, share and open a given web page in Safari . Now we need to make it accessible and trigger it using other views.<\/p><p>The primary access to the web content on the app is going to be the <strong>More Scene<\/strong>. Although its layout has suffered previously, its controller and functionality have not been specified. By the same process we created and assigned the <strong>Web View Controller<\/strong>, let&rsquo;s create a <strong>More View Controller<\/strong>.<\/p><p>Select <strong>File &gt; New &gt; File&#x2026;<\/strong> and select <strong>Cocoa Touch Class<\/strong> create a <strong>MoreViewController<\/strong> that draws from <strong>UIViewController<\/strong>. Go back to storyboard and set it as the class of the <strong>More Scene<\/strong> using the <strong>Identity Inspector<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-web-view-connecting-to-the-more-scene"},{"id":"11224","section_id":"127","order":"19","title":"","subhead":"Web Actions","body":"<p>Then, create actions for <strong>safariButtonTapped<\/strong>, <strong>communityButtonTapped<\/strong> and <strong>twitterHandleTapped<\/strong>.<\/p><p>Now we need to leverage these <strong>Actions<\/strong> to trigger the <strong>Segue<\/strong> and send the URL to the destination, which is the <strong>Web View Controller<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">safariButtonTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">performSegue<\/span><span class=\"token punctuation\">(<\/span>withIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;More to Web&quot;<\/span><span class=\"token punctuation\">,<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;https:\/\/designcode.io&quot;<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><br><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">communityButtonTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">performSegue<\/span><span class=\"token punctuation\">(<\/span>withIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;More to Web&quot;<\/span><span class=\"token punctuation\">,<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;https:\/\/spectrum.chat\/design-code&quot;<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><br><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">twitterHandleTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">performSegue<\/span><span class=\"token punctuation\">(<\/span>withIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;More to Web&quot;<\/span><span class=\"token punctuation\">,<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;https:\/\/twitter.com\/mengto&quot;<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>All the three actions share mostly the same line of code because they do basically the same thing apart from asking for different web pages. We can now send the address to the destination like this:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">prepare<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">for<\/span> segue<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIStoryboardSegue<\/span><span class=\"token punctuation\">,<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> identifier <span class=\"token operator\">=<\/span> segue<span class=\"token punctuation\">.<\/span>identifier<span class=\"token punctuation\">,<\/span> identifier <span class=\"token operator\">==<\/span> <span class=\"token string\">&quot;More to Web&quot;<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">let<\/span> toNav <span class=\"token operator\">=<\/span> segue<span class=\"token punctuation\">.<\/span>destination <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">UINavigationController<\/span><br>        <span class=\"token keyword\">let<\/span> toVC <span class=\"token operator\">=<\/span> toNav<span class=\"token punctuation\">.<\/span>viewControllers<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">first<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">WebViewController<\/span><br>        toVC<span class=\"token punctuation\">.<\/span>urlString <span class=\"token operator\">=<\/span> sender <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">String<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>When the view controller is about to jump into segue, we are going to interrupt it to prepare. If the segue is identified as <strong>More to Web<\/strong>, the destination should be the <strong>Navigation Controller<\/strong>. And the first <strong>View Controller<\/strong> of this navigation should be one <strong>Web View Controller<\/strong>. In that case, we can set its <strong>urlString<\/strong> to be the sender we have set for the actions.<\/p><p>All of this is guaranteed to happen before the view appears.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/web-view-Scene12.mp4?dl=0","bookmark_id":"swift4-web-view-web-actions"},{"id":"11225","section_id":"127","order":"20","title":"Final Touches","subhead":"","body":"<p>For the final touches, we are going to observe the inner state of the <strong>WebKit View<\/strong> to determine how it&rsquo;s progressing. Depending on its progress we are going to send feedback to the user using the <strong>Navigation Item<\/strong><\/p><p>Observing inner variables is very simple in iOS. We only need to set the <strong>Web View Controller<\/strong> as an observer right after it appears and removes it after it disappears.<\/p><p>Complement your <strong>Web View Controller<\/strong> with the following code:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">)<\/span><br><br>    <span class=\"token keyword\">let<\/span> url <span class=\"token operator\">=<\/span> <span class=\"token function\">URL<\/span><span class=\"token punctuation\">(<\/span>string<span class=\"token punctuation\">:<\/span> urlString<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token keyword\">let<\/span> request <span class=\"token operator\">=<\/span> <span class=\"token function\">URLRequest<\/span><span class=\"token punctuation\">(<\/span>url<span class=\"token punctuation\">:<\/span> url<span class=\"token punctuation\">)<\/span><br>    webView<span class=\"token punctuation\">.<\/span><span class=\"token function\">load<\/span><span class=\"token punctuation\">(<\/span>request<span class=\"token punctuation\">)<\/span><br><br>    webView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addObserver<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> forKeyPath<span class=\"token punctuation\">:<\/span> #<span class=\"token function\">keyPath<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">WKWebView<\/span><span class=\"token punctuation\">.<\/span>estimatedProgress<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span> options<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token keyword\">new<\/span><span class=\"token punctuation\">,<\/span> context<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><br><span class=\"token keyword\">deinit<\/span> <span class=\"token punctuation\">{<\/span><br>    webView<span class=\"token punctuation\">.<\/span><span class=\"token function\">removeObserver<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> forKeyPath<span class=\"token punctuation\">:<\/span> #<span class=\"token function\">keyPath<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">WKWebView<\/span><span class=\"token punctuation\">.<\/span>estimatedProgress<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This code will add our <strong>Web View Controller<\/strong> as an observer of the <strong>estimateProgress<\/strong> of the <strong>WebKit View<\/strong>. This progress goes from <strong>0<\/strong> to <strong>1<\/strong> on a scale of <strong>0%<\/strong> to <strong>100%<\/strong>. Now we need to create a function receives events of change in this progress.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">observeValue<\/span><span class=\"token punctuation\">(<\/span>forKeyPath keyPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">,<\/span> of object<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">,<\/span> change<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token builtin\">NSKeyValueChangeKey<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">,<\/span> context<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UnsafeMutableRawPointer<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token keyword\">if<\/span> keyPath <span class=\"token operator\">==<\/span> <span class=\"token string\">&quot;estimatedProgress&quot;<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">if<\/span> webView<span class=\"token punctuation\">.<\/span>estimatedProgress <span class=\"token operator\">==<\/span> <span class=\"token number\">1.0<\/span> <span class=\"token punctuation\">{<\/span><br>            navigationItem<span class=\"token punctuation\">.<\/span>title <span class=\"token operator\">=<\/span> webView<span class=\"token punctuation\">.<\/span>title<br>        <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span><br>            navigationItem<span class=\"token punctuation\">.<\/span>title <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Loading&#x2026;&quot;<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>If we were to observe events from an arbitrary amount of objects, this function would receive all its events. In this case, we want to narrow the effects of this function so it only applies to the <strong>estimateProgress<\/strong> key path and if so, apply the title of the web page or a loading sign accordingly.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/web-view-Scene13.mp4?dl=0","bookmark_id":"swift4-web-view-final-touches"},{"id":"11226","section_id":"127","order":"21","title":"Conclusion","subhead":"","body":"<p>Building a generic interface for displaying web content is often useful. This <strong>Web View Controller<\/strong> we have just created will be targeted in many other areas of this project. Apart from that, we have experienced that building a custom and generic view controller is a possible and desirable way to grow a project.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-web-view-conclusion"},{"id":"11227","section_id":"127","order":"22","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section..<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-web-view-credit"}]},{"id":"128","chapter_id":"4","order":"50","slug":"swift4-default-transitions","title":"Default Transitions","caption":"Add an animation between your screens","body":"<p>Single page apps are no longer a thing in the App Store. Almost every app has multiple screens that cover a lot of different functionalities. Apple supplies us with a wide variety of different APIs to implement various types of transitions when moving from one screen to another. They even provide us an API to create our own transition animations, giving us endless options.<\/p><p>We&rsquo;ll be replicating all of the transitions found on the app, from the very basic ones to the interactive transition when dismissing a section. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-default-transitions.jpg","video":"https:\/\/player.vimeo.com\/external\/253487879.hd.mp4?s=9e9c7d3a6acb37b3f86fc81b1fba7cf8a40323aa&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-default-transitions.zip","contents":[{"id":"11346","section_id":"128","order":"1","title":"Downloads for Default Transitions","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-web-view\">Web View Controller<\/a>. You can download the <a href=\"https:\/\/www.dropbox.com\/s\/uiavrzugqlhchvq\/4.05.DefaultTransitions.zip?dl=1\">final Xcode project<\/a> to help you compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-default-transitions-downloads-for-default-transitions"},{"id":"11347","section_id":"128","order":"2","title":"Enhancing the More Scene","subhead":"","body":"<p>In this section, we are going to take a step forward on the More Scene and Bookmarks Scene by enhancing their experience and showing how different navigation paradigms can be applied. <\/p><p>Only this time, we are going to build support for <strong>iPhone X<\/strong> and we are going to embrace the notch. Select the topmost view in the <strong>More Scene<\/strong> and, using the <strong>Size Inspector<\/strong> turn on its <strong>Safe Area Layout Guide<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/pnbr4xk5fmduj5d\/default-transitions-01-enhancing-the-more-scene.mp4?dl=0","bookmark_id":"swift4-default-transitions-enhancing-the-more-scene"},{"id":"11348","section_id":"128","order":"3","title":"","subhead":"Removing Placeholders","body":"<p>Begin by selecting the two of the three progress elements and deleting them. We are going to create a new one and duplicate it later on. Then, push the one left in a stack and set the stack&rsquo;s spacing to <strong>10<\/strong> points.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/mcywqb8fzrae1fa\/default-transitions-02-removing-placeholders.mp4?dl=0","bookmark_id":"swift4-default-transitions-removing-placeholders"},{"id":"11349","section_id":"128","order":"4","title":"","subhead":"Subject Label","body":"<p>Continue by placing a label below that <strong>Placeholder Image View<\/strong> inside the stack and styling it as a centered <strong>15<\/strong> point <strong>Semibold System Font<\/strong> colored <strong>50% Black<\/strong>. Change its content to <strong>&#x201C;iOS Design&#x201D;<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/gx1wf0zukvoa0s9\/default-transitions-03-subject-label.mp4?dl=0","bookmark_id":"swift4-default-transitions-subject-label"},{"id":"11350","section_id":"128","order":"5","title":"","subhead":"Embed in View","body":"<p>Select the <strong>Placeholder Image View<\/strong> and trigger <strong>Editor &gt; Embed In &gt; View<\/strong>. Select this view and change its background color to <strong>Default<\/strong>. Also, constrain it to 70 of height. Select the image and constrain it to vertical and horizontal center.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/byf021bh90ji91d\/default-transitions-04-embed-in-view.mp4?dl=0","bookmark_id":"swift4-default-transitions-embed-in-view"},{"id":"11351","section_id":"128","order":"6","title":"","subhead":"Progress Label","body":"<p>Also, place a <strong>Label<\/strong> inside this same view and constrain it to the vertical and horizontal center. This label is going to later contain the progress value, so change its content to <strong>&#x201D;100%&#x201D;<\/strong>. Style it as a <strong>20<\/strong> point <strong>Black Color<\/strong> <strong>System Font Semibold<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/sstgm4h3gxh36if\/default-transitions-05-progress-label.mp4?dl=0","bookmark_id":"swift4-default-transitions-progress-label"},{"id":"11352","section_id":"128","order":"7","title":"","subhead":"Self-Sizing","body":"<p>Continue by duplicating the items by <strong>Copy and Pasting<\/strong> until you have 3 progress rings placeholders with both labels and the image. <\/p><p>Select the horizontal outer <strong>Stack<\/strong> and set its distribution to fill equally. This will have the view we have just placed stretch to fill the horizontal size. Nonetheless, the implicit stack still can size itself for this same view has been constrained in height to <strong>70<\/strong> and the label knows how to size itself implicitly.<\/p><p>Change the second Label to: <strong>Sketch<\/strong> and the third one to: <strong>Xcode<\/strong><\/p><p>Change the image of the second place-holder to: <strong>Placeholder\/image-ring-2<\/strong> and the first place-holder to: <strong>Placeholder\/image-ring-3<\/strong><\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/cnuwis4ymjd73gz\/default-transitions-06-self-sizing.mp4?dl=0","bookmark_id":"swift4-default-transitions-self-sizing"},{"id":"11353","section_id":"128","order":"8","title":"Adapting for the iPad","subhead":"","body":"<p>In this section, we are going to use iPad layout to feature different presentation styles. In <strong>Interface Builder&rsquo;s<\/strong> stage, you can see a bottom toolbar with a <strong>View as: iPhone 8 (wC hR)<\/strong>. This is the simulated size that Interface Builder is using to display and render all the views inside a given view controller that has been set to a fixed simulated size.<\/p><p>To apply size variation, we first need to select the <strong>More Scene<\/strong> and change its <strong>Simulated Size<\/strong> to <strong>Fixed<\/strong> using the <strong>Size Inspector<\/strong>. By doing so, you make it respond to the file&rsquo;s simulated size. Tap on the <strong>View as:&#x2026;<\/strong> button and select the smallest <strong>iPad<\/strong> on landscape.<\/p><p>This is going to simulate what this view is going to look like on an iPad and give us hints on how to layout for different environments.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/8n0tkglg9j0lemq\/default-transitions-07-adapting-for-the-ipad.mp4?dl=0","bookmark_id":"swift4-default-transitions-adapting-for-the-ipad"},{"id":"11354","section_id":"128","order":"9","title":"","subhead":"Size Classing Shorthand","body":"<p>The following parts are going to cover a lot of sizes classing. If you are not familiar with size classing concepts, they are the iOS idiom for segregating different screen sizes. You may review this subject by referring to the <strong>Auto Layout<\/strong> section in <strong>Chapter 3<\/strong>.<\/p><p>We are also going to use some shorthand for size classes:<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/size-classing-shorthand.jpg","image_width":"1600","image_height":"863","video":"","bookmark_id":"swift4-default-transitions-size-classing-shorthand"},{"id":"11355","section_id":"128","order":"10","title":"","subhead":"Devices Cheat-Sheet","body":"<p>There are 3 settings for each orientation: <strong>Any<\/strong>, <strong>Compact<\/strong> and <strong>Regular<\/strong>.<\/p><ul>\t<li><strong>Any<\/strong> x <strong>Any<\/strong> will apply to every device.<\/li>\t<li><strong>Compact<\/strong> x <strong>Regular<\/strong> will apply to all iPhone in portrait.<\/li>\t<li><strong>Compact<\/strong> x <strong>Compact<\/strong> will apply to all iPhones in landscape, except for the iPhone 8 Plus.<\/li>\t<li><strong>Regular<\/strong> x <strong>Regular<\/strong> will target the iPad in both portrait and landscape, except when in Split view.<\/li>\t<li>Otherwise, Size Classes will tell you which devices are being targeted.<\/li><\/ul><p>Use this illustration to see which ones are <strong>Compact<\/strong> or <strong>Regular<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/DraggedImage.png","image_width":"3030","image_height":"1694","video":"","bookmark_id":"swift4-default-transitions-devices-cheat-sheet"},{"id":"11356","section_id":"128","order":"11","title":"","subhead":"Sizing the Dialog View Vertically","body":"<p>Let&rsquo;s begin by centering the whole <strong>Dialog View<\/strong> in this different situation so it sticks to a size without stretching through the whole context.<\/p><p>Create a constraint for vertical centering on the <strong>Dialog View<\/strong>. Then, using the <strong>add customization<\/strong> on the <strong>Installed<\/strong> checkbox, create a <strong>wR hR<\/strong> variation (width Regular, height Regular) and deselect the default <strong>Installed<\/strong> checkbox, leaving the variation checked.<\/p><p>In the same process, select the top constraint of this same view and, create a <strong>wR hR<\/strong> variation (width Regular, height Regular) and uncheck it.<\/p><p>The <strong>wR hR<\/strong> variation (width Regular, height Regular) is the size class that applies to the <strong>iPad&rsquo;s&#xA0;<\/strong> display. <\/p><p>When we make our view vertically centered while also removing the top constraint we allow it to size itself while also fulfilling the vertical size of the <strong>Scroll View<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/g6gjkbxzp6x66cn\/default-transitions-08-centering-the-dialog-view-vertically.mp4?dl=0","bookmark_id":"swift4-default-transitions-sizing-the-dialog-view-vertically"},{"id":"11357","section_id":"128","order":"12","title":"","subhead":"Sizing the Dialog View Horizontally","body":"<p>Then, select the leading constraint and click on <strong>add customization<\/strong>. Select <strong>Any<\/strong> for height and <strong>Regular<\/strong> for width, then click to add this variation. Deselect the newly created <strong>wR<\/strong> (width Regular, height Any) variation. Finish by setting a width constraint of <strong>600<\/strong> points, uninstalling it and activating a variation of <strong>wR hR<\/strong> (width Regular, height Regular).<\/p><p>Similarly, when setting a width, the view that already has a constraint for the horizontal center, sizes itself for this target width while also fulfilling the horizontal size of the <strong>Scroll View<\/strong>.<\/p><p><strong>Scroll Views<\/strong> are a convenience on iOS development, to get along with them you should always pay attention so it knows how to determine its outer and inner sizes.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/z2l6447ngncx4ed\/default-transitions-09-centering-the-dialog-view-horizontally.mp4?dl=0","bookmark_id":"swift4-default-transitions-sizing-the-dialog-view-horizontally"},{"id":"11358","section_id":"128","order":"13","title":"","subhead":"Regrouping Action Buttons","body":"<p>Additionally, the actions inside the <strong>Dialog View<\/strong> are too wide and too big. Let&rsquo;s also use the trait environment to selectively create a layout unique for iPad and landscape iPhones.<\/p><p>Selecting the action buttons inside the <strong>Dialog<\/strong>, push them 3 by 3 in a Stack View. You should have 2 similar stack views. Select them both and set their distribution to <strong>Fill Equally<\/strong> and spacing to <strong>1<\/strong> point, just like their parent.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/dk5ihyvknl7eumo\/default-transitions-10-regrouping-action-buttons.mp4?dl=0","bookmark_id":"swift4-default-transitions-regrouping-action-buttons"},{"id":"11359","section_id":"128","order":"14","title":"","subhead":"Varying Stack Layout","body":"<p>Then, let&rsquo;s select their parent <strong>Stack<\/strong> and vary it to create a 2 column layout. In the <strong>Attributes Inspector<\/strong>, trigger <strong>add customization<\/strong> for the <strong>Axis<\/strong> and create variations for <strong>hC<\/strong> (width Any, height Compact) and <strong>wR<\/strong> (width Regular, height Any), set them both to horizontal.<\/p><p>This will ensure that the stacks stay horizontal if the height is compact, such as in a landscape iPhone, or if the width is regular, such as in a landscape Plus sized iPhone or any iPad.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/napmmbyttqs3ssn\/default-transitions-11-varying-stack-layout.mp4?dl=0","bookmark_id":"swift4-default-transitions-varying-stack-layout"},{"id":"11360","section_id":"128","order":"15","title":"","subhead":"Varying Stack Size","body":"<p>Also, double-click its height constraint so we can vary it. Create a <strong>wR<\/strong> variation (height Any, width Regular) and <strong>hC<\/strong> variation (height Compact, width Any). Set the varied constants to 180 for both those variations.<\/p><p>As in the same situations we previously described, this stack is going to grow smaller in height, making sure to layout elements in a manner that resembles a portrait iPhone&rsquo;s layout.<\/p><p>Finish by changing the bottom constraint constant of the <strong>Twitter Button<\/strong> to 35.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/84rkzt7yxir7vgs\/default-transitions-12-varying-stack-size.mp4?dl=0","bookmark_id":"swift4-default-transitions-varying-stack-size"},{"id":"11361","section_id":"128","order":"16","title":"Covering iPhone X","subhead":"","body":"<p>Lastly, we need to make sure we fully support <strong>iPhone X<\/strong> on this layout, and what I mean by that is the notch. Vary the storyboard&rsquo;s simulated size to <strong>iPhone X<\/strong> on <strong>Landscape<\/strong>. Then, change the <strong>Scroll View&rsquo;s<\/strong> top, bottom, leading, the trailing constraints to reference <strong>Safe Area Layout Guide<\/strong> at <strong>0<\/strong> points.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/h8qjlltyk67lb0s\/default-transitions-13-covering-iphone-x.mp4?dl=0","bookmark_id":"swift4-default-transitions-covering-iphone-x"},{"id":"11362","section_id":"128","order":"17","title":"Transition Types","subhead":"","body":"<p>As we have already adapted our More Scene for different layouts, I suggest you use it to test transitions from the More Scene to the Web View Controller. Do it by selecting the Segue from Interface Builder&rsquo;s Attributes Inspector.<\/p><p>Although Modal and Navigation transitions are very different on any iOS device, some <strong>Presentation Styles<\/strong> are indistinguishable on any device other than the iPad. It is suggested to use an iPad environment, even if it is on the simulator.<\/p><p>Additionally, vary the <strong>Storyboard<\/strong> to have all the scenes be <strong>iPad Landscape<\/strong>, so you can see how the transitions affect the connected view controllers.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/esuuwiib0vfr2fx\/default-transitions-14-transition-types.mp4?dl=0","bookmark_id":"swift4-default-transitions-transition-types"},{"id":"11363","section_id":"128","order":"18","title":"Present Transitions","subhead":"","body":"<p>Present transition lets you place a View Controller over the current one being displayed. This transition is often used to create a context for addition, editing, and confirmation that are supposed to be dismissed symmetrically.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/5jgr86ks8ur7ucx\/default-transitions-15-present-transition.mp4?dl=0","bookmark_id":"swift4-default-transitions-present-transitions"},{"id":"11364","section_id":"128","order":"19","title":"","subhead":"Present Modally","body":"<p>The default modally kind transitions the new <strong>View Controller<\/strong> from the bottom of the screen all the way up to the top. Dismissing this presentation performs the exact opposite transition, going from top to bottom. This transition is called cover vertical.<\/p><p>Both <strong>View Controllers<\/strong> and <strong>Segues<\/strong> can be customized to have a <strong>Presentation Style<\/strong>. This style describes how the presented view controller is going to place itself in the view hierarchy. The native styles are full screen, page sheet, form sheet, current context, over full screen, over current context, blur over full screen, and popover.<\/p><p>As we are using Interface Builder&rsquo;s Segues to build our navigation flow, it is suggested you select the <strong>More to Web<\/strong> segue and customize its <strong>Presentation Style<\/strong>. The ones we are particularly interested in are <strong>Page Sheet<\/strong> and <strong>Form Sheet<\/strong>.<\/p><p>This property is accessible via the <strong>UIModalPresentationStyle<\/strong> enum on <strong>UI Kit<\/strong> and may be implemented programmatically by accessing the <strong>modalPresentationStyle<\/strong> property on <strong>UI View Controller<\/strong> and all of its children:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> viewController <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewController<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>viewController<span class=\"token punctuation\">.<\/span>modalPresentationStyle <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UIModalPresentationStyle<\/span><span class=\"token punctuation\">.<\/span>fullScreen<br><span class=\"token function\">present<\/span><span class=\"token punctuation\">(<\/span>viewController<span class=\"token punctuation\">,<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">,<\/span> completion<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Similarly, you may also customize the <strong>Transition Style<\/strong> on both <strong>View Controller<\/strong> and segue. These are built in transitions made specifically to convey meaning. The built-in styles are cover vertical, flip horizontal, cross dissolve and partial curl. These styles might seem a bit too skeuomorphic for they are a legacy of the earlier versions of iOS. Currently, top quality iOS development demands custom, reversible and tailor-made transitions.<\/p><p>Select the same segue we have used previously and trigger between those <strong>Transition Styles<\/strong>. Beware that <strong>partial curl<\/strong> requires that the <strong>Presentation Mode<\/strong> be <strong>full screen<\/strong>.<\/p><p>This property is accessible via the <strong>&#xA0;UIModalTransitionStyle<\/strong> enum on <strong>UI Kit<\/strong> and may be implemented programmatically by accessing the <strong>modalTransitionStyle<\/strong> property on <strong>UI View Controller<\/strong> and all of its children:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> viewController <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewController<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>viewController<span class=\"token punctuation\">.<\/span>modalTransitionStyle <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UIModalTransitionStyle<\/span><span class=\"token punctuation\">.<\/span>crossDissolve<br>viewController<span class=\"token punctuation\">.<\/span>modalPresentationStyle <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UIModalPresentationStyle<\/span><span class=\"token punctuation\">.<\/span>fullScreen<br><span class=\"token function\">present<\/span><span class=\"token punctuation\">(<\/span>viewController<span class=\"token punctuation\">,<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">,<\/span> completion<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/0y1mp9uvszqur9n\/default-transitions-17-transition-style.mp4?dl=0","bookmark_id":"swift4-default-transitions-present-modally"},{"id":"11365","section_id":"128","order":"20","title":"","subhead":"Present as Popover","body":"<p>A popover presentation displays the presented view controller on top of the already presented context while not overlaying the entire screen. This is mostly used on the iPad to present small dismissible contexts. It&rsquo;s most notable appearance are on <strong>UI Action Controller<\/strong> element and <strong>UI Activity View Controller<\/strong> element, also known as <strong>Share Sheet<\/strong>.<\/p><p>Like all the modal transitions, it is highly advised that you use it in the reversible context for it can be automatically dismissed by tapping anywhere outside it.<\/p><p>It is a highly customizable element that reacts to its context. To use it, you must set an anchor from which it will grow and allow growth directions. To try it out, set the <strong>More To Web<\/strong> to <strong>Present as Popover<\/strong> and anchor it to different views on the screen.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/default-transitions-action-and-activity.jpeg","image_width":"1600","image_height":"900","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/5v4kf6v9f31mbgl\/default-transitions-18-present-as-popover.mp4?dl=0","bookmark_id":"swift4-default-transitions-present-as-popover"},{"id":"11366","section_id":"128","order":"21","title":"Enhancing the Bookmarks Scene","subhead":"","body":"<p>The Bookmarks scene we have built in a previous section is purposefully embedded inside a <strong>Navigation Bar<\/strong> for layout reasons. Although we are using <strong>Present Modally<\/strong> segues for transitioning to a section, it offers a good opportunity to show that there is a lot of convenience to using the <strong>Navigation Controller<\/strong>.<\/p><p>In this section, we suggest you switch back to <strong>iPhone<\/strong>, for we are no longer going to use context driven presentations.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-default-transitions-enhancing-the-bookmarks-scene"},{"id":"11367","section_id":"128","order":"22","title":"","subhead":"Setting the Segue","body":"<p>Create a <strong>Present Modally<\/strong> segue between the <strong>Bookmarks Scene<\/strong> and the <strong>Section Scene<\/strong> and label it <strong>&#x201D; Bookmarks to Section&#x201D;<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/gwq90uj6i22zbfa\/default-transitions-20-setting-the-segue.mp4?dl=0","bookmark_id":"swift4-default-transitions-setting-the-segue"},{"id":"11368","section_id":"128","order":"23","title":"","subhead":"Triggering the Segue","body":"<p>We are going to use each cell of the <strong>Bookmarks Table View<\/strong> to trigger a segue that is going to show a given section. Open the <strong>BookmarksTableViewController.swift<\/strong> file and include on the bottom of the class the following function:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">tableView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> tableView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UITableView<\/span><span class=\"token punctuation\">,<\/span> didSelectRowAt indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">performSegue<\/span><span class=\"token punctuation\">(<\/span>withIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Bookmarks to Section&quot;<\/span><span class=\"token punctuation\">,<\/span> sender<span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Instead of placing triggers and gesture recognizer in each of our views, a <strong>Table View<\/strong> does register touches on its own. These touches are relayed to a given controller that complies with the <strong>Table View Delegate<\/strong> protocol by implementing this function.<\/p><p>In the event the user selects a cell by <strong>Touching Up Inside<\/strong> it, the <strong>Table View<\/strong> will send a message to the <strong>Bookmarks Table View Controller<\/strong>, that in its turn, is going to perform a <strong>Segue<\/strong>. This segue is going to receive as the sender information the <strong>Index Path<\/strong> of the row, which we are going to use later.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-default-transitions-triggering-the-segue"},{"id":"11369","section_id":"128","order":"24","title":"","subhead":"Preparing for Segue","body":"<p>Although we have already triggered the segue, the <strong>Section Scene<\/strong> is not able to manage itself. As we have already reviewed in the <strong>Status Bar<\/strong> section of <strong>Chapter 3<\/strong>, it needs information on the section it is supposed to display on the screen.<\/p><p>Let&rsquo;s create a new method called <strong>prepare for segue<\/strong> which is going to automatically catch any segue this view controller should perform.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">prepare<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">for<\/span> segue<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIStoryboardSegue<\/span><span class=\"token punctuation\">,<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Inside it, we are going to narrow our reach by performing some tests to see if the segue is the one we are aiming for and what is the destination. This might not be particularly important in this example but it&rsquo;s iOS good practice and might be very useful when one view controller targets many others.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> segue<span class=\"token punctuation\">.<\/span>identifier <span class=\"token operator\">==<\/span> <span class=\"token string\">&quot;Bookmarks to Section&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">let<\/span> destination <span class=\"token operator\">=<\/span> segue<span class=\"token punctuation\">.<\/span>destination <span class=\"token keyword\">as<\/span><span class=\"token operator\">?<\/span> <span class=\"token builtin\">SectionViewController<\/span> <span class=\"token punctuation\">{<\/span><br>    destination<span class=\"token punctuation\">.<\/span>section <span class=\"token operator\">=<\/span> sections<span class=\"token punctuation\">[<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">]<\/span><br>    destination<span class=\"token punctuation\">.<\/span>sections <span class=\"token operator\">=<\/span> sections<br>    destination<span class=\"token punctuation\">.<\/span>indexPath <span class=\"token operator\">=<\/span> sender <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">IndexPath<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In this example we simply set values right before the segue is triggered, guaranteeing that this data will be available before <strong>view did load<\/strong> on the <strong>Section View Controller<\/strong>. You may also notice that we are casting the sender we have just passed before as an <strong>Index Path<\/strong>. Although force casting is unadvised, it should cause no harm in this example.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/z4rzsmkfb66w1kr\/default-transitions-21-preparing-for-segue.mp4?dl=0","bookmark_id":"swift4-default-transitions-preparing-for-segue"},{"id":"11370","section_id":"128","order":"25","title":"Navigation Transitions","subhead":"","body":"<p>The <strong>UI Navigation Controller<\/strong> class inherits from <strong>UI View Controller<\/strong>, hence it comes with all of the previously shown transitions. However, it also has its own way of transitioning from one screen to another, and back. This is commonly known as the Push effect. <strong>Push<\/strong> transition shows a presented view controller and <strong>Pop<\/strong> dismisses it.<\/p><p>A <strong>Navigation Controller<\/strong> is also responsible for managing an orderly navigation stack of view controllers and this method pushes and pops the view controllers from or back to the stack like a deck of cards. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/hjfjbwh73kjkiek\/transition_push.mp4?dl=0","bookmark_id":"swift4-default-transitions-navigation-transitions"},{"id":"11371","section_id":"128","order":"26","title":"","subhead":"Push","body":"<p>It&apos;s the most used transition on most Apple apps, for instance, Settings. Quite creatively, a smooth and natural transition occur where the new view controller enters the screen from right to left with a curve ease out animation, while the view controller being covered moves to the left, rendering it more lively. This transition also brings an eye-catching navigation bar animation where both view controllers&rsquo; title shift slightly and change their alpha as the back icon button appears simultaneously.<\/p><p>You can achieve this on <strong>Interface Builder<\/strong> by setting the <strong>&#xA0;Bookmarks to Section<\/strong> segue&rsquo;s kind to <strong>Show (e.g. Push)<\/strong>. This will only work because the source view controller (the Bookmarks Scene) is contained inside a Navigation Controller, otherwise, it will default to <strong>Present Cover Vertical<\/strong>.<\/p><p>Alternatively, it is also possible to call it using Swift with: <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> destination <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewController<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <br>navigationController<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">pushViewController<\/span><span class=\"token punctuation\">(<\/span>destination<span class=\"token punctuation\">,<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/mqh2gqxfkos64k6\/default-transitions-22-show.mp4?dl=0","bookmark_id":"swift4-default-transitions-push"},{"id":"11372","section_id":"128","order":"27","title":"","subhead":"Show Detail","body":"<p>In a <strong>Regular Width<\/strong> size class environment with a <strong>Split View Controller<\/strong>, you may use this navigation transition. It sets the new view controller to become the detail rather than pushing it over the entire context. A good example of this can be found in the Settings app whereby selecting any option on an iPad, it displays a new view controller on the right side as detail.<\/p><p>Similarly to <strong>Push<\/strong>, this transition also defaults to other kinds of environment. For example, on an iPhone in portrait, it pushes a new view controller instead, having the same functionality as shown in compact size classes. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/tyr104ebz0x7bx2\/default-transitions-23-show-detail.mp4?dl=0","bookmark_id":"swift4-default-transitions-show-detail"},{"id":"11373","section_id":"128","order":"28","title":"","subhead":"Pop","body":"<p>Pop reverses a previous Show action. It executes the exact opposite transition taking from the current view controller to the one shown previously. <\/p><p>It exhibits an interactive transition such as <strong>Swipe to Go Back<\/strong>, by which as the user swipes right, starting from the left edge of the screen, the transition reflects interactively depending on the distance swiped. There is a section further along only dedicated to Interactive Transitions which will unveil to you even more possibilities.<\/p><pre><code class=\"language-swift\">navigationController<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">popViewController<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br>navigationController<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">popToViewController<\/span><span class=\"token punctuation\">(<\/span>viewController<span class=\"token punctuation\">,<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br>navigationController<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">popToRootViewController<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>You can always ask the navigation controller to <strong>Pop<\/strong> programmatically in many ways. In the example above you may pop the <strong>topmost<\/strong> view controller, you may pop <strong>until navigation reaches a view controller<\/strong> and you may also pop <strong>until you reach the bottommost<\/strong> view controller.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/oq9j1kwqlcm7f2k\/default-transitions-24-pop.mp4?dl=0","bookmark_id":"swift4-default-transitions-pop"},{"id":"11374","section_id":"128","order":"29","title":"Unwind Segue","subhead":"","body":"<p>We can achieve both <strong>Dismiss<\/strong> and <strong>Pop<\/strong> with an <strong>Unwind Segue<\/strong> as well. To set one up, we must create an unwind function on our view controller that we want to unwind.<\/p><p>Alternatively, we can use an extension to enable it on all view controllers. Add this code to the bottom of your <strong>BookmarksViewController.swift<\/strong> file:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">public<\/span> <span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">UIViewController<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">func<\/span> unwindToViewController <span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> segue <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIStoryboardSegue<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token function\">dismiss<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">,<\/span> completion<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br> <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This will enable a project-wide <strong>@IBAction<\/strong> on all your storyboards enabling an action for <strong>Exit<\/strong> on your scenes.<\/p><p>As we have mentioned before, <strong>Navigation Controller<\/strong> draws all its functionality from the standard segues to make an interface for orderly navigation. Following that same logic, you may <strong>Pop<\/strong> (reverse of Push) or <strong>Dismiss<\/strong> (reverse of Present) by calling <strong>dismiss<\/strong> on your view controller.<\/p><p>Go back to the <strong>Section Scene<\/strong> and, using <strong>CTRL+Drag<\/strong>, connect the <strong>Close Button<\/strong> to the <strong>Exit<\/strong> of the view controller. Also, in the <strong>Connection Inspector<\/strong>, remove the action for <strong>close button tapped<\/strong>. Then, proceed to the <strong>Section View Controller<\/strong> and remove the <strong>close button tapped<\/strong> action.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/3ox84vklwkrr84u\/default-transitions-25-unwind-segue.mp4?dl=0","bookmark_id":"swift4-default-transitions-unwind-segue"},{"id":"11375","section_id":"128","order":"30","title":"Conclusion","subhead":"","body":"<p>With what you&apos;ve learned so far, you can apply multiple transitions in your app to create a nice navigation flow. Of course, your app can get by from just using default animations. But nowadays, cool animations are raging. So if you want to give your users a more immersive experience that aligns with your (brand\/app\/product\/company) style, implementing more complex animations is recommended. That is what you will learn in the next two sections. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-default-transitions-conclusion"},{"id":"11376","section_id":"128","order":"31","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/marcosgriselli\">Marcos Griselli<\/a> and <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-default-transitions-credit"}]},{"id":"129","chapter_id":"4","order":"60","slug":"swift4-custom-transitions","title":"Custom Transitions","caption":"Create a seamless animation from one screen to another","body":"<p>So far, we covered the default transitions provided by <strong>UIKit<\/strong> out of the box. Although UIKit lets us perform different transitions for all of our navigation flow varieties, it might not be enough for our app. The <strong>Design+Code<\/strong> app is full of custom transitions that give rise to a much more lively look and feel to the navigation flow. We&rsquo;ll go over how all our animations were built using animator objects that conform to the <strong>UIViewControllerAnimatedTransitioning<\/strong> protocol and <strong>UIViewControllerInteractiveTransitions<\/strong> for transitions controlled by a <strong>UIPercentDrivenInteractiveTransition<\/strong> object. <\/p><video src=\"https:\/\/www.dl.dropboxusercontent.com\/s\/3k7jju5z0s0g3bf\/custom_transition.mp4?dl=0\" controls=\"controls\" width=\"100%\"><\/video>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-custom-transitions.jpg","video":"https:\/\/player.vimeo.com\/external\/253622984.hd.mp4?s=8fcd301796dde3fa7884e348c5eb4984fd5a6a74&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-custom-transitions.zip","contents":[{"id":"11312","section_id":"129","order":"1","title":"Downloads for Custom Transitions","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\" title=\"Xcode 9\">Xcode 9<\/a>, and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-default-transitions\" title=\"Default Transitions\">Default Transitions<\/a>. Also, make sure to download the <a href=\"https:\/\/www.dropbox.com\/s\/g1tt7n510fk0f8h\/4.06.CustomTransitions.zip?dl=1\" title=\"final project for this section\">final project<\/a> for comparison.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-downloads-for-custom-transitions"},{"id":"11313","section_id":"129","order":"2","title":"Interplay","subhead":"","body":"<p>There are many ways to build animations on iOS apps. Because of this, it is highly recommended to learn some architectural paradigms to write maintainable code.<\/p><p>To build the transition from the <strong>Home Scene<\/strong> to the <strong>Section Scene<\/strong>, we are going to review the role of 4 actors: an <strong>origin<\/strong>, a <strong>destination<\/strong>, an <strong>animated transitioning<\/strong>, and a <strong>transition delegate<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-interplay"},{"id":"11314","section_id":"129","order":"3","title":"","subhead":"Present Section","body":"<p>In a previous section, we reviewed many techniques used to animate elements inside a view. Animating a transition between two views is similar to that. The main difference is that we are not going to handle this in a function inside one of the <strong>View Controllers<\/strong>. In this example, we are going to designate an <strong>Object<\/strong> specifically in charge of the transition.<\/p><p>Create a new <strong>Cocoa Touch Class<\/strong> using <strong>File &gt; New &gt; File&#x2026;<\/strong>. Let&rsquo;s name it <strong>PresentSectionViewController<\/strong> and derive it from <strong>NSObject<\/strong>. Also, complete the statement by adding a protocol compliance to the declaration, as well as a <strong>cell frame<\/strong> and a <strong>cell transform<\/strong> variables that will be of use in the animation.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">PresentSectionViewController<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">NSObject<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">UIViewControllerAnimatedTransitioning<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">var<\/span> cellFrame <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGRect<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token keyword\">var<\/span> cellTransform <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CATransform3D<\/span><span class=\"token operator\">!<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-present-section"},{"id":"11315","section_id":"129","order":"4","title":"","subhead":"Animated Transitioning","body":"<p>To comply with <strong>View Controller Animated Transitioning<\/strong>, implement functionality in the object: to inform <strong>transition duration<\/strong>, and to perform <strong>animate transition<\/strong>.<\/p><p>Informing the duration should be done inside the class with this function:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">transitionDuration<\/span><span class=\"token punctuation\">(<\/span>using transitionContext<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewControllerContextTransitioning<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">TimeInterval<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> <span class=\"token number\">5<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>The code that follows is the minimal skeleton needed to perform animations on this architecture. Preparing for, performing, and finishing the transition should also be done inside the class like this:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">animateTransition<\/span><span class=\"token punctuation\">(<\/span>using transitionContext<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewControllerContextTransitioning<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token keyword\">let<\/span> destination <span class=\"token operator\">=<\/span> transitionContext<span class=\"token punctuation\">.<\/span><span class=\"token function\">viewController<\/span><span class=\"token punctuation\">(<\/span>forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>to<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">SectionViewController<\/span><br>    <span class=\"token keyword\">let<\/span> containerView <span class=\"token operator\">=<\/span> transitionContext<span class=\"token punctuation\">.<\/span>containerView<br>    containerView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>destination<span class=\"token punctuation\">.<\/span>view<span class=\"token punctuation\">)<\/span><br><br>    <span class=\"token comment\">\/\/ Initial state<\/span><br><br>    <span class=\"token keyword\">let<\/span> animator <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewPropertyAnimator<\/span><span class=\"token punctuation\">(<\/span>duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">5<\/span><span class=\"token punctuation\">,<\/span> dampingRatio<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token comment\">\/\/ Final state<\/span><br>    <span class=\"token punctuation\">}<\/span><br><br>    animator<span class=\"token punctuation\">.<\/span>addCompletion <span class=\"token punctuation\">{<\/span> <span class=\"token punctuation\">(<\/span>finished<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">in<\/span><br>        <span class=\"token comment\">\/\/ Completion<\/span><br>        transitionContext<span class=\"token punctuation\">.<\/span><span class=\"token function\">completeTransition<\/span><span class=\"token punctuation\">(<\/span><span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><br>    animator<span class=\"token punctuation\">.<\/span><span class=\"token function\">startAnimation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>You can also see that both the <strong>Transition Duration<\/strong> and the <strong>View Property Animator<\/strong> duration are <strong>5<\/strong> seconds long. In this longer interval, you will be able to take notice of the details while developing.<\/p><p>This protocol also anticipates the need for action on interruptions (like phone calls, messages or system events) and completion actions. In this section, we will focus on the basics.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-animated-transitioning"},{"id":"11316","section_id":"129","order":"5","title":"","subhead":"Transition Delegate","body":"<p>A <strong>Transition Delegate<\/strong> is an <strong>Object<\/strong> that receives the responsibility of telling a <strong>View Controller<\/strong> who it should ask for a transition. It does not animate views. Instead, it returns a <strong>Animated Transitioning<\/strong> according to the navigation action and the <strong>View Controllers<\/strong> involved.<\/p><p>Include in the class declaration of your <strong>Home View Controller<\/strong> an immutable instance of the class we have just created:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> presentSectionViewController <span class=\"token operator\">=<\/span> <span class=\"token function\">PresentSectionViewController<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>We are going to use it and recycle its logic over and over again. Every time an object should ask this controller which transition it should perform, it is going to return the <strong>PresentSectionViewController<\/strong><\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">HomeViewController<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewControllerTransitioningDelegate<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">animationController<\/span><span class=\"token punctuation\">(<\/span>forPresented presented<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewController<\/span><span class=\"token punctuation\">,<\/span> presenting<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewController<\/span><span class=\"token punctuation\">,<\/span> source<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewController<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">UIViewControllerAnimatedTransitioning<\/span><span class=\"token operator\">?<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">return<\/span> presentSectionViewController<br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In this example, the <strong>Home View Controller<\/strong> is a <strong>Transitioning Delegate<\/strong> that returns <strong>Animated Transitioning<\/strong> objects when asked for them. In case a <strong>View Controller<\/strong> is to be displayed using a <strong>Present Segue<\/strong>, it is going to return a <strong>Present Section View Controller Animated Transitioning<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-transition-delegate"},{"id":"11317","section_id":"129","order":"6","title":"","subhead":"Prepare for Segue","body":"<pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> didSelectItemAt indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">performSegue<\/span><span class=\"token punctuation\">(<\/span>withIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;HomeToSection&quot;<\/span><span class=\"token punctuation\">,<\/span> sender<span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Upon touching up inside a <strong>Section Cell<\/strong>, the <strong>Home View Controller<\/strong> is asked to perform the <strong>Home To Section<\/strong> segue that targets the <strong>Section Scene<\/strong> using a <strong>Present Modally Segue<\/strong>. Here is an updated version of the <strong>prepareFor:segue:sender:<\/strong> method you should place in your code:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> segue<span class=\"token punctuation\">.<\/span>identifier <span class=\"token operator\">==<\/span> <span class=\"token string\">&quot;HomeToSection&quot;<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token keyword\">let<\/span> destination <span class=\"token operator\">=<\/span> segue<span class=\"token punctuation\">.<\/span>destination <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">SectionViewController<\/span><br>    <span class=\"token keyword\">let<\/span> indexPath <span class=\"token operator\">=<\/span> sender <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">IndexPath<\/span><br>    <span class=\"token keyword\">let<\/span> section <span class=\"token operator\">=<\/span> sections<span class=\"token punctuation\">[<\/span>indexPath<span class=\"token punctuation\">.<\/span>row<span class=\"token punctuation\">]<\/span><br><br>    destination<span class=\"token punctuation\">.<\/span>section <span class=\"token operator\">=<\/span> section<br>    destination<span class=\"token punctuation\">.<\/span>sections <span class=\"token operator\">=<\/span> sections<br>    destination<span class=\"token punctuation\">.<\/span>indexPath <span class=\"token operator\">=<\/span> indexPath<br>    destination<span class=\"token punctuation\">.<\/span>transitioningDelegate <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br><br>    <span class=\"token keyword\">let<\/span> attributes <span class=\"token operator\">=<\/span> chapter1CollectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">layoutAttributesForItem<\/span><span class=\"token punctuation\">(<\/span>at<span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token keyword\">let<\/span> cellFrame <span class=\"token operator\">=<\/span> chapter1CollectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">convert<\/span><span class=\"token punctuation\">(<\/span>attributes<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">,<\/span> to<span class=\"token punctuation\">:<\/span> view<span class=\"token punctuation\">)<\/span><br><br>    presentSectionViewController<span class=\"token punctuation\">.<\/span>cellFrame <span class=\"token operator\">=<\/span> cellFrame<br>    presentSectionViewController<span class=\"token punctuation\">.<\/span>cellTransform <span class=\"token operator\">=<\/span> <span class=\"token function\">animateCell<\/span><span class=\"token punctuation\">(<\/span>cellFrame<span class=\"token punctuation\">:<\/span> cellFrame<span class=\"token punctuation\">)<\/span><br><br>    isStatusBarHidden <span class=\"token operator\">=<\/span> <span class=\"token boolean\">true<\/span><br><br>    <span class=\"token builtin\">UIView<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span>withDuration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.5<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">setNeedsStatusBarAppearanceUpdate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Then, it sets the <strong>Transitioning Delegate<\/strong> of the <strong>Section View Controller<\/strong> to be self, in this case, <strong>Home View Controller<\/strong>. This assignment ensures that <strong>Section View Controller<\/strong> asks <strong>Home View Controller<\/strong> for an <strong>Animated Transitioning<\/strong> object right before it starts transitioning.<\/p><p>In the meantime, it will pass information to the <strong>Section View Controller<\/strong>, while also calculating and assigning values to the <strong>Present Section View Controller<\/strong> about the frame and transform of the tapped cell. Additionally, it will hide the status bar.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-prepare-for-segue"},{"id":"11318","section_id":"129","order":"7","title":"Transitioning","subhead":"","body":"<p>Now that you know how a transition is wired, let&rsquo;s take a closer look at how we want our animation to perform.<\/p><p>In this transition, we have the <strong>destination<\/strong> wrap itself just like the <strong>Section Cell<\/strong> and unfold smoothly into the stage. Even though this seems like a pretty complicated animation, it isn&rsquo;t. But it has a lot of elements, so we&rsquo;ll break it down into chunks. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/afwgd0cf6qrokiw\/section_finished_transition.mp4?dl=0","bookmark_id":"swift4-custom-transitions-transitioning"},{"id":"11319","section_id":"129","order":"8","title":"","subhead":"Storyboard Configuration","body":"<p>Most of the design process can happen outside of code using <strong>Storyboards<\/strong>. Open the <strong>Main.storyboard<\/strong> file so we can refactor a little bit before performing the transitions. <\/p><p>Trigger the <strong>Assistant Editor<\/strong> on the <strong>Section Scene<\/strong> and <strong>Section View Controller<\/strong> to place the following outlets: <\/p><ul>\t<li><strong>scrollView<\/strong>, for the scrollView of the content<\/li>\t<li><strong>coverView<\/strong>, for the view that holds the image, title, subtitle and other elements<\/li>\t<li><strong>subheadVisualEffectView<\/strong>, for the progress visual effects view<\/li>\t<li><strong>closeVisualEffectView<\/strong>, for the close button visual effects view<\/li><\/ul><p>We are going to animate all of those items one by one in this transition.<\/p><p>If you need to place a different constraint layout without having to interfere with existing constraints, you can prioritize it. A simple method is to have your definitive layout constraints placed amongst other constraints with lower priority. This will ensure that they come into effect once the temporary layout gets deactivated. Hide the <strong>Assistant Editor<\/strong> so as to focus on <strong>Interface Builder<\/strong>.<\/p><p>Select the <strong>Scroll View<\/strong> and lower the priority of its bottom and trailing constraints to <strong>999<\/strong>. Also, select the <strong>Cover View<\/strong> and lower the priority of its bottom and height constraints to <strong>999<\/strong>.<\/p><p>The transparency in this view is set to work properly on a <strong>Cover Vertical<\/strong> present transition, but might cause trouble on the current setup. Select the <strong>View<\/strong> from the <strong>Section View Controller<\/strong> and make its background color transparent. Then, select the <strong>Scroll View<\/strong> and set its background color to white.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/jiai5zox5vtksox\/custom-transitions-04-correcting-transparency.mp4?dl=0","bookmark_id":"swift4-custom-transitions-storyboard-configuration"},{"id":"11320","section_id":"129","order":"9","title":"","subhead":"Cell Properties","body":"<p>So far, we know that our transition needs to start from one of the section cards and animate its way to the <strong>Section View Controller<\/strong> layout. To achieve this, the frame and transform of the <strong>Section Cell<\/strong> have already been set as properties in the <strong>Present Section View Controller<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">PresentSectionViewController<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">NSObject<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">UIViewControllerAnimatedTransitioning<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">var<\/span> cellFrame<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGRect<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token keyword\">var<\/span> cellTransform <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CATransform3D<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token comment\">\/\/ &#x2026; other code<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-cell-properties"},{"id":"11321","section_id":"129","order":"10","title":"","subhead":"Context","body":"<p>Next, we dive into the <strong>animate transition<\/strong> method. Append all of the following code blocks to this function.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">animateTransition<\/span><span class=\"token punctuation\">(<\/span>using transitionContext<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewControllerContextTransitioning<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>The method&rsquo;s signature gives as a <strong>Transition Context<\/strong> object that contains both origin and destination <strong>View Controllers<\/strong>. It also references to a <strong>Container View<\/strong> that is the stage in which we are going to perform the animation. It is mandatory to add the animated views to the <strong>Container View<\/strong>.<\/p><p>The parts above the <strong>Initial state<\/strong> comment access those objects like this:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> destination <span class=\"token operator\">=<\/span> transitionContext<span class=\"token punctuation\">.<\/span><span class=\"token function\">viewController<\/span><span class=\"token punctuation\">(<\/span>forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>to<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">SectionViewController<\/span><br><span class=\"token keyword\">let<\/span> containerView <span class=\"token operator\">=<\/span> transitionContext<span class=\"token punctuation\">.<\/span>containerView<br><br>containerView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addSubview<\/span><span class=\"token punctuation\">(<\/span>destination<span class=\"token punctuation\">.<\/span>view<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-context"},{"id":"11322","section_id":"129","order":"11","title":"","subhead":"Section Folded","body":"<p>Since we&rsquo;re using <strong>Auto Layout<\/strong> in our <strong>Section View Controller<\/strong>, we can just add constraints and transform it to correspond to the <strong>Section Cell<\/strong> position and frame. Place those below the <strong>Initial state<\/strong> comment, to size and transform the destination.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> widthConstraint <span class=\"token operator\">=<\/span> destination<span class=\"token punctuation\">.<\/span>scrollView<span class=\"token punctuation\">.<\/span>widthAnchor<span class=\"token punctuation\">.<\/span><span class=\"token function\">constraint<\/span><span class=\"token punctuation\">(<\/span>equalToConstant<span class=\"token punctuation\">:<\/span> <span class=\"token number\">304<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> heightConstraint <span class=\"token operator\">=<\/span> destination<span class=\"token punctuation\">.<\/span>scrollView<span class=\"token punctuation\">.<\/span>heightAnchor<span class=\"token punctuation\">.<\/span><span class=\"token function\">constraint<\/span><span class=\"token punctuation\">(<\/span>equalToConstant<span class=\"token punctuation\">:<\/span> <span class=\"token number\">248<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> bottomConstraint <span class=\"token operator\">=<\/span> destination<span class=\"token punctuation\">.<\/span>scrollView<span class=\"token punctuation\">.<\/span>bottomAnchor<span class=\"token punctuation\">.<\/span><span class=\"token function\">constraint<\/span><span class=\"token punctuation\">(<\/span>equalTo<span class=\"token punctuation\">:<\/span> destination<span class=\"token punctuation\">.<\/span>coverView<span class=\"token punctuation\">.<\/span>bottomAnchor<span class=\"token punctuation\">)<\/span><br><br><span class=\"token builtin\">NSLayoutConstraint<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">activate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">[<\/span>widthConstraint<span class=\"token punctuation\">,<\/span> heightConstraint<span class=\"token punctuation\">,<\/span> bottomConstraint<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> translate <span class=\"token operator\">=<\/span> <span class=\"token function\">CATransform3DMakeTranslation<\/span><span class=\"token punctuation\">(<\/span>cellFrame<span class=\"token punctuation\">.<\/span>origin<span class=\"token punctuation\">.<\/span>x<span class=\"token punctuation\">,<\/span> cellFrame<span class=\"token punctuation\">.<\/span>origin<span class=\"token punctuation\">.<\/span>y<span class=\"token punctuation\">,<\/span> <span class=\"token number\">0.0<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> tranform <span class=\"token operator\">=<\/span> <span class=\"token function\">CATransform3DConcat<\/span><span class=\"token punctuation\">(<\/span>translate<span class=\"token punctuation\">,<\/span> cellTransform<span class=\"token punctuation\">)<\/span><br><br>destination<span class=\"token punctuation\">.<\/span>view<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> tranform<br>destination<span class=\"token punctuation\">.<\/span>view<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>zPosition <span class=\"token operator\">=<\/span> <span class=\"token number\">999<\/span><br><\/code><\/pre><p>Then, we need to force the view to layout its updated constraint.<\/p><pre><code class=\"language-swift\">containerView<span class=\"token punctuation\">.<\/span><span class=\"token function\">layoutIfNeeded<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>We have our <strong>Section View<\/strong> correctly positioned over the <strong>Section Cell<\/strong> with its image having the height of the cell, thus giving the illusion that it&rsquo;s the cell that expands.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-section-folded"},{"id":"11323","section_id":"129","order":"12","title":"","subhead":"Unfolding","body":"<p><strong>Auto Layout<\/strong> gives us the possibility of animating constraint changes without any hustle or peculiar calculations. Taking this into consideration, we just deactivate the constraints and reset the transform for the final state.<\/p><p>Place those below the <strong>Final state<\/strong> commented part to reset the layout.<\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">NSLayoutConstraint<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">deactivate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">[<\/span>widthConstraint<span class=\"token punctuation\">,<\/span> heightConstraint<span class=\"token punctuation\">,<\/span> bottomConstraint<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><br>destination<span class=\"token punctuation\">.<\/span>view<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token builtin\">CATransform3DIdentity<\/span><br><\/code><\/pre><p><strong>Auto Layout<\/strong> has our view in its initial position and knows that some changes were made to readjust to the final position. Before it does layout the view automatically without animation, we force it to layout inside an <strong>animation block<\/strong>. With the following call, the view will smoothly and elegantly reposition and resize:<\/p><pre><code class=\"language-swift\">containerView<span class=\"token punctuation\">.<\/span><span class=\"token function\">layoutIfNeeded<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>That&rsquo;s it. Just like magic, <strong>Auto Layout<\/strong> will interpolate the changes inside our <strong>View Property Animator<\/strong> block giving us a beautiful animation.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-unfolding"},{"id":"11324","section_id":"129","order":"13","title":"Refining Inner States","subhead":"","body":"<p>At this point, the animation contemplates basic resizing and positioning for the <strong>Section View&rsquo;s<\/strong> background image. The remaining elements were not handled, so they just appear on the screen without any movement or animation rather than the ones provoked by the <strong>Auto Layout<\/strong> constraint changes.<\/p><p>For example, the <strong>Percentage View<\/strong> and the <strong>Close Button<\/strong> simply appear on the screen. Also, because the <strong>Section View<\/strong> starts with corner radius at <strong>0<\/strong>, we get a small jump when moving from the <strong>Section Cell<\/strong> which has a corner radius of <strong>14<\/strong>. Details like these are the ones that give that boost from a nice animation to a great transition.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/3o8huqnheerkgz9\/custom-transitions-05-refining-inner-states.mp4?dl=0","bookmark_id":"swift4-custom-transitions-refining-inner-states"},{"id":"11325","section_id":"129","order":"14","title":"","subhead":"Styling the Cell","body":"<p>Firstly, we tackle the corner radius and shadows. The conventional approach to this is to mirror the initial state of the destination view to the <strong>Section Cell<\/strong>. Then, we reset some of them inside the <strong>animation block<\/strong>.<\/p><p>Place this below the <strong>Initial state<\/strong>.<br><\/p><pre><code class=\"language-swift\">destination<span class=\"token punctuation\">.<\/span>scrollView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">14<\/span><br>destination<span class=\"token punctuation\">.<\/span>scrollView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>shadowOpacity <span class=\"token operator\">=<\/span> <span class=\"token number\">0.25<\/span><br>destination<span class=\"token punctuation\">.<\/span>scrollView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>shadowOffset<span class=\"token punctuation\">.<\/span>height <span class=\"token operator\">=<\/span> <span class=\"token number\">10<\/span><br>destination<span class=\"token punctuation\">.<\/span>scrollView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>shadowRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">20<\/span><br><\/code><\/pre><p>And reset them below the <strong>Final state<\/strong>.<\/p><pre><code class=\"language-swift\">destination<span class=\"token punctuation\">.<\/span>scrollView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>cornerRadius <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-styling-the-cell"},{"id":"11326","section_id":"129","order":"15","title":"","subhead":"Animating Button and Subhead","body":"<p>Finally, we want to animate the subviews inside such as the close button, the subheading, and the heading labels. The close button and the subheading could start transparent and enter from the top while reducing their size. Also, the title label could scale and move to create a parallax effect.<\/p><p>To achieve this, we&rsquo;ll set the initial alpha transparency, and create an <strong>Affine Transform<\/strong> composed of a translation and a scale to position it outside the view.<br><\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> moveUpTransform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>translationX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">100<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> scaleUpTranform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>scaleX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">2<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">2<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> removeFromViewTransform <span class=\"token operator\">=<\/span> moveUpTransform<span class=\"token punctuation\">.<\/span><span class=\"token function\">concatenating<\/span><span class=\"token punctuation\">(<\/span>scaleUpTranform<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>The <strong>remove from view transform<\/strong> is nothing but a vertical movement up of <strong>100<\/strong> points and a <strong>2-fold<\/strong> scaling on width and height applied to the <strong>Close Button<\/strong> and <strong>Subhead<\/strong> elements.<\/p><p>Place this below the <strong>Initial state<\/strong>.<\/p><pre><code class=\"language-swift\">destination<span class=\"token punctuation\">.<\/span>closeVisualEffectView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>destination<span class=\"token punctuation\">.<\/span>closeVisualEffectView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> removeFromViewTransform<br><br>destination<span class=\"token punctuation\">.<\/span>subheadVisualEffectView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>destination<span class=\"token punctuation\">.<\/span>subheadVisualEffectView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> removeFromViewTransform<br><\/code><\/pre><p>And reset them below the <strong>Final state<\/strong>.<\/p><pre><code class=\"language-swift\">destination<span class=\"token punctuation\">.<\/span>closeVisualEffectView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br>destination<span class=\"token punctuation\">.<\/span>closeVisualEffectView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>identity<br><br>destination<span class=\"token punctuation\">.<\/span>subheadVisualEffectView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br>destination<span class=\"token punctuation\">.<\/span>subheadVisualEffectView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>identity<br><\/code><\/pre><p>Still, in the <strong>Final state<\/strong> we will create a second transform and apply it to the <strong>Title Label<\/strong>, so it animates on its own.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> scaleTitleTranform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>scaleX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1.2<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1.2<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> moveTitleTransform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>translationX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">30<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">10<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> titleTranform <span class=\"token operator\">=<\/span> scaleTitleTranform<span class=\"token punctuation\">.<\/span><span class=\"token function\">concatenating<\/span><span class=\"token punctuation\">(<\/span>moveTitleTransform<span class=\"token punctuation\">)<\/span><br><br>destination<span class=\"token punctuation\">.<\/span>titleLabel<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> titleTranform<br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-animating-button-and-subhead"},{"id":"11327","section_id":"129","order":"16","title":"Duration","subhead":"","body":"<p>Regarding animation best practices, no obligatory animation, such as transitions, should exceed <strong>1<\/strong> second in duration. Finish your project by changing both the animation and transition durations to <strong>0.6<\/strong> seconds to improve the user experience. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/sr8fd2d5it9h98i\/custom-transitions-06-duration.mp4?dl=0","bookmark_id":"swift4-custom-transitions-duration"},{"id":"11328","section_id":"129","order":"17","title":"Conclusion","subhead":"","body":"<p>Animating transitions inside a specific object makes your transitions reusable in multiple contexts. As your <strong>Controllers<\/strong> will eventually grow bigger and complex, it&rsquo;s important to know a solution to separating code that does not belong to the <strong>View Controller<\/strong> logic.<\/p><p>Transitions are a little more than flexible animations. Break it step by step, and you can build your own.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-conclusion"},{"id":"11329","section_id":"129","order":"18","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/marcosgriselli\">Marcos Griselli<\/a> and <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-custom-transitions-credit"}]},{"id":"130","chapter_id":"4","order":"70","slug":"swift4-gesture-interactions","title":"Gesture Interactions","caption":"Using gestures to dismiss","body":"<p>At this point, we have an amazing transition with multiple animations going on. But we want to go even further an have our transition perform interactively. Gestural interactions let you manipulate back and forth just by updating the percentage of the animation.<br><\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-gesture-interactions.jpg","video":"https:\/\/player.vimeo.com\/external\/254767092.hd.mp4?s=b919fa4573402270cc2475b9565f28ac99ca1aa1&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-gesture-interactions.zip","contents":[{"id":"11395","section_id":"130","order":"1","title":"Downloads for Gesture Interactions","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\" title=\"Xcode 9\">Xcode 9<\/a>, and the finished Xcode project from <a href=\"https:\/\/designcode.io\/swift4-custom-transitions\">Custom Transitions<\/a>. Also, make sure to download the <a href=\"https:\/\/www.dropbox.com\/s\/m0jite1435k4gis\/DesignCodeApp%20Gesture%20Interactions%20Revised%20Final.zip?dl=1\" title=\"final project for this section\">final project<\/a> for comparison.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-downloads-for-gesture-interactions"},{"id":"11396","section_id":"130","order":"2","title":"Importing Assets","subhead":"","body":"<p>For this section, you will need to import a single file provided in this <a href=\"https:\/\/www.dropbox.com\/s\/ln6wv3zqyqpeyt5\/Gesture%20Interactions%20Assets.zip?dl=1\" title=\"Gesture Interactions assets\">assets folder<\/a>. Place it in the assets catalog (the Assets.xcassets file) to make it available in the project.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/urbgat44cejv0f4\/gesture-interactions-01-importing-assets.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-importing-assets"},{"id":"11397","section_id":"130","order":"3","title":"Layout Premisses","subhead":"","body":"<p>In this section, we are going to enhance the experience of the <strong>More Scene<\/strong> while also building the <strong>Purchase Scene<\/strong>. Both of these scenes will be capable of using the single <strong>Pan To Close<\/strong> interaction we are going to build because they will share the same layout structure.<\/p><p>As we have already reviewed in the <strong>More Scene<\/strong>, to create a moving dialog inside a <strong>Scroll View<\/strong> we need to fulfill its inner and outer sizes. Only this time we will target iPhone and iPad simultaneously. To simplify this task, we are going to set <strong>Interface Builder&rsquo;s<\/strong> simulated size to <strong>iPad<\/strong> in landscape mode. Then, we will build the layout for the regular size classes, and follow up on the compact size classes.<\/p><p>Switch to the <strong>Main.storyboard<\/strong> file and change its simulated size to <strong>iPad on landscape<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-layout-premisses"},{"id":"11398","section_id":"130","order":"4","title":"Purchase Scene","subhead":"","body":"<p>Begin by dropping a <strong>View Controller<\/strong> below the <strong>More Scene<\/strong> and renaming it <strong>Purchase<\/strong> in the document outline.<\/p><p>To connect it to the navigation, create a <strong>Present Modally<\/strong> segue from the <strong>Login Button<\/strong> on the <strong>More Scene<\/strong> to the <strong>Purchase Scene<\/strong>. Select the segue and change its presentation to <strong>Over Full Screen<\/strong> with a <strong>Cross Dissolve<\/strong> animation.<\/p><p>Finally, select the main and only view and set its background to <strong>Default Transparent<\/strong>. Transparency will ensure that the <strong>More Scene<\/strong> layout bleeds through when the <strong>Purchase Scene<\/strong> is presented <strong>Over Full Screen<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/xnaashvohpg1hd2\/gesture-interactions-02-purchase-scene.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-purchase-scene"},{"id":"11399","section_id":"130","order":"5","title":"Dialog View","subhead":"","body":"<p>Place a <strong>Scroll View<\/strong> inside it and constrain it to all of its sides. Then place a <strong>View<\/strong> inside it and name it <strong>Dialog View<\/strong>. This <strong>Dialog View<\/strong> has to be constrained to fulfill the <strong>Scroll View&rsquo;s<\/strong> sizing needs. Constrain it to <strong>600h<\/strong>, <strong>500w<\/strong>, <strong>centerX<\/strong>, <strong>centerY<\/strong>, and <strong>20<\/strong> points for all sides.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/56i4mye0alixcvc\/gesture-interactions-03-dialog-view.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-dialog-view"},{"id":"11400","section_id":"130","order":"6","title":"","subhead":"Adaptable Vertical Constraints","body":"<p>Now we need to selectively activate those in different situations. Begin by uninstalling the <strong>top<\/strong> constraint on all occasion and installing it on <strong>hC<\/strong>. Also, uninstall the <strong>centerY<\/strong> and selectively install it for <strong>hR<\/strong>. These constraints will ensure conclusiveness in the <strong>Scroll View<\/strong> vertical sizing while also ensuring that the <strong>Dialog View<\/strong> stays separate from the top margin on <strong>hC<\/strong> and is centered on larger sizes.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/0gvbnh0qls2ohu2\/gesture-interactions-04-adaptable-vertical-constraints.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-adaptable-vertical-constraints"},{"id":"11401","section_id":"130","order":"7","title":"","subhead":"Adaptable Horizontal Constraints","body":"<p>Continue by selecting the <strong>leading<\/strong> constraint and varying its installation for <strong>wC<\/strong> and <strong>wC hR<\/strong>, then, uninstall them for all but <strong>wC hR<\/strong>. Also, select the <strong>width<\/strong> constraint and uninstall it, then, vary it for <strong>wR<\/strong> and <strong>wC hC<\/strong> and install it for those variations. Paired with the <strong>centerX<\/strong> and <strong>trailing<\/strong> constraints, these variations will give hint of the position and size of the scroll view on different occasions, just like on the <strong>More Scene<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/5zve4hl9op5f64c\/gesture-interactions-05-adaptable-horizontal-constraints.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-adaptable-horizontal-constraints"},{"id":"11402","section_id":"130","order":"8","title":"","subhead":"Testing Adaptability","body":"<p>Change the storyboard&rsquo;s simulated size to iPhone and back to iPad on vertical to see how the variations affect the layout. <\/p><p>Finish by setting a <strong>Runtime Attribute<\/strong> of <strong>layer.cornerRadius<\/strong> of the <strong>Number<\/strong> <strong>14<\/strong> to this <strong>Dialog View<\/strong> and set <strong>Clip to Bounds<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/dwv438it9eesp35\/gesture-interactions-06-testing-adaptability.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-testing-adaptability"},{"id":"11403","section_id":"130","order":"9","title":"","subhead":"Inner View","body":"<p>Inside the dialog, there will also be a view to which we are going to place elements. Place a <strong>View<\/strong> inside the <strong>Dialog View<\/strong>, constrain it to all its sides and make it <strong>Default Transparent<\/strong>. Name it <strong>Inner View<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/nii8yf2hslpwdsx\/gesture-interactions-07-inner-view.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-inner-view"},{"id":"11404","section_id":"130","order":"10","title":"","subhead":"Alignment Layout Guide","body":"<p><strong>Interface Builder<\/strong> does not have an element for <strong>layout guides<\/strong>. It is often assumed that views should be sized between themselves using constraints. This approach can lead to the deep nesting of elements and chained constraint comparisons that make it hard to pinpoint the values and hinder layout legibility.<\/p><p>To avoid it, we are going to use a <strong>View as Layout Guide<\/strong>. Place a view inside the <strong>Inner View<\/strong> and constrain it to <strong>w300<\/strong>, <strong>top0<\/strong>, <strong>bottom0<\/strong>, <strong>centerX<\/strong>. Color it <strong>red<\/strong>, set it to <strong>hidden<\/strong> and name it <strong>Layout Guide<\/strong>.<\/p><p>This view will help us size other views. By keeping it hidden, its frame will participate in the layout resolution for constraints, yet it will not be drawn nor receive events.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/bfx7ayfmdj2mux0\/gesture-interactions-08-alignment-layout-guide.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-alignment-layout-guide"},{"id":"11405","section_id":"130","order":"11","title":"Title Labels","subhead":"","body":"<p>Place a <strong>Label<\/strong> inside the <strong>Inner View<\/strong> 20 points from the top. Set its content to <strong>&#x201C;Get the entire book,&#x201D;<\/strong> and style it to <strong>24<\/strong> point <strong>system font semibold<\/strong> on <strong>white color<\/strong>. Continue by aligning it <strong>0leading<\/strong>, <strong>0trailing<\/strong> and <strong>20top<\/strong> in relationship to the <strong>Layout Guide<\/strong>.<\/p><p>Duplicate this label and constrain the duplicate to the label <strong>5top<\/strong>. Also set <strong>0leading<\/strong> and <strong>0trailing<\/strong> in relationship to the <strong>Alignment View<\/strong>. Its content should be <strong>&#x201C;plus, 20% off Sketch. More&#x201D;<\/strong>, and its color should be <strong>F5D6FF<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/bmk7a93imi7gwhx\/gesture-interactions-09-title-labels.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-title-labels"},{"id":"11406","section_id":"130","order":"12","title":"Benefits Stack","subhead":"","body":"<p>Below the lower title label, place a <strong>dark<\/strong> <strong>Visual Effect View<\/strong> and activate <strong>Clip to Bounds<\/strong>. Constrain it to <strong>132height<\/strong>, <strong>0leading<\/strong> and <strong>0trailing<\/strong> in relationship to the <strong>Alignment View<\/strong>, and <strong>20top<\/strong> from the second label. Also, set a <strong>Runtime Attribute<\/strong> of <strong>layer.cornerRadius<\/strong> to the <strong>Number<\/strong> <strong>14<\/strong> and name it <strong>&#x201C;Benefits Stack&#x201D;<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/3fng6chdtoca2a2\/gesture-interactions-10-benefits-stack.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-benefits-stack"},{"id":"11407","section_id":"130","order":"13","title":"","subhead":"Benefit Button","body":"<p>Place a <strong>Button<\/strong> inside it with <strong>Benefit-Video-small<\/strong> image, <strong>&#x201C;44 hours&#x201D;<\/strong> content and <strong>17<\/strong> point <strong>white<\/strong> text. Push it under a <strong>Stack<\/strong>, align <strong>leading<\/strong> and distributed with <strong>fill equally<\/strong>.<\/p><p>Push this <strong>Stack<\/strong> under another <strong>Stack<\/strong>, this time make it <strong>horizontal<\/strong> and set its distribution to <strong>fill equally<\/strong> as well. Constrain it at the <strong>0top<\/strong>, <strong>0bottom<\/strong>, <strong>10left<\/strong> and <strong>10right<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/3fng6chdtoca2a2\/gesture-interactions-10-benefits-stack.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-benefit-button"},{"id":"11408","section_id":"130","order":"14","title":"","subhead":"Button Contents","body":"<p>Then, duplicate the <strong>Button<\/strong> twice, and the inner <strong>Stack<\/strong> once, and set the six buttons to the following:<\/p><ol>\t<li>&#x201C;44 hours&#x201D;, image: Benefit-Video-small<\/li>\t<li>&#x201C;10GB files&#x201D;, image: Benefit-Files-small<\/li>\t<li>&#x201C;Offline&#x201D;, image: Benefit-Offline-small<\/li>\t<li>&#x201C;100k words&#x201D;, image: Benefit-Words-small<\/li>\t<li>&#x201C;iOS, Web&#x201D;, image: Benefit-iOS-small<\/li>\t<li>&#x201C;Exercises&#x201D;, image: Benefit-Exercises-small<\/li><\/ol>","image":"https:\/\/designcode.io\/cloud\/swift4\/gesture-interactions-12-button-content.jpg","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-button-contents"},{"id":"11409","section_id":"130","order":"15","title":"Pricing Element","subhead":"","body":"<p>Place a <strong>View<\/strong> 20 points below the <strong>Benefits Stack<\/strong>. Constrain it <strong>20<\/strong> to the <strong>Benefits Stack<\/strong>, <strong>0leading<\/strong> and <strong>0trailing<\/strong> in relationship to the <strong>Layout Guide<\/strong>, and <strong>88height<\/strong>. Also, activate <strong>Clip to Bounds<\/strong>, set a <strong>Runtime Attribute<\/strong> of <strong>layer.cornerRadius<\/strong> to the <strong>Number<\/strong> <strong>14<\/strong> and name it <strong>&#x201C;Pricing Element&#x201D;<\/strong>.<\/p><p>Place another <strong>red colored<\/strong> <strong>View<\/strong> inside it that will be named and used as a <strong>Layout Guide<\/strong>. Constrain it by <strong>0top<\/strong>, <strong>0bottom<\/strong>, <strong>14width<\/strong> and <strong>centerX<\/strong>. Also, hide it, so it is not drawn when the app runs.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/7fr81ruwi08w4aq\/gesture-interactions-12-pricing-element.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-pricing-element"},{"id":"11410","section_id":"130","order":"16","title":"","subhead":"Discounted Price Label","body":"<p>Place a <strong>Label<\/strong> inside the <strong>Pricing Element<\/strong> and constrain it to be <strong>0trailing<\/strong> to the <strong>Layout Guide<\/strong> and <strong>8centerY<\/strong>. Its content should be <strong>&#x201C;$9.99&#x201D;<\/strong> with a <strong>semibold 24<\/strong> point font colored <strong>5856D6<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/vhpj7y48o7xp8xl\/gesture-interactions-13-discounted-price-label.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-discounted-price-label"},{"id":"11411","section_id":"130","order":"17","title":"","subhead":"Price Label","body":"<p>Place a <strong>Label<\/strong> inside the <strong>Pricing Element<\/strong> and constrain it to be <strong>0trailing<\/strong> to the <strong>Layout Guide<\/strong> and <strong>-13centerY<\/strong>. Its content should be <strong>&#x201C;$20&#x201D;<\/strong> set it to <strong>semibold, 17<\/strong> point font size and set the color to <strong>light gray<\/strong>.<\/p><p>Create a new <strong>View<\/strong> next to this label and constrain it <strong>2.5height<\/strong>, and <strong>0leading<\/strong>, <strong>0trailing<\/strong> and <strong>centerY<\/strong> to the <strong>Label<\/strong>. Set its background color to <strong>5856D6<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/tsel7w1vc84y2tl\/gesture-interactions-13-price-label.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-price-label"},{"id":"11412","section_id":"130","order":"18","title":"","subhead":"Renewal Label","body":"<p>Place a <strong>Label<\/strong> inside the <strong>Pricing Element<\/strong> on the right of the <strong>Layout Guide<\/strong>. Its content should be <strong>&#x201C;per month&#x201D;<\/strong> with a <strong>regular 17<\/strong> point font colored <strong>5856D6<\/strong>.<\/p><p>Push it under a <strong>Stack<\/strong> aligned <strong>leading<\/strong>. Then constrain this stack to be <strong>0leading<\/strong> to the <strong>Layout Guide<\/strong> and <strong>centerY<\/strong> to the <strong>Pricing Element<\/strong>. Duplicate the label twice and set the content and color of the duplicates to:<\/p><ol>\t<li>&#x201C;for 1 month&#x201D;, dark gray color<\/li>\t<li>&#x201C;7 days free trial&#x201D;, light gray color<\/li><\/ol>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/c383nz5tjtci3jf\/gesture-interactions-14-renewal-label.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-renewal-label"},{"id":"11413","section_id":"130","order":"19","title":"","subhead":"Pricing Stack","body":"<p>Select the pricing element and push it under a <strong>Stack<\/strong> with <strong>20<\/strong> of spacing. Constrain this stack to <strong>0leading<\/strong> and <strong>0trailing<\/strong> from the <strong>Layout Guide<\/strong> and <strong>20top<\/strong> from the <strong>Benefits Stack<\/strong>. Then, duplicate the <strong>Pricing Element<\/strong> twice to see it grow.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/hjjmfgu70vv1yo3\/gesture-interactions-15-pricing-stack.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-pricing-stack"},{"id":"11414","section_id":"130","order":"20","title":"","subhead":"Restore Purchase Button","body":"<p>Below this <strong>Stack<\/strong> of <strong>Pricing Elements<\/strong>, place a <strong>Button<\/strong> and fill its content with <strong>Restore Purchase<\/strong>. Constrain it <strong>12top<\/strong> from the <strong>Stack<\/strong>, <strong>12bottom<\/strong> and <strong>centerX<\/strong> to the <strong>Layout Guide<\/strong>. Then, set the font to <strong>semibold 17 in white<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/b076dw2qiznxwxj\/gesture-interactions-16-restore-purchase-button.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-restore-purchase-button"},{"id":"11415","section_id":"130","order":"21","title":"Implicit Stack","subhead":"","body":"<p>You might have guessed correctly that we have another implicit stack at hand. The elements inside this view are all able to determine their height essentially, relieving the <strong>Dialog View<\/strong> from having to size itself. Delete the <strong>&#xA0;600height<\/strong> constraint from the <strong>Dialog View<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/67y09jftezbfzg0\/gesture-interactions-17-implicit-stack.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-implicit-stack"},{"id":"11416","section_id":"130","order":"22","title":"","subhead":"Image View","body":"<p>Drop an <strong>Image View<\/strong> from the <strong>Object Library<\/strong> inside the <strong>Inner View<\/strong> and constrain it to all of its sides. Set its target image to the <strong>&#x201C;Purchase-Background&#x201D;<\/strong> provided in the assets and its content mode to <strong>Aspect Fill<\/strong>.<\/p><p>In iOS, an <strong>Image View<\/strong> sizes itself according to its pixel density (@1x, @2x, @3x). This image size will be the fundamental size of the view and will be used to resolve the layout.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/53ots9cjh9tor0l\/gesture-interactions-18-image-view.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-image-view"},{"id":"11417","section_id":"130","order":"23","title":"","subhead":"Sizing Priority","body":"<p>When setting competing constraints in sections like <strong>Custom Transitions<\/strong>, <strong>Storyboard in Playground<\/strong> and <strong>Table View Controller<\/strong>, we have encountered the concept of priority for constraints. Although the fundamental size of a view is not calculated using constraints, it has two pairs of prioritization values.<\/p><ul>\t<li>Content Hugging Priority, set to 250 by default: how much the frame will resist growing larger;<\/li>\t<li>Content Compression Resistance Priority, set to 750 by default: how much the frame will resist getting smaller than its inherent size.<\/li><\/ul><p>You may notice that the Compression Resistance is, by default, higher than the hugging priority. That is because it is natural for a given view, such as a <strong>Text View<\/strong>, <strong>Image View<\/strong> or <strong>Label<\/strong> to <strong>resist compression<\/strong> to show as much of its content as possible. <\/p><p>In this implicit stack we created, the size is determined by the collective size of the elements inside and their spacing constraints. This value is relayed to the <strong>Image View<\/strong> size. By default, the size of the <strong>Image View<\/strong> will win this dispute by being higher and, by assigning it this gigantic image, the layout is broken.<\/p><p>Layout consistency can be maintained lowering the <strong>Content Compression Resistance Priority<\/strong> of the <strong>Image View<\/strong>. By setting it to <strong>251<\/strong> or higher, it will still resist compression from its siblings. Lowering it by <strong>1<\/strong> to <strong>250<\/strong> creates a conflict because auto layout does not auto prioritize. Lowering yet again by <strong>1<\/strong> to <strong>249<\/strong>, ensures that the sizing priority goes to the collection of views that make up the implicit stack, not the <strong>Image View<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/zp6h4rzcu0et05e\/gesture-interactions-19-sizing-priority.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-sizing-priority"},{"id":"11418","section_id":"130","order":"24","title":"Terms of Subscription","subhead":"","body":"<p>Below the <strong>Dialog View<\/strong> we are going to place some disclaiming information by using two elements. A <strong>Label<\/strong> for the title and a <strong>Text View<\/strong> for the content.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-terms-of-subscription"},{"id":"11419","section_id":"130","order":"25","title":"","subhead":"Title","body":"<p>Drop a <strong>Label<\/strong> and constrain it <strong>15top<\/strong> from the <strong>Dialog View<\/strong> and <strong>centerX<\/strong>. Set its content to <strong>&#x201C;Recurring billing, cancel anytime.&#x201D;<\/strong> as a <strong>centered medium 17 dark gray<\/strong> <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/v9b85vj9a7cbsez\/gesture-interactions-20-title.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-title"},{"id":"11420","section_id":"130","order":"26","title":"","subhead":"Content","body":"<p>This is the first time we encounter <strong>Text View<\/strong>. In brief, this element behaves very much like a <strong>Label<\/strong>, but offers interaction. Differently from a <strong>Button<\/strong>, the <strong>Text View<\/strong> interaction is based mainly on its content, offering support for selection, user-editing, and data detection.<\/p><p>Drop a <strong>Text View<\/strong> below the <strong>Label<\/strong> and constrain it <strong>0trailing<\/strong>, <strong>0leading<\/strong> from the <strong>Dialog View<\/strong>, and <strong>15top<\/strong> from the <strong>Label<\/strong>. Set it to a <strong>centered medium 14 dark gray<\/strong> and its content to:<\/p><blockquote><p>If you choose to purchase a subscription, payment will be charged to your iTunes account, and your account will be charged within 24-hour to the end of the current period. Auto-renewal may be turned off at any time by going to your setting in your iTunes store after purchase. For more information, please visit our Terms of Service and Privacy Policy.<\/p><\/blockquote><p>Disable <strong>Editable<\/strong>, <strong>Scrolling<\/strong> and set its background to <strong>default transparent<\/strong>.<\/p><p>Also, set a constraint <strong>20bottom<\/strong> to the <strong>Scroll View<\/strong> and remove the <strong>Dialog View<\/strong> <strong>bottom<\/strong> constraint to the <strong>Scroll View<\/strong>, as it presents a conflict.<\/p><p>Finally, place the <strong>Dialog View<\/strong> below these two views in the document outline to make sure they always appear behind it.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/s9gy3vopr5byojm\/gesture-interactions-21-content.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-content"},{"id":"11421","section_id":"130","order":"27","title":"Visual Effect View","subhead":"","body":"<p>Drop a <strong>Visual Effect View<\/strong> above the <strong>Dialog View<\/strong> on the <strong>Document Outline<\/strong> and constrain it to all of its sides. Set its effect to <strong>extra light<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/dbwq3ixx4bbwsoq\/gesture-interactions-22-visual-effect-view.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-visual-effect-view"},{"id":"11422","section_id":"130","order":"28","title":"Pan to Close Interaction","subhead":"","body":"<p>Possibly this is the hardest layout we have done so far. Before we proceed, take a moment to build and run it on both iPad and iPhone simulators to ensure layout consistency across devices.<\/p><p>In this part, we will create a generic <strong>Pan to Close<\/strong> interaction that will be used in many other further interfaces. Create a new file for a <strong>Cocoa Touch Class<\/strong> that inherits from <strong>UIPercentDrivenInteractiveTransition<\/strong> named <strong>InteractionPanToClose<\/strong>.<\/p><p>Go back to the <strong>Main.storyboard<\/strong> file and, on the <strong>Purchase Scene<\/strong>, place an <strong>Object<\/strong> from the <strong>Object Library<\/strong>. Class this object as an <strong>InteractionPanToClose<\/strong> and trigger the <strong>Assistant Editor<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/kc32hcte5fos5t6\/gesture-interactions-23-pan-to-close.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-pan-to-close-interaction"},{"id":"11423","section_id":"130","order":"29","title":"Percent Driven Interactive Transition","subhead":"","body":"<p>A child of <strong>Percent Driven Interactive Transition<\/strong> lets the interface transition, using percentile interpolation of values, from the input to the output. For the input value, we are going to make extensive use of <strong>Pan Gesture Recognizer<\/strong> placed on the <strong>Scroll View<\/strong>.<\/p><p>The forward gesture will gradually transform the <strong>Dialog View<\/strong> as a falling card and fade out the <strong>Visual Effect View<\/strong>. The backward gesture will revert this animation, gradually resetting the <strong>Dialog View<\/strong> to its initial position and fading in the <strong>Visual Effect View<\/strong>. Lastly, if the interaction stops after a <strong>threshold<\/strong>, the animation will conclude forward and the <strong>View Controller<\/strong> will be dismissed.<\/p><p>Let&rsquo;s begin by setting outlets and variables for all the enumerated elements:<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> viewController<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewController<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> visualEffectView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIVisualEffectView<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> scrollView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIScrollView<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> dialogView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIView<\/span><span class=\"token operator\">!<\/span><br><span class=\"token keyword\">var<\/span> gestureRecognizer <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIPanGestureRecognizer<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-percent-driven-interactive-transition"},{"id":"11424","section_id":"130","order":"30","title":"Setting the Gesture Recognizer","subhead":"","body":"<p>The second step would be to place a gesture recognizer on the <strong>Scroll View<\/strong>. As this object is not a <strong>View Controller<\/strong>, it does not know how to set itself up. Create a function with the following code:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> setGestureRecognizer <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    gestureRecognizer <span class=\"token operator\">=<\/span> <span class=\"token function\">UIPanGestureRecognizer<\/span><span class=\"token punctuation\">(<\/span>target<span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> action<span class=\"token punctuation\">:<\/span> #<span class=\"token function\">selector<\/span><span class=\"token punctuation\">(<\/span>handle<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br>    scrollView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addGestureRecognizer<\/span><span class=\"token punctuation\">(<\/span>gestureRecognizer<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>When the <strong>Pan to Close Interaction<\/strong> receives a <strong>set gesture recognizer<\/strong> message, it creates a gesture recognizer that targets itself on a selector called <strong>handle<\/strong> and adds this recognizer to the <strong>Scroll View<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-setting-the-gesture-recognizer"},{"id":"11425","section_id":"130","order":"31","title":"Receiving Events","subhead":"","body":"<p>The last few lines have probably triggered an error as there is no such <strong>handle<\/strong> function associated with the <strong>Pan to Close Interaction<\/strong> class. Fix this by creating a function capable of receiving the events:<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">handle<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> gesture <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIPanGestureRecognizer<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>As <strong>Gesture Recognizer<\/strong> use <strong>Objective-C<\/strong> support to bind to functions, it needs a marking on the function.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-receiving-events"},{"id":"11426","section_id":"130","order":"32","title":"Panning and Scrolling","subhead":"","body":"<p>Also, <strong>Gesture Recognizers<\/strong> do not allow simultaneous recognition. In other words, by installing this gesture on the <strong>Scroll View<\/strong>, we forbade it from scrolling. Fixing that is very simple using delegation:<\/p><p>Create an extension for the <strong>Pan To Close Interaction<\/strong>:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">InteractionPanToClose<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIGestureRecognizerDelegate<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">gestureRecognizer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> gestureRecognizer<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIGestureRecognizer<\/span><span class=\"token punctuation\">,<\/span> shouldRecognizeSimultaneouslyWith otherGestureRecognizer<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIGestureRecognizer<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Bool<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Should a gesture recognizer ask this object if it should recognize gestures with another recognizer, such as a <strong>Scroll View<\/strong>, it would be allowed. To wrap this up, complement the <strong>&#xA0;setGestureRecognizer<\/strong> function with the following line:<\/p><pre><code class=\"language-swift\">gestureRecognizer<span class=\"token punctuation\">.<\/span>delegate <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-panning-and-scrolling"},{"id":"11427","section_id":"130","order":"33","title":"Handling a Gesture","subhead":"","body":"<p>After we did the basic configuration, we need to treat the gesture in the <strong>handle<\/strong> function. The gesture is a vertical dismissal of the <strong>Dialog View<\/strong>, guard its <strong>y translation<\/strong> as the input if it is downward (lower than 1):<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">guard<\/span> scrollView<span class=\"token punctuation\">.<\/span>contentOffset<span class=\"token punctuation\">.<\/span>y <span class=\"token operator\">&lt;<\/span> <span class=\"token number\">1<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>To model this interaction, a <strong>Pan Gesture Recognizer<\/strong> offers guiding states that map to the situations:<\/p><ul>\t<li>Position <strong>.changed<\/strong>: reflects finger movement;<\/li>\t<li>Gesture <strong>.ended<\/strong> before the <strong>threshold<\/strong>: cancel itself by returning to its initial state, or;<\/li>\t<li>Gesture <strong>.ended<\/strong> after the <strong>threshold<\/strong>: finishes the animation and dismisses the view controller.<\/li><\/ul><p>The <strong>handle<\/strong> function should accommodate this behavior like this:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> threshold <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span> <span class=\"token operator\">=<\/span> <span class=\"token number\">100<\/span><br><span class=\"token keyword\">let<\/span> translation <span class=\"token operator\">=<\/span> gesture<span class=\"token punctuation\">.<\/span><span class=\"token function\">translation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">in<\/span><span class=\"token punctuation\">:<\/span> viewController<span class=\"token punctuation\">.<\/span>view<span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">switch<\/span> gesture<span class=\"token punctuation\">.<\/span>state <span class=\"token punctuation\">{<\/span><br><span class=\"token keyword\">case<\/span> <span class=\"token punctuation\">.<\/span>changed<span class=\"token punctuation\">:<\/span><br>    <span class=\"token comment\">\/\/ The animation will update<\/span><br>    <span class=\"token keyword\">if<\/span> translation<span class=\"token punctuation\">.<\/span>y <span class=\"token operator\">&gt;<\/span> <span class=\"token number\">0<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">let<\/span> percentComplete <span class=\"token operator\">=<\/span> translation<span class=\"token punctuation\">.<\/span>y <span class=\"token operator\">\/<\/span> <span class=\"token number\">2000<\/span><br>        <span class=\"token function\">update<\/span><span class=\"token punctuation\">(<\/span>percentComplete<span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token keyword\">case<\/span> <span class=\"token punctuation\">.<\/span>ended<span class=\"token punctuation\">:<\/span><br>    <span class=\"token comment\">\/\/ The animation will finish or cancel<\/span><br>    <span class=\"token keyword\">if<\/span> translation<span class=\"token punctuation\">.<\/span>y <span class=\"token operator\">&gt;<\/span> threshold <span class=\"token punctuation\">{<\/span> <span class=\"token function\">finish<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">}<\/span><br>    <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token function\">cancel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">}<\/span><br><span class=\"token keyword\">default<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">break<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This code handles the gesture by categorizing the scenarios. If the gesture position is <strong>.changed<\/strong>, it will translate the <strong>Dialog View<\/strong> by <strong>updating<\/strong> its position. Otherwise, if the gesture is <strong>.ended<\/strong>, its final position will indicate whether it will result in reset by <strong>canceling<\/strong> or dismissal by <strong>finishing<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-handling-a-gesture"},{"id":"11428","section_id":"130","order":"34","title":"Performing Animations","subhead":"","body":"<p>Now, three functions need defining: a <strong>update<\/strong> selector that translates the view with the user&rsquo;s finger, a <strong>cancel<\/strong> selector that resets the dialog&rsquo;s position, and a <strong>finish<\/strong> selector that ends the translation and dismisses the view controller.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-performing-animations"},{"id":"11429","section_id":"130","order":"35","title":"","subhead":"Updating the Position","body":"<p>Updating the position is the core of this interaction. Don&rsquo;t get too caught on the code at it is difficult to grasp at first. Skim through it and read the explanation. You may always come back to refine your understanding.<\/p><p>Inside the class, create a new function that overrides the standard implementation of <strong>update:percentComplete<\/strong>:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">update<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> percentComplete<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In this function, complete with the following statements:<\/p><pre><code class=\"language-swift\">visualEffectView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><span class=\"token operator\">-<\/span>percentComplete<br><\/code><\/pre><p>The <strong>y translation<\/strong>, that is represented by the <strong>percent complete<\/strong>, is the measure from which we are going to derive the progress of the gesture and update the position of the elements as well as the opacity of the <strong>Visual Effect View<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> translation <span class=\"token operator\">=<\/span> gestureRecognizer<span class=\"token punctuation\">.<\/span><span class=\"token function\">translation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">in<\/span><span class=\"token punctuation\">:<\/span> viewController<span class=\"token punctuation\">.<\/span>view<span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> translationY <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>translationX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> translation<span class=\"token punctuation\">.<\/span>y<span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> scale <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>scaleX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token operator\">-<\/span>percentComplete<span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token operator\">-<\/span>percentComplete<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>From those values we are going to create two transforms to be applied from the dialog. One merely maps the <strong>Dialog View&rsquo;s<\/strong> position to the finger. Another scales it downwards as the <strong>percent complete<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> origin <span class=\"token operator\">=<\/span> gestureRecognizer<span class=\"token punctuation\">.<\/span><span class=\"token function\">location<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">in<\/span><span class=\"token punctuation\">:<\/span> viewController<span class=\"token punctuation\">.<\/span>view<span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> frameWidth <span class=\"token operator\">=<\/span> viewController<span class=\"token punctuation\">.<\/span>view<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">.<\/span>width<br><span class=\"token keyword\">let<\/span> originX <span class=\"token operator\">=<\/span> origin<span class=\"token punctuation\">.<\/span>x<span class=\"token operator\">\/<\/span>viewWidth<br><span class=\"token keyword\">let<\/span> degrees <span class=\"token operator\">=<\/span> <span class=\"token number\">150<\/span> <span class=\"token operator\">-<\/span> originX <span class=\"token operator\">*<\/span> <span class=\"token number\">300<\/span><br><br><span class=\"token keyword\">let<\/span> rotationAngle <span class=\"token operator\">=<\/span> percentComplete <span class=\"token operator\">*<\/span> degrees <span class=\"token operator\">*<\/span> <span class=\"token builtin\">CGFloat<\/span><span class=\"token punctuation\">.<\/span>pi <span class=\"token operator\">\/<\/span> <span class=\"token number\">180.0<\/span><br><span class=\"token keyword\">let<\/span> rotation <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>rotationAngle<span class=\"token punctuation\">:<\/span> rotationAngle<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>The view should also rotate by a factor of the size of the screen (which is the <strong>frame<\/strong>) and the translation of the finger (the <strong>percentComplete<\/strong>).<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> transform <span class=\"token operator\">=<\/span> translationY<span class=\"token punctuation\">.<\/span><span class=\"token function\">concatenating<\/span><span class=\"token punctuation\">(<\/span>scale<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">concatenating<\/span><span class=\"token punctuation\">(<\/span>rotation<span class=\"token punctuation\">)<\/span><br><br>dialogView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> transform<br><\/code><\/pre><p>The applied transform is composed of the <strong>translation<\/strong> the dialog with the finger, <strong>scale<\/strong> down effect and <strong>rotation<\/strong> to each side.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-updating-the-position"},{"id":"11430","section_id":"130","order":"36","title":"","subhead":"Canceling the Interaction","body":"<p>The hard part is done. Now, we need to reset the attributes we edited above. Thankfully, the techniques we use enable elegant reversion.<\/p><p>Inside the class, create a new function that overrides the standard implementation of <strong>cancel<\/strong>:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">cancel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In this function, complete with the following statements:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> animator <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewPropertyAnimator<\/span><span class=\"token punctuation\">(<\/span>duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.6<\/span><span class=\"token punctuation\">,<\/span> dampingRatio<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.6<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>visualEffectView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>dialogView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>identity<br><span class=\"token punctuation\">}<\/span><br>animator<span class=\"token punctuation\">.<\/span><span class=\"token function\">startAnimation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>It resets all the <strong>Dialog View<\/strong> transforms to <strong>identity<\/strong> and the <strong>Background Effects View<\/strong> opacity back to full. As a transform does not permanently change view properties, a <strong>.identity<\/strong> is a shorthand for nullifying those changes.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-canceling-the-interaction"},{"id":"11431","section_id":"130","order":"37","title":"","subhead":"Finishing the Interaction","body":"<p>In case the user does overstep the <strong>100<\/strong> threshold that was set in the <strong>handle<\/strong> selector, we should animate a fitting ending for the animation.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">finish<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>    <br>    <span class=\"token keyword\">let<\/span> animator <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewPropertyAnimator<\/span><span class=\"token punctuation\">(<\/span>duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.9<\/span><span class=\"token punctuation\">,<\/span> dampingRatio<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.9<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>dialogView<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">.<\/span>origin<span class=\"token punctuation\">.<\/span>y <span class=\"token operator\">+<\/span><span class=\"token operator\">=<\/span> <span class=\"token number\">200<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>visualEffectView<span class=\"token punctuation\">.<\/span>effect <span class=\"token operator\">=<\/span> <span class=\"token constant\">nil<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>viewController<span class=\"token punctuation\">.<\/span><span class=\"token function\">dismiss<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br>    animator<span class=\"token punctuation\">.<\/span><span class=\"token function\">startAnimation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>It finishes the animation by disappearing with the <strong>Background Effect View<\/strong> and moving the <strong>Dialog View<\/strong> lower out of sight. Then, it dismisses the view controller from the window.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-finishing-the-interaction"},{"id":"11432","section_id":"130","order":"38","title":"Applying to the Purchase Scene","subhead":"","body":"<p>The <strong>Pan To Close<\/strong> interaction is now ready to be applied to a scene. To take advantage of it, create a new <strong>Cocoa Touch Class<\/strong> that derives from <strong>UIViewController<\/strong> named <strong>PurchaseViewController<\/strong>.<\/p><p>Go back to the <strong>Main.storyboard<\/strong> file, apply it to the <strong>Purchase Scene<\/strong> and trigger the <strong>Assistant Editor<\/strong> on this view controller.<\/p><p>Create an outlet for this <strong>Pan to Close<\/strong> object named <strong>panToClose<\/strong> and set the following line on the <strong>view did load<\/strong> method:<\/p><pre><code class=\"language-swift\">panToClose<span class=\"token punctuation\">.<\/span><span class=\"token function\">setGestureRecognizer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>This line asks the <strong>Pan to Close<\/strong> to set itself up as we prescribed as soon as the view loads with all of its objects and subviews. Being those the <strong>Scroll View<\/strong>, the <strong>Visual Effect View<\/strong>, the <strong>Dialog View<\/strong> and the <strong>View Controller<\/strong> itself. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/rp0jjmcrgo4va0p\/gesture-interactions-24-applying-to-the-purchase-scene.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-applying-to-the-purchase-scene"},{"id":"11433","section_id":"130","order":"39","title":"Conclusion","subhead":"","body":"<p>The framework for building rich interactive interfaces is laid. Most of what you are going to do in iOS is going to derive from this sequence of listening, updating and concluding.<\/p><p>It takes a lot of practice and a bit of reading to understand and build rich interactions. Nonetheless, many of those are already built and available through libraries. Also, there is no need to create from scratch as many tools are accessible. For instance, you may take a try on <a href=\"https:\/\/airbnb.design\/lottie\/\">AirBnB&rsquo;s Lottie<\/a> and <a href=\"https:\/\/www.paintcodeapp.com\">PixelCut&rsquo;s PaintCode<\/a>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/g0okxdm8ahiocmk\/gesture-interactions-25-conclusion.mp4?dl=0","bookmark_id":"swift4-gesture-interactions-conclusion"},{"id":"11434","section_id":"130","order":"40","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/marcosgriselli\">Marcos Griselli<\/a> and <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-gesture-interactions-credit"}]},{"id":"131","chapter_id":"4","order":"80","slug":"swift4-cocoapods","title":"CocoaPods","caption":"Dependency manager for your Xcode projects","body":"<p><a href=\"https:\/\/cocoapods.org\">Cocoapods<\/a> is a dependency manager for your Swift and Objective-C projects. It lets you manage third party code and use it in your own app in a simple way. Currently, it has over 38 thousand libraries and is used in over 2.7 million apps. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-cocoapods.jpg","video":"https:\/\/player.vimeo.com\/external\/254122998.hd.mp4?s=766f0d51f275c4a1190e8e9b1894571cc08344cb&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-cocoapods.zip","contents":[{"id":"11258","section_id":"131","order":"1","title":"Getting Started","subhead":"","body":"<p>There are two ways to manage CocoaPods environment, from installing it to adding libraries or updating. Via the command line or through the MacOS app. In this section, we&rsquo;ll target both as you might be a skilled terminal user or perhaps you don&rsquo;t even know what it is. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-getting-started"},{"id":"11259","section_id":"131","order":"2","title":"Downloads for CocoaPods","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\" title=\"Xcode 9\">Xcode 9<\/a>, and the finished Xcode project from <a href=\"https:\/\/www.dropbox.com\/s\/m0jite1435k4gis\/DesignCodeApp%20Gesture%20Interactions%20Revised%20Final.zip?dl=1\">Gesture Interactions<\/a>. Also, make sure to download the <a href=\"https:\/\/www.dropbox.com\/s\/gzv2lktvc5e9p3k\/DesignCodeApp%20CocoaPods%20Revised%20Final.zip?dl=1\" title=\"final project for this section\">final project<\/a> for comparison.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-downloads-for-cocoapods"},{"id":"11260","section_id":"131","order":"3","title":"","subhead":"Installation","body":"<p>To get started, download and install the <a href=\"https:\/\/cocoapods.org\/app\">MacOS app<\/a> as you would with any other software.<\/p><p>If you are used to the command line, you can install CocoaPods by running the Ruby command:<\/p><pre><code>sudo gem install cocoapods<\/code><\/pre><p>MacOS comes with Ruby installed by default so you shouldn&rsquo;t have any problem installing the latest CocoaPods version.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/CocoaPods-Mac-App.jpg","image_width":"1600","image_height":"932","video":"","bookmark_id":"swift4-cocoapods-installation"},{"id":"11261","section_id":"131","order":"4","title":"","subhead":"Adding CocoaPods to a Project","body":"<p>To add CocoaPods to an already existing Xcode project, go to the Mac app and select File &gt; New Podfile from Xcode Project and selecting our Xcode project file with .xcodeproj extension. This will generate the file called Podfile which we&apos;ll use to indicate what dependencies we need in our app.<\/p><p>From the command line, move to your Xcode project folder and execute <\/p><pre><code>pod init<\/code><\/pre><p>In both cases, you&rsquo;ll find that a file named <strong>Podfile<\/strong> was created in our project folder.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/CocoaPods-App-New.jpg","image_width":"610","image_height":"219","video":"","bookmark_id":"swift4-cocoapods-adding-cocoapods-to-a-project"},{"id":"11262","section_id":"131","order":"5","title":"","subhead":"Libraries","body":"<p>Before you start adding external libraries, you should know which ones you want to use. As we mentioned earlier, there&apos;s a huge amount of libraries available and this can be overwhelming. There are many libraries that tackle the same issues with different approaches. We recommend taking your time before adding a library to your project by reviewing your different options. We&rsquo;ll give you a list of recommended libraries that have been used by many iOS developers through the years with a proven track of maintainability and quality. But first, we&rsquo;ll give a few tips on how to evaluate these libraries.<br><\/p><p>For starters, we&rsquo;ll use the CocoaPods website search engine to narrow down the list of pods for the functionality we want external dependencies to cover. We can type any keyword and the search will fetch those pods whose description match (for example: <strong>Networking<\/strong>, <strong>Animations<\/strong>, <strong>Realm<\/strong>). We get details of that library upon clicking on <strong>Expand<\/strong>. The readme file which the author\/s add to the project, usually contain documentation about the installation, versions and how to use it. Also, we get insights on the amount of downloads and apps that are using this library. Although it&rsquo;s not something we should blindly follow, these metrics are good to evaluate if the library is working correctly. We recommend entering the GitHub repository to check the latests commit dates or the issues list and if there&rsquo;s some activity going on. Make sure the libraries you check support your current <strong>Swift<\/strong> version. There are dependencies which haven&rsquo;t been updated and might not be compatible with Swift 4. <\/p><p>Here&rsquo;s a list of recommended pods for you to get started out:<br><\/p><ul>\t<li><a href=\"https:\/\/github.com\/MengTo\/Spring\">Spring<\/a> (Animations)<\/li>\t<li><a href=\"https:\/\/github.com\/Alamofire\/Alamofire\">Alamofire<\/a> (Networking)<\/li>\t<li><a href=\"https:\/\/github.com\/onevcat\/Kingfisher\">Kingfisher<\/a> (Image download)<\/li>\t<li><a href=\"https:\/\/github.com\/lkzhao\/Hero\">Hero<\/a> (Transitions)<\/li>\t<li><a href=\"https:\/\/github.com\/SnapKit\/SnapKit\">SnapKit<\/a> (Autolayout DSL)<\/li>\t<li><a href=\"https:\/\/github.com\/AudioKit\/AudioKit\">AudioKit<\/a> (Audio)<\/li>\t<li><a href=\"https:\/\/github.com\/marcosgriselli\/ViewAnimator\">ViewAnimator<\/a> (Auto-Animations)<\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-libraries"},{"id":"11263","section_id":"131","order":"6","title":"Third-Party Code","subhead":"","body":"<p>Keep in mind that adding external dependencies to your app is a double edge sword. Once you add them to your code, you become dependent on these libraries so if they are no longer maintained, you can find yourself in a tight spot. Our two recommendations with regards to using them are: <\/p><ol>\t<li>Treat them as what they are: dependencies. Create a bridge between this external dependency and your app, so if you ever need to change it you only need to swap it in one place.<\/li>\t<li>Understand what is going on behind the scenes. Some libraries&rsquo; code base can be quite large, so even though you don&rsquo;t understand exactly every single line, try to get a general grasp of what the library is doing. Therefore, if you ever have an issue, you can solve it or even submit a PR and fix it all at once. <\/li><\/ol>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-third-party-code"},{"id":"11264","section_id":"131","order":"7","title":"","subhead":"Podfile","body":"<p>The Podfile is a specification that describes the dependencies of the targets of one or more Xcode projects. Here, we&apos;ll enter the external dependencies we want to use for CocoaPods to integrate them and make them available in our project. For each library, we can indicate version number and Xcode project target we should add it to (App, Tests, UITests).<\/p><p>The Podfile can be edited via the Mac app or any text editor. Take extra caution with the use of <strong>TextEdit<\/strong> as it might treat apostrophes (&#x2018;) as backquotes (`) depending on your configuration. <\/p><p>We&apos;ll be adding the <strong>Spring<\/strong> pod to the app&rsquo;s target. Make sure to define the <strong>platform :ios &#x2018;version&rsquo;<\/strong> to your minimum iOS version target as some pods might have a deployment target which is higher than your minimum supported version so they won&rsquo;t compile. <\/p><p>If you are going to work in a team, it is useful to have the versions setup manually so there&rsquo;s no versioning issues between the team members.<br><\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/CocoaPods-App-Podfile.jpg","image_width":"1600","image_height":"876","video":"","bookmark_id":"swift4-cocoapods-podfile"},{"id":"11265","section_id":"131","order":"8","title":"","subhead":"Install","body":"<p>Now for installing our listed dependencies, we will just tap on install button on the top right corner of the Mac app or run <\/p><pre><code>pod install <\/code><\/pre><p>from the terminal. As the installation takes place, you can check which pods are being installed and which version of the library you are using. <\/p><p>This will fetch our dependencies and add them to our project as a <strong>Pods_target<\/strong>. After the installation has finished, we get a warning message saying <em>&#xA0;Please close any current Xcode sessions and use <strong>project.xcworkspace<\/strong> for this project from now on<\/em>. A workspace in Xcode is basically a collection of projects, it was introduced in Xcode 4 (<a href=\"https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Conceptual\/RN-Xcode-Archive\/Chapters\/xc4_release_notes.html\">release notes<\/a>) where you can reference projects back and forth inside the same workspace. You&rsquo;ll be opening that <strong>.xcworspace<\/strong> file from now on as it contains the CocoaPods dependencies. Before trying to use any of our newly added pods, make sure to build your project first (<strong>&#x2318;B<\/strong>).<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Cocoapods_Install.jpg","image_width":"1600","image_height":"875","video":"","bookmark_id":"swift4-cocoapods-install"},{"id":"11266","section_id":"131","order":"9","title":"","subhead":"Podfile.lock","body":"<p>The <em>Podfile.lock<\/em> file is created once we install our CocoaPods dependencies. It contains the list of all our pods, the versions they are using and the dependencies those pods have as some libraries are built on top of other libraries&rsquo; functionality, so don&rsquo;t be alarmed if more pods appear when installing your current list. This <strong>Podfile.lock<\/strong> file will keep the libraries versions specified when installing new pods or running <strong>pod install<\/strong> if we don&rsquo;t set them a specific version. On the other hand, running <strong>pod update<\/strong> will update our libraries to the latest release as well as creating a new <strong>Podfile.lock<\/strong> file with the new information. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-podfile-lock"},{"id":"11267","section_id":"131","order":"10","title":"","subhead":"Using the Pods","body":"<p>To use the pods in your project, you&rsquo;ll just need to import the necessary pod in the <strong>.swift<\/strong> file you want to use it: <\/p><pre><code>import Spring<\/code><\/pre><p>Rarely, the pod name used in the import doesn&rsquo;t match the one used on the Podfile. If you import your pod and Xcode is not able to find it, make sure you are using the right name by checking the pods project &gt; pods folder. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Cocoapods_folder.png","image_width":"544","image_height":"1176","video":"","bookmark_id":"swift4-cocoapods-using-the-pods"},{"id":"11268","section_id":"131","order":"11","title":"Other Commands","subhead":"","body":"<p>You can check the different actions in the drop down icon in the top right corner on the Mac app. Or via the command line with <\/p><pre><code>pod --help <\/code><\/pre><p>Note that many of these functionalities are not supported on the Mac app as it only performs the basic install, update and remove. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-other-commands"},{"id":"11269","section_id":"131","order":"12","title":"","subhead":"Update","body":"<p>Fetches the latest version of the libraries where we haven&apos;t defined the version to use. Will also generate a new <strong>Podfile.lock<\/strong> file with the updated libraries versions used. <\/p><pre><code>pod update<\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-update"},{"id":"11270","section_id":"131","order":"13","title":"","subhead":"Verbose","body":"<p>Shows on screen all the tasks that are being performed while performing the action requested. This is particularly useful if we ran into any kind of problem as it let us check which line is causing the issue.<\/p><pre><code>pod install --verbosepod update --verbose<\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-verbose"},{"id":"11271","section_id":"131","order":"14","title":"","subhead":"Deintegrate","body":"<p> Lets you remove CocoaPods from your project. This could be done on the Mac app with File &gt; Remove CocoaPods from your project or from the command line with the command:<\/p><pre><code>pod deintegrate<\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-deintegrate"},{"id":"11272","section_id":"131","order":"15","title":"","subhead":"Try","body":"<p>One the most handy features of CocoaPods is the ability to try out a library without having to setup a project and install the selected library. CocoaPods <strong>try<\/strong> command does this for us.<\/p><pre><code>pod try Spring<\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/CocoaPods_try.png","image_width":"1300","image_height":"854","video":"","bookmark_id":"swift4-cocoapods-try"},{"id":"11273","section_id":"131","order":"16","title":"","subhead":"More","body":"<p>There&rsquo;s a few more functionalities\/commands that are out of scope in this section. You can check them on the CocoaPods <a href=\"https:\/\/guides.cocoapods.org\/terminal\/commands.html\">Command-line Reference site<\/a> or from the terminal with:<\/p><pre><code>pod --help<\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/CocoaPods-Help.jpg","image_width":"651","image_height":"608","video":"","bookmark_id":"swift4-cocoapods-more"},{"id":"11274","section_id":"131","order":"17","title":"About Spring","subhead":"","body":"<p>Spring is an iOS library that, among other functionalities, offers a ton of Interface Builder enhancements for styling as you would in a design app. This is possible because of an Xcode feature called <strong>Inspectable<\/strong> and <strong>Designable<\/strong>.<\/p><p>From now on we are going to leave some practices behind in favor of Spring, beginning in the <strong>More Scene<\/strong>, <strong>Purchase Scene<\/strong> and <strong>Discount Scene<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-about-spring"},{"id":"11275","section_id":"131","order":"18","title":"Enhancing the More Scene","subhead":"","body":"<p>Begin by adding a <strong>Visual Effect View<\/strong> to the document outline above the <strong>Scroll View<\/strong>. Constrain it to all of its sides and make sure <strong>top<\/strong> is constrained to its <strong>superview<\/strong>. Finally, set its blur style to <strong>dark<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-enhancing-the-more-scene"},{"id":"11276","section_id":"131","order":"19","title":"","subhead":"Dialog View Shadows and Corner Radius","body":"<p>Let&rsquo;s map all of its <strong>Runtime Attributes<\/strong> to <strong>Inspectable Properties<\/strong>. Select the <strong>Dialog View<\/strong> and set the <strong>Class<\/strong> field to <strong>DesignableView<\/strong> and hit enter. Remove all of the <strong>Runtime Attributes<\/strong> and switch to the <strong>Attributes Inspector<\/strong>.<\/p><p>You will see there is a multitude of fields available. Set values for:<\/p><ul>\t<li><strong>Corner Radius<\/strong> to <strong>14<\/strong>;<\/li>\t<li><strong>Shadow Radius<\/strong> to <strong>15<\/strong>;<\/li>\t<li><strong>Shadow Opacity<\/strong> to <strong>0.25<\/strong>;<\/li>\t<li><strong>Shadow Offset<\/strong> to <strong>10<\/strong>;<\/li>\t<li> <strong>Clip to Bounds<\/strong> to <strong>false<\/strong>.<\/li><\/ul><p>On the <strong>Sizing View<\/strong>, also set its class to <strong>DesignableView<\/strong> and set values for:<\/p><ul>\t<li><strong>Corner Radius<\/strong> to <strong>14<\/strong>;<\/li>\t<li><strong>Clip to Bounds<\/strong> to <strong>true<\/strong>.<\/li><\/ul><p>This is going to be the standard styling for all <strong>Dialogs<\/strong> we are going to use further along.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-dialog-view-shadows-and-corner-radius"},{"id":"11277","section_id":"131","order":"20","title":"Enhancing the Purchase Scene","subhead":"","body":"<p>On this scene, customize the class of the <strong>Dialog View<\/strong> as a <strong>Designable View<\/strong>, remove all of its <strong>Runtime Attributes<\/strong> and set the standard values for a <strong>Dialog<\/strong>:<\/p><ul>\t<li><strong>Corner Radius<\/strong> to <strong>14<\/strong>;<\/li>\t<li><strong>Shadow Radius<\/strong> to <strong>15<\/strong>;<\/li>\t<li><strong>Shadow Opacity<\/strong> to <strong>0.25<\/strong>;<\/li>\t<li><strong>Shadow Offset<\/strong> to <strong>10<\/strong>;<\/li>\t<li><strong>Clip to Bounds<\/strong> to <strong>false<\/strong>.<\/li><\/ul><p>On the <strong>Inner View<\/strong>, also set its class to <strong>DesignableView<\/strong> and set values for:<\/p><ul>\t<li><strong>Corner Radius<\/strong> to <strong>14<\/strong>;<\/li>\t<li><strong>Clip to Bounds<\/strong> to <strong>true<\/strong>.<\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-enhancing-the-purchase-scene"},{"id":"11278","section_id":"131","order":"21","title":"","subhead":"Pricing Elements","body":"<p>Open the <strong>Pricing Elements Stack<\/strong> and select all of its children. Class them <strong>Designable View<\/strong> and style them with:<\/p><ul>\t<li><strong>Corner Radius<\/strong> to <strong>14<\/strong>;<\/li>\t<li><strong>Shadow Radius<\/strong> to <strong>20<\/strong>;<\/li>\t<li><strong>Shadow Opacity<\/strong> to <strong>0.5<\/strong>;<\/li>\t<li><strong>Shadow Offset<\/strong> to <strong>10<\/strong>.<\/li><\/ul><p>In the <strong>Runtime Attributes<\/strong> list, you will see all the values we have just set. For the three elements, remove the <strong>layer.cornerRadius<\/strong> key path as it is no redundant.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-pricing-elements"},{"id":"11279","section_id":"131","order":"22","title":"","subhead":"Button Under the Discount Heading","body":"<p>Place a <strong>Button<\/strong> under the <strong>Discount Heading<\/strong> on the document outline and constrain it to all the sides of the <strong>Discount Heading<\/strong>.<\/p><p>On Interface Builder, if an element fails to position and size itself, you may try selecting it and triggering <strong>Update Frames<\/strong>. If there are no errors, Xcode will succeed positioning and sizing the elements.<\/p><p>Remove its content and leave it be for now.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-button-under-the-discount-heading"},{"id":"11280","section_id":"131","order":"23","title":"Building the Discount Scene","subhead":"","body":"<p>Drop a new <strong>View Controller<\/strong> right beside the <strong>Purchase Scene<\/strong> and name it <strong>Discount<\/strong>. Set its background color to <strong>Default Transparent<\/strong> and drop an <strong>extra light<\/strong> <strong>Visual Effect View<\/strong> inside it constrained on all of its sides, making sure <strong>top<\/strong> references the <strong>superview<\/strong>, not the <strong>safe area<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-building-the-discount-scene"},{"id":"11281","section_id":"131","order":"24","title":"","subhead":"Segue from Purchase Scene","body":"<p>Select the <strong>Button<\/strong> under the <strong>Discount Heading<\/strong> on the <strong>Purchase Scene<\/strong> and create a <strong>Present Modally<\/strong> segue to the <strong>Discount Scene<\/strong> with an <strong>Over Full Screen<\/strong> presentation and a <strong>Cross Dissolve<\/strong> transition.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-segue-from-purchase-scene"},{"id":"11282","section_id":"131","order":"25","title":"","subhead":"Scroll View and Dialog View","body":"<p>Drop a <strong>Scroll View<\/strong> inside it and constrain it to all of its sides. The process we are going to do now will probably already be familiar. Drop a <strong>View<\/strong> inside the <strong>Scroll View<\/strong> and constrain it to <strong>centerX<\/strong>, <strong>centerY<\/strong>, <strong>20leading<\/strong>, <strong>20top<\/strong>, <strong>20trailing<\/strong>, <strong>20bottom<\/strong>, <strong>500width<\/strong>, and <strong>480height<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-scroll-view-and-dialog-view"},{"id":"11283","section_id":"131","order":"26","title":"","subhead":"Adapting the Dialog View","body":"<p>Continue by adding variation for size classes for the following constraints:<\/p><ul>\t<li><strong>centerY<\/strong>: uninstalled for all, installed for <strong>hR<\/strong>;<\/li>\t<li><strong>20top<\/strong>: uninstalled for all, installed for <strong>hC<\/strong>;<\/li>\t<li><strong>20leading<\/strong>: uninstalled for all and <strong>wC<\/strong>, installed for <strong>wC hR<\/strong>;<\/li>\t<li><strong>width<\/strong>: uninstalled for all, installed for <strong>wR<\/strong> and <strong>wC hC<\/strong>.<\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-adapting-the-dialog-view"},{"id":"11284","section_id":"131","order":"27","title":"","subhead":"Styling the Dialog View","body":"<p>Set its class to <strong>DesignableView<\/strong>, label it <strong>Dialog View<\/strong> and style it by setting its:<\/p><ul>\t<li><strong>Corner Radius<\/strong> to <strong>14<\/strong>;<\/li>\t<li><strong>Shadow Radius<\/strong> to <strong>15<\/strong>;<\/li>\t<li><strong>Shadow Opacity<\/strong> to <strong>0.25<\/strong>;<\/li>\t<li><strong>Shadow Offset<\/strong> to <strong>10<\/strong>.<\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-styling-the-dialog-view"},{"id":"11285","section_id":"131","order":"28","title":"","subhead":"Inner View","body":"<p>Finish by dropping a new <strong>View<\/strong> inside it constrained to <strong>all sides<\/strong> and name it <strong>Inner View<\/strong>. Also set this view&rsquo;s class to <strong>DesignableView<\/strong> and set values for:<\/p><ul>\t<li><strong>Corner Radius<\/strong> to <strong>14<\/strong>;<\/li>\t<li><strong>Clip to Bounds<\/strong> to <strong>true<\/strong>.<\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-inner-view"},{"id":"11286","section_id":"131","order":"29","title":"","subhead":"Header Image","body":"<p>Drop a <strong>Image View<\/strong> inside the <strong>Inner View<\/strong> and constrain it <strong>top<\/strong>, <strong>left<\/strong>, <strong>right<\/strong> and <strong>180height<\/strong>. Change its image value to <strong>&#x201D;Home&#x201D;<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-header-image"},{"id":"11287","section_id":"131","order":"30","title":"","subhead":"Heading Label","body":"<p>On top of this <strong>Image View<\/strong>, drop a <strong>Label<\/strong> and constrain it <strong>40left<\/strong>, <strong>40right<\/strong> and <strong>centerY<\/strong> in relationship to the <strong>Image View<\/strong>.<\/p><p>Set the <strong>Label<\/strong> to a <strong>white bold 24<\/strong> point with <strong>0<\/strong> lines. Also, replace its content with <strong>&#x201D;Receive these discounts with the purchase of the book.&#x201D;<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-heading-label"},{"id":"11288","section_id":"131","order":"31","title":"","subhead":"Discount Element","body":"<p>Drop two <strong>Labels<\/strong> and one <strong>Image View<\/strong> in the lower part of the dialog and push them into a <strong>Stack<\/strong>, name this stack <strong>Discount Element<\/strong>. Then, push it under another <strong>Stack<\/strong>, set its spacing to <strong>10<\/strong>. And then do it again and set its spacing to <strong>10<\/strong> and its axis to <strong>horizontal<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-discount-element"},{"id":"11289","section_id":"131","order":"32","title":"","subhead":"Discount Grid","body":"<p>Duplicate the <strong>Discount Element<\/strong> once and the middle stack to form a 4 element grid. Set the labels and images to the following sequence:<\/p><ul>\t<li>&#x201C;Sketch&#x201D;, &#x201D;20%&#x201D;, Logo-Sketch<\/li>\t<li>&#x201C;InVision&#x201D;, &#x201D;6mo free&#x201D;, Logo-InVision<\/li>\t<li>&#x201C;Framer&#x201D;, &#x201D;20%&#x201D;, Logo-Framer<\/li>\t<li>&#x201C;Angle&#x201D;, &#x201D;80%&#x201D;, Logo-Angle<\/li><\/ul><p>Set the labels styling in each <strong>Discount Element<\/strong> to <strong>centered dark gray bold 15<\/strong> and <strong>&#xA0;centered FF63B4 pink semibold 17<\/strong>. Then, set the alignment of the <strong>Discount Element<\/strong> stacks to center. And finally, set the outmost stack&rsquo;s distribution to <strong>Fill Equally<\/strong> and constrain it <strong>16left<\/strong>, <strong>16right<\/strong>, <strong>10bottom<\/strong>, and <strong>20top<\/strong> to the <strong>Image View<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-discount-grid"},{"id":"11290","section_id":"131","order":"33","title":"Gesture Interaction","subhead":"","body":"<p>As we have mentioned in the last section, the <strong>Pan to Close<\/strong> interaction will be recycled among many structures of the app with the minimal amount of coupling and setup.<\/p><p>Drop inside the <strong>Discount Scene<\/strong> and object and class it <strong>InteractionPanToClose<\/strong>. Using <strong>CTRL+Drag<\/strong> connect it to the <strong>Scroll View<\/strong>, <strong>Dialog View<\/strong>, <strong>Visual Effect View<\/strong> and the <strong>View Controller<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-gesture-interaction"},{"id":"11291","section_id":"131","order":"34","title":"","subhead":"Discount View Controller","body":"<p>Create a new <strong>Cocoa Touch Class<\/strong> by the name of <strong>DiscountViewController<\/strong> that draws from <strong>UIViewController<\/strong>. Go back to the <strong>Main.storyboard<\/strong> file and class the <strong>Discount Scene&rsquo;s<\/strong> view controller as this <strong>DiscountViewController<\/strong> and trigger the <strong>Assistant Editor<\/strong> on it.<\/p><p>Create an outlet for the <strong>Pan to Close<\/strong> object called <strong>panToClose<\/strong> and set this one line on the <strong>view did load<\/strong> method:<\/p><pre><code class=\"language-swift\">panToClose<span class=\"token punctuation\">.<\/span><span class=\"token function\">setGestureRecognizer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-discount-view-controller"},{"id":"11292","section_id":"131","order":"35","title":"Interface Builder Macros","subhead":"","body":"<p>In a given <strong>Text View<\/strong>, it is possible to change properties such as its background color, font face and text color. In the previous section, you might have noticed that some properties such as <strong>corner radius<\/strong> and <strong>shadows<\/strong> are not natively available in <strong>Interface Builder<\/strong> and may have to be set using code.<\/p><p>As of today, you might also be familiar with <strong>Runtime Attributes<\/strong>. They use an arcane technique called <strong>Key-Value Coding<\/strong> to set values traversing from attribute to attribute by their names.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-interface-builder-macros"},{"id":"11293","section_id":"131","order":"36","title":"","subhead":"Category Variation","body":"<p><strong>Interface Builder<\/strong> offers a bridging feature so we can leverage all this power to bring customization to the surface and rid of unnecessary code. Let&rsquo;s build a bridge between the <strong>Label<\/strong> objects and their <strong>shadow<\/strong> values.<\/p><p>Begin by creating a new Swift file named <strong>&#x201C;UILabel+Inspectable&#x201D;<\/strong>. It is iOS convention to create different files for different aspects of the same object that go like <strong>NameOfTheObject+Variation<\/strong>.<\/p><p>In this variation, we will write some bridging code for shadows. If you find new ways to customize <strong>UILabel<\/strong> on <strong>Interface Builder<\/strong> using a similar technique, place it on this same file.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-category-variation"},{"id":"11294","section_id":"131","order":"37","title":"","subhead":"Extension","body":"<p>In this file <strong>UI Kit<\/strong> is imported to offer access to <strong>UILabel<\/strong> and all of its properties. Then, a extension is declared to build upon the native functionality.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">UIKit<\/span><br><br><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">UILabel<\/span> <span class=\"token punctuation\">{<\/span><br><br><span class=\"token punctuation\">}<\/span>  <br><\/code><\/pre><p>You might have come across extensions before. They are really helpful when you want to increase versatility without the need for inheritance in <strong>Swift<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-extension"},{"id":"11295","section_id":"131","order":"38","title":"","subhead":"Proxy Variables","body":"<p>Inside this extension, write the following lines so we have access to the shadow&rsquo;s offset.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBInspectable<\/span> <span class=\"token keyword\">var<\/span> shadowOffsetY<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">set<\/span> <span class=\"token punctuation\">{<\/span> layer<span class=\"token punctuation\">.<\/span>shadowOffset<span class=\"token punctuation\">.<\/span>height <span class=\"token operator\">=<\/span> newValue <span class=\"token punctuation\">}<\/span><br>    <span class=\"token keyword\">get<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> layer<span class=\"token punctuation\">.<\/span>shadowOffset<span class=\"token punctuation\">.<\/span>height <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In <strong>Swift<\/strong>, adding properties to a class outside its initial implementation is not a first-class feature. In this example, we create a proxy variable that only serves as a helping hand to setting the <strong>height<\/strong> of the <strong>shadow offset<\/strong> of the <strong>layer<\/strong>. This proxy works back and forth passing the value in and out.<\/p><p>Also set these proxy attributes for <strong>shadow radius<\/strong> and <strong>shadow opacity<\/strong>:<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBInspectable<\/span> <span class=\"token keyword\">var<\/span> shadowRadius<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">set<\/span> <span class=\"token punctuation\">{<\/span> layer<span class=\"token punctuation\">.<\/span>shadowRadius <span class=\"token operator\">=<\/span> newValue <span class=\"token punctuation\">}<\/span><br>    <span class=\"token keyword\">get<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> layer<span class=\"token punctuation\">.<\/span>shadowRadius <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><span class=\"token atrule\">@IBInspectable<\/span> <span class=\"token keyword\">var<\/span> shadowOpacity<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">set<\/span> <span class=\"token punctuation\">{<\/span> layer<span class=\"token punctuation\">.<\/span>shadowOpacity <span class=\"token operator\">=<\/span> <span class=\"token function\">Float<\/span><span class=\"token punctuation\">(<\/span>newValue<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">}<\/span><br>    <span class=\"token keyword\">get<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token function\">CGFloat<\/span><span class=\"token punctuation\">(<\/span>layer<span class=\"token punctuation\">.<\/span>shadowOpacity<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In the case of the <strong>shadow radius<\/strong> value, it also relays the value to the layer. <strong>Shadow opacity<\/strong>, on the other hand, is valued as a <strong>Float<\/strong>. To make it available as an inspectable, we convert it to and from a <strong>CGFloat<\/strong> depending on whether it is being returned or consumed.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-proxy-variables"},{"id":"11296","section_id":"131","order":"39","title":"","subhead":"Inspectable","body":"<p>This is very much like the countless times we have set <strong>layer.cornerRadius<\/strong> using <strong>Runtime Attributes<\/strong>. Only this time, these attributes will be available first-class on <strong>Interface Builder<\/strong>.<\/p><p>Open the <strong>Main.storyboard<\/strong> file and navigate to the <strong>Discount Scene<\/strong>. Select the heading label and set its <strong>Shadow Offset<\/strong> to <strong>10<\/strong>, its <strong>Shadow Radius<\/strong> to <strong>20<\/strong> and the <strong>Shadow Opacity<\/strong> to <strong>1<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-inspectable"},{"id":"11297","section_id":"131","order":"40","title":"","subhead":"Conclusion","body":"<p>In this section we have learned how to use <strong>CocoaPods<\/strong> to enhance our project and simplify the workflow. Further along, this app is going to grow big and have some very powerful features. To facilitate that we are going to rely more and more on third-party code.<\/p><p>You have just recreated a key component of the <strong>Designable Classes<\/strong> on <strong>Spring<\/strong> and also learned how they behave. As you get seasoned as a developer, the day will come when you&rsquo;ll give back by sharing quality code.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-conclusion"},{"id":"11298","section_id":"131","order":"41","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/marcosgriselli\">Marcos Griselli<\/a> and <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-cocoapods-credit"}]},{"id":"133","chapter_id":"4","order":"90","slug":"swift4-keyboard-interactions","title":"Keyboard Interactions","caption":"Coordinating avoidance, appearance, and style","body":"<p>The iOS onscreen keyboard was a breakthrough in mobile user experience. It survived the test of time and the criticism, proving that convenience and versatility prevail on everyday use.<\/p><p>In the process of building UI, dealing with keyboard interaction can be a bit of a hassle. The on-screen keyboard takes up a lot of space and can move in front of your interface obstructing the very view it is editing.<\/p><p>To deal with that, Apple has built into the latest iOS releases keyboard avoidance for Collection and Table. Nonetheless, there are several cases in which the custom UI does not derive from those.<\/p><p>In those special cases, there is always the <a href=\"https:\/\/github.com\/michaeltyson\/TPKeyboardAvoiding\" title=\"TPKeyboardAvoiding, a drop-in universal solution for moving text fields out of the way \">TPKeyboardAvoiding<\/a> library for iOS. It offers keyboard avoidance functionality on a minimal setup. In this tutorial, we are going to use this library as a helper to build the Design+Code custom login interface.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-keyboard-interactions.jpg","video":"https:\/\/player.vimeo.com\/external\/254863056.hd.mp4?s=c770542db67bb45a07a425c329654cf6f0e67303&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-keyboard-interactions.zip","contents":[{"id":"11449","section_id":"133","order":"1","title":"Downloads for Keyboard Interactions","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\" title=\"Xcode 9\">Xcode 9<\/a>, and the finished Xcode project from <a href=\"https:\/\/www.dropbox.com\/s\/gzv2lktvc5e9p3k\/DesignCodeApp%20CocoaPods%20Revised%20Final.zip?dl=1\">CocoaPods<\/a>. Also, make sure to download the <a href=\"https:\/\/www.dropbox.com\/s\/e9gw3lnwwdbveg5\/DesignCodeApp%20Keyboard%20Interactions%20Revised%20Final.zip?dl=1\" title=\"final project for this section\">final project<\/a> for comparison.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-keyboard-interactions-downloads-for-keyboard-interactions"},{"id":"11450","section_id":"133","order":"2","title":"Importing TPKeyboardAvoiding","subhead":"","body":"<p>To import a given library to your <strong>CocoaPods<\/strong> enabled project, launch the <strong>CocoaPods.app<\/strong> and open the <strong>Podfile<\/strong> under the project directory or edit this same file in any plain text editor. Below the <strong>pod &rsquo;Spring&rsquo;<\/strong> statement, include:<\/p><pre><code class=\"language-swift\">  pod <span class=\"token string\">&apos;TPKeyboardAvoiding&apos;<\/span><br><\/code><\/pre><p>Then, hit install on the Mac app. Alternatively, you may save and run <strong>pod install<\/strong> command in the project folder. <strong>CocoaPods<\/strong> should complete your pods with the latest version of the <a href=\"https:\/\/github.com\/michaeltyson\/TPKeyboardAvoiding\" title=\"TPKeyboardAvoiding, a drop-in universal solution for moving text fields out of the way \">TPKeyboardAvoiding<\/a> library.<\/p><p>If you find yourself in trouble with this setup, we suggest you download the <a href=\"https:\/\/www.dropbox.com\/s\/ijwcpu8gr1w2mya\/DesignCodeApp%20Keyboard%20Interactions%20with%20CocoaPods%20initial.zip?dl=1\">project with the pod installed<\/a> and continue with the tutorial. To open <strong>CocoaPods<\/strong> enabled projects, use the <strong>Xcode Workspace<\/strong> file (a Xcode Project icon in white).<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/effvnkegduawxby\/keyboard-interactions-00-importing-pod.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-importing-tpkeyboardavoiding"},{"id":"11451","section_id":"133","order":"3","title":"Importing Assets","subhead":"","body":"<p>For this section there are only two assets required. Download the <a href=\"https:\/\/www.dropbox.com\/s\/r9fu4xa13p40t6l\/Keyboard%20Interactions%20Assets.zip?dl=1\">assets folder<\/a> and unzip it. In the Xcode project, navigate to the <strong>Assets.xcassets<\/strong> file and drop them inside the <strong>More<\/strong> folder.<\/p><p>These two assets are going to receive the namespace of their folder and will be accessible using <strong>More\/logo-medium<\/strong> and <strong>More\/password<\/strong> names.<\/p><p>As they are PDF drawings, we should set their scales to <strong>single scale<\/strong> and their render as to <strong>original image<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/btywt94t3rd2s8h\/keyboard-interactions-01-importing-assets.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-importing-assets"},{"id":"11452","section_id":"133","order":"4","title":"Login Scene","subhead":"","body":"<p>In this tutorial, we are going to build the <strong>Login Scene<\/strong> while also enhancing the user experience on the <strong>Purchase<\/strong> and <strong>Discount<\/strong> scenes. <\/p><p>Let&rsquo;s begin by creating a new scene in our <strong>Main.storyboard<\/strong> file to the right of the <strong>Discount Scene<\/strong> and naming it <strong>Login<\/strong>.<\/p><p>Delete the segue from the <strong>Login Button<\/strong> on the <strong>More Scene<\/strong> to the <strong>Purchase Scene<\/strong> and create a similar one to the <strong>Login Scene<\/strong> as <strong>Present Modally<\/strong> with <strong>Over Full Screen<\/strong> presentation and <strong>Cross Dissolve<\/strong> transition.<\/p><p>Also, the main view under this view controller should be transparent because it is going to appear over the previous scene. Set its background color to <strong>default clear<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/5p7csyx97fh3rzh\/keyboard-interactions-02-login-scene.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-login-scene"},{"id":"11453","section_id":"133","order":"5","title":"","subhead":"Visual Effect View","body":"<p>Under the main view, drop a dark <strong>Visual Effect View<\/strong> to cover the whole view and constrain it to all its sides. <\/p><p>To make sure that the visual effect covers the whole screen at the top including the notch, select the top alignment constraint and choose Superview as the Second Item with the constant of <strong>0<\/strong>. <\/p><p>Finish by setting the <strong>blur style<\/strong> to <strong>dark<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/97q982sg2tfkfra\/keyboard-interactions-03-visual-effect-view.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-visual-effect-view"},{"id":"11454","section_id":"133","order":"6","title":"","subhead":"Scroll View","body":"<p>Then, we will place a Scroll View alongside the <strong>Visual Effect View<\/strong> and constraint it on all sides to <strong>0<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/md2xqo9o3fa6675\/keyboard-interactions-04-scroll-view.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-scroll-view"},{"id":"11455","section_id":"133","order":"7","title":"","subhead":"Dialog View","body":"<p>The Dialog View inside the scroll view is going to be the moving element that contains the text field. Drag a <strong>View<\/strong> inside the <strong>Scroll View<\/strong> and constrain it to <strong>340height<\/strong>, <strong>400width<\/strong>, <strong>20<\/strong> points for <strong>leading<\/strong>, <strong>trailing<\/strong> and <strong>bottom<\/strong>. Also, set constraints for <strong>centerY<\/strong> and <strong>centerX<\/strong>.<\/p><p>Name it <strong>Dialog View<\/strong>, class it as a <strong>DesignableView<\/strong> and style it with:<\/p><ul>\t<li><strong>Corner Radius<\/strong> to <strong>14<\/strong>;<\/li>\t<li><strong>Shadow Radius<\/strong> to <strong>15<\/strong>;<\/li>\t<li><strong>Shadow Opacity<\/strong> to <strong>0.25<\/strong>;<\/li>\t<li><strong>Shadow Offset<\/strong> to <strong>10<\/strong>.<\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/751zz5qam0u6t07\/keyboard-interactions-05-dialog-view.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-dialog-view"},{"id":"11456","section_id":"133","order":"8","title":"","subhead":"Sizing Horizontally","body":"<p>To resize the width of the dialog to different screen sizes, we are going to use the <strong>Size Classes<\/strong> support on constraints. <\/p><p>Select the dialog constraint for <strong>width<\/strong>. Using the <strong>Attributes Inspector<\/strong>, create variations for installed <strong>wR<\/strong> (width Regular, height Any) and <strong>wR hC<\/strong> (width Regular, height Compact). Finally, uninstall it on any case and <strong>wR hC<\/strong>, and install it on <strong>wR<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/n7ouac12c7xabzv\/keyboard-interactions-06-sizing-horizontally.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-sizing-horizontally"},{"id":"11457","section_id":"133","order":"9","title":"","subhead":"Inner View","body":"<p>Place a <strong>View<\/strong> inside the <strong>Dialog View<\/strong> and constrain it to all its sides and name it <strong>Inner View<\/strong>. Then, class it <strong>DesignableView<\/strong>, activate <strong>clip to bounds<\/strong>, set its corner radius to <strong>14<\/strong> and its background color to <strong>F0F3F5 blue<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/x7yajsarqfbcdv2\/keyboard-interactions-07-inner-view.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-inner-view"},{"id":"11458","section_id":"133","order":"10","title":"","subhead":"Logo","body":"<p>Inside the view, use the <strong>Object Library<\/strong> to place a <strong>Image View<\/strong> and set its image to <strong>More\/logo-medium<\/strong>. Finally, constrain it <strong>30top<\/strong> and <strong>centerX<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/ofjybfea6bz4po9\/keyboard-interactions-08-logo.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-logo"},{"id":"11459","section_id":"133","order":"11","title":"","subhead":"Email Input Field","body":"<p>The input fields on this layout are a compound view with an image and a styled input. Place a <strong>View<\/strong> below the logo image and set its background to <strong>white<\/strong>. Constrain it to its <strong>leading<\/strong> and <strong>trailing<\/strong>, <strong>30top<\/strong> and <strong>60height<\/strong>. Place inside it an <strong>Image View<\/strong> and set its image to <strong>More\/email<\/strong>. Constrain it to <strong>19left<\/strong> and <strong>centerY<\/strong>.<\/p><p>Then, use the <strong>Object Library<\/strong> to place a <strong>Text Field<\/strong>. Set its <strong>Border Style<\/strong> to <strong>unbordered<\/strong> so it can size itself freely. Constrain it to <strong>8leading<\/strong>, <strong>10trailing<\/strong>, <strong>top<\/strong> and <strong>bottom<\/strong>. Using the <strong>Attributes Inspector<\/strong>, change its font to <strong>body<\/strong>, and placeholder to <strong>Email<\/strong>. customize the input method by changing the <strong>content type<\/strong> and <strong>keyboard type<\/strong> to <strong>Email address<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/g758aqw22z0ybdj\/keyboard-interactions-09-email-input-field.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-email-input-field"},{"id":"11460","section_id":"133","order":"12","title":"","subhead":"Password Input Field","body":"<p>To complement the login email, we will create a password field. As that field has the same layout as the first, simply duplicate it by <strong>Copy and Paste<\/strong>. Change the image to be <strong>More\/password<\/strong> and placeholder to <strong>Password<\/strong>. <\/p><p>The <strong>content type<\/strong> of this field should be set to <strong>Password<\/strong>. To restrict the password input, set the keyboard type to <strong>Numbers and punctuation<\/strong>. Also, to protect the user input, enable <strong>Secure Text Entry<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/q1v6qc2r73o28wo\/keyboard-interactions-10-password-input-field.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-password-input-field"},{"id":"11461","section_id":"133","order":"13","title":"","subhead":"Stacking the Fields","body":"<p>Select both views that contain the login fields and trigger <strong>Embed in Stack<\/strong> button or use the menubar option <strong>Editor &gt; Embed in &gt; Stack View<\/strong>. This Stack View is going to handle the vertical and horizontal positioning of the fields. Constrain the Stack <strong>leading<\/strong>, <strong>trailing<\/strong> and <strong>30top<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/pq51ghs3ydfcp3d\/keyboard-interactions-11-stacking-the-fields.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-stacking-the-fields"},{"id":"11462","section_id":"133","order":"14","title":"","subhead":"Password Recovery Button","body":"<p>Upon placing the password recovery button, it should suffice to constrain it <strong>8 for top<\/strong> and, by <strong>CTRL+Dragging<\/strong>, to the <strong>leading anchor<\/strong> of the password <strong>Text Field<\/strong>. Set its text to <strong>Forgot your password?<\/strong> as the<strong>body<\/strong> and set its color to <strong>light gray<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/7316vahew4y4am8\/keyboard-interactions-12-password-recovery-button.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-password-recovery-button"},{"id":"11463","section_id":"133","order":"15","title":"","subhead":"Login Button","body":"<p>Place the login button constraining it <strong>60height<\/strong> and <strong>20<\/strong> points from <strong>leading<\/strong>, <strong>trailing<\/strong> and <strong>bottom<\/strong>. <\/p><p>To assist on styling, assign the <strong>Login Button<\/strong> using another Spring class, <strong>DesignableButton<\/strong> that works very much like <strong>DesignableView<\/strong>. Style it with <strong>14<\/strong> of corner radius, and its shadow with <strong>5<\/strong> of offset, <strong>10<\/strong> of radius, and <strong>0.25<\/strong> of opacity. Its background should be a <strong>3E6EF2<\/strong> blue. Also, set its text to <strong>Login<\/strong> as a <strong>white<\/strong> <strong>semibold 20<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/29hypfhqhyoncmp\/keyboard-interactions-13-login-button.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-login-button"},{"id":"11464","section_id":"133","order":"16","title":"Keyboard Avoiding Scroll View","subhead":"","body":"<p>After the standard dialog setup we have performed, it is required to perform keyboard avoiding behavior on the <strong>Dialog View<\/strong>. Using the <strong>Identity Inspector<\/strong>, class the <strong>Scroll View<\/strong> as <strong>TPKeyboardAvoidingScrollView<\/strong>. This kind of <strong>Scroll View<\/strong> provided by the library reacts automatically to keyboard events on its inner views.<\/p><p>By using <strong>TPKeyboardAvoiding<\/strong> classes, the project receives access to backward compatible keyboard avoiding Table, Collection and Scroll. Also, sequences of <strong>Text field<\/strong> elements should display keyboards with a <strong>Next<\/strong> button.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/prbl8rarmtf2kas\/keyboard-interactions-14-keyboard-avoiding-scrollview.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-keyboard-avoiding-scroll-view"},{"id":"11465","section_id":"133","order":"17","title":"Presentation and Dismissal","subhead":"","body":"<p>There is already enough code to create and handle the <strong>Login Scene<\/strong>, now it remains to be dismissible via <strong>Pan To Close<\/strong>. Create a new <strong>Cocoa Touch Class<\/strong> named <strong>LoginViewController<\/strong> that draws from <strong>UIViewController<\/strong>. Then, go back to the <strong>Main.storyboard<\/strong> file and class the <strong>Login Scene&rsquo;s<\/strong> view controller.<\/p><p>Drop an <strong>Object<\/strong> on the scene and class it <strong>InteractionPanToClose<\/strong>. Then, connect it to its <strong>Scroll View<\/strong>, <strong>Dialog View<\/strong>, <strong>Visual Effect View<\/strong> and <strong>View Controller<\/strong> by <strong>CTRL+Drag<\/strong>.<\/p><p>Finally, activate the <strong>Assistant Editor<\/strong> and create an outlet named <strong>panToClose<\/strong> for the interaction object and set the following line on the <strong>view did load<\/strong> method.<\/p><pre><code class=\"language-swift\">panToClose<span class=\"token punctuation\">.<\/span><span class=\"token function\">setGestureRecognizer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/bv75bk5hy7d4paq\/keyboard-interactions-15-presentation-and-dismissal.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-presentation-and-dismissal"},{"id":"11466","section_id":"133","order":"18","title":"","subhead":"Animated Presentation","body":"<p>All the view controllers that fashion a <strong>Dialog View<\/strong> on the Design+Code app do present a fitting animation for appearance. This animation is very much like a reverse <strong>Pan to Close<\/strong> gesture.<\/p><p>Access the <strong>InteractionPanToClose.swift<\/strong> file and create a function by the name of <strong>rotateDialogOut<\/strong> with no arguments with the following implementation:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> rotationAngle <span class=\"token operator\">=<\/span> <span class=\"token function\">CGFloat<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">Int<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">arc4random_uniform<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">60<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span> <span class=\"token number\">30<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">*<\/span> <span class=\"token builtin\">CGFloat<\/span><span class=\"token punctuation\">.<\/span>pi <span class=\"token operator\">\/<\/span> <span class=\"token number\">180.0<\/span><br><br><span class=\"token keyword\">let<\/span> rotationTransform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>rotationAngle<span class=\"token punctuation\">:<\/span> rotationAngle<span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> translationTransform <span class=\"token operator\">=<\/span> <span class=\"token function\">CGAffineTransform<\/span><span class=\"token punctuation\">(<\/span>translationX<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">300<\/span><span class=\"token punctuation\">)<\/span><br><br>dialogView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>dialogView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> rotationTransform<span class=\"token punctuation\">.<\/span><span class=\"token function\">concatenating<\/span><span class=\"token punctuation\">(<\/span>translationTransform<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>This function positions and rotates the <strong>Dialog View<\/strong> outside of the visible area while also setting its alpha to <strong>0<\/strong> so it is entirely transparent.<\/p><p>Create yet another function named <strong>animateDialogAppear<\/strong> and implement it with the following lines:<\/p><pre><code class=\"language-swift\"><span class=\"token function\">rotateDialogOut<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> animator <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewPropertyAnimator<\/span><span class=\"token punctuation\">(<\/span>duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.5<\/span><span class=\"token punctuation\">,<\/span> dampingRatio<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.9<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>dialogView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>dialogView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>identity<br><span class=\"token punctuation\">}<\/span><br>animator<span class=\"token punctuation\">.<\/span><span class=\"token function\">startAnimation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>This function is going to leverage the <strong>rotateDialog<\/strong> function, and then, it will animate property changes transforming the <strong>Dialog View<\/strong> back to its original state and making it visible by resetting its alpha.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-keyboard-interactions-animated-presentation"},{"id":"11467","section_id":"133","order":"19","title":"","subhead":"Applying to View Controllers","body":"<p>This animation should be triggered on the apparition of a view controller and needs to be called manually. On the <strong>PurchaseViewController<\/strong>, <strong>DiscountViewController<\/strong>, and <strong>LoginViewController<\/strong> create a function that triggers this animation:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewWillAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewWillAppear<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">)<\/span><br>    panToClose<span class=\"token punctuation\">.<\/span><span class=\"token function\">animateDialogAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Upon view appearance, when all outlets and actions are set, the <strong>view controller<\/strong> will ask the <strong>Pan to Close Interaction<\/strong> to animate its <strong>Dialog View<\/strong> into the scene.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-keyboard-interactions-applying-to-view-controllers"},{"id":"11468","section_id":"133","order":"20","title":"","subhead":"Tap Gesture for Dismissal","body":"<p>It is also possible to dismiss any of these view controllers by tapping outside the <strong>Dialog View<\/strong>. Firstly we are going to receive the events required, then we are going to create the animation functionality.<\/p><p>Begin by selecting the name of the <strong>Pan Gesture Recognizer<\/strong> and triggering <strong>Refactor&#x2026; &gt; Rename<\/strong>. Rename it to &#x201C;panGestureRecognizer&#x201D; so we may name other gesture recognizers without conflict.<\/p><p>Create a new variable below that one named:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> tapGestureRecognizer <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UITapGestureRecognizer<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre><p>Then, complement the <strong>setGestureRecognizer<\/strong> by setting a new gesture recognizer with:<\/p><pre><code class=\"language-swift\">tapGestureRecognizer <span class=\"token operator\">=<\/span> <span class=\"token function\">UITapGestureRecognizer<\/span><span class=\"token punctuation\">(<\/span>target<span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> action<span class=\"token punctuation\">:<\/span> #<span class=\"token function\">selector<\/span><span class=\"token punctuation\">(<\/span>animateDialogDisappearAndDismiss<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br>scrollView<span class=\"token punctuation\">.<\/span><span class=\"token function\">addGestureRecognizer<\/span><span class=\"token punctuation\">(<\/span>tapGestureRecognizer<span class=\"token punctuation\">)<\/span><br> tapGestureRecognizer<span class=\"token punctuation\">.<\/span>delegate <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-keyboard-interactions-tap-gesture-for-dismissal"},{"id":"11469","section_id":"133","order":"21","title":"","subhead":"Animated Dismissal","body":"<p>The animation for dismissal is going to be implemented on a selector by the name of <strong>animateCloseAndDismiss<\/strong> with the signature:<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">func<\/span> animateDialogDisappearAndDismiss <span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UITapGestureRecognizer<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Its code is going to do the opposite of the <strong>animateDialogAppear<\/strong>:<\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">UIView<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span>withDuration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.5<\/span><span class=\"token punctuation\">,<\/span> animations<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">rotateDialogOut<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token punctuation\">(<\/span>finished<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">in<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>viewController<span class=\"token punctuation\">.<\/span><span class=\"token function\">dismiss<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Inside an animation block, the <strong>rotateDialogOut<\/strong> will be animated and, when finished, the <strong>Pan to Close Interaction<\/strong> will ask the view controller to dismiss itself.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-keyboard-interactions-animated-dismissal"},{"id":"11470","section_id":"133","order":"22","title":"","subhead":"Avoiding Touches","body":"<p>When running the app, it is possible to observe that any touch on this scene triggers the dismissal because the gesture recognizer is on a view that covers the whole scene, the <strong>Scroll View<\/strong>. To avoid that, set a <strong>Gesture Recognizer Delegate<\/strong> function on the <strong>Pan to Close<\/strong> interaction:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">gestureRecognizer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> gestureRecognizer<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIGestureRecognizer<\/span><span class=\"token punctuation\">,<\/span> shouldReceive touch<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UITouch<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Bool<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">if<\/span> gestureRecognizer <span class=\"token operator\">==<\/span> tapGestureRecognizer <span class=\"token operator\">&amp;&amp;<\/span> touch<span class=\"token punctuation\">.<\/span>view<span class=\"token operator\">!<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">isDescendant<\/span><span class=\"token punctuation\">(<\/span>of<span class=\"token punctuation\">:<\/span> dialogView<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">false<\/span><br>    <span class=\"token punctuation\">}<\/span><br>    <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Should a touch be recognized, it will be acted upon if the gesture recognizer is not the <strong>tapGestureRecognizer<\/strong>. Otherwise, it will test if the touch is happening inside the <strong>Dialog View<\/strong> or outside it.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-keyboard-interactions-avoiding-touches"},{"id":"11471","section_id":"133","order":"23","title":"Functionality Complete","subhead":"","body":"<p>At this point, we should take a step back, build and test the project. By now, you should have a reachable <strong>Login Scene<\/strong> with keyboard avoiding input fields. You are also able to dismiss it by tapping anywhere but inside the dialog.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/8ara0q2g5enu6kl\/keyboard-interactions-16-functionality-complete.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-functionality-complete"},{"id":"11472","section_id":"133","order":"24","title":"Home to Purchase Scene","subhead":"","body":"<p>Let&rsquo;s make the <strong>Purchase<\/strong> and <strong>Discount<\/strong> scenes reachable again from the <strong>Home Scene<\/strong>. Begin by selecting and moving both those screens next to the <strong>Home Scene<\/strong>, below the <strong>Testimonial View Controller<\/strong>.<\/p><p>Then, create a segue from the <strong>Buy Button<\/strong> on the <strong>Navigation Bar<\/strong> of the <strong>Home Scene<\/strong> to the <strong>Purchase Scene<\/strong> using <strong>Present Modally<\/strong> <strong>Over Full Screen<\/strong> using <strong>Cross Dissolve<\/strong> transition.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/pftqjawszm48ra1\/keyboard-interactions-17-home-to-purchase-scene.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-home-to-purchase-scene"},{"id":"11473","section_id":"133","order":"25","title":"","subhead":"Update Buy Button","body":"<p>Let&rsquo;s update the buy button layout by selecting its container view and classing it as a <strong>DesignableView<\/strong>. Turn on <strong>Clip to Bounds<\/strong>, set its background color to <strong>007AFF blue<\/strong> and its <strong>corner radius<\/strong> to <strong>14<\/strong>. Then size it <strong>130width<\/strong> using the <strong>Size Inspector<\/strong>.<\/p><p>Select the <strong>Button<\/strong> and remove all its constraints, then, constrain it to <strong>10<\/strong> points <strong>leading<\/strong> and <strong>trailing<\/strong> and <strong>0<\/strong> <strong>top<\/strong> and <strong>bottom<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/gxydf5p5ttwc3g8\/keyboard-interactions-18-update-buy-button.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-update-buy-button"},{"id":"11474","section_id":"133","order":"26","title":"Conclusion","subhead":"","body":"<p>That&rsquo;s it. We have a login interaction with consistent keyboard avoiding behavior, and really nice intro and outro animations for all scenes that have a <strong>Pan to Close<\/strong> interaction.<\/p><p>As we go on building the project, it&rsquo;s important to sometimes take a step back and think about what was done, compare the interaction, compare with the final project, and exercise what you learn. How would you make this interaction better?<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/anfdmtq427tocc7\/keyboard-interactions-19-conclusion.mp4?dl=0","bookmark_id":"swift4-keyboard-interactions-conclusion"},{"id":"11475","section_id":"133","order":"27","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-keyboard-interactions-credit"}]},{"id":"132","chapter_id":"4","order":"100","slug":"swift4-progress-rings","title":"Progress Rings","caption":"Using third party components and core animation","body":"<p>In the Design+Code app layout, there are three colored progress rings in the <strong>More Scene<\/strong>. In this section, we are going to use the <a href=\"https:\/\/github.com\/maxkonovalov\/MKRingProgressView\" title=\"MKRingProgressView, ring progress view similar to Activity app on Apple Watch\">MKRingProgressView<\/a> library to display progress. Apart from that, we will also use some <strong>Core Animation<\/strong> to animate the progress rings from an initial state.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-progress-rings.jpg","video":"https:\/\/player.vimeo.com\/external\/254752573.hd.mp4?s=be9729c5ec92fcf2d33a73ef7d516410bce547a3&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-progress-rings.zip","contents":[{"id":"11493","section_id":"132","order":"1","title":"Downloads for Progress Rings","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\" title=\"Xcode 9\">Xcode 9<\/a>, and the finished Xcode project from <a href=\"https:\/\/www.dropbox.com\/s\/e9gw3lnwwdbveg5\/DesignCodeApp%20Keyboard%20Interactions%20Revised%20Final.zip?dl=1\">Keyboard Interactions<\/a>. Also, make sure to download the <a href=\"https:\/\/www.dropbox.com\/s\/9rhxlbfjblr9wkf\/DesignCodeApp%20Progress%20Rings%20Revised%20Final.zip?dl=1\" title=\"final project for this section\">final project<\/a> for comparison.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-downloads-for-progress-rings"},{"id":"11494","section_id":"132","order":"2","title":"Importing MKRingProgressView","subhead":"","body":"<p>To import a given library to your <strong>CocoaPods<\/strong> enabled project, launch the <strong>CocoaPods.app<\/strong> and open the <strong>Podfile<\/strong> under the project directory or edit this same file in any plain text editor. Below the <strong>pod &rsquo;TPKeyboardAvoiding&rsquo;<\/strong> statement, include:<\/p><pre><code class=\"language-swift\">  pod <span class=\"token string\">&apos;MKRingProgressView&apos;<\/span><br><\/code><\/pre><p>Then, hit install on the Mac app. Alternatively, you may save and run <strong>pod install<\/strong> command in the project folder. <strong>CocoaPods<\/strong> should complete your pods with the latest version of the <a href=\"https:\/\/github.com\/maxkonovalov\/MKRingProgressView\" title=\"MKRingProgressView, ring progress view similar to Activity app on Apple Watch\">MKRingProgressView<\/a> library.<\/p><p>If you find yourself in trouble with this setup, we suggest you download the <a href=\"https:\/\/www.dropbox.com\/s\/jf8gu5d07fgf4s3\/DesignCodeApp%20Progress%20Rings%20with%20CocoaPods%20initial.zip?dl=1\">project with the pod installed<\/a> and continue with the tutorial.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/rgce7n6itmtgn1c\/progress-rings-01-pod-install.mp4?dl=0","bookmark_id":"swift4-progress-rings-importing-mkringprogressview"},{"id":"11495","section_id":"132","order":"3","title":"Importing Assets","subhead":"","body":"<p>For this section there is only one required asset. Download the <a href=\"https:\/\/www.dropbox.com\/s\/96i67t6q1w1wya4\/Progress%20Rings%20Assets.zip?dl=1\">assets folder<\/a> and unzip it. In the Xcode project, navigate to the <strong>Assets.xcassets<\/strong> file and drop it inside the <strong>Cover<\/strong> folder.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/3z1xkcrvfh0wc9y\/progress-rings-02-importing-assets.mp4?dl=0","bookmark_id":"swift4-progress-rings-importing-assets"},{"id":"11496","section_id":"132","order":"4","title":"","subhead":"Progress Rings in the More Scene","body":"<p>In this tutorial, we are going to follow up on the <strong>More Scene<\/strong>. Open the <strong>Main.storyboard<\/strong> file under the project and select the scene.<\/p><p>Select the first progress view inside the stack. Place inside it another <strong>View<\/strong> above the <strong>Image View<\/strong> on the document outline and class it <strong>MKRingProgressView<\/strong>. Constrain it to <strong>centerX<\/strong> and <strong>centerY<\/strong>, <strong>70width<\/strong>, <strong>70height<\/strong> and set its background to <strong>default transparent<\/strong>. Then, select the <strong>Image View<\/strong> and set it to hidden on the <strong>Attributes Inspector<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/q229r84yhy8xb3x\/progress-rings-03-progress-rings-more-scene.mp4?dl=0","bookmark_id":"swift4-progress-rings-progress-rings-in-the-more-scene"},{"id":"11497","section_id":"132","order":"5","title":"","subhead":"Replacing Placeholders","body":"<p>Finish by deleting the remaining two progress ring placeholders and duplicating the first twice using <strong>Copy and Paste<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/t3knqhdclpn2x8o\/progress-rings-04-replacing-placeholders.mp4?dl=0","bookmark_id":"swift4-progress-rings-replacing-placeholders"},{"id":"11498","section_id":"132","order":"6","title":"","subhead":"Styling the Rings","body":"<p>All the progress rings should be styled with <strong>10<\/strong> point width and have a <strong>15% black<\/strong> background, and a <strong>0.15<\/strong> opacity shadow. Replace the place holding images to, style the rings with a starting and ending colors and set labels for:<\/p><ol>\t<li>&quot;Placeholder\/image-ring-3&#x201D;, starting <strong>&#xA0;D82BDB<\/strong>, end color of <strong>&#xA0;771CC7<\/strong>, <strong>iOS Design<\/strong>;<\/li>\t<li>&quot;Placeholder\/image-ring-2&#x201D;, starting <strong>&#xA0;ED7A30<\/strong>, end color of <strong>&#xA0;FFB016<\/strong> , <strong>Sketch<\/strong>;<\/li>\t<li>&quot;Placeholder\/image-ring-1&#x201D;, starting <strong>3E83F1<\/strong>, end color of <strong>68C5FF<\/strong> , <strong>Xcode<\/strong>.<\/li><\/ol>","image":"https:\/\/designcode.io\/cloud\/swift4\/progress-rings-style.jpeg","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-styling-the-rings"},{"id":"11499","section_id":"132","order":"7","title":"Connecting Outlets","subhead":"","body":"<p>Use <strong>Assistant Editor<\/strong> by triggered by the Xcode menu bar or pressing <strong>&#x2318; + option + return<\/strong>. Navigate to the <strong>Automatic<\/strong> mode to show the scene&rsquo;s counterpart, its <strong>MoreViewController<\/strong>.<\/p><p>Create outlets for each of the rings named <strong>progress1View<\/strong>, <strong>progress2View<\/strong>, <strong>progress3View<\/strong>, their respective labels named <strong>progress1Label<\/strong>, <strong>progress2Label<\/strong> and <strong>progress3Label<\/strong>. Lastly, import the <strong>Ring Progress View<\/strong> library on the top of the file.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">UIKit<\/span><br><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">MKRingProgressView<\/span><br><br><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">MoreViewController<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewController<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> progress1View<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">MKRingProgressView<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> progress2View<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">MKRingProgressView<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> progress3View<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">MKRingProgressView<\/span><span class=\"token operator\">!<\/span><br><br>     <span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> progress1Label<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> progress2Label<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> progress3Label<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-connecting-outlets"},{"id":"11500","section_id":"132","order":"8","title":"","subhead":"Animating Ring Progress","body":"<p>A <strong>Ring Progress View<\/strong> does not know how to animate itself. Let&rsquo;s extend its functionality by placing the following code at the end of the <strong>MoreViewController.swift<\/strong> file.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">MKRingProgressView<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">animateTo<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> number <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token builtin\">CATransaction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">begin<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token builtin\">CATransaction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">setAnimationDuration<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">1.0<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>progress <span class=\"token operator\">=<\/span> <span class=\"token function\">Double<\/span><span class=\"token punctuation\">(<\/span>number<span class=\"token punctuation\">)<\/span><span class=\"token operator\">\/<\/span><span class=\"token number\">100<\/span><br>        <span class=\"token builtin\">CATransaction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">commit<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p><strong>Core Animation<\/strong> can efficiently animate the rings since they are built using <strong>Core Graphics<\/strong>. The <strong>animate to<\/strong> method creates a new <strong>Core Animation Transaction<\/strong> to interpolate the values in a <strong>1.0<\/strong> second interval.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-animating-ring-progress"},{"id":"11501","section_id":"132","order":"9","title":"Animating Text","subhead":"","body":"<p>As a <strong>Label<\/strong> object does not know how to animate its value, we also need to animate them. In this project, create a new swift file by the name of <strong>UILabel+Animate<\/strong> and paste to it the implementation of a function called <strong>animate to<\/strong>. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">UIKit<\/span><br><br><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">UILabel<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">animateTo<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> number<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">guard<\/span> number <span class=\"token operator\">&gt;<\/span> <span class=\"token number\">0<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">}<\/span><br>        <span class=\"token keyword\">let<\/span> now <span class=\"token operator\">=<\/span> <span class=\"token builtin\">DispatchTime<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">now<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><br>        <span class=\"token keyword\">for<\/span> index <span class=\"token keyword\">in<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span>number <span class=\"token punctuation\">{<\/span><br>            <span class=\"token keyword\">let<\/span> milliseconds <span class=\"token operator\">=<\/span> <span class=\"token number\">10<\/span> <span class=\"token operator\">*<\/span> index<br>            <span class=\"token keyword\">let<\/span> deadline <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">DispatchTime<\/span> <span class=\"token operator\">=<\/span> now <span class=\"token operator\">+<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token function\">milliseconds<\/span><span class=\"token punctuation\">(<\/span>milliseconds<span class=\"token punctuation\">)<\/span><br>            <span class=\"token builtin\">DispatchQueue<\/span><span class=\"token punctuation\">.<\/span>main<span class=\"token punctuation\">.<\/span><span class=\"token function\">asyncAfter<\/span><span class=\"token punctuation\">(<\/span>deadline<span class=\"token punctuation\">:<\/span> deadline<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>                <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;<span class=\"token interpolation\"><span class=\"token delimiter variable\">(<\/span>index<span class=\"token delimiter variable\">)<\/span><\/span>%&quot;<\/span><br>            <span class=\"token punctuation\">}<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This function sets subsequent timers to change the label&apos;s value, appending to it a <strong>%<\/strong> character. It guards in case the number is not greater than <strong>0<\/strong>. Then, it saves the variable for <strong>now<\/strong> so every firing has the same reference time, incrementing each deadline by a centesimal of a second.<\/p><p>To do something on the future, ask the main queue (the user interface queue) to do it on a deadline. This code ensures that the longest this animation will perform is <strong>1 second<\/strong>, in case the percentage would be <strong>100%<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-animating-text"},{"id":"11502","section_id":"132","order":"10","title":"","subhead":"Animating Labels and Rings","body":"<p>In the <strong>More View Controller<\/strong> class, override <strong>view did appear<\/strong> with the following implementation:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> progresses <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token number\">72<\/span><span class=\"token punctuation\">,<\/span><span class=\"token number\">56<\/span><span class=\"token punctuation\">,<\/span><span class=\"token number\">22<\/span><span class=\"token punctuation\">]<\/span><br><br>progress1Label<span class=\"token punctuation\">.<\/span><span class=\"token function\">animateTo<\/span><span class=\"token punctuation\">(<\/span>progresses<span class=\"token punctuation\">[<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><br>progress2Label<span class=\"token punctuation\">.<\/span><span class=\"token function\">animateTo<\/span><span class=\"token punctuation\">(<\/span>progresses<span class=\"token punctuation\">[<\/span><span class=\"token number\">1<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><br>progress3Label<span class=\"token punctuation\">.<\/span><span class=\"token function\">animateTo<\/span><span class=\"token punctuation\">(<\/span>progresses<span class=\"token punctuation\">[<\/span><span class=\"token number\">2<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><br><br>progress1View<span class=\"token punctuation\">.<\/span><span class=\"token function\">animateTo<\/span><span class=\"token punctuation\">(<\/span>progresses<span class=\"token punctuation\">[<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><br>progress2View<span class=\"token punctuation\">.<\/span><span class=\"token function\">animateTo<\/span><span class=\"token punctuation\">(<\/span>progresses<span class=\"token punctuation\">[<\/span><span class=\"token number\">1<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><br>progress3View<span class=\"token punctuation\">.<\/span><span class=\"token function\">animateTo<\/span><span class=\"token punctuation\">(<\/span>progresses<span class=\"token punctuation\">[<\/span><span class=\"token number\">2<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/53cxlviptej82wr\/progress-rings-05-animating-labels-and-rings.mp4?dl=0","bookmark_id":"swift4-progress-rings-animating-labels-and-rings"},{"id":"11503","section_id":"132","order":"11","title":"Exercises and Exercises Dialog Scenes","subhead":"","body":"<p>In this part, we will build layout for the <strong>Exercises<\/strong> and <strong>Exercises Dialog<\/strong> scenes. The <strong>Exercises Scene<\/strong> is composed of a <strong>Table View<\/strong> that sequences inside its cells a <strong>Collection View<\/strong> inside which we are going to build cells for the questions and the final score. The <strong>Exercises Dialog<\/strong> follows the same structure as the previous dialogs we have built, being only incompatible with the <strong>Pan to Close<\/strong> interaction.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/progress-rings-exercises-and-dialog-scenes.jpeg","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-exercises-and-exercises-dialog-scenes"},{"id":"11504","section_id":"132","order":"12","title":"Exercises Scene","subhead":"","body":"<p>Begin by customizing the first prototype cell of the <strong>Exercises Scene&rsquo;s<\/strong> <strong>Table View<\/strong> with a <strong>custom height<\/strong> of <strong>550<\/strong> points. Identify this cell as <strong>&#x201D;Exercise Cell&#x201D;<\/strong> and place a <strong>Collection View<\/strong> object inside it, constraining to all its sides and to <strong>550height<\/strong>.<\/p><p>This <strong>Collection View<\/strong> will automatically change its scroll position horizontally. Change its scroll direction to <strong>horizontal<\/strong>, enable <strong>paging<\/strong> and disable its <strong>scrolling<\/strong> as well as its <strong>scrolling indicators<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/uugcqscq4b5gbgy\/progress-rings-06-exercises-scene.mp4?dl=0","bookmark_id":"swift4-progress-rings-exercises-scene"},{"id":"11505","section_id":"132","order":"13","title":"Score Cell","subhead":"","body":"<p>Select the one prototype cell inside the <strong>collection view<\/strong> and stretch its width and height to match the <strong>collection view&rsquo;s<\/strong>. Then, drop a <strong>View<\/strong>, class it <strong>DesignableView<\/strong> and name it <strong>Card View<\/strong>. Its styling properties should be:<\/p><ul>\t<li><strong>Corner Radius<\/strong>: <strong>14<\/strong><\/li>\t<li><strong>Shadow Radius<\/strong>: <strong>10<\/strong><\/li>\t<li><strong>Shadow Opacity<\/strong>: <strong>0,15<\/strong><\/li><\/ul><p>Then, constrain it to all its sides <strong>20<\/strong> points.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/u27pmx52ro6t2dw\/progress-rings-07-score-cell.mp4?dl=0","bookmark_id":"swift4-progress-rings-score-cell"},{"id":"11506","section_id":"132","order":"14","title":"","subhead":"Inner View","body":"<p>Place another <strong>View<\/strong> and name it <strong>Inner View<\/strong>. Also set its class to <strong>Designable View<\/strong>, set a <strong>corner radius<\/strong> of <strong>14<\/strong>, constrain it to all its sides and activate <strong>clip to bounds<\/strong>. Inside it, place an <strong>Image View<\/strong> and constrain it on all its sides. Then, set its image to <strong>swift-wallpaper<\/strong> on <strong>aspect fill<\/strong>.<\/p><p>Place a label inside this <strong>Inner View<\/strong> and constrain it <strong>20<\/strong> points <strong>top<\/strong>, <strong>left<\/strong> and <strong>right<\/strong>. Then, style it <strong>80% white semibold 15 point<\/strong> font.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/iphovaaajc1lids\/progress-rings-08-inner-view.mp4?dl=0","bookmark_id":"swift4-progress-rings-inner-view"},{"id":"11507","section_id":"132","order":"15","title":"","subhead":"Duplicating Layout","body":"<p>Let&rsquo;s save this very layout for later. Duplicate the cell using <strong>Copy and Paste<\/strong> on the cell element and change its identifier to <strong>Question Cell<\/strong>. As both cells are identical, make sure to select the <strong>Score Cell<\/strong> before proceeding.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/fccmpnll3cw5iql\/progress-rings-09-duplicating-layout.mp4?dl=0","bookmark_id":"swift4-progress-rings-duplicating-layout"},{"id":"11508","section_id":"132","order":"16","title":"","subhead":"Header","body":"<p>Select the label that was just placed, and change its content to <strong>&#x201C;3 QUESTIONS IN 6 SECONDS&#x201D;<\/strong>. Then, place another label below with the content of <strong>&#x201D;iOS Design Challenge&#x201D;<\/strong> and constrain it to <strong>top<\/strong>, <strong>20left<\/strong> and <strong>20right<\/strong>. Finally, style it <strong>white bold 30<\/strong> points font with <strong>5<\/strong> lines.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/progress-rings-header.jpeg","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-header"},{"id":"11509","section_id":"132","order":"17","title":"","subhead":"Progress Ring","body":"<p>On the center, place an <strong>extra light Visual Effect View<\/strong> and constrain it to <strong>centerX<\/strong>, <strong>centerY<\/strong>, <strong>180width<\/strong> and <strong>180height<\/strong>. Inside it, place yet another <strong>View<\/strong>, make it <strong>default transparent<\/strong> and constrain it <strong>centerX<\/strong>, <strong>centerY<\/strong>, <strong>140width<\/strong> and <strong>140height<\/strong>.<\/p><p>Class the last view an <strong>MKRingProgressView<\/strong> and set its attributes to:<\/p><ul>\t<li>start color: <strong>D82BDB<\/strong>;<\/li>\t<li>end color: <strong>&#xA0;771CC7<\/strong>;<\/li>\t<li>background color: <strong>15% black<\/strong>;<\/li>\t<li>ring width: <strong>18<\/strong>;<\/li>\t<li>shadow opacity: <strong>0.25<\/strong>.<\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/2vllhj1gff8u3r4\/progress-rings-10-progress-ring.mp4?dl=0","bookmark_id":"swift4-progress-rings-progress-ring"},{"id":"11510","section_id":"132","order":"18","title":"","subhead":"Percentage Label","body":"<p>Place a <strong>Label<\/strong> inside the ring progress view with the content of <strong>&#x201D;0%&#x201D;<\/strong> as a <strong>black bold 36<\/strong> point font. Then, constrain it <strong>centerX<\/strong> and <strong>centerY<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/progress-rings-percentage-label.jpeg","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-percentage-label"},{"id":"11511","section_id":"132","order":"19","title":"","subhead":"Summary Label","body":"<p>Place another label on the bottommost part with the content of <strong>&#x201D;You took the exercise 3 times. Your average time is 30 seconds.&#x201D;<\/strong> and constrain it to <strong>20bottom<\/strong>, <strong>20left<\/strong> and <strong>20right<\/strong>. Finally, style it <strong>white bold 16<\/strong> points font with <strong>2<\/strong> lines.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/progress-rings-summary-label.jpeg","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-summary-label"},{"id":"11512","section_id":"132","order":"20","title":"","subhead":"Action Button Stack","body":"<p>Drop a <strong>Horizontal Stack<\/strong> above the <strong>Summary Label<\/strong> and constrain it <strong>240width<\/strong>, <strong>40height<\/strong>, <strong>15bottom<\/strong> and <strong>centerX<\/strong>. Set its distribution to <strong>fill equally<\/strong> and the spacing to <strong>20<\/strong> points.<\/p><p>Inside it, drop a <strong>Visual Effect View<\/strong> and set its blur effect to <strong>dark<\/strong> and set a <strong>runtime attribute<\/strong> of <strong>cornerRadius<\/strong> to the <strong>number<\/strong> <strong>10<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/h5pelaiu2x0r15j\/progress-rings-11-action-button-stack.mp4?dl=0","bookmark_id":"swift4-progress-rings-action-button-stack"},{"id":"11513","section_id":"132","order":"21","title":"","subhead":"Action Buttons","body":"<p>Then, drop inside this <strong>visual effect view<\/strong> a button and constrain it to all its sides. Set its class to <strong>DesignableButton<\/strong> and style it with:<\/p><ul>\t<li><strong>shadow radius<\/strong>: <strong>8<\/strong>;<\/li>\t<li><strong>shadow opacity<\/strong>: <strong>0.25<\/strong>;<\/li>\t<li><strong>shadow offset<\/strong>: <strong>5<\/strong>;<\/li>\t<li><strong>font<\/strong>: <strong>white bold 17<\/strong>;<\/li><\/ul><p>Duplicate the visual effect views and set the content of each button to <strong>&#x201D;Try Again&#x201D;<\/strong> and <strong>&#x201D;Share&#x201D;<\/strong>, respectively.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/kzoa96frj306ntp\/progress-rings-12-action-buttons.mp4?dl=0","bookmark_id":"swift4-progress-rings-action-buttons"},{"id":"11514","section_id":"132","order":"22","title":"Question Cell","subhead":"","body":"<p>Select the <strong>Question Cell<\/strong> on the <strong>Collection View<\/strong> to move it to the viewport. Select the already present <strong>Label<\/strong> and change its content to <strong>&#x201D;iOS Design: 9 \/ 12 exercises&#x201D;<\/strong>.<\/p><p>Drop inside it a <strong>Button<\/strong>, change its content to <strong>&#x201C;Intuition, clarity and beauty&#x201D;<\/strong>, change its alignment to <strong>left<\/strong> on the control section and its image to <strong>&#x201D;Exercises-Uncheck&#x201D;<\/strong>. Style it <strong>555555 gray medium 17<\/strong> with a <strong>16<\/strong> point left content inset.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/ds9r1bs84aur1ci\/progress-rings-13-question-cell.mp4?dl=0","bookmark_id":"swift4-progress-rings-question-cell"},{"id":"11515","section_id":"132","order":"23","title":"","subhead":"Stack","body":"<p>Push the button under a <strong>Stack<\/strong> with <strong>fill equally<\/strong> distribution. Finish by constraining it to <strong>left<\/strong>, <strong>right<\/strong>, <strong>bottom<\/strong> and <strong>300height<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/r3rmu6xkq14dzbn\/progress-rings-14-stack.mp4?dl=0","bookmark_id":"swift4-progress-rings-stack"},{"id":"11516","section_id":"132","order":"24","title":"","subhead":"Header Image","body":"<p>Select the all the constraints of the <strong>Image View<\/strong> and delete them. Resize the image&rsquo;s height so it is above the stack and create a new constraints for all sides. Change the image to <strong>ios11<\/strong> and activate <strong>clip to bounds<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/sjoups9k189n8jl\/progress-rings-15-header-image.mp4?dl=0","bookmark_id":"swift4-progress-rings-header-image"},{"id":"11517","section_id":"132","order":"25","title":"","subhead":"Question Label","body":"<p>On top of the image, place a <strong>dark Visual Effect View<\/strong> and, inside it, a <strong>Label<\/strong>. Constrain the label <strong>8<\/strong> points to all its sides. Then, constrain the visual effect view <strong>20<\/strong> points <strong>left<\/strong>, <strong>right<\/strong> and <strong>bottom<\/strong>.<\/p><p>Selecting the visual effect view, set a <strong>runtime attribute<\/strong> of <strong>cornerRadius<\/strong> to the <strong>number<\/strong> <strong>10<\/strong>. Change the label&rsquo;s content to <strong>&#x201D;What are the 3 core philosophies for iOS design?&#x201D;<\/strong> and style it <strong>white semibold 20<\/strong> with <strong>5<\/strong> lines.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/zo96d4iw4rh1u2c\/progress-rings-16-question-label.mp4?dl=0","bookmark_id":"swift4-progress-rings-question-label"},{"id":"11518","section_id":"132","order":"26","title":"","subhead":"Answer Buttons","body":"<p>Select the answer button and duplicate it by <strong>Copy and Paste<\/strong> until it reaches 5 elements.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/progress-rings-answer-buttons.jpeg","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-answer-buttons"},{"id":"11519","section_id":"132","order":"27","title":"Displaying Questions","subhead":"","body":"<p>Both <strong>Table<\/strong> and <strong>Collection<\/strong> need a data source to be able to display their content. In this part, these structures will be built and fed static data. Begin by setting the following constant into the <strong>Data.swift<\/strong> file in your project.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> exercises <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><br>    <span class=\"token string\">&quot;chapter-1-iOS-11-Design&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><br>        <span class=\"token punctuation\">[<\/span><br>            <span class=\"token string\">&quot;question&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;What are the 3 core philosophies for iOS design?&quot;<\/span><span class=\"token punctuation\">,<\/span><br>            <span class=\"token string\">&quot;correctAnswer&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Deference, clarity and depth&quot;<\/span><span class=\"token punctuation\">,<\/span><br>            <span class=\"token string\">&quot;answers&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><br>                <span class=\"token string\">&quot;Intuition, clarity and beauty&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                <span class=\"token string\">&quot;Deference, clarity and depth&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                <span class=\"token string\">&quot;Fun, clarity and perception&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                <span class=\"token string\">&quot;Good, great and insanely great&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                <span class=\"token string\">&quot;Clarity, depth and intuition&quot;<\/span><span class=\"token punctuation\">,<\/span><br>            <span class=\"token punctuation\">]<\/span><br>        <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token punctuation\">[<\/span><br>            <span class=\"token string\">&quot;question&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;What is the recommended line-height for readability?&quot;<\/span><span class=\"token punctuation\">,<\/span><br>            <span class=\"token string\">&quot;correctAnswer&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;120% to 145%&quot;<\/span><span class=\"token punctuation\">,<\/span><br>            <span class=\"token string\">&quot;answers&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><br>                <span class=\"token string\">&quot;100% to 110%&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                <span class=\"token string\">&quot;110% to 120%&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                <span class=\"token string\">&quot;110% to 150%&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                <span class=\"token string\">&quot;120% to 145%&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                <span class=\"token string\">&quot;100% to 160%&quot;<\/span><span class=\"token punctuation\">,<\/span><br>            <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;chapter-1-Sketch&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><br>        <span class=\"token punctuation\">[<\/span><br>            <span class=\"token string\">&quot;question&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;What&apos;s the big feature in Sketch 47?&quot;<\/span><span class=\"token punctuation\">,<\/span><br>            <span class=\"token string\">&quot;correctAnswer&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Libraries&quot;<\/span><span class=\"token punctuation\">,<\/span><br>            <span class=\"token string\">&quot;answers&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><br>                <span class=\"token string\">&quot;New Emojis&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                <span class=\"token string\">&quot;Nested Symbols&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                <span class=\"token string\">&quot;Symbol Overrides&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                <span class=\"token string\">&quot;Resizing Constraints&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                <span class=\"token string\">&quot;Libraries&quot;<\/span><span class=\"token punctuation\">,<\/span><br>            <span class=\"token punctuation\">]<\/span><br>        <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br><span class=\"token punctuation\">]<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-displaying-questions"},{"id":"11520","section_id":"132","order":"28","title":"Exercises Table View Cell","subhead":"","body":"<p>Then, create a new <strong>Cocoa Touch Class<\/strong> named <strong>ExerciseTableViewCell<\/strong> that draws from <strong>UITableViewCell<\/strong>. Go back to the <strong>Main.storyboard<\/strong> file, class the <strong>Exercise Cell<\/strong>.<\/p><p>Open the <strong>Assistant Editor<\/strong> on this class to create an outlet for the <strong>collection view<\/strong> and a variable for questions.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token operator\">!<\/span><br><span class=\"token keyword\">var<\/span> questions <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span><span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-exercises-table-view-cell"},{"id":"11521","section_id":"132","order":"29","title":"","subhead":"Collection View Data Source","body":"<p>To be allowed to be asked for collection view cells, this view has to implement comply with a specific data source protocol:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">ExerciseTableViewCell<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionViewDataSource<\/span> <span class=\"token punctuation\">{<\/span><br><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>The <strong>Collection View<\/strong> is usually regarded as a superset of <strong>Table View<\/strong>. Likewise, it requires two functions from its data source:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> numberOfItemsInSection section<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> questions<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In this function, the data source will inform the collection view how many cells should it ask. To which the data source will answer the number of questions.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> cellForItemAt indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">UICollectionViewCell<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">dequeueReusableCell<\/span><span class=\"token punctuation\">(<\/span>withReuseIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Question Cell&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span> <span class=\"token builtin\">UICollectionViewCell<\/span><br><br>    <span class=\"token keyword\">return<\/span> cell<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>When the collection view asks for the cell, the data source should configure the cell and return it. In this case, no configuration is done to return the cell marked as <strong>Question Cell<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-collection-view-data-source"},{"id":"11522","section_id":"132","order":"30","title":"","subhead":"Loading the Data","body":"<p>This class should also be equipped with a <strong>awake from nib<\/strong> function that is guaranteed to happen at a point where all the subviews are available. For that reason, it would be safe for setting this view as the data source of the collection view, as well as asking it to reload:<\/p><pre><code class=\"language-swift\">collectionView<span class=\"token punctuation\">.<\/span>dataSource <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br>collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">reloadData<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-loading-the-data"},{"id":"11523","section_id":"132","order":"31","title":"Exercises Table View Controller","subhead":"","body":"<p>Continue by creating a new <strong>Cocoa Touch Class<\/strong> named <strong>ExercisesTableViewController<\/strong> that draws from <strong>UITableViewController<\/strong>. This file should present a couple of preset functions. Among which are two of interest and another to be set.<\/p><p>The first is a data source function for the number of rows in the <strong>Table View<\/strong> that should return the number of exercises.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">tableView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> tableView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UITableView<\/span><span class=\"token punctuation\">,<\/span> numberOfRowsInSection section<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> exercises<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>The second asks the data source for a cell, being given an <strong>Exercise Cell<\/strong> configured with the exercises under the index of the row. Because <strong>exercises<\/strong> is a dictionary, it is necessary to transform the sequence of its values into an array to be able to access it via an index.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">tableView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> tableView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UITableView<\/span><span class=\"token punctuation\">,<\/span> cellForRowAt indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">UITableViewCell<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> tableView<span class=\"token punctuation\">.<\/span><span class=\"token function\">dequeueReusableCell<\/span><span class=\"token punctuation\">(<\/span>withIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Exercise Cell&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">ExercisesTableViewCell<\/span><br>    cell<span class=\"token punctuation\">.<\/span>questions <span class=\"token operator\">=<\/span> exercises<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;chapter-1-iOS-11-Design&quot;<\/span><span class=\"token punctuation\">]<\/span><br>    <span class=\"token keyword\">return<\/span> cell<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>The <strong>Exercises Scene<\/strong> is currently able to display its data, though it is not interactive. Go back to the <strong>Main.storyboard<\/strong> file and class the <strong>Exercises Scene&rsquo;s<\/strong> controller.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-exercises-table-view-controller"},{"id":"11524","section_id":"132","order":"32","title":"Exercise Dialog","subhead":"","body":"<p>Below the <strong>Exercise Scene<\/strong> drop another <strong>View Controller<\/strong> and label it <strong>Exercise Dialog<\/strong> and make its view <strong>default transparent<\/strong>.<\/p><p>From the <strong>Exercises Scene<\/strong>, draw a segue that targets it as a <strong>Present Modally<\/strong> segue with <strong>over full screen<\/strong> presentation and <strong>cover vertical<\/strong> transition. Identify it as <strong>&#x201C;Present Exercise Dialog&#x201D;<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/6nflpgah21mtpgm\/progress-rings-17-dialog-view.mp4?dl=0","bookmark_id":"swift4-progress-rings-exercise-dialog"},{"id":"11525","section_id":"132","order":"33","title":"","subhead":"Dialog View","body":"<p>This dialog will not obstruct the whole view by much time, nor will it be manually dismissible. For that reason, it will have a simplified view hierarchy incompatible with <strong>Pan to Close<\/strong>. Place a <strong>View<\/strong>, make it <strong>default transparent<\/strong> and class it <strong>Designable View<\/strong> and label it <strong>Dialog View<\/strong>. Set it&rsquo;s <strong>corner radius<\/strong> to <strong>28<\/strong>, activate <strong>clip to bounds<\/strong> and constrain it to <strong>260width<\/strong> and <strong>260height<\/strong>, and <strong>centerX<\/strong> and <strong>centerY<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/6nflpgah21mtpgm\/progress-rings-17-dialog-view.mp4?dl=0","bookmark_id":"swift4-progress-rings-dialog-view"},{"id":"11526","section_id":"132","order":"34","title":"","subhead":"Inner Elements","body":"<p>Place inside it a dark <strong>Visual Effect View<\/strong> constrained to all its sides. And inside this one, place two <strong>Labels<\/strong> and one <strong>View<\/strong> and constrain them all to <strong>centerX<\/strong>. The first label should be constrained <strong>20top<\/strong> from the superview. The second, <strong>0top<\/strong> from the first.<\/p><p>Finally, the view should be constrained <strong>146<\/strong> points in <strong>height<\/strong> and <strong>width<\/strong> and <strong>20<\/strong> points bottom. Inside this last view, place a <strong>Label<\/strong> and constrain it centered.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/lgsndx402pfhzl6\/progress-rings-18-inner-elements.mp4?dl=0","bookmark_id":"swift4-progress-rings-inner-elements"},{"id":"11527","section_id":"132","order":"35","title":"","subhead":"Styling the Elements","body":"<p>From top to bottom, customize the labels with content and style like:<\/p><ul>\t<li><strong>&#x201C;Correct&#x201D;<\/strong>, <strong>white semibold 30<\/strong><\/li>\t<li><strong>&#x201D;You&rsquo;re currently doing:&#x201D;<\/strong>, <strong>50% white body<\/strong><\/li>\t<li><strong>&#x201C;0%&#x201D;<\/strong>, <strong>white semibold 50<\/strong><\/li><\/ul><p>Select the <strong>View<\/strong> and class it <strong>MKRingProgressView<\/strong>. Set its attributes to:<\/p><ul>\t<li>start color: <strong>D82BDB<\/strong>;<\/li>\t<li>end color: <strong>&#xA0;771CC7<\/strong>;<\/li>\t<li>background color: <strong>10% black<\/strong>;<\/li>\t<li>view&rsquo;s background color: <strong>default transparent<\/strong>.<\/li><\/ul>","image":"https:\/\/designcode.io\/cloud\/swift4\/progress-rings-styling-elements.jpeg","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-styling-the-elements"},{"id":"11528","section_id":"132","order":"36","title":"","subhead":"Exercise Dialog View Controller","body":"<p>Then, create a new <strong>Cocoa Touch Class<\/strong> named <strong>ExerciseDialogViewController<\/strong> that draws from <strong>UIViewController<\/strong>. Go back to the <strong>Main.storyboard<\/strong> file, class the <strong>Exercise Dialog Scene<\/strong> and open the <strong>Assistant Editor<\/strong> on this class, creating an outlet for the <strong>dialog view<\/strong>, <strong>progress label<\/strong> and <strong>ring progress view<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> dialogView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIView<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> progressView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">MKRingProgressView<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> progressLabel<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre><p>Lastly, import the <strong>Ring Progress View<\/strong> library on the top of the file.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-exercise-dialog-view-controller"},{"id":"11529","section_id":"132","order":"37","title":"","subhead":"Appearance Animation","body":"<p>This dialog view moves from the bottom of the screen rotating with perspective. Then, the label and the ring progress counts up. And finally, everything disappears modally.<\/p><p> Just like in the other dialog views, this appearance animation should happen before the view actually appears. To do that, override the <strong>view will appear<\/strong> method so we can build on it.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewWillAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewWillAppear<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Inside it, we will set an initial state and an animation to the final state. The initial state is a 3D transform that has been covered in <strong>Chapter 3, 3D Animation<\/strong>. Let&rsquo;s review it:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> angle <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span> <span class=\"token operator\">=<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">100.0<\/span> <span class=\"token operator\">*<\/span> <span class=\"token punctuation\">.<\/span>pi <span class=\"token operator\">\/<\/span> <span class=\"token number\">180.0<\/span><br><span class=\"token keyword\">var<\/span> rotationTransform <span class=\"token operator\">=<\/span> <span class=\"token function\">CATransform3DMakeRotation<\/span><span class=\"token punctuation\">(<\/span>angle<span class=\"token punctuation\">,<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><br>rotationTransform<span class=\"token punctuation\">.<\/span>m34 <span class=\"token operator\">=<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">1.0<\/span><span class=\"token operator\">\/<\/span><span class=\"token number\">1000<\/span><br><br><span class=\"token keyword\">var<\/span> translationTransform <span class=\"token operator\">=<\/span> <span class=\"token function\">CATransform3DMakeTranslation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">80<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">200<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><br>translationTransform<span class=\"token punctuation\">.<\/span>m34 <span class=\"token operator\">=<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">1.0<\/span><span class=\"token operator\">\/<\/span><span class=\"token number\">2500<\/span><br><br><span class=\"token keyword\">let<\/span> transform <span class=\"token operator\">=<\/span> <span class=\"token function\">CATransform3DConcat<\/span><span class=\"token punctuation\">(<\/span>rotationTransform<span class=\"token punctuation\">,<\/span> translationTransform<span class=\"token punctuation\">)<\/span><br><br>dialogView<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> transform<br>dialogView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br><\/code><\/pre><p>These transforms will translate (move) and rotate the view out of its default position using perspective, while also rendering it transparent. Finally, let&rsquo;s reset this state inside an animation block:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> animator <span class=\"token operator\">=<\/span> <span class=\"token function\">UIViewPropertyAnimator<\/span><span class=\"token punctuation\">(<\/span>duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.8<\/span><span class=\"token punctuation\">,<\/span> dampingRatio<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.7<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>dialogView<span class=\"token punctuation\">.<\/span>transform <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>identity<br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>dialogView<span class=\"token punctuation\">.<\/span>alpha <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br><span class=\"token punctuation\">}<\/span><br>animator<span class=\"token punctuation\">.<\/span><span class=\"token function\">startAnimation<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-appearance-animation"},{"id":"11530","section_id":"132","order":"38","title":"","subhead":"Percentage Animation","body":"<p>Different from the previous animation, the user will see the percentage animation in full. In any view controller, there is a method that guarantees that the view is already visible. This method is <strong>view did appear<\/strong>, override it so we can build the animation inside.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>The ring progress animation happens slightly later than the label progress animation. Let&rsquo;s delay the ring progress by <strong>0.1<\/strong> seconds while also using the animation code we have previously built:<\/p><pre><code class=\"language-swift\">progressLabel<span class=\"token punctuation\">.<\/span><span class=\"token function\">animateTo<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">70<\/span><span class=\"token punctuation\">)<\/span><br><br><span class=\"token builtin\">DispatchQueue<\/span><span class=\"token punctuation\">.<\/span>main<span class=\"token punctuation\">.<\/span><span class=\"token function\">asyncAfter<\/span><span class=\"token punctuation\">(<\/span>deadline<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token function\">now<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">+<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token function\">milliseconds<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">100<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>progressView<span class=\"token punctuation\">.<\/span><span class=\"token function\">animateTo<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">70<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Finally, this view controller should dismiss itself as it has no user interaction. Let&rsquo;s give the user a <strong>2<\/strong> seconds window to see the animation and read the view.<\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">DispatchQueue<\/span><span class=\"token punctuation\">.<\/span>main<span class=\"token punctuation\">.<\/span><span class=\"token function\">asyncAfter<\/span><span class=\"token punctuation\">(<\/span>deadline<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token function\">now<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">+<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token function\">seconds<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">2<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">dismiss<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-percentage-animation"},{"id":"11531","section_id":"132","order":"39","title":"","subhead":"Presenting from the Exercises Scene","body":"<p>Open the <strong>ExercisesTableViewController.swift<\/strong> file so we can access the <strong>Exercises Dialog Scene<\/strong> from it. Inside it, create a function to perform a segue we are about to create right after the view shows on the screen:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">)<\/span><br>    <span class=\"token function\">performSegue<\/span><span class=\"token punctuation\">(<\/span>withIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Present Exercise Dialog&quot;<\/span><span class=\"token punctuation\">,<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-presenting-from-the-exercises-scene"},{"id":"11532","section_id":"132","order":"40","title":"Conclusion","subhead":"","body":"<p>Using third-party components may boost your productivity. If you find some navigation behavior or layout item in many apps, chances are, there is already some open source library facilitating that.<\/p><p>Apart from enhancing your app from using these projects, you may also benefit from reading their source code, documentation, comments, and issues. This process will help you learn more about the technology&apos;s potentials and shortcomings.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/z1ugsef9v58rask\/progress-rings-19-conclusion.mp4?dl=0","bookmark_id":"swift4-progress-rings-conclusion"},{"id":"11533","section_id":"132","order":"41","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-progress-rings-credit"}]},{"id":"141","chapter_id":"4","order":"101","slug":"swift4-delegation","title":"Delegation","caption":"One object acting on behalf of another object","body":"<p>By now you must be tired of seeing this word. If you search the whole project, you will see a lot of it. <strong>Delegation<\/strong> in the pattern by which two halves coordinate behavior by sending messages to back and forth and fulfilling each other&rsquo;s needs. It&rsquo;s a coupling pattern and it&rsquo;s deeply tied to local events.<\/p><p>Don&rsquo;t be skeptical, once you get the concept, you will see it everywhere, and you will apply it yourself.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-delegation.jpg","video":"https:\/\/player.vimeo.com\/external\/257907880.hd.mp4?s=a3dc23b7ef3deda29f26019918a767d5f82a8335&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-delegation.zip","contents":[{"id":"12259","section_id":"141","order":"1","title":"Controller","subhead":"","body":"<p>As the app grows, we have created a variety of classes. For example, we used a Table View Controller, a Tab Bar Controller, and we built a Web View Controller.<\/p><p>A Controller is usually the sum of two natures, Delegate and Data Source. It makes the middle ground between the data to be displayed, what we see on screen, and how we interact with it.<\/p><p>Of all the things Buttons, Tables, Collections or Images are capable of doing, they are not capable of conveying intent and guiding the user. There comes the designer&rsquo;s hand on the Controller.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/xgje3o7g7ii2vuw\/delegation-01-controller.mp4?dl=0","bookmark_id":"swift4-delegation-controller"},{"id":"12260","section_id":"141","order":"2","title":"Downloads for Delegation","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\" title=\"Xcode 9\">Xcode 9<\/a>, and the finished Xcode project from <a href=\"https:\/\/www.dropbox.com\/s\/9rhxlbfjblr9wkf\/DesignCodeApp%20Progress%20Rings%20Revised%20Final.zip?dl=1\">Progress Rings<\/a>. Also, make sure to download the <a href=\"https:\/\/www.dropbox.com\/s\/435xkqxdt1q8nw9\/DesignCodeApp%20Delegation%20final.zip?dl=1\">final project<\/a> for comparison.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-downloads-for-delegation"},{"id":"12261","section_id":"141","order":"3","title":"Delegation Pattern","subhead":"","body":"<p>Delegation is often used to separate concerns. For example, it was mentioned before that a Table View is capable of many things but incapable of knowing what to display.<\/p><p>For instance, if you were to write a Table View on your own, you would have to write how it scrolls, how it positions its items, how it determines what is being tapped and many other major and minor features.<\/p><p>Instead, you simply call it and customize it using the controller. This is possible because Table View has a <strong>protocol<\/strong> of communication in which another object can fulfill its needs without needing to override its core behavior.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/ftwk8x5ruh2bq91\/delegation-02-delegation-pattern.mp4?dl=1","bookmark_id":"swift4-delegation-delegation-pattern"},{"id":"12262","section_id":"141","order":"4","title":"Handoff","subhead":"","body":"<p>In the previous section, the Exercises Scene was built upon a Table View Controller. In each of its cells, a Collection View is being controlled by the Cell. And finally, these Collection Views have cells for the Questions and the Score.<\/p><p>These three layers of behavior do naturally communicate by themselves to make scrolling and tapping possible. Nonetheless, they lack the configuration to be able to perform some actions. In this section, we will make the tap events of the Answer, Try Again and Share Buttons bubble up from layer to layer and trigger appropriate responses.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/yo6ccj7u19wsltu\/delegation-03-handoff.mp4?dl=0","bookmark_id":"swift4-delegation-handoff"},{"id":"12263","section_id":"141","order":"5","title":"Question Cell","subhead":"","body":"<p>We will take a bottom to top approach. Begin by opening the project&apos;s main storyboard and navigating to the Question Cell on the Exercises Scene. As we have not done before, create a new Cocoa Touch Class for the Question Collection View Cell.<\/p><p>To make use of it, class the question cell to it and open the Assistant Editor. Before this cell is presented, it needs to know what question is being asked and configure its question label and answer buttons labels.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> question <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span><span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">var<\/span> questionLabel<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">var<\/span> answerButtons<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token builtin\">UIButton<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre><p>Notice that an outlet collection does not guarantee order. Even if you connect them one by one, UI Kit only ensures the assignment. For these buttons, this is acceptable because the order in which the answers appear on the screen does not matter.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-question-cell"},{"id":"12264","section_id":"141","order":"6","title":"Tap Answer Button","subhead":"","body":"<p>Select one of the buttons and create an action to receive its tap events. Label it &quot;did tap answer button&quot; and type the sender argument as a UI Button.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">didTapAnswerButton<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIButton<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Just like outlet collections, an action is specific to a given object, but may be connected to many. Connect all the Answer Buttons to it.<\/p><p>This action should trigger two behaviors. First, it should change the button image to the exercises checked, which it can do on its own.<\/p><pre><code class=\"language-swift\">sender<span class=\"token punctuation\">.<\/span><span class=\"token function\">setImage<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">UIImage<\/span><span class=\"token punctuation\">(<\/span>named<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Exercises-Check&quot;<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>normal<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/8rrpsj9esfymkvz\/delegation-04-tap-answer-button.mp4?dl=0","bookmark_id":"swift4-delegation-tap-answer-button"},{"id":"12265","section_id":"141","order":"7","title":"Question Cell Delegate","subhead":"","body":"<p>Second, it should be determined if the answer was right, show the partial score and move to the next question or the final score. This part is not a responsibility of the cell. In this case, it should tell a delegate that a question cell did receive an answer to a given question.<\/p><p>Above this class, create a protocol to which it can communicate this:<\/p><pre><code class=\"language-swift\">protocol <span class=\"token builtin\">QuestionCellDelegate<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">class<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">questionCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> cell <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">QuestionCollectionViewCell<\/span><span class=\"token punctuation\">,<\/span> didTapAnswerButton button <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIButton<\/span><span class=\"token punctuation\">,<\/span> forQuestion question <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span><span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Inside the cell class, create a new property for this delegate:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> delegate <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">QuestionCellDelegate<\/span><span class=\"token operator\">?<\/span><br><\/code><\/pre><p>And call it appropriately when the button is tapped:<\/p><pre><code class=\"language-swift\">delegate<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">questionCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> didTapButton<span class=\"token punctuation\">:<\/span> sender<span class=\"token punctuation\">,<\/span> forQuestion<span class=\"token punctuation\">:<\/span> question<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-question-cell-delegate"},{"id":"12266","section_id":"141","order":"8","title":"Configuring the Question Cell","subhead":"","body":"<p>Back in the Exercises Table View Cell class, the question cells are dequeued, yet they lack the question and the possible answers. This can be easily fixed by configuring the cell right before it is returned.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">dequeueReusableCell<\/span><span class=\"token punctuation\">(<\/span>withReuseIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Question Cell&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">QuestionCollectionViewCell<\/span><br><span class=\"token keyword\">let<\/span> question <span class=\"token operator\">=<\/span> questions<span class=\"token punctuation\">[<\/span>indexPath<span class=\"token punctuation\">.<\/span>row<span class=\"token punctuation\">]<\/span><br>cell<span class=\"token punctuation\">.<\/span>question <span class=\"token operator\">=<\/span> question<br>cell<span class=\"token punctuation\">.<\/span>delegate <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br>cell<span class=\"token punctuation\">.<\/span>questionLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> question<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;question&quot;<\/span><span class=\"token punctuation\">]<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">?<\/span> <span class=\"token builtin\">String<\/span><br><span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> possibleAnswers <span class=\"token operator\">=<\/span> question<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;answers&quot;<\/span><span class=\"token punctuation\">]<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">?<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">for<\/span> index <span class=\"token keyword\">in<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token operator\">&lt;<\/span>possibleAnswers<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span> <span class=\"token punctuation\">{<\/span><br>        cell<span class=\"token punctuation\">.<\/span>answerButtons<span class=\"token punctuation\">[<\/span>index<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">setTitle<\/span><span class=\"token punctuation\">(<\/span>possibleAnswers<span class=\"token punctuation\">[<\/span>index<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>normal<span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><span class=\"token keyword\">return<\/span> cell<br><\/code><\/pre><p>As mentioned before, the answer buttons on the question cell do not guarantee order. Take notice that this is not a reliable way to shuffle the possible answers, although it may happen.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-configuring-the-question-cell"},{"id":"12267","section_id":"141","order":"9","title":"Did Tap Answer Button for Question","subhead":"","body":"<p>Notice that, by setting the Exercise Table View Cell as the delegate of a Question Cell, Xcode notifies an error. This error is due to the lack of functionality of the cell, and can be easily corrected.<\/p><p>Create an extension for the Exercise Table View Cell that complies with Question Cell Delegate, and create a function for the questionCell:didTapButton:forQuestion selector.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">questionCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> cell<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">QuestionCollectionViewCell<\/span><span class=\"token punctuation\">,<\/span> didTapButton button<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIButton<\/span><span class=\"token punctuation\">,<\/span> forQuestion question<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>This function needs to move to the next cell to display the next question as it has ownership of the collection view.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> indexPath <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">indexPath<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> cell<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br><span class=\"token keyword\">let<\/span> nextIndex <span class=\"token operator\">=<\/span> <span class=\"token function\">IndexPath<\/span><span class=\"token punctuation\">(<\/span>row<span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">.<\/span>row <span class=\"token operator\">+<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span> section<span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">.<\/span>section<span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">if<\/span> indexPath<span class=\"token punctuation\">.<\/span>row <span class=\"token operator\">&lt;<\/span> questions<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span> <span class=\"token punctuation\">{<\/span><br>    collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">scrollToItem<\/span><span class=\"token punctuation\">(<\/span>at<span class=\"token punctuation\">:<\/span> nextIndex<span class=\"token punctuation\">,<\/span> at<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>centeredHorizontally<span class=\"token punctuation\">,<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">false<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-did-tap-answer-button-for-question"},{"id":"12268","section_id":"141","order":"10","title":"Receive Answer","subhead":"","body":"<p>As an Exercise Cell is not entitled to create and issue events, it should also not be able to perform a segue to show the partial score. Once again we need to create a pathway to inform another object that a cell received an answer to a question.<\/p><p>Above this class, create a protocol to which we can communicate this:<\/p><pre><code class=\"language-swift\">protocol <span class=\"token builtin\">ExerciseTableViewCellDelegate<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">class<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">exerciseCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> cell <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">ExerciseTableViewCell<\/span><span class=\"token punctuation\">,<\/span> receivedAnswer correct <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span><span class=\"token punctuation\">,<\/span> forQuestion question <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span><span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Inside the cell class, create a new reference to this delegate:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> delegate <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">ExerciseTableViewCellDelegate<\/span><span class=\"token operator\">?<\/span><br><\/code><\/pre><p>To send this event, the cell should also determine if the question was correctly answered. The simplest way to do that is by comparing the content of the correct answer to the title of the button that was tapped.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> answerCorrect <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span> <span class=\"token operator\">=<\/span> <span class=\"token boolean\">false<\/span><br><span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> correctAnswer <span class=\"token operator\">=<\/span> question<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;correctAnswer&quot;<\/span><span class=\"token punctuation\">]<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">?<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">let<\/span> answer <span class=\"token operator\">=<\/span> button<span class=\"token punctuation\">.<\/span>titleLabel<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>text <span class=\"token punctuation\">{<\/span><br>    answerCorrect <span class=\"token operator\">=<\/span> correctAnswer <span class=\"token operator\">==<\/span> answer<br><span class=\"token punctuation\">}<\/span><br>delegate<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">exerciseCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> receivedAnswer<span class=\"token punctuation\">:<\/span> answerCorrect<span class=\"token punctuation\">,<\/span> forQuestion<span class=\"token punctuation\">:<\/span> question<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-receive-answer"},{"id":"12269","section_id":"141","order":"11","title":"Did Receive Answer for Question","subhead":"","body":"<p>Go back to the Exercises Table View Controller class and set the Exercises Cell&apos;s delegate as self. Once again, an error is going to show due to the lack of functionality of the controller.<\/p><p>Create an extension for the Exercises Table View Controller that complies with Exercise Table View Cell Delegate, and create a function for the exerciseCell:receivedAnswer:forQuestion selector.<\/p><pre><code class=\"language-swift\"><span class=\"token function\">performSegue<\/span><span class=\"token punctuation\">(<\/span>withIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Present Exercise Dialog&quot;<\/span><span class=\"token punctuation\">,<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>As a View Controller, the Exercises Table View Controller has both the authority and functionality to present the Exercise Dialog View Controller by performing a segue.<\/p><p>Don&rsquo;t forget to remove the perform segue from the view did appear method.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-did-receive-answer-for-question"},{"id":"12270","section_id":"141","order":"12","title":"Score Cell","subhead":"","body":"<p>Going back to the Score Cell, it will present itself by animating the final score while also receiving events for two of its buttons. As we have not done it before, create a Cocoa Touch Class for it named Score Collection View Cell, class it on the storyboard and trigger the Assistant Editor.<\/p><p>When this cell shows on the screen, it should animate its progress elements. Include the <strong>MKRingProgressView<\/strong> library and create outlets and variables for those elements and the exercise:<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">var<\/span> percentageLabel <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span><span class=\"token operator\">!<\/span><br><span class=\"token atrule\">@IBOutlet<\/span> <span class=\"token keyword\">var<\/span> percentageView <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">MKRingProgressView<\/span><span class=\"token operator\">!<\/span><br><span class=\"token keyword\">var<\/span> exercise <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span><span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre><p>Different from a View Controller, a Cell does not receive view did load events. When a view is placed from the storyboard, it receives an awakening call. Use it to animate the elements:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">awakeFromNib<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    percentageLabel<span class=\"token punctuation\">.<\/span><span class=\"token function\">animateTo<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">72<\/span><span class=\"token punctuation\">)<\/span><br>    percentageView<span class=\"token punctuation\">.<\/span><span class=\"token function\">animateTo<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">72<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-score-cell"},{"id":"12271","section_id":"141","order":"13","title":"Actions","subhead":"","body":"<p>Similarly to the Question Cell, the Score Cell is the one receiving events from the Try Again and Share Buttons. Create actions from the Score Collection View Cell to try again button tapped and share button tapped with a typed sender of UI Button.<\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">tryAgainButtonTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIButton<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><span class=\"token atrule\">@IBAction<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">shareButtonTapped<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> sender<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIButton<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>These actions are going to be relayed to another object, the delegate. So the Collection Cell knows who and how to send events, create a protocol for a Score Cell Delegate:<\/p><pre><code class=\"language-swift\">protocol <span class=\"token builtin\">ScoreCellDelegate<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">class<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This protocol is going to define how this cell is going to communicate its events to another object which will be entitled to take the necessary measures. Declare a reference to this delegate on the cell class:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">var<\/span> delegate <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">ScoreCellDelegate<\/span><span class=\"token operator\">?<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-actions"},{"id":"12272","section_id":"141","order":"14","title":"Try Again Button","subhead":"","body":"<p>The first of its events should have the Table Cell reload the questions so that the user can answer them once again. Inside the protocol, create a function to receive this event:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">scoreCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> cell <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">ScoreCollectionViewCell<\/span><span class=\"token punctuation\">,<\/span> didTapTryAgainExercise exercise <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span><span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>And, inside the did tap try again button action, call the delegate appropriately:<\/p><pre><code class=\"language-swift\">delegate<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">scoreCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> didTapTryAgainExercise<span class=\"token punctuation\">:<\/span> exercise<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-try-again-button"},{"id":"12273","section_id":"141","order":"15","title":"Share Button","subhead":"","body":"<p>The Share button should gather information about the exercise, and present a <strong>Share Sheet<\/strong> with the provided sharing options. Similarly to Try Again, create a function to which the score cell can tell its delegate that the user did tap share on it for exercises:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">scoreCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> cell <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">ScoreCollectionViewCell<\/span><span class=\"token punctuation\">,<\/span> didTapShareExercise exercise <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span><span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>And, inside the share button tapped action, call the delegate appropriately:<\/p><pre><code class=\"language-swift\">delegate<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">scoreCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> didTapShareExercise<span class=\"token punctuation\">:<\/span> exercise<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-share-button"},{"id":"12274","section_id":"141","order":"16","title":"Showing the Score Cell","subhead":"","body":"<p>Back in the Table View Cell, only question cells are being dequeued and shown on the screen. Let&apos;s both make the Score Cell available and perform the required enhancements to be able to respond to its events.<\/p><p>Firstly, on the <strong>collectionView:numberOfItemsInSection<\/strong> selector, increment the return value by one, so the collection view asks for all the questions plus one score cell:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> numberOfItemsInSection section<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> questions<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span> <span class=\"token operator\">+<\/span> <span class=\"token number\">1<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>And refactor the <strong>collectionView:cellForItemAtIndexPath<\/strong>, so it can provide a score cell when in the last position. Let&apos;s add to the top of it so the code is called before anything else.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> indexPath<span class=\"token punctuation\">.<\/span>row <span class=\"token operator\">==<\/span> questions<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">dequeueReusableCell<\/span><span class=\"token punctuation\">(<\/span>withReuseIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Score Cell&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">ScoreCollectionViewCell<\/span><br>    cell<span class=\"token punctuation\">.<\/span>exercise <span class=\"token operator\">=<\/span> questions<br>    cell<span class=\"token punctuation\">.<\/span>delegate <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><br>    <span class=\"token keyword\">return<\/span> cell<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-showing-the-score-cell"},{"id":"12275","section_id":"141","order":"17","title":"Did Tap Try Again","subhead":"","body":"<p>Just like responding to events from the question cell, create an extension complying with the Score Cell Delegate protocol to provide appropriate behavior:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">scoreCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> cell<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">ScoreCollectionViewCell<\/span><span class=\"token punctuation\">,<\/span> didTapTryAgainExercise exercise<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>By tapping the try again button, the user should be moved back to the first question. To do that, scroll the collection view to the first index instantly and reload its data.<\/p><pre><code class=\"language-swift\">collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">scrollToItem<\/span><span class=\"token punctuation\">(<\/span>at<span class=\"token punctuation\">:<\/span> <span class=\"token function\">IndexPath<\/span><span class=\"token punctuation\">(<\/span>row<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> section<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span> at<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>centeredHorizontally<span class=\"token punctuation\">,<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">false<\/span><span class=\"token punctuation\">)<\/span><br>collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">reloadData<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-did-tap-try-again"},{"id":"12276","section_id":"141","order":"18","title":"Did Tap Share Exercise","subhead":"","body":"<p>To receive the share event, create another function under the same extension with the methods signature of:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">scoreCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> cell<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">ScoreCollectionViewCell<\/span><span class=\"token punctuation\">,<\/span> didTapShareExercise exercise<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Although we have relayed the share button event to a superior layer, a Table View Cell is also not equipped to present an <strong>Activity View Controller (i.e., Share Sheet)<\/strong>. We need to move this event to a higher layer. <\/p><p>On the Exercise Table View Cell Delegate protocol, create a function to which it can relay this event another level up to its delegate by:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">exerciseCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> cell <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">ExerciseTableViewCell<\/span><span class=\"token punctuation\">,<\/span> didReceiveShareFor exercise <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span><span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">,<\/span> onScoreCell scoreCell <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">ScoreCollectionViewCell<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>And call the delegate appropriately on the scoreCell:didTapShareExercise function.<\/p><pre><code class=\"language-swift\">delegate<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">exerciseCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> didReceiveShareFor<span class=\"token punctuation\">:<\/span> exercise<span class=\"token punctuation\">,<\/span> onScoreCell<span class=\"token punctuation\">:<\/span> cell<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-did-tap-share-exercise"},{"id":"12277","section_id":"141","order":"19","title":"Did Receive Share for Exercise","subhead":"","body":"<p>Inside the extension of the Exercises Table View Controller, comply with the delegate method we have just declared so we may implement the <strong>Share Sheet<\/strong> functionality:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">exerciseCell<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> cell<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">ExerciseTableViewCell<\/span><span class=\"token punctuation\">,<\/span> didReceiveShareFor exercise<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">,<\/span> onScoreCell scoreCell<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">ScoreCollectionViewCell<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Inside this method, it will be provided mock information about the score on a given exercise as well as an illustrative image of the Score Cell.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-did-receive-share-for-exercise"},{"id":"12278","section_id":"141","order":"20","title":"Image from a View","subhead":"","body":"<p>Although it is possible to form an image from a view, UI Image does not provide an interface to make this transformation in a single line. To do that, let&apos;s extend UI Image functionality by creating a convenience initializer:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">UIImage<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">convenience<\/span> <span class=\"token keyword\">init<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">(<\/span>view<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIView<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p><strong>Convenience initializers<\/strong> are initializers that do not provide core initialization features but rely on other initializers to do their work.<\/p><pre><code class=\"language-swift\"><span class=\"token function\">UIGraphicsBeginImageContext<\/span><span class=\"token punctuation\">(<\/span>view<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">.<\/span>size<span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">let<\/span> currentContext <span class=\"token operator\">=<\/span> <span class=\"token function\">UIGraphicsGetCurrentContext<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token constant\">nil<\/span> <span class=\"token punctuation\">}<\/span><br>view<span class=\"token punctuation\">.<\/span>layer<span class=\"token punctuation\">.<\/span><span class=\"token function\">render<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">in<\/span><span class=\"token punctuation\">:<\/span> currentContext<span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> image <span class=\"token operator\">=<\/span> <span class=\"token function\">UIGraphicsGetImageFromCurrentImageContext<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token function\">UIGraphicsEndImageContext<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">let<\/span> graphicImage <span class=\"token operator\">=<\/span> image<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>cgImage <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> <span class=\"token constant\">nil<\/span><br><span class=\"token punctuation\">}<\/span><br><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">init<\/span><span class=\"token punctuation\">(<\/span>cgImage<span class=\"token punctuation\">:<\/span> graphicImage<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>You may notice that this initializer is optional. If something should happen in the initialization process that would invalidate the object, the initializer returns nil. In this case, if the UI Graphics Context is unable to guard an image of the view, it defaults.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-image-from-a-view"},{"id":"12279","section_id":"141","order":"21","title":"Activity View Controller","subhead":"","body":"<p>Back in the delegate method, let&apos;s gather the required information and render the image from the score cell.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> message <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;&#x1F64C; 72% in the iOS Design challenge from the Design+Code app by @MengTo&quot;<\/span><br><span class=\"token keyword\">let<\/span> link <span class=\"token operator\">=<\/span> <span class=\"token function\">URL<\/span><span class=\"token punctuation\">(<\/span>string<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;https:\/\/designcode.io\/&quot;<\/span><span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br><span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">let<\/span> image <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImage<\/span><span class=\"token punctuation\">(<\/span>view<span class=\"token punctuation\">:<\/span> scoreCell<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">}<\/span><br><span class=\"token keyword\">let<\/span> objectsToShare <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span>message<span class=\"token punctuation\">,<\/span> link<span class=\"token punctuation\">,<\/span> image<span class=\"token punctuation\">]<\/span> <span class=\"token keyword\">as<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Any<\/span><span class=\"token operator\">&gt;<\/span><br><span class=\"token keyword\">let<\/span> activity <span class=\"token operator\">=<\/span> <span class=\"token function\">UIActivityViewController<\/span><span class=\"token punctuation\">(<\/span>activityItems<span class=\"token punctuation\">:<\/span> objectsToShare<span class=\"token punctuation\">,<\/span> applicationActivities<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br>activity<span class=\"token punctuation\">.<\/span>excludedActivityTypes <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token punctuation\">.<\/span>airDrop<span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">.<\/span>addToReadingList<span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">.<\/span>saveToCameraRoll<span class=\"token punctuation\">]<\/span><br>activity<span class=\"token punctuation\">.<\/span>popoverPresentationController<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>sourceView <span class=\"token operator\">=<\/span> scoreCell<br><span class=\"token function\">present<\/span><span class=\"token punctuation\">(<\/span>activity<span class=\"token punctuation\">,<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>An Activity View Controller can share information in many formats such as URL, text, and images. In this case, the score, a link and the view image of the score cell are being offered to share on all available services except over AirDrop, Reading List, and Camera Row.<\/p><p>Also, an <strong>Activity View Controller<\/strong> is required to always present itself as a popover to another view. For instance, in small size classes, such as iPhone, it comes from the bottom up. In contrast, on the iPad, it is required to expand from an anchor view. Set its source to be the score cell and present it just like any other view controller.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-delegation-activity-view-controller"},{"id":"12280","section_id":"141","order":"22","title":"Conclusion","subhead":"","body":"<p>In this example, we built a multilayer delegation system in which messages are sent upwards in the hierarchy to the objects that may act on them. Delegation methods are often used for back and forth communications.<\/p><p>In the Design+Code app, there are use cases of handling gestures, making sense of data, displaying information, and coordinating between controls.<\/p><p>Swift has robust Protocol Oriented features that lead to elegant and efficient architecture. Being capable of using protocols unlocks possibilities beyond delegation that enable productivity.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/nkf4p8ty2fkh3vp\/delegation-05-conclusion.mp4?dl=0","bookmark_id":"swift4-delegation-conclusion"}]},{"id":"134","chapter_id":"4","order":"110","slug":"swift4-multiple-storyboards","title":"Multiple Storyboards","caption":"Divide and conquer","body":"<p>Storyboards are a nice way to visualize and encapsulate user flows. In small contexts, one storyboard can be more than enough to display all you app scenes.<\/p><p>Just like we do in code, sometimes good practice to segregate core functionality so it can be easily shared across the app. It is easy to do it using <strong>Storyboard References<\/strong>.<\/p><p>In this tutorial, we are going to use this feature to separate the <strong>Login Scene<\/strong> and the <strong>Web View Controller Scenes<\/strong> from the <strong>Main.storyboard<\/strong> file. And, best of all, 0 coding included.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-multiple-storyboards.jpg","video":"https:\/\/player.vimeo.com\/external\/258859498.hd.mp4?s=7c1c31080258ef6690f83e59de94f2bd96442d21&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-multiple-storyboards.zip","contents":[{"id":"12393","section_id":"134","order":"1","title":"Downloads for Multiple Storyboards","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\" title=\"Xcode 9\">Xcode 9<\/a>, and the finished Xcode project from <a href=\"https:\/\/www.dropbox.com\/s\/435xkqxdt1q8nw9\/DesignCodeApp%20Delegation%20final.zip?dl=1\">Delegation<\/a>. Also, make sure to download the <a href=\"https:\/\/www.dropbox.com\/s\/ktenhu0to8dn0ku\/DesignCodeApp%20Multiple%20Storyboards%20Final.zip?dl=1\">final project<\/a> for comparison.<\/p><p>Also, download the <a href=\"https:\/\/www.dropbox.com\/s\/00qpssunxov4v0n\/Benefits.jpg?dl=1\">Benefits<\/a> image and place it under the <strong>Background<\/strong> folder on the <strong>Assets.xcassets<\/strong> bundle.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-multiple-storyboards-downloads-for-multiple-storyboards"},{"id":"12394","section_id":"134","order":"2","title":"Home Scene","subhead":"","body":"<p>In the <strong>Home Scene<\/strong>, most of the layout is done. One of the parts that is lacking is the <strong>Benefits<\/strong> section. This view is special because it is built with a <strong>Container View<\/strong> that features a <strong>Collection View<\/strong>.<\/p><p>On the Design+Code app, most of the views are full width and fixed height; a very common layout that is easy to deal with. This is because the <strong>Scroll View<\/strong> can determine the layout height by the intrinsic size of its subviews. It is not the case with this layout. Let&rsquo;s dive into it and explore.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-multiple-storyboards-home-scene"},{"id":"12395","section_id":"134","order":"3","title":"Benefits Data","subhead":"","body":"<p>Before we begin, set static data on the <strong>Data.swift<\/strong> file for each of the benefits:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> benefits <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Dictionary<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span><span class=\"token builtin\">String<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><br>    <span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;subhead&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Watch and follow&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;44 hours of video&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Each section is accompanied with captioned, well-paced videos that will help you follow step by step.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Video&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;subhead&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Search and Bookmark&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;100,000 words&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Most online courses either only have texts or videos. Design+Code has both, all searchable.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Words&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;subhead&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Download&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;10GB Source Files&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Over 36 Sketch files, 36 Xcode project files and templates to ensure that you start strong.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Files&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;subhead&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Enjoy Anywhere&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;iPhone, iPad &amp; Web&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Experience the book from your iPhone, iPad and desktop. We got downloadable ePubs too.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;iOS&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;subhead&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Read, Browse&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Offline Experience&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Poor wifi? The app was designed for offline use so that you don&apos;t always rely on the internet.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Offline&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><span class=\"token punctuation\">[<\/span><br>        <span class=\"token string\">&quot;subhead&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Test your Knowledge&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Exercises&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;The questions are hard. Try as many times as you want, get timed and stats to see how you improve.&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        <span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Exercises&quot;<\/span><br>    <span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br><span class=\"token punctuation\">]<\/span><br><\/code><\/pre><p>This data will be used further along to populate a collection view.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-multiple-storyboards-benefits-data"},{"id":"12396","section_id":"134","order":"4","title":"Container View","subhead":"","body":"<p>On the <strong>Main.storyboard<\/strong> file, select the <strong>Home Scene<\/strong> and set its simulated height to <strong>2394<\/strong>. Then, remove the bottom constraint from the <strong>Chapter View<\/strong>. This will trigger a layout error that we are going to fix shortly.<\/p><p>Place on the space on the bottom of the scene a <strong>Container View<\/strong> and label it <strong>Benefits Container View<\/strong>. Constrain it to all sides and <strong>640<\/strong> of height.<\/p><p>This element acts just like a plain <strong>View<\/strong> when placed via the Storyboard; as it does not have intrinsic size, it will fold on itself. By setting a height constraint, we inform the <strong>Scroll View<\/strong> the minimum required information to size itself.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/49buqb2jkj7rvsw\/multiple-storyboards-container-view.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-container-view"},{"id":"12397","section_id":"134","order":"5","title":"Prepare for Segue","subhead":"","body":"<p>Notice that the container and the contained scenes are now connected through a segue. This is a <strong>Embed Segue<\/strong>, select it and identify it as <strong>Benefits<\/strong>.<\/p><p>This segue is one that we have encountered many times as it works very similar to the <strong>Show<\/strong> and <strong>Tab Bar Connection<\/strong> segues. That is because both <strong>Navigation Controller<\/strong> and <strong>Tab Bar Controller<\/strong> work as containers to other view controllers.<\/p><p>On the <strong>Home View Controller<\/strong> class, navigate to the <strong>prepare for segue<\/strong> selector and rewrite it as:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">let<\/span> identifier <span class=\"token operator\">=<\/span> segue<span class=\"token punctuation\">.<\/span>identifier <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">}<\/span><br><span class=\"token keyword\">switch<\/span> identifier <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">case<\/span> <span class=\"token string\">&quot;HomeToSection&quot;<\/span><span class=\"token punctuation\">:<\/span><br>    <span class=\"token comment\">\/\/ Previous implementation<\/span><br>    <span class=\"token comment\">\/\/ &#x2026;<\/span><br><br>    <span class=\"token keyword\">case<\/span> <span class=\"token string\">&quot;Benefits&quot;<\/span><span class=\"token punctuation\">:<\/span><br>    segue<span class=\"token punctuation\">.<\/span>destination<span class=\"token punctuation\">.<\/span>view<span class=\"token punctuation\">.<\/span>translatesAutoresizingMaskIntoConstraints <span class=\"token operator\">=<\/span> <span class=\"token boolean\">false<\/span><br><br>    <span class=\"token keyword\">default<\/span><span class=\"token punctuation\">:<\/span><br>    <span class=\"token keyword\">break<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Apart from defaulting to no configuration in case a segue does not provide an identifier, we will configure the destination of this segue. Set the <strong>translates auto resizing mask into constraints<\/strong> to <strong>false<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-multiple-storyboards-prepare-for-segue"},{"id":"12398","section_id":"134","order":"6","title":"Auto-Resizing Mask","subhead":"","body":"<p>Before <strong>Auto Layout<\/strong> was the industry standard, elements were resized very much like on Sketch and Figma, using resizing masks. Although Apple&rsquo;s documentation states that views made from the Storyboard always default to constraints if they are mentioned in a constraint system, this does not apply to <strong>Container Views<\/strong>. By turning the translation to false, we activate support for auto layout.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/qvzgheg6fndginz\/multiple-storyboards-auto-resizing-mask.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-auto-resizing-mask"},{"id":"12399","section_id":"134","order":"7","title":"Self-Sizing a View Controller","subhead":"","body":"<p>The contained view controller acts just like any other, drop into it a view labeled <strong>Header View<\/strong>. Constrain it top and to its sides and <strong>460<\/strong> of height. Below it, drop a <strong>Collection View<\/strong> and constrain it to all its sides and <strong>276<\/strong> of height. This will cause a break in the layout because the root view is expecting its size to be fixed; not able to grow to accommodate its subviews.<\/p><p>It is required now that the sizing needs of the root view are met, while also relaying the actual size of the view to the <strong>Scroll View<\/strong> in the <strong>Home Scene<\/strong>. Select the height constraint on the <strong>Collection View<\/strong> and set it to <strong>999<\/strong> priority. Then, select the height constraint of the <strong>Benefits Container View<\/strong> and set it to <strong>998<\/strong> priority.<\/p><p>The contained view is now able to ignore the height of the <strong>Collection View<\/strong>, as it is not set to <strong>1000<\/strong> (i.e., required). This height directive will relay to the <strong>Container View<\/strong> and will influence the height of the <strong>Home Scene<\/strong> thus, ignoring the <strong>Benefits Container View<\/strong> height constraint. This constraint only serves as a placeholder for <strong>Interface Builder<\/strong> consistency.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/ic70819bhtwob7l\/multiple-storyboards-self-sizing.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-self-sizing-a-view-controller"},{"id":"12400","section_id":"134","order":"8","title":"","subhead":"Header View","body":"<p>Place an <strong>Image View<\/strong> inside the <strong>Header View<\/strong> and constrain it to all its sides. Set its image to <strong>Background\/Benefits<\/strong>. On top of it, place a dark <strong>Visual Effect View<\/strong> and constrain it <strong>left<\/strong>, <strong>right<\/strong>, <strong>bottom<\/strong> and <strong>160height<\/strong>.<\/p><p>On top of the image, place a label and style it <strong>36 white semibold<\/strong> with <strong>0 lines<\/strong> and the content of <strong>&#x201D;Design and code this app, from start to finish.&#x201D;<\/strong>. Constrain it <strong>80top<\/strong>, <strong>250width<\/strong> and <strong>centerX<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/a4x7hil9zi9wsxm\/multiple-storyboards-header-view.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-header-view"},{"id":"12401","section_id":"134","order":"9","title":"","subhead":"Header Subtitle","body":"<p>Inside the visual effect, place another label with <strong>0 lines<\/strong> and style it <strong>20 white<\/strong> with the content of <strong>&#x201C;Designed, coded and written by one designer. So you know the material is cohesive and familiar.&#x201D;<\/strong>. Constrain it to <strong>centerX<\/strong> and <strong>centerY<\/strong> and <strong>260width<\/strong> with a <strong>wR<\/strong> variation of <strong>600<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/db4hc196vhll4t5\/multiple-storyboards-header-subtitle.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-header-subtitle"},{"id":"12402","section_id":"134","order":"10","title":"","subhead":"Baseline Alignment","body":"<p>This view is going to be accompanied by graphical quotation marks. Search the <strong>Media Library<\/strong> for <strong>Quote-Begin<\/strong> and <strong>Quote-End<\/strong> and drop them top-left and bottom-right of the label inside the visual effect view.<\/p><p>Constrain the left one&rsquo;s bottom to the <strong>first baseline<\/strong> of the label with <strong>8<\/strong> of horizontal spacing. As for the second, constrain its bottom to the <strong>last baseline<\/strong> with <strong>0<\/strong> horizontal spacing.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/u7ezd08psnw3zd0\/multiple-storyboards-baseline-alignment.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-baseline-alignment"},{"id":"12403","section_id":"134","order":"11","title":"Collection View","subhead":"","body":"<p>Select the <strong>Collection View<\/strong> and customize its minimal spacing to <strong>0<\/strong> both for cell and line. <\/p><p>Resize the prototype cell to fill the collection view. Drop an <strong>Image View<\/strong> and three <strong>Labels<\/strong> inside the prototype cell. The <strong>Image View<\/strong> should be constrained at <strong>20left<\/strong>, <strong>30top<\/strong> to its superview and squared <strong>72<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/9et5djcirg2k0eh\/multiple-storyboards-collection-view.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-collection-view"},{"id":"12404","section_id":"134","order":"12","title":"","subhead":"Collection View Labels","body":"<p>As for the labels, push them under a vertical stack with <strong>4<\/strong> of spacing and constrain the stack <strong>30<\/strong> points top and bottom, <strong>8<\/strong> left and <strong>20<\/strong> right. Style and configure the three labels as follows:<\/p><p>1 . light gray subhead with vertical hugging of <strong>252<\/strong>, &#x201D;Watch and follow&#x201D;<\/p><p>2 . black 24 semibold with vertical hugging of <strong>252<\/strong>, &#x201D;44 hours of video&#x201D;<\/p><p>3 . dark gray body with 0 lines and vertical resistance of <strong>751<\/strong>, &#x201D;Each section is accompanied with captioned, well-paced videos that will help you follow step by step.&#x201D;<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/l7ksh2v6i6irsfz\/multiple-storyboards-collection-view-labels.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-collection-view-labels"},{"id":"12405","section_id":"134","order":"13","title":"","subhead":"Collection View Hairline","body":"<p>Lastly, place a view inside the cell and constrain it to <strong>100leading<\/strong>, <strong>30trailing<\/strong>, <strong>bottom<\/strong> and <strong>1height<\/strong>. Color it with <strong>Group Table View Background Color<\/strong>. This view is going to simulate the characteristic hairline on table view cells.<\/p><p>Different from a <strong>Table View Cell<\/strong>, a <strong>Collection View Cell<\/strong> does not know how to size itself in any direction. These constraints are sufficient for determining the layout because <strong>Auto Layout<\/strong> assumes that both height and width are fixed in the cell.<\/p><p>Set the image to <strong>Benefit-Video<\/strong> and set an identifier of <strong>Benefit<\/strong> for the prototype cell.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/5co2yas5c8xhz41\/multiple-storyboards-collection-view-hairline.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-collection-view-hairline"},{"id":"12406","section_id":"134","order":"14","title":"Benefits View Controller","subhead":"","body":"<p>The structure that was just built is not the simplest way to deliver this layout. Nonetheless, it exemplifies how to deal with adverse situations in a layout environment. It is now necessary to populate the collection view and make it stretch to its content.<\/p><p>Create a new Cocoa Touch Class by the name of <strong>Benefits View Controller<\/strong> that derives from <strong>UI View Controller<\/strong>. Then, use the Assistant Editor to class the view controller and create outlets for the collection view and the collection view height constraint.<\/p><p>Create yet another Cocoa Touch Class for the <strong>Benefit Collection View Cell<\/strong> that derives from <strong>UI Collection View Cell<\/strong>. Then, class the view and create outlets for its image view, subhead label, title label and body label.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-multiple-storyboards-benefits-view-controller"},{"id":"12407","section_id":"134","order":"15","title":"","subhead":"Collection View Data Source","body":"<p>For the <strong>Benefits View Controller<\/strong> to populate a collection view it need to comply with a <strong>UI Collection View Data Source<\/strong> protocol. Create an extension that does that with the following methods:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> numberOfItemsInSection section<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> benefits<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span><br><span class=\"token punctuation\">}<\/span><br><br><span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> cellForItemAt indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">UICollectionViewCell<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span><span class=\"token function\">dequeueReusableCell<\/span><span class=\"token punctuation\">(<\/span>withReuseIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Benefit&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">BenefitCollectionViewCell<\/span><br><br>    <span class=\"token keyword\">let<\/span> benefit <span class=\"token operator\">=<\/span> benefits<span class=\"token punctuation\">[<\/span>indexPath<span class=\"token punctuation\">.<\/span>row<span class=\"token punctuation\">]<\/span><br>    cell<span class=\"token punctuation\">.<\/span>subheadLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> benefit<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;subhead&quot;<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">uppercased<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    cell<span class=\"token punctuation\">.<\/span>titleLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> benefit<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">]<\/span><br>    cell<span class=\"token punctuation\">.<\/span>bodyLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> benefit<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">]<\/span><br>    cell<span class=\"token punctuation\">.<\/span>imageView<span class=\"token punctuation\">.<\/span>image <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImage<\/span><span class=\"token punctuation\">(<\/span>named<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Benefit-&quot;<\/span> <span class=\"token operator\">+<\/span> benefit<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;image&quot;<\/span><span class=\"token punctuation\">]<\/span><span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><br><br>    <span class=\"token keyword\">return<\/span> cell<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Should a collection view ask this view controller for cells, it would ask for as many as the number of benefits and would be populated, likewise, with <strong>Benefit Collection View Cells<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-multiple-storyboards-collection-view-data-source"},{"id":"12408","section_id":"134","order":"16","title":"Collection View Delegate Flow Layout","subhead":"","body":"<p>Apart from having an event delegate, a collection view can have a <strong>layout delegate<\/strong> if it uses the native implementation of <strong>Flow Layout<\/strong>. Create a new extension of the <strong>Benefits View Controller<\/strong>, this time complying with <strong>UI Collection View Delegate Flow Layout<\/strong>. Declare a method for:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">collectionView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> collectionView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionView<\/span><span class=\"token punctuation\">,<\/span> layout collectionViewLayout<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UICollectionViewLayout<\/span><span class=\"token punctuation\">,<\/span> sizeForItemAt indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">CGSize<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Inside it, we are going to estimate the two dimensions of the cell. Beginning by the width, this collection view should show as much as one, two or three items depending on the width of its container. This algorithm works very much like doing size classes but taking size values instead semantic ranges.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> benefit <span class=\"token operator\">=<\/span> benefits<span class=\"token punctuation\">[<\/span>indexPath<span class=\"token punctuation\">.<\/span>row<span class=\"token punctuation\">]<\/span><br><span class=\"token keyword\">var<\/span> width <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span> <span class=\"token operator\">=<\/span> <span class=\"token number\">0.0<\/span><br><br><span class=\"token keyword\">switch<\/span> collectionView<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">.<\/span>width <span class=\"token punctuation\">{<\/span><br><span class=\"token keyword\">case<\/span> <span class=\"token number\">640<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token number\">959<\/span><span class=\"token punctuation\">:<\/span><br>    width <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">.<\/span>width <span class=\"token operator\">\/<\/span> <span class=\"token number\">2<\/span><br><span class=\"token keyword\">case<\/span> <span class=\"token number\">960<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token number\">3000<\/span><span class=\"token punctuation\">:<\/span><br>     width <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">.<\/span>width <span class=\"token operator\">\/<\/span> <span class=\"token number\">3<\/span><br><span class=\"token keyword\">default<\/span><span class=\"token punctuation\">:<\/span><br>    width <span class=\"token operator\">=<\/span> collectionView<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">.<\/span>width<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Whereas, calculating the height takes into account the variable length of the content. By setting dummy label elements, it is possible to estimate the height of the cell if it were to self-size. <\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ Simulating dynamic labels<\/span><br><br><span class=\"token keyword\">let<\/span> titleLabel <span class=\"token operator\">=<\/span> <span class=\"token function\">UILabel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>titleLabel<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">.<\/span>size <span class=\"token operator\">=<\/span> <span class=\"token function\">CGSize<\/span><span class=\"token punctuation\">(<\/span>width<span class=\"token punctuation\">:<\/span> width <span class=\"token operator\">-<\/span> <span class=\"token number\">120<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span><span class=\"token punctuation\">.<\/span>greatestFiniteMagnitude<span class=\"token punctuation\">)<\/span><br>titleLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> benefit<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">]<\/span><br>titleLabel<span class=\"token punctuation\">.<\/span>numberOfLines <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br>titleLabel<span class=\"token punctuation\">.<\/span>font <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UIFont<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">systemFont<\/span><span class=\"token punctuation\">(<\/span>ofSize<span class=\"token punctuation\">:<\/span> <span class=\"token number\">24<\/span><span class=\"token punctuation\">,<\/span> weight<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>semibold<span class=\"token punctuation\">)<\/span><br>titleLabel<span class=\"token punctuation\">.<\/span><span class=\"token function\">sizeToFit<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> textLabel <span class=\"token operator\">=<\/span> <span class=\"token function\">UILabel<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>textLabel<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">.<\/span>size <span class=\"token operator\">=<\/span> <span class=\"token function\">CGSize<\/span><span class=\"token punctuation\">(<\/span>width<span class=\"token punctuation\">:<\/span> width <span class=\"token operator\">-<\/span> <span class=\"token number\">120<\/span><span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span><span class=\"token punctuation\">.<\/span>greatestFiniteMagnitude<span class=\"token punctuation\">)<\/span><br>textLabel<span class=\"token punctuation\">.<\/span>text <span class=\"token operator\">=<\/span> benefit<span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;body&quot;<\/span><span class=\"token punctuation\">]<\/span><br>textLabel<span class=\"token punctuation\">.<\/span>numberOfLines <span class=\"token operator\">=<\/span> <span class=\"token number\">5<\/span><br>textLabel<span class=\"token punctuation\">.<\/span>font <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UIFont<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">preferredFont<\/span><span class=\"token punctuation\">(<\/span>forTextStyle<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>body<span class=\"token punctuation\">)<\/span><br>textLabel<span class=\"token punctuation\">.<\/span>minimumScaleFactor <span class=\"token operator\">=<\/span> <span class=\"token number\">0.5<\/span><br>textLabel<span class=\"token punctuation\">.<\/span><span class=\"token function\">sizeToFit<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> height <span class=\"token operator\">=<\/span> titleLabel<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">.<\/span>height <span class=\"token operator\">+<\/span> textLabel<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">.<\/span>height <span class=\"token operator\">+<\/span> <span class=\"token number\">90<\/span><br><\/code><\/pre><p>Lastly, it suffices to return a size struct for the calculated estimate.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">return<\/span> <span class=\"token function\">CGSize<\/span><span class=\"token punctuation\">(<\/span>width<span class=\"token punctuation\">:<\/span> width<span class=\"token punctuation\">,<\/span> height<span class=\"token punctuation\">:<\/span> height<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Control-drag from the collection view on the storyboard to the <strong>Benefits View Controller<\/strong> twice to assign it to both delegate and data source. With the collection view selected, deactivate all its scrolling and paging features.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-multiple-storyboards-collection-view-delegate-flow-layout"},{"id":"12409","section_id":"134","order":"17","title":"Adjusting Size","subhead":"","body":"<p>The collection view already shows all its elements, but its content is clipped by the its constrained height. To adjust this constraint, create a method on the <strong>Benefit View Controller<\/strong> by name of <strong>adjustSize<\/strong>:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> now <span class=\"token operator\">=<\/span> <span class=\"token builtin\">DispatchTime<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">now<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> deadline <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">DispatchTime<\/span> <span class=\"token operator\">=<\/span> now <span class=\"token operator\">+<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token function\">milliseconds<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">100<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token builtin\">DispatchQueue<\/span><span class=\"token punctuation\">.<\/span>main<span class=\"token punctuation\">.<\/span><span class=\"token function\">asyncAfter<\/span><span class=\"token punctuation\">(<\/span>deadline<span class=\"token punctuation\">:<\/span> deadline<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token keyword\">weak<\/span> <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">]<\/span> <span class=\"token keyword\">in<\/span><br><br>    <span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">self<\/span> <span class=\"token operator\">!=<\/span> <span class=\"token constant\">nil<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">}<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token operator\">!<\/span><span class=\"token punctuation\">.<\/span>collectionViewHeight<span class=\"token punctuation\">.<\/span>constant <span class=\"token operator\">=<\/span> <span class=\"token keyword\">self<\/span><span class=\"token operator\">!<\/span><span class=\"token punctuation\">.<\/span>collectionView<span class=\"token punctuation\">.<\/span>contentSize<span class=\"token punctuation\">.<\/span>height<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Although this function wraps an adjustment inside a delay, it does that only to prevent the conflict of the reloading of data from the collection view and the layout of elements. Its core merely reassigns the height of the collection view to its content height. It ensures that all the content is visible while also relaying the container view intrinsic size back to the scroll view on the <strong>Home Scene<\/strong>.<\/p><p>Take note that this strategy is only possible because the direction of the collection view is vertical. In other words, if you did this very same layout on a horizontally oriented collection view, calling for its content&rsquo;s height would always return the same value.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-multiple-storyboards-adjusting-size"},{"id":"12410","section_id":"134","order":"18","title":"","subhead":"Appropriate Moments to Layout","body":"<p>Because of the manual override of the collection view&rsquo;s height and cell size, this view does not refresh its layout automatically. There are two scenarios that it would be appropriate to <strong>adjust size<\/strong>:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewWillAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> animated<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewWillAppear<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">)<\/span><br>    <span class=\"token function\">adjustHeight<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>When the view appears, the collection view is populated and presents an opportunity to override its height.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewWillTransition<\/span><span class=\"token punctuation\">(<\/span>to size<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGSize<\/span><span class=\"token punctuation\">,<\/span> with coordinator<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIViewControllerTransitionCoordinator<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewWillTransition<\/span><span class=\"token punctuation\">(<\/span>to<span class=\"token punctuation\">:<\/span> size<span class=\"token punctuation\">,<\/span> with<span class=\"token punctuation\">:<\/span> coordinator<span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>collectionView<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">reloadData<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token function\">adjustHeight<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>When the view transitions its size, be it by rotation or multitasking, it is also necessary to adjust the size. Additionally, as the view did not just reload its data, calling it manually ensures that the <strong>Benefits View Controller<\/strong> will be called as a <strong>Flow Layout Delegate<\/strong> and resize each of the cells.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-multiple-storyboards-appropriate-moments-to-layout"},{"id":"12411","section_id":"134","order":"19","title":"Segregating Flows","subhead":"","body":"<p>During the whole project, interface builder was used to build every scene. Although it is a synthetic way to layout, it entails a collaboration debt. If you have not worked on big teams with many developers, you may not be familiar with the difficulties presented by it. It is considered almost impossible to merge two conflicting storyboards because, although based on XML, its format is not particularly readable.<\/p><p>A possible solution to this problem is by dividing the scenes to avoid having two developers working on the same file. Xcode provides features such as:<\/p><p><strong>Storyboard References<\/strong>: can reference a storyboard using its name and a child scene using its identifier;<\/p><p><strong>Container Views<\/strong>: segregate unrelated logic to avoid massive view controllers;<\/p><p><strong>Storyboard Package<\/strong>: a bundled file that makes storyboarding feasible on source control managed projects; the underlying file structure is based on multiple XML files.<\/p><p>Use any combination of the mentioned techniques to reach a modular project.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/aak5epeetoy32pm\/multiple-storyboards-segregating-flows.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-segregating-flows"},{"id":"12412","section_id":"134","order":"20","title":"","subhead":"Segregating Embed Scenes","body":"<p>Begin by selecting the Testimonial and Benefits scenes and, using the <strong>Identity Inspector<\/strong>, set their <strong>Storyboard IDs<\/strong> to their names. Then, select them both and hit <strong>Editor &gt; Refactor to Storyboard&#x2026;<\/strong>. Create a new storyboard file named <strong>Embed.storyboard<\/strong>.<\/p><p>A new Storyboard file will be created containing only those two scenes, while a named reference to them will be left on the <strong>Main.storyboard<\/strong> file. Select and make a <strong>Embed<\/strong> named group for the select items on the navigator:<\/p><p>1 . Testimonial View Controller<\/p><p>2 . Testimonial Collection View Cell<\/p><p>3 . Benefits View Controller<\/p><p>4 . Benefit Collection View Cell<\/p><p>5 . Embed.storyboard<\/p><p>It is common and advised to organize your project either by kind (e.g., View Controllers), structure (e.g., Embed), or flux (e.g., Exercises). Always keep your project organized, this enhances collaboration by a lot.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/nwignnaf4ueqf83\/multiple-storyboards-embed-scenes.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-segregating-embed-scenes"},{"id":"12413","section_id":"134","order":"21","title":"","subhead":"Segregating Web View Controller","body":"<p>Select the navigation controller containing the <strong>Web View Controller Scene<\/strong> and change its storyboard id to <strong>Web View Controller<\/strong>. Select both scenes and refactor them to another storyboard. Then, create a named group for the newly created storyboard file and the swift file concerning it.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/y1hla73dbwgnok0\/multiple-storyboards-web-view-controller.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-segregating-web-view-controller"},{"id":"12414","section_id":"134","order":"22","title":"","subhead":"Segregating Dialogs","body":"<p>Identify each dialog with a storyboard id, select them all at once, and refactor them into a <strong>Dialog.storyboard<\/strong> file. Then, create a group with this file and all related dialog code, such as:<\/p><p>1 . Discount View Controller<\/p><p>2 . Interaction Pan To Close<\/p><p>3 . Purchase View Controller<\/p><p>4 . Login View Controller<\/p><p>5 . Exercise Dialog View Controller<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/z1i3bjquufrhevv\/multiple-storyboards-dialogs.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-segregating-dialogs"},{"id":"12415","section_id":"134","order":"23","title":"","subhead":"Segregating Section","body":"<p>Also, identify the <strong>Section Scene<\/strong>, segregate it, and create a group for it and its related source:<\/p><p>1 . Section View Controller<\/p><p>2 . Present Section View Controller<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/c7l9428cma0qv5v\/multiple-storyboards-section.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-segregating-section"},{"id":"12416","section_id":"134","order":"24","title":"Conclusion","subhead":"","body":"<p>In this section, we learned how to intrinsic size a collection, how container views work, and how multiple view controllers may appear on the same screen. The use of storyboards was fundamental for our development discovery. Learning how to work with them offers parallels between how to separate views and how to make code clean, maintainable and efficient. As you get more experienced, time will come to venture into coding views by hand.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/jj8qff3to5923z4\/multiple-storyboards-conclusion.mp4?dl=0","bookmark_id":"swift4-multiple-storyboards-conclusion"},{"id":"12417","section_id":"134","order":"25","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-multiple-storyboards-credit"}]},{"id":"143","chapter_id":"4","order":"111","slug":"swift4-dynamic-type","title":"Dynamic Type","caption":"Accessibility made easy","body":"<p>iOS is a platform driven by years of research and development by Apple on User Experience. It comes from the legacy of OS X and inherits many of its features. Among those is one that you may call a characteristic: the interest in inclusion.<\/p><p>In the iOS platform, respect for the needs of the many and the few comes built-in. In this tutorial, we are going to learn how to benefit the interface by leveraging automatic user-configurable font resizing.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-dynamic-type.jpg","video":"https:\/\/player.vimeo.com\/external\/259050703.hd.mp4?s=2ada208f3f5a385503ddc9fda4d8dcb3f71499c2&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-dynamic-type.zip","contents":[{"id":"12427","section_id":"143","order":"1","title":"Accessibility on iOS","subhead":"","body":"<p>Accessibility features are not tied to a given app by default. They are shared by all the apps on the device and are set by the user using the accessibility settings. The system-wide font settings are available in the settings app under <strong>Display &amp; Brightness &gt; Text Size<\/strong> and <strong>General &gt; Accessibility &gt; Large Text<\/strong>.<\/p><p>Coming in iOS 11, users can also enable <strong>Text Size<\/strong> on <strong>Control Center<\/strong>. To enable the widget go to <strong>Setting &gt; Control Center &gt; Customize Controls<\/strong> and include <strong>Text Size<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/dynamic-type-enabling-in-ios.mp4?dl=0","bookmark_id":"swift4-dynamic-type-accessibility-on-ios"},{"id":"12428","section_id":"143","order":"2","title":"Accessibility Inspector","subhead":"","body":"<p>The <strong>Accessibility Inspector<\/strong> is a toll available in the Xcode bundle that allows you to tinker and inspect your layout with ease. To use it, open Xcode and navigate the menubar to <strong>Xcode &gt; Open Developer Tool &gt; Accessibility Inspector<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/dynamic-type-accessibility-inspector.mp4?dl=0","bookmark_id":"swift4-dynamic-type-accessibility-inspector"},{"id":"12429","section_id":"143","order":"3","title":"Dynamic Type Tables","subhead":"","body":"<p>Under <a href=\"https:\/\/developer.apple.com\/design\/resources\/\">Apple Design Resources<\/a> app provides assets in Photoshop, Sketch and Adobe XD format. Before you start this tutorial we suggest that you download these resources, search and take a look at the <strong>Guides for Fonts<\/strong>.<\/p><p>There you can find the following text styles that apply to different situations.<\/p><ul>\t<li>Large Titles<\/li>\t<li>Title 1<\/li>\t<li>Title 2<\/li>\t<li>Title 3<\/li>\t<li>Headline<\/li>\t<li>Body<\/li>\t<li>Callout<\/li>\t<li>Subhead<\/li>\t<li>Footnote<\/li>\t<li>Caption 1<\/li>\t<li>Caption 2<\/li><\/ul><p>With these resources, you can learn and get comfortable with the font resizing behaviors for iOS 11.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-dynamic-type-dynamic-type-tables"},{"id":"12430","section_id":"143","order":"4","title":"Text styles API","subhead":"","body":"<p>When doing Dynamic type you can either use Apple&rsquo;s <strong>Text Styles<\/strong> presets or use your own font-face and apply a resizing behavior to it. The <strong>Text Styles<\/strong> API is available in <strong>UI Kit<\/strong> by creating a <strong>UI Font<\/strong> and assigning it to a given element.<\/p><pre><code class=\"language-swift\">label<span class=\"token punctuation\">.<\/span>font <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UIFont<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">preferredFont<\/span><span class=\"token punctuation\">(<\/span>forTextStyle<span class=\"token punctuation\">:<\/span><span class=\"token punctuation\">.<\/span> body<span class=\"token punctuation\">)<\/span><br>label<span class=\"token punctuation\">.<\/span>adjustFontForContentSizeCategory <span class=\"token operator\">=<\/span> <span class=\"token boolean\">true<\/span><br><\/code><\/pre><p>In case you use your own font or customize the system font to a given size and weight, you can always map its resizing behavior by generating a new font using <strong>Font Metrics<\/strong>.<\/p><pre><code class=\"language-swift\">label<span class=\"token punctuation\">.<\/span>font <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UIFontMetrics<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">default<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">scaledFont<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> customFont<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>In case the default resizing scale for the different accessibility presets does not suite your font, you may also map it to one of the <strong>Font Metrics<\/strong> assigned to a <strong>Text Style<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> textStyle <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UIFontTextStyle<\/span><span class=\"token punctuation\">.<\/span>largeTitle<br><span class=\"token keyword\">let<\/span> scaledFont <span class=\"token operator\">=<\/span> <span class=\"token function\">UIFontMetrics<\/span><span class=\"token punctuation\">(<\/span>forTextStyle<span class=\"token punctuation\">:<\/span> textStyle<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">scaledFont<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">for<\/span><span class=\"token punctuation\">:<\/span> font<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>These mappings follow the <strong>Font Metrics<\/strong> tables on the iOS Design Guidelines Resources.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-dynamic-type-text-styles-api"},{"id":"12431","section_id":"143","order":"5","title":"Downloads for Dynamic Type","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\" title=\"Xcode 9\">Xcode 9<\/a>, and the finished Xcode project from <a href=\"https:\/\/www.dropbox.com\/s\/ktenhu0to8dn0ku\/DesignCodeApp%20Multiple%20Storyboards%20Final.zip?dl=1\">Multiple Storyboards<\/a>. Also, make sure to download the <a href=\"https:\/\/www.dropbox.com\/s\/wi63avd233mr6nw\/DesignCodeApp%20Dynamic%20Type%20final.zip?dl=1\">final project<\/a> for comparison.<\/p><p>Also, download the <a href=\"https:\/\/www.dropbox.com\/s\/3v7m9bepnkxo4wb\/Accessible%20Tab%20Bar.zip?dl=1\">accessible tab bar assets<\/a> to increment the <strong>Assets.xcassets<\/strong> bundle.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-dynamic-type-downloads-for-dynamic-type"},{"id":"12432","section_id":"143","order":"6","title":"Using Preset Text Styles","subhead":"","body":"<p>Those <strong>Text Styles<\/strong> available on the Sketch file are also accessible on Xcode using the <strong>Attributes Inspector<\/strong> on you <strong>Label<\/strong> element. To leverage them, select one of the presets from the Font popover and activate <strong>Automatic Adjust Font<\/strong> under <strong>Label &gt; Dynamic Type<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/dynamic-type-presets.mp4?dl=0","bookmark_id":"swift4-dynamic-type-using-preset-text-styles"},{"id":"12433","section_id":"143","order":"7","title":"Mapping your custom font","subhead":"","body":"<p>In the initial project, we have already set a pre-release version of <a href=\"https:\/\/github.com\/MengTo\/Spring\" title=\"Spring, a library to simplify iOS animations in Swift.\">Meng To&apos;s Spring library<\/a> that offers a lot of functionality we have been using along this course. This tutorial will also this benefit from it.<\/p><p>Mapping the custom <strong>Font<\/strong> settings on a label is very easy using <strong>Spring<\/strong>. While designing, choose a <strong>Text Style<\/strong> which resizing behavior suits your needs.<\/p><p>In Xcode, style your font as you like you would for the <strong>Default Font Size<\/strong>. Don&rsquo;t forget to activate <strong>Automatic Adjust Font<\/strong> under <strong>Label &gt; Dynamic Type<\/strong>.<\/p><p>Under the <strong>Attributes Inspector<\/strong> set the <strong>Scaled Font<\/strong> to one of the custom preset names: &#x2018;largetitles&rsquo;, &rsquo;title1&rsquo;, &#x2018;title2&rsquo;, &#x2018;title3&rsquo;, &#x2018;headline&rsquo;, &#x2018;body&rsquo;, &#x2018;callout&rsquo;, &#x2018;subhead&rsquo;, &#x2018;footnote&rsquo;, &#x2018;caption1&rsquo;, or &rsquo;caption2&rsquo;.<\/p><p>This should map your custom font to a resizing behavior. This technique is useful for applying custom font faces and custom San Francisco weights.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/designcode.io\/cloud\/swift4\/dynamic-type-custom-font.mp4?dl=0","bookmark_id":"swift4-dynamic-type-mapping-your-custom-font"},{"id":"12434","section_id":"143","order":"8","title":"Conclusion","subhead":"","body":"<p>If you have an app that is primarily focused on reading, it&rsquo;s suggested writing and designing a dedicated scaled font feature so that the user has access to it inside the app. In all other cases, it is suggested at least using <strong>Dynamic Type<\/strong>.<\/p><p>This is but an intro to one of the primary accessibility features bundled into iOS. In later sections and in the <strong>Design+Code<\/strong> app we are going to explore how make layout respond to <strong>Accessibility Events<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-dynamic-type-conclusion"},{"id":"12435","section_id":"143","order":"9","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-dynamic-type-credit"}]},{"id":"144","chapter_id":"4","order":"112","slug":"swift4-dark-mode","title":"Implement Dark Mode","caption":"Automatically adjust to a dark interface based on brightness","body":"<p>Applications with a focus on legibility and context awareness are known to use theming options such as <strong>Dark Mode<\/strong>. Automatic and user-enabled themes can be found on <strong>Uber<\/strong>, <strong>Twitterrific<\/strong>, <strong>iBooks<\/strong>, and <strong>Procreate<\/strong>. A dark theme can also be found as a default for Pro titled apps such as <strong>Keynote<\/strong> and <strong>Pixelmator<\/strong>.<\/p><p>Apart from that, Apple has built into iOS a <strong>Invert<\/strong> feature under <strong>Settings &gt; General &gt; Accessibility &gt; Display Accommodations &gt; Invert Colors<\/strong>. The <strong>Smart Invert<\/strong>, although pretty smart, is very much buried.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-dark-mode.jpg","video":"https:\/\/player.vimeo.com\/external\/262881960.hd.mp4?s=579fc6f89ab9e65b2e371ac457d5d4cfc8bbdb5d&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-dark-mode.zip","contents":[{"id":"12482","section_id":"144","order":"1","title":"Invert","subhead":"","body":"<p>Apart from that, Apple has built into iOS a <strong>Invert<\/strong> feature under <strong>Settings &gt; General &gt; Accessibility &gt; Display Accommodations &gt; Invert Colors<\/strong>. The <strong>Smart Invert<\/strong>, although pretty smart, is very much buried.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Dark%20modes%20across%20apps.jpg","image_width":"1600","image_height":"1173","video":"","bookmark_id":"swift4-dark-mode-invert"},{"id":"12483","section_id":"144","order":"2","title":"Ambience","subhead":"","body":"<p>In this project, you will come into contact with <a href=\"https:\/\/github.com\/tmergulhao\/Ambience\" title=\"Ambience by Tiago Mergulh&#xE3;o\">Ambience<\/a>, a brightness aware ambient lightning accessibility framework.<\/p><p>Since the launch of iOS, the iPhone features an ambient light sensor that maps its readings to screen brightness. This yields a lot of battery savings, and a better life expectancy for your phone. Also, the delight of having your screen adapt to your viewing conditions is now an industry standard.<\/p><p>Although Apple has yet to publicize the APIs for the ambient light sensor, it does let a given app look for screen brightness events. And that&rsquo;s exactly what Ambience does. It listens to events and relays state thresholds to your app so it can adapt its looks and layout.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Ambience%20modes.jpg","image_width":"1600","image_height":"1173","video":"","bookmark_id":"swift4-dark-mode-ambience"},{"id":"12484","section_id":"144","order":"3","title":"Downloads for Dark Mode","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the <a href=\"https:\/\/www.dropbox.com\/s\/yxsy0tv7n1dltjm\/DesignCodeApp%20Dark%20Mode%20initial.zip?dl=1\" title=\"initial project for this section\">initial project<\/a>. Make sure to also download the <a href=\"https:\/\/www.dropbox.com\/s\/27r44wa9c8b6988\/DesignCodeApp%20Dark%20Mode%20final.zip?dl=1\" title=\"final project for this section\">final project<\/a> for comparison.<\/p><p>If you don&rsquo;t know or don&rsquo;t feel comfortable installing <strong>CocoaPods<\/strong> you may download the <a href=\"https:\/\/www.dropbox.com\/s\/d5whfx0z0fqpecb\/DesignCodeApp%20Dark%20Mode%20with%20CocoaPods.zip?dl=1\">initial project with CocoaPods<\/a>. To open <strong>CocoaPods<\/strong> enabled projects, use the <strong>Xcode Workspace<\/strong> file (a Xcode Project icon on white).<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/2910pvktsdnurs6\/implementing-dark-mode-01-opening-project.mp4?dl=0","bookmark_id":"swift4-dark-mode-downloads-for-dark-mode"},{"id":"12485","section_id":"144","order":"4","title":"Applying Ambience to the interface","subhead":"","body":"<p>Applying does not take a single line of code. It leverages advanced Swift features so as to make its application as seamless as possible.<\/p><p>In this section, we are going to apply custom styled states to the layout. Then, we are going add user control over the states. And finally, we are going to brush up on custom behavior features and extensibility.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-dark-mode-applying-ambience-to-the-interface"},{"id":"12486","section_id":"144","order":"5","title":"","subhead":"Project Activation","body":"<p>To turn on <strong>Ambience<\/strong> on you project, go to the App Delegate file and <strong>import Ambience<\/strong> at the top and write the following line in the <strong>didFinishLaunchingWithOptions<\/strong> method:<\/p><pre><code class=\"language-swift\"><span class=\"token number\">_<\/span> <span class=\"token operator\">=<\/span> <span class=\"token builtin\">Ambience<\/span><span class=\"token punctuation\">.<\/span>shared<br><\/code><\/pre><p>In this code we have only included the library in the App Delegate file and started the shared instance of <strong>Ambience<\/strong> right after the application launches. This is a common pattern you will see in many third party libraries that share functionality across an app.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-dark-mode-project-activation"},{"id":"12487","section_id":"144","order":"6","title":"","subhead":"Background","body":"<p>To have your view comply with <strong>Ambience<\/strong> you can use the built-in <strong>Interface Builder<\/strong> support. Go to the <strong>Main.storyboard<\/strong> file and locate the <strong>More Scene<\/strong>.<\/p><p>Ambience has built-in support for changing a given view&rsquo;s <strong>background color<\/strong>. Using the <strong>Attributes Inspector<\/strong>, set a the <strong>Invert Color<\/strong> and <strong>Contrast Color<\/strong> for a given view.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/ml900xjgtphqoh9\/implementing-dark-mode-02-coloring-background.mp4?dl=0","bookmark_id":"swift4-dark-mode-background"},{"id":"12488","section_id":"144","order":"7","title":"","subhead":"Listening to Ambience","body":"<p>For performance and coherence reasons, it is also mandatory that a given object states that it does respond to Ambience. Using the <strong>Attributes Inspector<\/strong>, look for <strong>Ambience<\/strong> under a <strong>Object Section<\/strong> and set it to <strong>On<\/strong>.<\/p><p>This will tell this object that it should listen to Ambience. We will set this value for every view that needs to react to Ambience.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/xad7inmthr4fpxn\/implementing-dark-mode-03-turning-ambience-on.mp4?dl=0","bookmark_id":"swift4-dark-mode-listening-to-ambience"},{"id":"12489","section_id":"144","order":"8","title":"","subhead":"Text","body":"<p>It is also included support for <strong>text color<\/strong> for <strong>Label<\/strong>, <strong>Button<\/strong> and <strong>Text Area<\/strong> object types. Do the same process, paying attention to only attribute <strong>Text Color Invert<\/strong> and <strong>Text Color Contrast<\/strong>. These values are going to target the text.<\/p><p>Note that it is still mandatory to set <strong>Ambience<\/strong> to <strong>On<\/strong> under the <strong>Object<\/strong> section on the <strong>Attributes Inspector<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/0w46e1jso9m1zmy\/implementing-dark-mode-04-coloring-text.mp4?dl=0","bookmark_id":"swift4-dark-mode-text"},{"id":"12490","section_id":"144","order":"9","title":"","subhead":"First Trial","body":"<p>By now the app already has an automatic brightness driven dark mode on your app.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/q5c19zfyzq1yip1\/implementing-dark-mode-05-automatic.mp4?dl=0","bookmark_id":"swift4-dark-mode-first-trial"},{"id":"12491","section_id":"144","order":"10","title":"","subhead":"Tab, Navigation, Search and Tool Bars","body":"<p>Setting states for systems bar is just as easy as iOS comes with built-in support for dark and default themes on its bars. To have a given <strong>Tab Bar<\/strong> respond to <strong>Ambience<\/strong> it suffices to set it to listen.<\/p><p>Navigate to the <strong>Tab Bar Controller Scene<\/strong> and, using the <strong>Attributes Inspector<\/strong>, set it to listen to <strong>Ambience<\/strong>. That&rsquo;s it.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/sdxh7trbu98cr4l\/implementing-dark-mode-06-applying-for-tab-bar.mp4?dl=0","bookmark_id":"swift4-dark-mode-tab-navigation-search-and-tool-bars"},{"id":"12492","section_id":"144","order":"11","title":"","subhead":"User-Controlled States","body":"<p>It could not be easier to enable user-controlled states. Using the <strong>Object Library<\/strong>, drop a <strong>Object<\/strong> into the <strong>More Scene<\/strong> and class it <strong>Ambience Object<\/strong>.<\/p><p>For it to work properly it needs to trigger an action sheet. Using the <strong>Connections Inspector<\/strong>, connect the <strong>View Controller<\/strong> and a given <strong>Button<\/strong> object to the action using <strong>Touch Up Inside<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/hsn3kg8qurfym2l\/implementing-dark-mode-07-ambience-object.mp4?dl=0","bookmark_id":"swift4-dark-mode-user-controlled-states"},{"id":"12493","section_id":"144","order":"12","title":"","subhead":"Custom State Labels","body":"<p>Select the <strong>Ambience Object<\/strong> so we can customize it. All actions are on by default, turn the <strong>Contrast Available<\/strong> to <strong>Off<\/strong>. Later, set the labels to <strong>Dark Mode<\/strong>, <strong>Ambience Off<\/strong>, and <strong>Auto<\/strong> for the <strong>Invert<\/strong>, <strong>Regular<\/strong> and <strong>Auto<\/strong> label fields.<\/p><p>As this object is not going to transition itself according to <strong>Ambience<\/strong>, there is no need to set its <strong>Ambience<\/strong> to <strong>On<\/strong>, therefore leave it be.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/or9l30on6po7cdk\/implementing-dark-mode-09-customizing-actions.mp4?dl=0","bookmark_id":"swift4-dark-mode-custom-state-labels"},{"id":"12494","section_id":"144","order":"13","title":"Custom Behaviors","subhead":"","body":"<p>Although we have built a lot, <strong>Ambience<\/strong> can also be extended to adapt many features that supersede color schemes. For those features to be accessible, there is support baked in every <strong>NSObject<\/strong>.<\/p><p>Let&rsquo;s create the simplest of functionalities on a label. Create a new Swift file named <strong>&#xA0;CustomAmbienceLabel<\/strong>. Our custom label is nothing but a classic <strong>UILabel<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">UIKit<\/span><br><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">Ambience<\/span><br><br><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">CustomAmbienceLabel<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UILabel<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Under it, let&rsquo;s place only one override function. This function determines how it reacts to <strong>Ambience Events<\/strong> by extending its inherent text color and background color behavior.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">ambience<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> notification<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Notification<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">ambience<\/span><span class=\"token punctuation\">(<\/span>notification<span class=\"token punctuation\">)<\/span><br><br>    <span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">let<\/span> currentState <span class=\"token operator\">=<\/span> notification<span class=\"token punctuation\">.<\/span>userInfo<span class=\"token operator\">?<\/span><span class=\"token punctuation\">[<\/span><span class=\"token string\">&quot;currentState&quot;<\/span><span class=\"token punctuation\">]<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">?<\/span> <span class=\"token builtin\">AmbienceState<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">}<\/span><br><br>    <span class=\"token keyword\">if<\/span> <span class=\"token builtin\">Ambience<\/span><span class=\"token punctuation\">.<\/span>forcedState <span class=\"token operator\">==<\/span> <span class=\"token constant\">nil<\/span> <span class=\"token punctuation\">{<\/span><br>        text <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Auto&quot;<\/span><br>    <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">switch<\/span> currentState <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">case<\/span> <span class=\"token punctuation\">.<\/span>contrast<span class=\"token punctuation\">:<\/span> text <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;&quot;<\/span><br>        <span class=\"token keyword\">case<\/span> <span class=\"token punctuation\">.<\/span>invert<span class=\"token punctuation\">:<\/span> text <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Dark Mode&quot;<\/span><br>        <span class=\"token keyword\">case<\/span> <span class=\"token punctuation\">.<\/span>regular<span class=\"token punctuation\">:<\/span> text <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Off&quot;<\/span><br>         <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>On the occasion of an <strong>Ambience Event<\/strong>, it changes its content to reflect on what state is active. In this case, you can see that any state may be represented by <strong>Auto<\/strong> so long as no state is being forced. Also, the <strong>Invert<\/strong> and <strong>Regular<\/strong> states are mapped to <strong>Dark Mode<\/strong> and <strong>Off<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-dark-mode-custom-behaviors"},{"id":"12495","section_id":"144","order":"14","title":"","subhead":"Classing the Label","body":"<p>Go back to the storyboard and select the state label on the <strong>More Scene<\/strong>. Using the <strong>Identity Inspector<\/strong>, class the <strong>Label<\/strong> as <strong>Custom Ambience Label<\/strong>. Never forget to turn on <strong>Ambience<\/strong> under the <strong>Object<\/strong> section.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/v13ghl3r66jljub\/implementing-dark-mode-11-custom-label.mp4?dl=0","bookmark_id":"swift4-dark-mode-classing-the-label"},{"id":"12496","section_id":"144","order":"15","title":"Conclusion","subhead":"","body":"<p>Using <strong>Dark Theme<\/strong> and other features in your app may enrich your user experience and take your app to the next level. Responsiveness of user interface is a trend that is turning into a design standard.<\/p><p>Apart from offering a <strong>0-code Dark Mode<\/strong> solution, <strong>Ambience<\/strong> also enables extensibility so you may perform theming in a flexible way. It works out of the box for simple layouts and may be easily extended to fit an app&rsquo;s custom needs.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/dpchkh7ejzacpku\/implementing-dark-mode-10-full-dark-mode.mp4?dl=0","bookmark_id":"swift4-dark-mode-conclusion"},{"id":"12497","section_id":"144","order":"16","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-dark-mode-credit"}]},{"id":"135","chapter_id":"4","order":"120","slug":"swift4-json-parsing","title":"JSON Parsing","caption":"Your data in an interchange format","body":"<p><strong>JSON<\/strong> (JavaScript Object Notation) is a data interchange format easy to read and parse for both humans and machines. It&rsquo;s useful as a general format for sending data over a network connection, saving data to disk, or submitting data to APIs and services from different sources which may have different programming languages. Generating or reading from this format requires the data to be encoded or decoded before using it. <\/p><p>Prior to Swift 4 working with JSON in our apps was not a simple straight forward task. Most developers integrated 3rd party libraries or pods that handled the JSON parsing encoding and decoding the data automatically for example <a href=\"https:\/\/github.com\/Hearst-DD\/ObjectMapper\">ObjectMapper<\/a>, or libraries where navigating through the JSON data structure was simplified like <a href=\"https:\/\/github.com\/SwiftyJSON\/SwiftyJSON\">SwiftyJSON<\/a>. The other option was to work with the <strong>JSONSerialization&#xA0;<\/strong> class that comes in Foundation. This approach required a lot of boilerplate code and parsing a simple JSON data structure could require multiple lines of code which was unnecessary and time consuming. Luckily in Swift 4 we were introduced to the <strong>Encodable<\/strong> and <strong>Decodable<\/strong> protocols which make working with <strong>JSON<\/strong> a breeze. Introducing <strong>Type Safety<\/strong> for our parsing and reducing boilerplate code. These protocols are joined into the <strong>Codable<\/strong> typealias as most types will adopt both protocols. <\/p><p>The approach discussed in this section can be used to serialize our data into different formats that conform to the <strong>Encoder<\/strong> or <strong>Decoder<\/strong> protocols but we&rsquo;ll focus on the <strong>JSONEncoder<\/strong> and <strong>JSONDecoder<\/strong> objects for now. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-json-parsing.jpg","video":"https:\/\/player.vimeo.com\/external\/262882021.hd.mp4?s=f9a5a70c351b5aa331f4e5027f5a4e4b5f0924e4&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-json-parsing.zip","contents":[{"id":"12474","section_id":"135","order":"1","title":"Codable","subhead":"","body":"<p><strong>Codable<\/strong> is a typealias conformed by <strong>Decodable<\/strong> and <strong>Encodable<\/strong> protocols<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/\/ A type that can convert itself into and out of an external representation.<\/span><br><span class=\"token keyword\">public<\/span> <span class=\"token keyword\">typealias<\/span> <span class=\"token builtin\">Codable<\/span> <span class=\"token operator\">=<\/span> <span class=\"token builtin\">Decodable<\/span> <span class=\"token operator\">&amp;<\/span> <span class=\"token builtin\">Encodable<\/span><br><\/code><\/pre><p>All of the Swift standard library types conform to Codable (<strong>Number Types<\/strong>, <strong>Bool<\/strong>, <strong>String<\/strong>, <strong>Optional<\/strong>, <strong>Array<\/strong>, <strong>Dictionary<\/strong> and <strong>Set&lt;Codable&gt;<\/strong>), as well as many Apple&rsquo;s framework types such as <strong>Data<\/strong>, <strong>Date<\/strong>, <strong>URL<\/strong>, <strong>CGPoint<\/strong>, and <strong>CGRect<\/strong>. Meaning we can use this types in our <strong>Codable<\/strong> objects and they will be encoded and decoded automatically with no extra work. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-json-parsing-codable"},{"id":"12475","section_id":"135","order":"2","title":"","subhead":"Encodable","body":"<p>Encodable only requires <strong>encode(to encoder: Encoder) throws<\/strong> which takes <strong><a href=\"https:\/\/developer.apple.com\/documentation\/swift\/encoder\">Encoder<\/a><\/strong> object. <\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/\/ A type that can encode itself to an external representation.<\/span><br><span class=\"token keyword\">public<\/span> protocol <span class=\"token builtin\">Encodable<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token comment\">\/\/\/ Encodes this value into the given encoder.<\/span><br>    <span class=\"token comment\">\/\/\/<\/span><br>    <span class=\"token comment\">\/\/\/ If the value fails to encode anything, `encoder` will encode an empty<\/span><br>    <span class=\"token comment\">\/\/\/ keyed container in its place.<\/span><br>    <span class=\"token comment\">\/\/\/<\/span><br>    <span class=\"token comment\">\/\/\/ This function throws an error if any values are invalid for the given<\/span><br>    <span class=\"token comment\">\/\/\/ encoder&apos;s format.<\/span><br>    <span class=\"token comment\">\/\/\/<\/span><br>    <span class=\"token comment\">\/\/\/ - Parameter encoder: The encoder to write data to.<\/span><br>    <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">encode<\/span><span class=\"token punctuation\">(<\/span>to encoder<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Encoder<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">throws<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-json-parsing-encodable"},{"id":"12476","section_id":"135","order":"3","title":"","subhead":"Decodable","body":"<p>Decodable only requires <strong>&#xA0;init(from decoder: Decoder) throws<\/strong> which takes <strong><a href=\"https:\/\/developer.apple.com\/documentation\/swift\/decoder\">Decoder<\/a><\/strong> object. <\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/\/ A type that can decode itself from an external representation.<\/span><br><span class=\"token keyword\">public<\/span> protocol <span class=\"token builtin\">Decodable<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token comment\">\/\/\/ Creates a new instance by decoding from the given decoder.<\/span><br>    <span class=\"token comment\">\/\/\/<\/span><br>    <span class=\"token comment\">\/\/\/ This initializer throws an error if reading from the decoder fails, or<\/span><br>    <span class=\"token comment\">\/\/\/ if the data read is corrupted or otherwise invalid.<\/span><br>    <span class=\"token comment\">\/\/\/<\/span><br>    <span class=\"token comment\">\/\/\/ - Parameter decoder: The decoder to read data from.<\/span><br>    <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">init<\/span><span class=\"token punctuation\">(<\/span>from decoder<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Decoder<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">throws<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-json-parsing-decodable"},{"id":"12477","section_id":"135","order":"4","title":"","subhead":"Encode","body":"<p>As we mentioned earlier all of the Swift standard library types conform to <strong>Codable<\/strong> so we are able to use them in our <strong>Content<\/strong> type. <\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ Shortened representation<\/span><br><span class=\"token keyword\">struct<\/span> <span class=\"token builtin\">Content<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Codable<\/span> <span class=\"token punctuation\">{<\/span><br>   <span class=\"token keyword\">let<\/span> id<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>   <span class=\"token keyword\">let<\/span> title<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><br>   <span class=\"token keyword\">let<\/span> body<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Adding Codable to the inheritance list for Content triggers an automatic conformance that satisfies all of the protocol requirements from Encodable and Decodable. This enables us to serialize them to and from <strong>JSON<\/strong> format even though our <strong>Content<\/strong> struct has no code that handles parsing. The same principle applies when using our custom <strong>Codable<\/strong> as properties of other objects. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">struct<\/span> <span class=\"token builtin\">Section<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Codable<\/span> <span class=\"token punctuation\">{<\/span><br>   <span class=\"token keyword\">let<\/span> id<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>   <span class=\"token keyword\">let<\/span> title<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><br>   <span class=\"token keyword\">let<\/span> contents<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token builtin\">Content<\/span><span class=\"token punctuation\">]<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>We are able to do this as <strong>Array<\/strong> conforms to <strong>Codable<\/strong> as long as contains <strong>Codable<\/strong> types such as <strong>Content<\/strong> type. <\/p><p>Using types that don&rsquo;t conform to Codable would break this implementation. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> content <span class=\"token operator\">=<\/span> <span class=\"token function\">Content<\/span><span class=\"token punctuation\">(<\/span>id<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span><br>                      title<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Getting Started&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                      body<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Body of our content&quot;<\/span><span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> section <span class=\"token operator\">=<\/span> <span class=\"token function\">Section<\/span><span class=\"token punctuation\">(<\/span>id<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span><br>                      title<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Learn iOS 11 Design&quot;<\/span><span class=\"token punctuation\">,<\/span><br>                      contents<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span>content<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> encoder <span class=\"token operator\">=<\/span> <span class=\"token function\">JSONEncoder<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">do<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> jsonData <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> encoder<span class=\"token punctuation\">.<\/span><span class=\"token function\">encode<\/span><span class=\"token punctuation\">(<\/span>section<span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">let<\/span> jsonObject <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> <span class=\"token builtin\">JSONSerialization<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">jsonObject<\/span><span class=\"token punctuation\">(<\/span>with<span class=\"token punctuation\">:<\/span> jsonData<span class=\"token punctuation\">,<\/span> options<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>allowFragments<span class=\"token punctuation\">)<\/span><br>    <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">String<\/span><span class=\"token punctuation\">(<\/span>describing<span class=\"token punctuation\">:<\/span> jsonObject<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">catch<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token comment\">\/\/ Encoding error.<\/span><br>    <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span>error<span class=\"token punctuation\">.<\/span>localizedDescription<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/Codable_print.png","image_width":"1920","image_height":"1626","video":"","bookmark_id":"swift4-json-parsing-encode"},{"id":"12478","section_id":"135","order":"5","title":"","subhead":"Decode","body":"<p>It might happen that we only have one way data flow in our custom type as some objects are for example only read from a web service but never uploaded from our app. <\/p><p>In the DesignCode app the <strong>DataUpdate<\/strong> conforms only to <strong>Decodable<\/strong> as the updates JSON data always come from our web service network requests and is never uploaded from the app. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">struct<\/span> <span class=\"token builtin\">Update<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Decodable<\/span> <span class=\"token punctuation\">{<\/span><br>       <span class=\"token keyword\">let<\/span> id<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>       <span class=\"token keyword\">let<\/span> title<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><br>       <span class=\"token keyword\">let<\/span> text<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><br>       <span class=\"token keyword\">let<\/span> imageURL<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">URL<\/span><br>       <span class=\"token keyword\">let<\/span> date<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Date<\/span> <span class=\"token comment\">\/\/ Parsed with timeIntervalSinceReferenceDate value<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>The same approach can be implemented if you have objects that need to be encoded but never decoded. Just conform to <strong>Encodable<\/strong>. Although there&rsquo;s no extra functional benefit for declaring a type conform to only one of the protocols it will in fact define a clearer usability API for your types.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> updateJSONString <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;&quot;<\/span>&quot;<br><span class=\"token punctuation\">{<\/span><br>    <span class=\"token string\">&quot;id&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;title&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;First update&quot;<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;This is the first update of our updates elements&quot;<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;imageURL&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;https:\/\/designcode.io\/images.png&quot;<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;date&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">534988800<\/span><br><span class=\"token punctuation\">}<\/span><br><span class=\"token string\">&quot;&quot;<\/span>&quot;<br><br><span class=\"token keyword\">do<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> decoder <span class=\"token operator\">=<\/span> <span class=\"token function\">JSONDecoder<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">let<\/span> data <span class=\"token operator\">=<\/span> updateJSONString<span class=\"token punctuation\">.<\/span><span class=\"token function\">data<\/span><span class=\"token punctuation\">(<\/span>using<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>utf8<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token keyword\">let<\/span> update <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> decoder<span class=\"token punctuation\">.<\/span><span class=\"token function\">decode<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">Update<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> from<span class=\"token punctuation\">:<\/span> data<span class=\"token punctuation\">)<\/span><br>    <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span>update<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">catch<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span>error<span class=\"token punctuation\">.<\/span>localizedDescription<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Take into account that <strong>Date<\/strong> class decodes its value by using the <em>timeIntervalSinceReferenceDate<\/em> value on Apple&rsquo;s platforms rather than <em>timeIntervalSince1970<\/em> mostly used in other platforms and systems. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Decodable_print.png","image_width":"1920","image_height":"1528","video":"","bookmark_id":"swift4-json-parsing-decode"},{"id":"12479","section_id":"135","order":"6","title":"CodingKeys","subhead":"","body":"<p><strong>Codable<\/strong> types can declare a nested enum called <strong>CodingKeys<\/strong> that conform to the protocol with the same name. This CodingKeys cases represent the properties in our type while their <strong>stringValue<\/strong> is key used in the JSON property value. For integer-indexed collections <strong>CodingKeys<\/strong> have a <strong>intValue<\/strong>. This acts as the list of properties that must be included when decoding or encoding our types. If we omit any of our properties in the <strong>CodingKeys<\/strong> enum this property will not be encoded or decoded. To omit properties they must have a default initial value to not break their protocol conformance. <strong>CodingKeys<\/strong> are also useful if we have a different naming convention from the service providing the JSON data (some backend programming languages prefer <em>snake_case<\/em> naming rather than <em>camelCase<\/em> we use in Swift).<br><\/p><p>For our <strong>Update<\/strong> implementation we are setting a default <strong>title<\/strong> and not include it in the <strong>CodingKeys<\/strong> enum. Also, we are changing the key for our imageURL property to <em>image_url<\/em> <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">struct<\/span> <span class=\"token builtin\">Update<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Decodable<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> id<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>    <span class=\"token keyword\">let<\/span> title <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;New Update!&quot;<\/span><br>    <span class=\"token keyword\">let<\/span> text<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><br>    <span class=\"token keyword\">let<\/span> imageURL<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">URL<\/span><br>    <span class=\"token keyword\">let<\/span> date<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Date<\/span><br><br>    <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">enum<\/span> <span class=\"token builtin\">CodingKeys<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">CodingKey<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">case<\/span> id<br>        <span class=\"token keyword\">case<\/span> text<br>        <span class=\"token keyword\">case<\/span> imageURL <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;image_url&quot;<\/span><br>        <span class=\"token keyword\">case<\/span> date<br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><br><span class=\"token keyword\">let<\/span> updateJSONString <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;&quot;<\/span>&quot;<br><span class=\"token punctuation\">{<\/span><br>    <span class=\"token string\">&quot;id&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;This is the first update of our updates elements&quot;<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;image_url&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;https:\/\/designcode.io\/images.png&quot;<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;date&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">534988800<\/span><br><span class=\"token punctuation\">}<\/span><br><span class=\"token string\">&quot;&quot;<\/span>&quot;<br><br><span class=\"token keyword\">do<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> decoder <span class=\"token operator\">=<\/span> <span class=\"token function\">JSONDecoder<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">let<\/span> data <span class=\"token operator\">=<\/span> updateJSONString<span class=\"token punctuation\">.<\/span><span class=\"token function\">data<\/span><span class=\"token punctuation\">(<\/span>using<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>utf8<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token keyword\">let<\/span> update <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> decoder<span class=\"token punctuation\">.<\/span><span class=\"token function\">decode<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">Update<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> from<span class=\"token punctuation\">:<\/span> data<span class=\"token punctuation\">)<\/span><br>    <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span>update<span class=\"token punctuation\">)<\/span><br><br><span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">catch<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span>error<span class=\"token punctuation\">.<\/span>localizedDescription<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/Codable_CodingKeys.png","image_width":"1600","image_height":"1236","video":"","bookmark_id":"swift4-json-parsing-codingkeys"},{"id":"12480","section_id":"135","order":"7","title":"Manual Encoding and Decoding","subhead":"","body":"<p>So far we let the <strong>JSONEncoder<\/strong> and <strong>JSONDecoder<\/strong> classes do all the heavy work as we just simply conform to their protocols and get all the functionalities with no extra code added. But what happens when we want to do some extra customization or our JSON data is not structured the same was as our data type? <\/p><p>Both <strong>Encodable<\/strong> and <strong>Decodable<\/strong> protocols come with <em>init<\/em> implementations: <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">public<\/span> protocol <span class=\"token builtin\">Encodable<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">encode<\/span><span class=\"token punctuation\">(<\/span>to encoder<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Encoder<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">throws<\/span><br><span class=\"token punctuation\">}<\/span><br><br><span class=\"token keyword\">public<\/span> protocol <span class=\"token builtin\">Decodable<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">init<\/span><span class=\"token punctuation\">(<\/span>from decoder<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Decoder<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">throws<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Which let us replace de default encoding\/decoding functionality. We&rsquo;ll do some customization on our <strong>Update<\/strong> type. <\/p><p>First of all we&rsquo;ll change our JSON string to feed us the date in a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Unix_time\">Unix Timestamp<\/a> format given that we plan to use this value on other non-Apple platforms. We&rsquo;ll have to change de default encoding\/decoding implementation to start our date with <em>timeIntervalSince1970<\/em> rather than the default <em>timeIntervalSinceReference<\/em>. Also, we&rsquo;ll nest a <em>additionalInfo<\/em> dictionary into our data which contains a <em>postedBy<\/em> property of type string which will represent the name of the team member that posted that update. <\/p><p>This is how the updated JSON will look like: <\/p><pre><code class=\"language-swift\"><span class=\"token punctuation\">{<\/span><br>    <span class=\"token string\">&quot;id&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;text&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;This is the first update of our updates elements&quot;<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;image_url&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;https:\/\/designcode.io\/images.png&quot;<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;timestamp&quot;<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token number\">1513634273<\/span><span class=\"token punctuation\">,<\/span><br>    <span class=\"token string\">&quot;additionalInfo&quot;<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token string\">&quot;postedBy&quot;<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Marcos Griselli&quot;<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>We want to see this changes represented on both our <strong>Update<\/strong> struct and it&rsquo;s <strong>CodingKey<\/strong> so this is how they&rsquo;ll look<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">struct<\/span> <span class=\"token builtin\">Update<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Decodable<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> id<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>    <span class=\"token keyword\">let<\/span> title <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;New Update!&quot;<\/span><br>    <span class=\"token keyword\">let<\/span> text<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><br>    <span class=\"token keyword\">let<\/span> imageURL<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">URL<\/span><br>    <span class=\"token keyword\">let<\/span> date<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Date<\/span><br>    <span class=\"token keyword\">let<\/span> postedBy<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token comment\">\/\/ User posting this update<\/span><br><br>    <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">enum<\/span> <span class=\"token builtin\">CodingKeys<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">CodingKey<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">case<\/span> id<br>        <span class=\"token keyword\">case<\/span> text<br>        <span class=\"token keyword\">case<\/span> imageURL <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;image_url&quot;<\/span><br>        <span class=\"token keyword\">case<\/span> timestamp<br>        <span class=\"token keyword\">case<\/span> additionalInfo<br>    <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Take into account our _postedBy_property is inside the&#xA0;_additionalInfo_ nested dictionary. So it won&rsquo;t be reachable if we add it to our <strong>CodingKeys<\/strong> enum. We&rsquo;ll need to <strong>nestedContainer<\/strong> structure to support this kind of functionality and use it in our init methods. <\/p><pre><code class=\"language-swift\">    <span class=\"token keyword\">enum<\/span> <span class=\"token builtin\">AdditionalInfoKeys<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">CodingKey<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">case<\/span> postedBy<br>    <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This will let us reference the <em>nestedContainers<\/em> from a <em>container<\/em> property from the <strong>Encoder<\/strong> or <strong>Decoder<\/strong> protocols in our <em>init<\/em> methods. Let&rsquo;s create our custom <em>init(from: Decoder) throws<\/em><br><\/p><pre><code class=\"language-swift\">    <span class=\"token keyword\">init<\/span><span class=\"token punctuation\">(<\/span>from decoder<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Decoder<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">throws<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">let<\/span> values <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> decoder<span class=\"token punctuation\">.<\/span><span class=\"token function\">container<\/span><span class=\"token punctuation\">(<\/span>keyedBy<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CodingKeys<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><br>        id <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> values<span class=\"token punctuation\">.<\/span><span class=\"token function\">decode<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>id<span class=\"token punctuation\">)<\/span><br>        text <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> values<span class=\"token punctuation\">.<\/span><span class=\"token function\">decode<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>text<span class=\"token punctuation\">)<\/span><br>        imageURL <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> values<span class=\"token punctuation\">.<\/span><span class=\"token function\">decode<\/span><span class=\"token punctuation\">(<\/span><span class=\"token constant\">URL<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>imageURL<span class=\"token punctuation\">)<\/span><br><br>        <span class=\"token keyword\">let<\/span> unixTimestamp <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> values<span class=\"token punctuation\">.<\/span><span class=\"token function\">decode<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">TimeInterval<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>timestamp<span class=\"token punctuation\">)<\/span><br>        date <span class=\"token operator\">=<\/span> <span class=\"token builtin\">Date<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">init<\/span><span class=\"token punctuation\">(<\/span>timeIntervalSince1970<span class=\"token punctuation\">:<\/span> unixTimestamp<span class=\"token punctuation\">)<\/span><br><br>        <span class=\"token keyword\">let<\/span> additionalInfo <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> values<span class=\"token punctuation\">.<\/span><span class=\"token function\">nestedContainer<\/span><span class=\"token punctuation\">(<\/span>keyedBy<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AdditionalInfoKeys<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>additionalInfo<span class=\"token punctuation\">)<\/span><br>        postedBy <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> additionalInfo<span class=\"token punctuation\">.<\/span><span class=\"token function\">decode<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>postedBy<span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In the snippet above we are accessing the values form the Decoder manually. <em>&#xA0;try decoder.container(keyedBy: CodingKeys.self)<\/em> gives us access to the values contained which are referenced by CodingKeys values. If we don&rsquo;t need any additional setup or nested lookup we can directly try to decode the value for our <strong>CodingKeys<\/strong> option, we are doing this for <em>id<\/em>, <em>text<\/em> and <em>imageURL<\/em>. We changed the time handling and move from Apple&rsquo;s timestamp to the default Unix Timestamp so now we&rsquo;ll have to implement a different initializer for our date. Luckily <strong>Date<\/strong> comes with an initializer for Unix Timestamp <em>&#xA0;timeIntervalSince1970<\/em> so we&rsquo;re able to add support to this new format with out much refactor. Lastly we need to access our nested <em>postedBy<\/em> value. As mentioned before we&rsquo;ll use nestedContainers which let us define the set of keys that will be contained inside it. In our case the a_additionalInfo_ dictionary is represented by the <strong>AditionalInfoKeys<\/strong> enum and we access it via the <em>.additionalInfo<\/em> case on our default <strong>CodingKeys<\/strong><\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> additionalInfo <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> values<span class=\"token punctuation\">.<\/span><span class=\"token function\">nestedContainer<\/span><span class=\"token punctuation\">(<\/span>keyedBy<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AdditionalInfoKeys<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>additionalInfo<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Then we just keep using that container values with it&rsquo;s custom Keys enum to access our nested data<\/p><pre><code class=\"language-swift\"> postedBy <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span> additionalInfo<span class=\"token punctuation\">.<\/span><span class=\"token function\">decode<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">String<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>postedBy<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Implementing <em>encode(to: Encoder) throws<\/em> is the reversed step. We encode all of our type properties into a <strong>Encoder<\/strong> container using the <strong>CodingKeys<\/strong> values or the nested <strong>AdditionalInfoKeys<\/strong> for the properties that it holds. Our <strong>Update<\/strong> extension implementing <strong>Encodable<\/strong> would look like this: <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">Update<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Encodable<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">encode<\/span><span class=\"token punctuation\">(<\/span>to encoder<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Encoder<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">throws<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">var<\/span> container <span class=\"token operator\">=<\/span> encoder<span class=\"token punctuation\">.<\/span><span class=\"token function\">container<\/span><span class=\"token punctuation\">(<\/span>keyedBy<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CodingKeys<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">try<\/span> container<span class=\"token punctuation\">.<\/span><span class=\"token function\">encode<\/span><span class=\"token punctuation\">(<\/span>id<span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>id<span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">try<\/span> container<span class=\"token punctuation\">.<\/span><span class=\"token function\">encode<\/span><span class=\"token punctuation\">(<\/span>text<span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>text<span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">try<\/span> container<span class=\"token punctuation\">.<\/span><span class=\"token function\">encode<\/span><span class=\"token punctuation\">(<\/span>imageURL<span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>imageURL<span class=\"token punctuation\">)<\/span><br><br>        <span class=\"token keyword\">let<\/span> unixTimestamp <span class=\"token operator\">=<\/span> date<span class=\"token punctuation\">.<\/span>timeIntervalSince1970<br>        <span class=\"token keyword\">try<\/span> container<span class=\"token punctuation\">.<\/span><span class=\"token function\">encode<\/span><span class=\"token punctuation\">(<\/span>unixTimestamp<span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>timestamp<span class=\"token punctuation\">)<\/span><br><br>        <span class=\"token keyword\">var<\/span> additionalInfo <span class=\"token operator\">=<\/span> container<span class=\"token punctuation\">.<\/span><span class=\"token function\">nestedContainer<\/span><span class=\"token punctuation\">(<\/span>keyedBy<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AdditionalInfoKeys<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>additionalInfo<span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">try<\/span> additionalInfo<span class=\"token punctuation\">.<\/span><span class=\"token function\">encode<\/span><span class=\"token punctuation\">(<\/span>postedBy<span class=\"token punctuation\">,<\/span> forKey<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>postedBy<span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/Codable_manual.png","image_width":"911","image_height":"461","video":"","bookmark_id":"swift4-json-parsing-manual-encoding-and-decoding"},{"id":"12481","section_id":"135","order":"8","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/marcosgriselli\">Marcos Griselli<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-json-parsing-credit"}]},{"id":"136","chapter_id":"4","order":"130","slug":"swift4-core-data","title":"Core Data","caption":"Persist your data using the built-in framework","body":"<p>Core Data is an object graph management and persistence framework that you use to manage the model layer objects in your application. Core Data comes with a series of functionalities out of the box that let us save us a lot of time while implementing persistence in our app. We&apos;ll be reviewing these functionalities in this section. Being developed by Apple Core Data has a native Xcode integration which allows us to create our model objects in Core Data&apos;s <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-core-data.jpg","video":"https:\/\/player.vimeo.com\/external\/264117503.hd.mp4?s=6d502d0606152eede60a1f076f29b6721ab45a4c&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-core-data.zip","contents":[{"id":"12461","section_id":"136","order":"1","title":"Set up Core Data","subhead":"","body":"<p>The Core Data stack consists of four primary objects: the managed object context (<strong>NSManagedObjectContext<\/strong>), the persistent store coordinator (<strong>NSPersistentStoreCoordinator<\/strong>), the managed object model (<strong>NSManagedObjectModel<\/strong>), and the persistent container (<strong>NSPersistentContainer<\/strong>).<\/p><p>We indicated Xcode we&apos;ll be using Core Data while creating the project on the <a href=\"\">Insert section<\/a> section. <\/p><p>This generates a chunk of boilerplate code in our <strong>AppDelegate.swift<\/strong> file representing the <strong>NSPersistentContainer<\/strong> of the stack. Starting from iOS 10 <strong>NSPersistentContainer<\/strong> handles the creation of the Core Data stack and offers access to the <strong>NSManagedObjectContext<\/strong> as well as a number of convenience methods. This is the code generated, note we replaced the NSError casting and used the default <em>Error<\/em> and printed its description.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ MARK: - Core Data stack<\/span><br><br><span class=\"token keyword\">lazy<\/span> <span class=\"token keyword\">var<\/span> persistentContainer<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">NSPersistentContainer<\/span> <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> container <span class=\"token operator\">=<\/span> <span class=\"token function\">NSPersistentContainer<\/span><span class=\"token punctuation\">(<\/span>name<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;DesignCodeApp_CoreData&quot;<\/span><span class=\"token punctuation\">)<\/span><br>    container<span class=\"token punctuation\">.<\/span><span class=\"token function\">loadPersistentStores<\/span><span class=\"token punctuation\">(<\/span>completionHandler<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token punctuation\">(<\/span>storeDescription<span class=\"token punctuation\">,<\/span> error<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">in<\/span><br>        <span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> error <span class=\"token operator\">=<\/span> error <span class=\"token punctuation\">{<\/span><br>            <span class=\"token function\">fatalError<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;Unresolved error description: <span class=\"token interpolation\"><span class=\"token delimiter variable\">(<\/span>error<span class=\"token punctuation\">.<\/span>localizedDescription<span class=\"token delimiter variable\">)<\/span><\/span>&quot;<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">return<\/span> container<br><span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><br><span class=\"token comment\">\/\/ MARK: - Core Data Saving support<\/span><br><br><span class=\"token keyword\">func<\/span> saveContext <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> context <span class=\"token operator\">=<\/span> persistentContainer<span class=\"token punctuation\">.<\/span>viewContext<br>    <span class=\"token keyword\">if<\/span> context<span class=\"token punctuation\">.<\/span>hasChanges <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">do<\/span> <span class=\"token punctuation\">{<\/span><br>            <span class=\"token keyword\">try<\/span> context<span class=\"token punctuation\">.<\/span><span class=\"token function\">save<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">catch<\/span> <span class=\"token punctuation\">{<\/span><br>            <span class=\"token function\">fatalError<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;Unresolved error description: <span class=\"token interpolation\"><span class=\"token delimiter variable\">(<\/span>error<span class=\"token punctuation\">.<\/span>localizedDescription<span class=\"token delimiter variable\">)<\/span><\/span>&quot;<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-core-data-set-up-core-data"},{"id":"12462","section_id":"136","order":"2","title":"Creating our models","subhead":"","body":"<p>We&apos;ll be creating our models in the Xcode Core Data model editor. This is a graphical interface incorporated into Xcode that let us create our models in a straightforward way and it lets us export it into a <strong>Swift<\/strong> <strong>NSManagedObject<\/strong> subclass later.<\/p><p>Start opening the Core Data Model Editor by selecting the <strong>DesignCodeApp.xcdatamodeld<\/strong> file that&rsquo;s located on the DesignCodeApp folder in the left pane folder inspector.<br><\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/CoreData_Editor.png","image_width":"1600","image_height":"999","video":"","bookmark_id":"swift4-core-data-creating-our-models"},{"id":"12463","section_id":"136","order":"3","title":"","subhead":"Creating Entities","body":"<p>Core Data models are called <strong>Entities<\/strong> this objects will represent our data models from our app in Core Data. Start by hitting the <em>Add Entity +<\/em> button from the Core Data model editor at the bottom. This will create a new empty <strong>Entity<\/strong> with no <strong>attributes<\/strong>, <strong>relationships<\/strong> nor <strong>fetched properties<\/strong>. For this section we&rsquo;ll focus on working with our user&rsquo;s bookmarks in Core Data, this means users will be able to save and fetch their bookmarks even after closing the app. Double click on the Entity&apos;s name on the model editor left panel to change the Entity name and call it <strong>Bookmark<\/strong>. We can define it further in the Entity pane of the Data Model inspector on Xcode right panel. Note that we have an Entity name and a Class name which are not the same. We follow Apple&rsquo;s recommended approach to defining <strong>NSManagedObject<\/strong> classes with a MO suffix. Entities can also be marked as abstract if we only intend to create instances of classes that inherit from it.<\/p><p>We&rsquo;ll implement <strong>NSManagedObjectSubclasses<\/strong> manually so make sure you set the <em>Codegen<\/em> option to <strong>Manual\/None<\/strong> on the right pane <strong>Data Model Inspector<\/strong>, also set the <em>Module<\/em> to <strong>Current Product Module<\/strong>.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/CoreData_Inspector.png","image_width":"1600","image_height":"1161","video":"","bookmark_id":"swift4-core-data-creating-entities"},{"id":"12464","section_id":"136","order":"4","title":"","subhead":"Adding Attributes to our Entities","body":"<p>As you might tell from the Core Data model editor layout, adding <strong>Attributes<\/strong> (properties) to our <strong>Entity<\/strong> is as simple as tapping the <strong>+<\/strong> button under the <strong>Attributes<\/strong> list. We&apos;ll be adding the necessary attributes for our <strong>Bookmark<\/strong> entity. Core Data natively supports a variety of attribute types, such as string, date, and integer (represented as instances of <strong>NSString<\/strong>, <strong>NSDate<\/strong>, and <strong>NSNumber<\/strong> respectively).<\/p><p>We&rsquo;ll be adding the next attributes to our <strong>Bookmark<\/strong> entity: <em>bookmarkId<\/em> (<strong>String<\/strong>), <em>contentId<\/em> (<strong>Integer 16<\/strong>), <em>chapterId<\/em> (<strong>Integer 16<\/strong>), <em>sectionId<\/em> (<strong>Integer 16<\/strong>). All of them will be non-optional, we can set this value from the right side panel on the <strong>Data Model Inspector<\/strong> tab. We&rsquo;ll use the content, section and chapter ids to display more information on the Bookmarks screen.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/CoreData_Attributes.png","image_width":"1600","image_height":"1121","video":"","bookmark_id":"swift4-core-data-adding-attributes-to-our-entities"},{"id":"12465","section_id":"136","order":"5","title":"","subhead":"Adding Relationships","body":"<p>For the purpose of this section, we&rsquo;ll create a basic <strong>User<\/strong> entity with <em>id<\/em> (<strong>Integer 32<\/strong>) <em>name<\/em> and <em>email<\/em> (both <strong>String<\/strong>) to create our relationships with the <strong>Bookmark<\/strong> entity. <\/p><p>Adding relationships is a simple process as well, we just tap the <strong>+<\/strong> button under the <strong>Relationships<\/strong> section. We&rsquo;ll create the <em>user<\/em> relationship as the bookmarks will belong to a user, this is a <strong>one to one<\/strong> relationship as one Bookmark object can belong to a single user (the user that&rsquo;s logged in at that time). This is a non-optional relationship. <strong>User<\/strong> entity will also have a relationship to <strong>Bookmark<\/strong> that will complete the inverse relation between the <strong>Bookmark<\/strong> and <strong>User<\/strong> entities, again this is a non-optional relationship but in this case is <em>one to many<\/em> meaning one user may have many bookmarks. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/CoreData_Relationship.png","image_width":"1600","image_height":"1116","video":"","bookmark_id":"swift4-core-data-adding-relationships"},{"id":"12466","section_id":"136","order":"6","title":"","subhead":"Exporting Classes","body":"<p>So far we&rsquo;ve created our data models inside the <strong>Core Data Editor<\/strong> but now it&rsquo;s time to start using them in our app. Xcode can generate our classes out of our <strong>Core Data<\/strong> entities implementation so we&rsquo;ll take advantage of that. While on the <strong>Core Data Editor<\/strong> go to Editor &gt; Create NSManagedObject Subclass&#x2026; and hit next, then select the project to add them too (it should be the only option appearing) hit next and select the Entities to create. We&rsquo;ll be creating both <strong>Bookmark<\/strong> and <strong>User<\/strong> entity. <\/p><p>This will generate 2 files for each entity one with the <strong>NSManagedObjectSubclass<\/strong> definition called <strong><em>EntityName<\/em>+CoreDataClass.swift<\/strong> and the other one with <strong>Core Data<\/strong> attributes extension called <strong><em>EntityName<\/em>+CoreDataProperties.swift<\/strong>. <\/p><p>One of the key benefits of modeling our entities in Core Data is that even after generating the files if we edit our <strong>Entity<\/strong> model we can regenerate the classes and only the <strong>CoreDataProperties.swift<\/strong> files will be re-generated and replace the current one. So we can write our custom implementations on the <strong>CoreDataClass.swift<\/strong> without worrying about it being lost when re-generating files.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/CoreData_Subclasses.png","image_width":"1600","image_height":"968","video":"","bookmark_id":"swift4-core-data-exporting-classes"},{"id":"12467","section_id":"136","order":"7","title":"Saving and Fetching objects","subhead":"","body":"<p>Now that we have our <strong>Core Data Models<\/strong> exported and ready to be used in our application it&rsquo;s time we start saving some bookmarks. <\/p><p>For starter, we&rsquo;ll create our default <strong>User<\/strong> object and save it in <strong>Core Data<\/strong>. There are three ways to initialize a <strong>NSManagedObjectSubclass<\/strong> out of the box at this point we&rsquo;ll look into <\/p><pre><code class=\"language-swift\">_NSEntityDescription<span class=\"token punctuation\">.<\/span><span class=\"token function\">insertNewObject<\/span><span class=\"token punctuation\">(<\/span>forEntityName<span class=\"token punctuation\">:<\/span>  <span class=\"token number\">_<\/span><span class=\"token punctuation\">,<\/span> into<span class=\"token punctuation\">:<\/span> <span class=\"token number\">_<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">NSManagedObject<\/span><br><\/code><\/pre><p>Which creates a NSManagedObject out of the entity name we pass as a parameter. Also, it requires the <strong><a href=\"\">NSManagedObjectContext<\/a><\/strong> where to save this new object we created. Our default creation of the base User will look like this: <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">createDefaultUser<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> user <span class=\"token operator\">=<\/span> <span class=\"token builtin\">NSEntityDescription<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">insertNewObject<\/span><span class=\"token punctuation\">(<\/span><br>        forEntityName<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;User&quot;<\/span><span class=\"token punctuation\">,<\/span><br>        into<span class=\"token punctuation\">:<\/span> persistentContainer<span class=\"token punctuation\">.<\/span>viewContext<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">UserMO<\/span><br>    user<span class=\"token punctuation\">.<\/span>name <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;User&quot;<\/span><br>    user<span class=\"token punctuation\">.<\/span>email <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;user@designcode.io&quot;<\/span><br>    <span class=\"token function\">saveContext<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In this function we are inserting a new object for our User entity which is represented by <strong>UserMO<\/strong> object, we set up its name and email and then save the current context it was created into. The User data could be stored in <strong>.plist&#xA0;<\/strong> file for easy manipulation but in this case, the model was so simple we decided to add it this way to reduce the boilerplate code. <\/p><p>Add this function to our AppDelegate to get started and in our <em>applicationDidFinishLaunchingWithOptions<\/em> let&rsquo;s check that the default user is not already created. We&rsquo;ll have to perform a <strong>NSFetchRequest&lt;OurModel&gt;<\/strong>, on the classes export we were given with a convenience method to create a <strong>NSFetchRequest<\/strong> for our <strong>NSManagedObjectSubclass<\/strong> easily. Check our <strong>&#xA0;UserMO+CoreDataProperties.swift<\/strong> file <\/p><pre><code class=\"language-swift\">    @nonobjc <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">class<\/span> <span class=\"token class-name\">func<\/span> <span class=\"token function\">fetchRequest<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">NSFetchRequest<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">UserMO<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">return<\/span> <span class=\"token builtin\">NSFetchRequest<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">UserMO<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">(<\/span>entityName<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;User&quot;<\/span><span class=\"token punctuation\">)<\/span><br> <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>A convenience function like this is really helpful as it doesn&rsquo;t make us struggle with strings value all around our code. If we ever decide to change our Entity name we won&rsquo;t have to modify any of our <strong>NSFetchRequest<\/strong> calls. Our code will look like this: <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> request<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">NSFetchRequest<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">UserMO<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token operator\">=<\/span> <span class=\"token builtin\">UserMO<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">fetchRequest<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> users <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span><span class=\"token operator\">?<\/span> persistentContainer<span class=\"token punctuation\">.<\/span>viewContext<span class=\"token punctuation\">.<\/span><span class=\"token function\">fetch<\/span><span class=\"token punctuation\">(<\/span>request<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">if<\/span> users<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">isEmpty<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token function\">createDefaultUser<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-core-data-saving-and-fetching-objects"},{"id":"12468","section_id":"136","order":"8","title":"","subhead":"Propagate a NSManagedObjectContext","body":"<p>Even though we created our <strong>NSPersistentContainer<\/strong> in our <strong>AppDelegate<\/strong> class we&rsquo;ll be doing most of our operations from the <strong>ViewControllers<\/strong> (There are other patterns that let a specialized class handle all the persistence operations, but for now we&rsquo;ll take the ViewController approach).<\/p><p>We&rsquo;ll create an <strong>NSManagedObjectContext<\/strong> property in our initial controller. We&rsquo;ll rename the default <strong>ViewController<\/strong> to <strong>BookmarkViewController<\/strong> and add this property<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> managedContext<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">NSManagedObjectContext<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre><p>We&rsquo;ll then pass the <strong>AppDelegate&rsquo;s<\/strong> <em>persistentContainer<\/em> to our <strong>BookmarkViewController<\/strong> in <em>applicationDidFinishLaunchingWithOptions<\/em> <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">let<\/span> vc <span class=\"token operator\">=<\/span> window<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>rootViewController <span class=\"token keyword\">as<\/span><span class=\"token operator\">?<\/span> <span class=\"token builtin\">BookmarksViewController<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span><br><span class=\"token punctuation\">}<\/span><br><br>vc<span class=\"token punctuation\">.<\/span>managedContext <span class=\"token operator\">=<\/span> persistentContainer<span class=\"token punctuation\">.<\/span>viewContext<br><\/code><\/pre><p>Now we&rsquo;re able to save and fetch data from our <strong>BookmarkViewController<\/strong> as well.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-core-data-propagate-a-nsmanagedobjectcontext"},{"id":"12469","section_id":"136","order":"9","title":"NSFetchedResult Controller","subhead":"","body":"<p><strong>NSFetchedResult Controller<\/strong> is used to manage the results of a Core Data fetch request and display data to the user in an easy to configure way. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-core-data-nsfetchedresult-controller"},{"id":"12470","section_id":"136","order":"10","title":"","subhead":"Setup","body":"<p>We&rsquo;ll create a <em>fetchedResultController<\/em> property on our <strong>BookmarkViewController<\/strong> ViewController. We&rsquo;ll set this object inside a closure followed by an empty set of parentheses which indicates Swift to execute the closure immediately, otherwise, we&rsquo;d be assigning the closure to the property and get an error. You can read more about this approach in <a href=\"\">Apple&rsquo;s documents<\/a>.<\/p><p>First, define the <em>fetchedResultController<\/em> as a <strong>lazy var<\/strong> of type <strong>NSFetchedResultController&lt;BookmarkMO&gt;<\/strong>. We&rsquo;ll make this property lazy as we might not need its value immediately after the <strong>BookmarkViewController<\/strong> is created. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">private<\/span> <span class=\"token keyword\">lazy<\/span> <span class=\"token keyword\">var<\/span> fetchedResultsController<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">NSFetchedResultsController<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">BookmarkMO<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">{<\/span><br><\/code><\/pre><p>Inside the closure, we&rsquo;ll start by creating a <strong>NSFetchRequest<\/strong> the same way we did before, by using the <em>fetchRequest()<\/em> static function on our <strong>BookmarkMO<\/strong> object.<\/p><pre><code class=\"language-swift\">    <span class=\"token keyword\">let<\/span> fetchRequest<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">NSFetchRequest<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">BookmarkMO<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token operator\">=<\/span> <span class=\"token builtin\">BookmarkMO<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">fetchRequest<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>We&rsquo;ll also set a <strong>NSSortDescriptor<\/strong> to order our results in a particular order. We want to sort them by the <strong>contentId<\/strong> property in an ascending order so let&rsquo;s set that up <\/p><pre><code class=\"language-swift\">fetchRequest<span class=\"token punctuation\">.<\/span>sortDescriptors <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token function\">NSSortDescriptor<\/span><span class=\"token punctuation\">(<\/span>key<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;contentId&quot;<\/span><span class=\"token punctuation\">,<\/span> ascending<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">]<\/span><br><\/code><\/pre><p>Then, we&rsquo;ll create the <em>fetchedResultController<\/em> as a new property which later will be assigned to our <strong>BookmarkViewController&rsquo;s<\/strong> <em>fetchedResultController<\/em>. We&rsquo;ll use the <em>NSFetchedResultController(fetchRequest: , managedObjectContext: , sectionNameKeyPath: , cacheName: )<\/em> initializer given that we already have a <em>fetchRequest<\/em> object and a <em>managedContext<\/em> object. We&rsquo;ll leave <em>sectionNameKeyPath<\/em> and <em>cacheName<\/em> as nil for now.<\/p><pre><code class=\"language-swift\">    <span class=\"token keyword\">let<\/span> fetchedResultsController <span class=\"token operator\">=<\/span> <span class=\"token function\">NSFetchedResultsController<\/span><span class=\"token punctuation\">(<\/span>fetchRequest<span class=\"token punctuation\">:<\/span> fetchRequest<span class=\"token punctuation\">,<\/span><br>                                                              managedObjectContext<span class=\"token punctuation\">:<\/span> managedContext<span class=\"token punctuation\">,<\/span><br>                                                              sectionNameKeyPath<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">,<\/span><br>                                                              cacheName<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Finally, we&rsquo;ll return the newly created <em>fetchedResultController<\/em> that will be assigned to our <strong>BookmarkTableViewController<\/strong> property and close the closure.<\/p><pre><code class=\"language-swift\">    <span class=\"token keyword\">return<\/span> fetchedResultsController<br><span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-core-data-setup"},{"id":"12471","section_id":"136","order":"11","title":"","subhead":"Displaying results in our table","body":"<p>Now it&rsquo;s time to put our <strong>NSFetchedResultController<\/strong> into work. Luckily, our setup is enough for the <em>fetchedResultController<\/em> to perform its work and we only have to call its <em>performFetch() throws<\/em> function. That&rsquo;s it, just like magic all of our <strong>Core Data<\/strong> objects that comply with the <em>fetchedResultController<\/em> setup parameters are automatically fetched. <\/p><p>We want to check whether we have items or not so we&rsquo;ll encapsulate this in a function. And the <em>performFetch()<\/em> inside a <strong>do try catch<\/strong> block. <\/p><pre><code class=\"language-swift\">    <span class=\"token keyword\">func<\/span> <span class=\"token function\">loadBookmarks<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">do<\/span> <span class=\"token punctuation\">{<\/span><br>            <span class=\"token keyword\">try<\/span> fetchedResultsController<span class=\"token punctuation\">.<\/span><span class=\"token function\">performFetch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">catch<\/span> <span class=\"token punctuation\">{<\/span><br>            <span class=\"token comment\">\/\/ Handle error<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This will fetch our objects and have them loaded into our <em>fetchedResultController<\/em> object for us to use when needed for example when returning the amount of cells we should have. We&rsquo;ll use the <em>fetchedObjects<\/em> property which holds the objects fetched previously:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">tableView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> tableView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UITableView<\/span><span class=\"token punctuation\">,<\/span> numberOfRowsInSection section<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">return<\/span> fetchedResultsController<span class=\"token punctuation\">.<\/span>fetchedObjects<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token builtin\">count<\/span> <span class=\"token operator\">?<\/span><span class=\"token operator\">?<\/span> <span class=\"token number\">0<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Finally, we&rsquo;ll access our fetched objects in the <em>cellForRowAt(indexPath:)<\/em> <strong>UITableViewDataSource<\/strong> method. We&rsquo;ll use our <em>fetchedResultsController&rsquo;s<\/em> <em>object(at: IndexPath)<\/em> function which will return the bookmark object for the corresponding index. We&rsquo;ll use what you learned in the <strong>Table View Controller<\/strong> section to retrieve an instance of a <strong>UITableViewCell<\/strong> and configure it with our bookmark object.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">tableView<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> tableView<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UITableView<\/span><span class=\"token punctuation\">,<\/span> cellForRowAt indexPath<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">IndexPath<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">UITableViewCell<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">let<\/span> cell <span class=\"token operator\">=<\/span> tableView<span class=\"token punctuation\">.<\/span><span class=\"token function\">dequeueReusableCell<\/span><span class=\"token punctuation\">(<\/span>withIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;bookmarkCell&quot;<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">!<\/span> <span class=\"token builtin\">BookmarkCell<\/span><br>        <span class=\"token keyword\">let<\/span> bookmark <span class=\"token operator\">=<\/span> fetchedResultsController<span class=\"token punctuation\">.<\/span><span class=\"token function\">object<\/span><span class=\"token punctuation\">(<\/span>at<span class=\"token punctuation\">:<\/span> indexPath<span class=\"token punctuation\">)<\/span><br>        cell<span class=\"token punctuation\">.<\/span><span class=\"token function\">configure<\/span><span class=\"token punctuation\">(<\/span>bookmark<span class=\"token punctuation\">:<\/span> bookmark<span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">return<\/span> cell<span class=\"token operator\">!<\/span><br>    <span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-core-data-displaying-results-in-our-table"},{"id":"12472","section_id":"136","order":"12","title":"Conclusion","subhead":"","body":"<p>Now you&rsquo;re able to create your own <strong>NSManagedObject<\/strong> subclasses with their corresponding attributes and relationships and persist them in <strong>Core Data<\/strong> giving your users a far more engaging experience as everything they store in your app will be there when they come back to it. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-core-data-conclusion"},{"id":"12473","section_id":"136","order":"13","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/marcosgriselli\">Marcos Griselli<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-core-data-credit"}]},{"id":"137","chapter_id":"4","order":"140","slug":"swift4-realm","title":"Realm","caption":"A simpler, cross-platform database","body":"<p>In the previous section, we looked into Apple&apos;s persistence framework called Core Data. In this chapter, we&apos;ll dive into other solution for adding a local persistence to our apps called Realm. <a href=\"https:\/\/realm.io\/products\/realm-database\">Realm Database<\/a> is an alternative to Core Data. The Realm Database is a full-featured, object-oriented, cross-platform database that persists data locally on a device. It was built from the ground up to run directly inside phones, tablets, and wearables. It&apos;s available for major mobile languages which provides a significant advantage against other solutions if we plan on supporting multiple platforms. Its lightweight and highly performant, capable of handling substantial data loads and running queries in fractions of a second. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-realm.jpg","video":"","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-realm.zip","contents":[{"id":"11542","section_id":"137","order":"1","title":"Characteristics","subhead":"","body":"<p><strong>Simple<\/strong>: Data is directly exposed as objects and queryable by code, removing the need for ORM&apos;s riddled with performance &amp; maintenance issues. Most of our users pick it up intuitively, getting simple apps up &amp; running in minutes.<\/p><p><strong>Modern<\/strong>: Realm supports relationships, generics, vectorization, and Swift.<\/p><p><strong>Fast<\/strong>: Realm is more rapid than even raw SQLite on common operations while maintaining a rich feature set.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-characteristics"},{"id":"11543","section_id":"137","order":"2","title":"Installation","subhead":"","body":"<p>To integrate Realm into our Xcode project, we&apos;ll use what we learned in our Cocoapods section so for this part we&apos;ll assume you&apos;re familiar with Cocoapods and how to install dependencies.<\/p><p>Add the Realm pod dependency to your Podfile <\/p><pre><code class=\"language-swift\">pod <span class=\"token string\">&apos;RealmSwift&apos;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">&apos;3.0.2&apos;<\/span>  <br><\/code><\/pre><p>and install your pods. This action will integrate <strong><a href=\"https:\/\/cocoapods.org\/pods\/Realm\">Realm<\/a><\/strong> and <strong><a href=\"https:\/\/cocoapods.org\/pods\/RealmSwift\">RealmSwift<\/a><\/strong> to our project via Cocoapods .<\/p><p>You can also integrate manually via <strong>Dynamic Frameworks<\/strong>; you can read more about it in Realm&apos;s <a href=\"https:\/\/realm.io\/docs\/swift\/latest\/#installation\">installation documents<\/a>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-installation"},{"id":"11544","section_id":"137","order":"3","title":"Creating our models","subhead":"","body":"<p>Realm data models are defined as regular Swift classes with regular properties. To create one, just subclass <strong>Object<\/strong>. Realm model objects mostly function like any other Swift objects. You can define your own methods on them, conform them to protocols, and use them like you would any other object. The main restriction is that you can only use an object on the thread which it was created.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-creating-our-models"},{"id":"11545","section_id":"137","order":"4","title":"","subhead":"Properties Types","body":"<p>Realm Database supports the following property types: <strong>Bool<\/strong>, <strong>Int<\/strong>, <strong>Int8<\/strong>, <strong>Int16<\/strong>, <strong>Int32<\/strong>, <strong>Int64<\/strong>, <strong>Double<\/strong>, <strong>Float<\/strong>, <strong>String<\/strong>, <strong>Date<\/strong>, and <strong>Data<\/strong>.<\/p><p><strong>String<\/strong>, <strong>Date<\/strong> and <strong>Data<\/strong> properties can be optional. <strong>Object<\/strong> properties must be optional. Storing optional numbers is done using RealmOptional.<\/p><p>With this, we&apos;re able to create our initial structure for our <strong>User<\/strong> object. Start by creating a User.swift file and importing <strong>RealmSwift<\/strong> with <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">RealmSwift<\/span> <br><\/code><\/pre><p>at the top of our file. We&apos;ll then create a <strong>User<\/strong> class which subclasses form <strong>Object<\/strong><\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">User<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Object<\/span>  <span class=\"token punctuation\">{<\/span><br><\/code><\/pre><p>We&apos;ll then add our initial properties <\/p><pre><code class=\"language-swift\"><span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">dynamic<\/span> <span class=\"token keyword\">var<\/span> id<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br><span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">dynamic<\/span> <span class=\"token keyword\">var<\/span> name<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;&quot;<\/span><br><span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">dynamic<\/span> <span class=\"token keyword\">var<\/span> email<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;&quot;<\/span><br><span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">dynamic<\/span> <span class=\"token keyword\">let<\/span> endDate<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Date<\/span><span class=\"token operator\">?<\/span> <span class=\"token operator\">=<\/span> <span class=\"token constant\">nil<\/span><br><\/code><\/pre><p>The properties so far are self-explanatory except for endDate, we&apos;ll use it to evaluate if the user is still in a valid subscriber plan to access specific content. <\/p><p>You might have noticed that all our properties have the <strong>@objc dynamic<\/strong> attribute, we&apos;ll explain the reason for this in the upcoming part.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Realm_User.png","image_width":"1600","image_height":"979","video":"","bookmark_id":"swift4-realm-properties-types"},{"id":"11546","section_id":"137","order":"5","title":"","subhead":"Dynamic attribute","body":"<p>Realm model properties need the <strong>@objc dynamic var<\/strong> attribute for them to become accessors for the underlying database data.<\/p><p>The Apple&apos;s <a href=\"https:\/\/developer.apple.com\/library\/content\/documentation\/Swift\/Conceptual\/Swift_Programming_Language\/index.html\">Swift Programming Language<\/a> describes the <strong>dynamic<\/strong> modifier usage as:<\/p><p><em>&#x201D;Apply this modifier to any member of a class that can be represented by Objective-C. When you mark a member declaration with the dynamic modifier, access to that member is always dynamically dispatched using the Objective-C runtime. Access to that member is never inlined or devirtualized by the compiler.<\/em><\/p><p><em>Because declarations marked with the dynamic modifier are dispatched using the Objective-C runtime, they must be marked with the <strong>@objc<\/strong> attribute.&#x201D;<\/em><\/p><p>There are two exceptions to this: <strong>List<\/strong> and <strong>RealmOptional<\/strong> properties cannot be declared as dynamic because generic properties cannot be represented in the Objective-C runtime.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-dynamic-attribute"},{"id":"11547","section_id":"137","order":"6","title":"","subhead":"Primary Keys","body":"<p>Primary Keys are used to looking up objects and force a unique value on this property for every object. This primary key value cannot be changed once it&apos;s added to a Realm.<\/p><p>To define a primary key in our object we&apos;ll override the <em>static func primaryKey() -&gt; String?<\/em>. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">static<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">primaryKey<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">String<\/span><span class=\"token operator\">?<\/span> <span class=\"token punctuation\">{<\/span><br>   <span class=\"token keyword\">return<\/span> <span class=\"token string\">&quot;id&quot;<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-primary-keys"},{"id":"11548","section_id":"137","order":"7","title":"","subhead":"Relationships","body":"<p>Defining relationships in Realm is one of the reasons why using Realm Database is so simple. They are easy to write and inexpensive with regards memory and performance. <\/p><p>To support <strong>one-to-one<\/strong> or <strong>many-to-one<\/strong> relationships just add a property of type of the <strong>Object<\/strong> to relate to. <\/p><p>As our <strong>User<\/strong> model doesn&apos;t count with any relationship of this kind, we&apos;ll mock a <strong>Section<\/strong> definition to relate with a mock implementation of <strong>Chapter<\/strong>. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">Chapter<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Object<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">dynamic<\/span> <span class=\"token keyword\">var<\/span> id<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>    <span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">dynamic<\/span> <span class=\"token keyword\">var<\/span> title<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;&quot;<\/span><br>    <span class=\"token keyword\">let<\/span> sections <span class=\"token operator\">=<\/span> <span class=\"token builtin\">List<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Section<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><br><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">Section<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Object<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">dynamic<\/span> <span class=\"token keyword\">var<\/span> id<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span> <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br>    <span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">dynamic<\/span> <span class=\"token keyword\">var<\/span> title<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;&quot;<\/span><br>    <span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">dynamic<\/span> <span class=\"token keyword\">var<\/span> body<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;&quot;<\/span><br>    <span class=\"token atrule\">@objc<\/span> <span class=\"token keyword\">dynamic<\/span> <span class=\"token keyword\">var<\/span> chapter<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Chapter<\/span><span class=\"token operator\">?<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>To define a <strong>many-to-many<\/strong> relationship, we&apos;ll use a <strong>List<\/strong> property containing objects or supported primitive data types.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> sections <span class=\"token operator\">=<\/span> <span class=\"token builtin\">List<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Section<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/swift4\/Realm_Relationships.png","image_width":"1600","image_height":"979","video":"","bookmark_id":"swift4-realm-relationships"},{"id":"11549","section_id":"137","order":"8","title":"Database Transactions","subhead":"","body":"<p>Realm objects can be initialized and used just as regular Swift objects. We must add this objects to a Realm if we want them to persist through threads and app launches. All objects operations (write, delete, modify) must be done within a write transaction. These transactions might fail so both <em>Realm.write()<\/em> and <em>Realm.commitWrite()<\/em> are marked as <em>throws<\/em>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-database-transactions"},{"id":"11550","section_id":"137","order":"9","title":"","subhead":"Write","body":"<p>Up until the moment of storing our objects in the Realm Database, we can use them with no special setup. For example creating a <strong>User<\/strong> object would look like this: <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> user <span class=\"token operator\">=<\/span> <span class=\"token function\">User<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>user<span class=\"token punctuation\">.<\/span>id <span class=\"token operator\">=<\/span> <span class=\"token number\">1<\/span><br>user<span class=\"token punctuation\">.<\/span>name <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;User Name&quot;<\/span><br>user<span class=\"token punctuation\">.<\/span>email <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;user@designcode.io&quot;<\/span><br><\/code><\/pre><p>Nothing different from creating regular Swift objects. There are other ways of creating Realm Object subclasses which we won&apos;t dive into. You can read more about them in the <a href=\"[https:\/\/realm.io\/docs\/swift\/latest\/#writes]\">Realm documentation<\/a><\/p><p>When the time comes to store our object in the Realm database, we need to do it inside a write transaction. So we&apos;ll get the default realm calling <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> realm <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span><span class=\"token operator\">!<\/span> <span class=\"token function\">Realm<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>And then we&apos;ll add our object to this realm inside a write transaction <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">try<\/span><span class=\"token operator\">!<\/span> realm<span class=\"token punctuation\">.<\/span>write <span class=\"token punctuation\">{<\/span><br>   realm<span class=\"token punctuation\">.<\/span><span class=\"token function\">add<\/span><span class=\"token punctuation\">(<\/span>user<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>From this point on if we want to modify properties of our <strong>user<\/strong> object, we must do it inside a write transaction. For example <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">try<\/span><span class=\"token operator\">!<\/span> realm<span class=\"token punctuation\">.<\/span>write <span class=\"token punctuation\">{<\/span><br>   user<span class=\"token punctuation\">.<\/span>email <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;new@designcode.io&quot;<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-write"},{"id":"11551","section_id":"137","order":"10","title":"","subhead":"Updates","body":"<p>For objects containing a primary key, Realm is smart enough to know when to add an object to a database versus when to update an already existing object. This allows us to write less boilerplate code for pre-checking if an object with that id already exists on the database. <\/p><p>Using our same <strong>User<\/strong> example, we would set up the properties and add it to the default realm in a write transaction. We&apos;ll set the <em>update<\/em> parameter of the <em>add<\/em> function to <em>true<\/em>, so if an object with that primary key already exists, the database it will only update it otherwise it will create a new entry. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">try<\/span><span class=\"token operator\">!<\/span> realm<span class=\"token punctuation\">.<\/span>write <span class=\"token punctuation\">{<\/span><br>   realm<span class=\"token punctuation\">.<\/span><span class=\"token function\">add<\/span><span class=\"token punctuation\">(<\/span>user<span class=\"token punctuation\">,<\/span> update<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-updates"},{"id":"11552","section_id":"137","order":"11","title":"","subhead":"Delete","body":"<p>As we mentioned earlier, all database operations go through a write transaction. Deleting an object from the Realm database follows the same structure as adding or editing. We get the object and then call the operation inside the transaction block. <\/p><p>The difference for deleting an object is that we must get the instance of an object already stored in the database. We&apos;ll explain more about fetching objects stored in realm and querying. But for now, we&apos;ll just assume we fetched the desired object.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/let user = perform fetch operation from realm.<\/span><br><span class=\"token keyword\">let<\/span> realm <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span><span class=\"token operator\">!<\/span> <span class=\"token function\">Realm<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">try<\/span> realm<span class=\"token punctuation\">.<\/span>write <span class=\"token punctuation\">{<\/span><br>   realm<span class=\"token punctuation\">.<\/span><span class=\"token function\">delete<\/span><span class=\"token punctuation\">(<\/span>user<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">catch<\/span> <span class=\"token punctuation\">{<\/span><br>   <span class=\"token comment\">\/\/Errors might be thrown so we have to handle them.<\/span><br>   <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span>error<span class=\"token punctuation\">.<\/span>localizedDescription<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-delete"},{"id":"11553","section_id":"137","order":"12","title":"Queries","subhead":"","body":"<p>Queries return a <strong>Results<\/strong> instance, which contains a collection of <strong>Objects<\/strong> of a single subclass type. <strong>Results<\/strong> collection work in a similar way as Arrays and its objects are accessed via subscripting. <\/p><p>The most basic query <em>Realm.objects(<\/em>:) which returns a Results of all objects of the type being passed in the function. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> realm <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span><span class=\"token operator\">!<\/span> <span class=\"token function\">Realm<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> allUsers <span class=\"token operator\">=<\/span> realm<span class=\"token punctuation\">.<\/span><span class=\"token function\">objects<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">User<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-queries"},{"id":"11554","section_id":"137","order":"13","title":"","subhead":"Filtering","body":"<p>There are two ways to filter a Realm query. Via <strong><a href=\"https:\/\/developer.apple.com\/documentation\/foundation\/nspredicate\">NSPredicate<\/a><\/strong> or using a predicate string. <\/p><p>We&apos;ll filter users who have registered with their <em>designcode.io<\/em> email using a predicate string.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> teamUsers <span class=\"token operator\">=<\/span> realm<span class=\"token punctuation\">.<\/span><span class=\"token function\">objects<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">User<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">filter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;email ENDSWITH &apos;@designcode.io&apos;&quot;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>If you&apos;re already familiar with <strong>NSPredicate<\/strong> you might find this approach easier to implement. We&apos;ll just create our <strong>NSPredicate<\/strong> with a format value and pass it to the <em>filter<\/em> function as a parameter.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> predicate <span class=\"token operator\">=<\/span> <span class=\"token function\">NSPredicate<\/span><span class=\"token punctuation\">(<\/span>format<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;email ENDSWITH %@&quot;<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token string\">&quot;@designcode.io&quot;<\/span><span class=\"token punctuation\">)<\/span><br>teamUsers <span class=\"token operator\">=<\/span> realm<span class=\"token punctuation\">.<\/span><span class=\"token function\">objects<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">User<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">filter<\/span><span class=\"token punctuation\">(<\/span>predicate<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-filtering"},{"id":"11555","section_id":"137","order":"14","title":"","subhead":"Sorting","body":"<p>Results allow you to specify sorting criteria for the query you are running. It can be based on a key path, property or a combination of sort descriptors. <\/p><p>We&apos;ll use the previous query with a string predicate to add the sorting criteria. This will bring the same objects in a Results collection as before but sorted by their <em>name<\/em> property.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> teamUsers <span class=\"token operator\">=<\/span> realm<span class=\"token punctuation\">.<\/span><span class=\"token function\">objects<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">User<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">filter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;email ENDSWITH &apos;@designcode.io&apos;&quot;<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">sorted<\/span><span class=\"token punctuation\">(<\/span>byKeyPath<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;name&quot;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-sorting"},{"id":"11556","section_id":"137","order":"15","title":"","subhead":"Chaining Queries","body":"<p>We might need to use both the filtered and unfiltered data in our app so it would be useful to be able to chain the queries as we need them to avoid rebuilding a complex query. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> users <span class=\"token operator\">=<\/span> realm<span class=\"token punctuation\">.<\/span><span class=\"token function\">objects<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">User<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> teamUsers <span class=\"token operator\">=<\/span> users<span class=\"token punctuation\">.<\/span><span class=\"token function\">filter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;email ENDSWITH &apos;@designcode.io&apos;&quot;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-chaining-queries"},{"id":"11557","section_id":"137","order":"16","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/marcosgriselli\">Marcos Griselli<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-realm-credit"}]},{"id":"142","chapter_id":"4","order":"141","slug":"swift4-networking","title":"Networking","caption":"Loading Images and HTML content asynchronously","body":"<p>An important part of our app is to show images, and we use them on almost every screen. On this section, you&apos;ll learn how to download and display images asynchronously from the network. This extends our images support as we&apos;re no longer tied to the images loaded into our <strong>Assets.xcassets<\/strong>. You&apos;ll also learn how to work with the Kingfisher library to support caching images to avoid re-downloading every time we need to show them. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-networking.jpg","video":"","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-networking.zip","contents":[{"id":"11485","section_id":"142","order":"1","title":"URL","subhead":"","body":"<p>The starting point of getting images from the network is making sure their <strong>URL<\/strong> is valid. We&apos;ll be using the <a href=\"[https:\/\/designcode.io\/cloud\/ios11\/iOS-Evolution.jpg]\">first image<\/a> from the <strong>Learn iOS 11<\/strong> section of Chapter 1. This is the URL:<\/p><pre><code class=\"language-swift\">https<span class=\"token punctuation\">:<\/span><span class=\"token operator\">\/<\/span><span class=\"token operator\">\/<\/span>designcode<span class=\"token punctuation\">.<\/span>io<span class=\"token operator\">\/<\/span>cloud<span class=\"token operator\">\/<\/span>ios11<span class=\"token operator\">\/<\/span>iOS<span class=\"token operator\">-<\/span><span class=\"token builtin\">Evolution<\/span><span class=\"token punctuation\">.<\/span>jpg<br><\/code><\/pre><p>A quick note on secure connections: If your images <strong>URL<\/strong> is not <em>https<\/em> you&apos;ll have to add your domain to the <strong>App Transport Security<\/strong> dictionary in the <strong>.plist<\/strong> file. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-networking-url"},{"id":"11486","section_id":"142","order":"2","title":"","subhead":"Loading the Data","body":"<p><strong>URL<\/strong> struct comes with an optional initializer that takes a string as a parameter. The string is the representation of the URL to load. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> stringURL <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;https:\/\/designcode.io\/cloud\/ios11\/iOS-Evolution.jpg&quot;<\/span><br><span class=\"token keyword\">let<\/span> imageURL <span class=\"token operator\">=<\/span> <span class=\"token function\">URL<\/span><span class=\"token punctuation\">(<\/span>string<span class=\"token punctuation\">:<\/span> stringURL<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre><p>Note that a lot of code snippets online use the <strong>Data<\/strong> struct initializer <em>Data(contentsOf: )<\/em> but Apple recommends against this when making network requests.<\/p><p>Instead, we&apos;ll perform a network request using <strong>URLSession<\/strong><\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">URLSession<\/span><span class=\"token punctuation\">.<\/span>shared<span class=\"token punctuation\">.<\/span><span class=\"token function\">dataTask<\/span><span class=\"token punctuation\">(<\/span>with<span class=\"token punctuation\">:<\/span> imageURL<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> data<span class=\"token punctuation\">,<\/span> response<span class=\"token punctuation\">,<\/span> error <span class=\"token keyword\">in<\/span><br>   <span class=\"token comment\">\/\/Our code<\/span><br><span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">resume<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Inside the <strong>URLSession<\/strong> <em>dataTask<\/em> completion block, we&apos;ll initialize our <strong>UIImage<\/strong> with the data we just got from the <strong>URL<\/strong><\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> data <span class=\"token operator\">=<\/span> data <span class=\"token punctuation\">{<\/span><br>   <span class=\"token keyword\">let<\/span> image <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImage<\/span><span class=\"token punctuation\">(<\/span>data<span class=\"token punctuation\">:<\/span> data<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>We&apos;re ready to use our <strong>UIImage<\/strong> inside a <strong>UIImageView<\/strong> or edit it in any way we need before displaying to the user.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Image_load_background.png","image_width":"1600","image_height":"972","video":"","bookmark_id":"swift4-networking-loading-the-data"},{"id":"11487","section_id":"142","order":"3","title":"","subhead":"Load Asynchronously","body":"<p>This approach even though is simple it has one issue. <strong>URLSession<\/strong> <em>dataTask<\/em> function runs on a thread other than the <strong>main thread<\/strong> which is only used for performing UI changes. So if we set our imageView property outside of the main thread we might encounter some undesired functionality.<br><\/p><p>As of Xcode 9, the compiler checks if we&apos;re performing UI changes outside of the main thread and raises a warning. This is called <strong>Main Thread Checker<\/strong>. The warning has a message of this kind: <\/p><p><em>&quot;UI API called from background thread: UIImageView.image must be used from main thread only&quot;<\/em><\/p><p>We&apos;ll need to make sure we&apos;re performing UI changes inside the main thread, so we&apos;ll set the <strong>UIImageView<\/strong> <em>image<\/em> property inside the main thread <strong>DispatchQueue<\/strong> <em>async block<\/em><\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">DispatchQueue<\/span><span class=\"token punctuation\">.<\/span>main<span class=\"token punctuation\">.<\/span>async <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">self<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>imageView<span class=\"token punctuation\">.<\/span>image <span class=\"token operator\">=<\/span> image<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>We&apos;ll use <a href=\"\">weak self<\/a> to reference our <em>imageView<\/em> as we don&apos;t want to have a retain cycle on the <strong>UIViewController<\/strong> when we leave it and the network request is still fetching data.<\/p><p>Our <em>loadImage()<\/em> sample code will look like this<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Image_load.png","image_width":"1600","image_height":"972","video":"","bookmark_id":"swift4-networking-load-asynchronously"},{"id":"11488","section_id":"142","order":"4","title":"","subhead":"Using an extension","body":"<p>Loading images from a URL is a common task. And even though the code to make it work is not that big, we want to follow the DRY principle (Don&apos;t Repeat Yourself). For this, we&apos;ll create an extension that handles the image download from the <strong>UIImageView directly<\/strong>.<\/p><p>Create a new Swift file called <strong>UIImage + URL<\/strong><\/p><p>To start with, we&apos;ll take into account the possible errors we might encounter. At this stage, we only lead with possible invalid URLs and errors returning from the network. So we&apos;ll create an Error enum<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">enum<\/span> <span class=\"token builtin\">ImageDownloadError<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Error<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">case<\/span> invalidURL<br>    <span class=\"token keyword\">case<\/span> <span class=\"token function\">custom<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">Error<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Then we&rsquo;ll use a <strong>typealias<\/strong> for the error handler<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">typealias<\/span> <span class=\"token builtin\">ImageDownloadErrorHandler<\/span> <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">ImageDownloadError<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Void<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Inside our <strong>UIImageView<\/strong> extension we&rsquo;ll create a <em>load(url: , onError: ) -&gt; URLSessionTask?<\/em> method. It&rsquo;s result is discardable as we might not need to access the session task. <\/p><pre><code class=\"language-swift\">@discardableResult<br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">load<\/span><span class=\"token punctuation\">(<\/span>url<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">URL<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">,<\/span> onError<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">ImageDownloadErrorHandler<\/span><span class=\"token operator\">?<\/span> <span class=\"token operator\">=<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">URLSessionTask<\/span><span class=\"token operator\">?<\/span><br><\/code><\/pre><p>Inside our method we&rsquo;ll validate the <em>url<\/em> from the parameters and if it&rsquo;s nil return early handling the corresponding error. <\/p><pre><code class=\"language-swift\">    <span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">let<\/span> url <span class=\"token operator\">=<\/span> url <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span><br>       onError<span class=\"token operator\">?<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">ImageDownloadError<\/span><span class=\"token punctuation\">.<\/span>invalidURL<span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">return<\/span> <span class=\"token constant\">nil<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Then, we&rsquo;ll create our <em>task<\/em> object from the <em>shared<\/em> <strong>URLSession&rsquo;s<\/strong> <em>dataTask(with: URL)<\/em>. This method comes with a <strong>(Data?, URLResponse?, Error?) -&gt; Swift.Void)<\/strong> completion handler.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> task <span class=\"token operator\">=<\/span> <span class=\"token builtin\">URLSession<\/span><span class=\"token punctuation\">.<\/span>shared<span class=\"token punctuation\">.<\/span><span class=\"token function\">dataTask<\/span><span class=\"token punctuation\">(<\/span>with<span class=\"token punctuation\">:<\/span> url<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> data<span class=\"token punctuation\">,<\/span> <span class=\"token number\">_<\/span><span class=\"token punctuation\">,<\/span> error <span class=\"token keyword\">in<\/span><br><\/code><\/pre><p>Inside this completion handler we&rsquo;ll evaluate if an error exists and execute our <em>onError<\/em> handler<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> error <span class=\"token operator\">=<\/span> error <span class=\"token punctuation\">{<\/span><br>      onError<span class=\"token operator\">?<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">ImageDownloadError<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">custom<\/span><span class=\"token punctuation\">(<\/span>error<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>If there&rsquo;s no error we&rsquo;re able to get the data as an image the same way we did before<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> data <span class=\"token operator\">=<\/span> data <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> image <span class=\"token operator\">=<\/span> <span class=\"token function\">UIImage<\/span><span class=\"token punctuation\">(<\/span>data<span class=\"token punctuation\">:<\/span> data<span class=\"token punctuation\">)<\/span><br>    <span class=\"token builtin\">DispatchQueue<\/span><span class=\"token punctuation\">.<\/span>main<span class=\"token punctuation\">.<\/span>async <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>image <span class=\"token operator\">=<\/span> image<br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Finally we&rsquo;ll <em>resume()<\/em> the task and return it <\/p><pre><code class=\"language-swift\">task<span class=\"token punctuation\">.<\/span><span class=\"token function\">resume<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">return<\/span> task<br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Now calling our extension is really simple and provide us with flexibility to access the <strong>&#xA0;URLSessionTask<\/strong> as well as distinguish the error that might happen. Our code in the ViewController will look like this. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-networking-using-an-extension"},{"id":"11489","section_id":"142","order":"5","title":"Caching","subhead":"","body":"<p>One important aspect of loading images from the network is doing it effectively. This means download only what&rsquo;s necessary in order to display content as fast as possible and to avoid consuming the user&rsquo;s data if he&rsquo;s not connected to wifi. <\/p><p>Caching is the process of storing data in temporary storage area. This is useful for us as the previous approach downloads the same image every time the app is launched with is not very efficient. <\/p><p>Writing our own cache implementation is not a trivial task. Its also not that complicated but there&rsquo;s no point in reinventing the wheel. So we&rsquo;ll using <a href=\"https:\/\/github.com\/onevcat\/Kingfisher\">Kingfisher<\/a> library to support downloading and caching.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-networking-caching"},{"id":"11490","section_id":"142","order":"6","title":"","subhead":"Kingfisher","body":"<p>Kingfisher comes with a big set of features, we&rsquo;ll be focusing on downloading + caching for this part. <\/p><p>We&rsquo;ll install Kingfisher via Cocoapods <\/p><pre><code class=\"language-swift\">pod <span class=\"token string\">&apos;Kingfisher&apos;<\/span><br><\/code><\/pre><p>Kingfisher extends some of <strong>UIKit<\/strong> elements, <strong>UIImageView<\/strong>,<strong>UIButton<\/strong> and <strong>UIImage<\/strong> which are the ones that handle images. At its <a href=\"https:\/\/github.com\/onevcat\/Kingfisher\/blob\/master\/Sources\/Kingfisher.swift\">core<\/a> it defines a <strong>KingfisherCompatible<\/strong> <strong>protocol<\/strong> where the elements that conform to that protocol get an computed <strong>var<\/strong> <strong>kf: Kingfisher&lt;KingfisherCompatible&gt;<\/strong> property which allows them to call Kingfisher methods and act accordingly to its purpose.<\/p><p>It also defines a <strong>Resource<\/strong> <strong>protocol<\/strong> which URL conforms to. We&rsquo;ll be using this <strong>Resource<\/strong> protocol to load our urls. <\/p><p>There&rsquo;s a lot more functionality behind the scenes but with these concepts you get the basic idea of what its happening. <\/p><p>Starting to use Kingfisher is as simple as calling <em>kf<\/em> property and its method <em>setImage(with: Resource)<\/em> from a type object that conforms to <strong>&#xA0;KingfisherCompatible<\/strong>.<\/p><pre><code class=\"language-swift\">imageView<span class=\"token punctuation\">.<\/span>kf<span class=\"token punctuation\">.<\/span><span class=\"token function\">setImage<\/span><span class=\"token punctuation\">(<\/span>with<span class=\"token punctuation\">:<\/span> imageURL<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>That&rsquo;s it. Kingfisher will store the image downloaded into cache to use whenever you need to display the image again. That is the basic functionality to display an image. <\/p><p>That method is just a part of a method with more parameters (which include default values) in Kingfisher which let us do much more <\/p><pre><code class=\"language-swift\">    @discardableResult<br>    <span class=\"token keyword\">public<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">setImage<\/span><span class=\"token punctuation\">(<\/span>with resource<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Resource<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">,<\/span><br>                         placeholder<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Placeholder<\/span><span class=\"token operator\">?<\/span> <span class=\"token operator\">=<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">,<\/span><br>                         options<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">KingfisherOptionsInfo<\/span><span class=\"token operator\">?<\/span> <span class=\"token operator\">=<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">,<\/span><br>                         progressBlock<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">DownloadProgressBlock<\/span><span class=\"token operator\">?<\/span> <span class=\"token operator\">=<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">,<\/span><br>                         completionHandler<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CompletionHandler<\/span><span class=\"token operator\">?<\/span> <span class=\"token operator\">=<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">RetrieveImageTask<\/span><br><\/code><\/pre><p>With this method we&rsquo;re able to define an image placeholder while loading the app, setup options like animations, display progress and perform actions at the completion.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-networking-kingfisher"},{"id":"11491","section_id":"142","order":"7","title":"Working with HTML","subhead":"","body":"<p>Usually when we want to display formatted content from a website we chose to handle it with HTML, because creating an <strong>NSAttributedString<\/strong> out of HTML content maintains all of the styles and let us add additional CSS options to style our texts. There are multiple ways to parse HTML content. We&rsquo;ve decided to work with <strong><a href=\"https:\/\/developer.apple.com\/documentation\/uikit\/nsattributedstring.documentreadingoptionkey\">NSAttributedString.DocumentReadingOptionKey<\/a><\/strong> <strong><a href=\"https:\/\/developer.apple.com\/documentation\/uikit\/nsattributedstring.documenttype\">NSAttributedString.DocumentType.html<\/a><\/strong> which not only is a simple task but it also supports most HTML tags. Parsing can also be done manually working with <a href=\"https:\/\/developer.apple.com\/documentation\/foundation\/scanner\">Scanner<\/a> but that would require you know previously all the tags that are being used by your content (or will be used in the future if your app can pull new content from a service). Or to account for every common tag manually which can be an overkill. There are also third party libraries that tackle this issue but we won&rsquo;t be focusing on any of them. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-networking-working-with-html"},{"id":"11492","section_id":"142","order":"8","title":"","subhead":"NSAttributedString from HTML","body":"<p>As we mentioned we&rsquo;ll be working with <strong>NSAttributedString.DocumentReadingOptionKey<\/strong> <em>documentType<\/em> and we&rsquo;ll select <strong>.html<\/strong>. As all our content is stored as <strong>String<\/strong> in our local <strong>Realm<\/strong> database, we&rsquo;ll write a <strong>String<\/strong> extension that handles the <strong>NSAttributedString<\/strong> creation <\/p><p>Start by declaring a <strong>String<\/strong> <strong>extension<\/strong> on a new Swift file. We&rsquo;ll call our computed property <em>htmlToAttributedString<\/em> which will return an optional <strong>NSAttributedString<\/strong><\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">var<\/span> htmlToAttributedString<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">NSAttributedString<\/span><span class=\"token operator\">?<\/span> <span class=\"token punctuation\">{<\/span><br><\/code><\/pre><p>We&rsquo;ll evaluate if we can get the <strong>Data<\/strong> of our extended string using <strong>String.Encoding.utf8<\/strong> otherwise we&rsquo;ll return nil<\/p><pre><code class=\"language-swift\">        <span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">let<\/span> data <span class=\"token operator\">=<\/span> <span class=\"token function\">data<\/span><span class=\"token punctuation\">(<\/span>using<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>utf8<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token constant\">nil<\/span> <span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Inside a <em>do-try catch<\/em> block we&rsquo;ll return our <strong>NSAttributedString<\/strong> using its <em>init(data: Data, options: [NSAttributedString.DocumentReadingOptionKey : Any], documentAttributes: AutoreleasingUnsafeMutablePointer&lt;NSDictionary?&gt;?) throws<\/em> initializer marked with a <strong>try<\/strong>. We&rsquo;ll use the <strong>.DocumentReadingOptionKey<\/strong> options <strong>.documentType<\/strong> <strong>&#xA0;NSAttributedString.DocumentType.html<\/strong> and the <strong>.characterEncoding<\/strong> <strong>String.Encoding.utf8<\/strong>. <\/p><pre><code class=\"language-swift\">        <span class=\"token keyword\">do<\/span> <span class=\"token punctuation\">{<\/span><br>            <span class=\"token keyword\">return<\/span> <span class=\"token keyword\">try<\/span> <span class=\"token function\">NSAttributedString<\/span><span class=\"token punctuation\">(<\/span>data<span class=\"token punctuation\">:<\/span> data<span class=\"token punctuation\">,<\/span><br>                                          options<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token punctuation\">.<\/span>documentType<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">NSAttributedString<\/span><span class=\"token punctuation\">.<\/span><span class=\"token builtin\">DocumentType<\/span><span class=\"token punctuation\">.<\/span>html<span class=\"token punctuation\">,<\/span><br>                                                    <span class=\"token punctuation\">.<\/span>characterEncoding<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">.<\/span><span class=\"token builtin\">Encoding<\/span><span class=\"token punctuation\">.<\/span>utf8<span class=\"token punctuation\">.<\/span>rawValue<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span><br>                                          documentAttributes<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>As our initializer can throw an error we must catch it and if it does we print and return nil. <\/p><pre><code class=\"language-swift\">        <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">catch<\/span> <span class=\"token punctuation\">{<\/span><br>            <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;error:&quot;<\/span><span class=\"token punctuation\">,<\/span> error<span class=\"token punctuation\">.<\/span>localizedDescription<span class=\"token punctuation\">)<\/span><br>            <span class=\"token keyword\">return<\/span>  <span class=\"token constant\">nil<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>And that&rsquo;s it, we&rsquo;re ready to parse any HTML string into a <strong>NSAttributedString<\/strong> and using it in our <strong>UILabel<\/strong> or <strong>UITextView<\/strong> using their <em>attributedText<\/em> property.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/networking-html.jpg","image_width":"1600","image_height":"970","video":"","bookmark_id":"swift4-networking-nsattributedstring-from-html"}]},{"id":"138","chapter_id":"4","order":"150","slug":"swift4-implementing-search","title":"Implementing Search","caption":"Filtering data","body":"<p>A well-placed search field can mean the world in user experience. In this section, we are going to extend the <strong>Table View Controller<\/strong> tutorial making the bookmarks tab searchable while also learning a little bit about <strong>Realm<\/strong> and search queries.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-implementing-search.jpg","video":"","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-implementing-search.zip","contents":[{"id":"11435","section_id":"138","order":"1","title":"Downloads for Implementing Search","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the <a href=\"https:\/\/www.dropbox.com\/s\/0zp4q6comwn2i49\/DesignCodeApp%20Implementing%20Search%20initial.zip?dl=1\" title=\"initial project for this section\">initial project<\/a>. Make sure to also download the <a href=\"https:\/\/www.dropbox.com\/s\/ophx0lkf8aw5vnv\/DesignCodeApp%20Implementing%20Search%20final.zip?dl=1\" title=\"final project for this section\">final project<\/a> for comparison.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-implementing-search-downloads-for-implementing-search"},{"id":"11436","section_id":"138","order":"2","title":"Search Field","subhead":"","body":"<p>The first step to make the <strong>Search bar<\/strong> work is to set its delegate. Use the <strong>Connections Inspector<\/strong> to set the delegate of the <strong>Search Bar<\/strong> to <strong>Bookmarks Table View Controller<\/strong>. The delegate is going to be notified about search bar events and will react accordingly.<\/p><p>To comply with this search events, we need to make the <strong>BookmarksTableViewController<\/strong> a <strong>UISearchBarDelegate<\/strong>. Go back to the controller file so we can set up some codes.<\/p><p>At the end of the file and below the <strong>BookmarksTableViewController<\/strong>, we need to set an extension to handle the events.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">BookmarksTableViewController<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UISearchBarDelegate<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">searchBar<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> searchBar<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UISearchBar<\/span><span class=\"token punctuation\">,<\/span> textDidChange searchText<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        bookmarks <span class=\"token operator\">=<\/span> <span class=\"token builtin\">BookmarksTableViewController<\/span><span class=\"token punctuation\">.<\/span>allBookmarks<br>        tableView<span class=\"token punctuation\">.<\/span><span class=\"token function\">reloadData<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">searchBarSearchButtonClicked<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> searchBar<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UISearchBar<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        searchBar<span class=\"token punctuation\">.<\/span><span class=\"token function\">endEditing<\/span><span class=\"token punctuation\">(<\/span><span class=\"token boolean\">false<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>The first function will make our controller respond to every keystroke. The user fills in the text field by copying all the bookmarks and reloading the data. This does not act as a search feature but it is the boilerplate from which we will build the search feature.<\/p><p>The second one simply tells the <strong>Search Bar<\/strong> to dismiss itself when the user commits the search.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/w0jmn8ot8wkkqmr\/Scene15.mp4?dl=0","bookmark_id":"swift4-implementing-search-search-field"},{"id":"11437","section_id":"138","order":"3","title":"Searching for Content","subhead":"","body":"<p>A search is simply a filter of what elements to match certain criteria. In this case, we are going to build a simple search bar that matches what we typed in the section name, part name, and content of any given bookmark.<\/p><p>The following code shows a solution to this problem.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">searchBar<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> searchBar<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UISearchBar<\/span><span class=\"token punctuation\">,<\/span> textDidChange searchText<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>    <span class=\"token keyword\">let<\/span> searchText <span class=\"token operator\">=<\/span> searchText<span class=\"token punctuation\">.<\/span><span class=\"token function\">lowercased<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><br>    <span class=\"token keyword\">if<\/span> searchText<span class=\"token punctuation\">.<\/span>length <span class=\"token operator\">==<\/span> <span class=\"token number\">0<\/span> <span class=\"token punctuation\">{<\/span><br>        bookmarks <span class=\"token operator\">=<\/span> <span class=\"token builtin\">BookmarksTableViewController<\/span><span class=\"token punctuation\">.<\/span>allBookmarks<br>    <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span><br>        bookmarks <span class=\"token operator\">=<\/span> <span class=\"token builtin\">BookmarksTableViewController<\/span><span class=\"token punctuation\">.<\/span>allBookmarks<span class=\"token punctuation\">.<\/span><span class=\"token builtin\">filter<\/span> <span class=\"token punctuation\">{<\/span><br><br>            <span class=\"token keyword\">if<\/span> $<span class=\"token number\">0<\/span><span class=\"token punctuation\">.<\/span>content<span class=\"token punctuation\">.<\/span><span class=\"token function\">lowercased<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">range<\/span><span class=\"token punctuation\">(<\/span>of<span class=\"token punctuation\">:<\/span> searchText<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">!=<\/span> <span class=\"token constant\">nil<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span> <span class=\"token punctuation\">}<\/span><br>            <span class=\"token keyword\">if<\/span> $<span class=\"token number\">0<\/span><span class=\"token punctuation\">.<\/span>partName<span class=\"token punctuation\">.<\/span><span class=\"token function\">lowercased<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">range<\/span><span class=\"token punctuation\">(<\/span>of<span class=\"token punctuation\">:<\/span> searchText<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">!=<\/span> <span class=\"token constant\">nil<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span> <span class=\"token punctuation\">}<\/span><br>            <span class=\"token keyword\">if<\/span> $<span class=\"token number\">0<\/span><span class=\"token punctuation\">.<\/span>sectionName<span class=\"token punctuation\">.<\/span><span class=\"token function\">lowercased<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">range<\/span><span class=\"token punctuation\">(<\/span>of<span class=\"token punctuation\">:<\/span> searchText<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">!=<\/span> <span class=\"token constant\">nil<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span> <span class=\"token punctuation\">}<\/span>     <br>            <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">false<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><br>    tableView<span class=\"token punctuation\">.<\/span><span class=\"token function\">reloadData<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>If the user was to delete all the text inside the <strong>Search Bar<\/strong> field, it would be a <strong>String<\/strong> with <strong>0<\/strong> of length, meaning it would be an empty search. In this scenario, we can assume the result should be all the data. For all the other cases, we still have to see if we find the terms in any part of the bookmark.<\/p><p>In this snippet, we use a <strong>Array<\/strong> function called <strong>Filter<\/strong> and in it, we test the element to see if it should be shown. The <strong>Filter<\/strong> lets you access a single element of the list at a time using <strong>$0<\/strong> as its variable name; in another words, <strong>$0<\/strong> is a shorthand for <strong>bookmark<\/strong>.<\/p><p>This code also uses a <strong>Swift String<\/strong> function named <strong>range:of:<\/strong> that searches inside itself for a piece of text and returns its initial and final position. Also, it assumes that a letter <strong>&rsquo;A&rsquo;<\/strong> is different from a letter <strong>&rsquo;a&rsquo;<\/strong>, so we search for all the elements in lowercase; we call this case-sensitive search. That&rsquo;s why we <strong>lowercase<\/strong> the text before performing a search.<\/p><p>If there&rsquo;s no text found, it returns a <strong>nil<\/strong> range. If there is any range in what we were searching, we will get a part name or section name, it would be correct to show that to the user, so we <strong>return true<\/strong>, thus including that element in the result of the filter. Otherwise, a <strong>return false<\/strong> should suffice to exclude that element.<\/p><p>This code may not be the most efficient and the correct way to do it but it does get the job done.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/www.dl.dropboxusercontent.com\/s\/x8yuszp00kc3azu\/Scene16.mp4?dl=0","bookmark_id":"swift4-implementing-search-searching-for-content"},{"id":"11438","section_id":"138","order":"4","title":"Connecting to Realm","subhead":"","body":"<p>The implementation we just did is a proof of concept so you can see there is nothing magical behind a search. It is only as complicated as you make it be.<\/p><p>For this part, we are going to review some implementation of what is going on in the actual <strong>Design+Code<\/strong> app. For starters, we get the bookmarks in a very similar way.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> animated <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">viewDidAppear<\/span><span class=\"token punctuation\">(<\/span>animated<span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> user <span class=\"token operator\">=<\/span> <span class=\"token builtin\">RealmService<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">getUser<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        bookmarks <span class=\"token operator\">=<\/span> <span class=\"token function\">Array<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">RealmService<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">getBookmarks<\/span><span class=\"token punctuation\">(<\/span>user<span class=\"token punctuation\">:<\/span> user<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br>    tableView<span class=\"token punctuation\">.<\/span><span class=\"token function\">reloadData<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Instead of fetching mock data, we ask <strong>Realm<\/strong> to serve us new data for the current user. Then, we assign it as the bookmarks to be used in the cells.<\/p><p>The search function is even cleaner. As we have already defined services for the bookmarks, a new service was also defined to for filtered bookmarks.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">BookmarksTableViewController<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UISearchBarDelegate<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">searchBar<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> searchBar<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UISearchBar<\/span><span class=\"token punctuation\">,<\/span> textDidChange searchText<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        bookmarks <span class=\"token operator\">=<\/span> <span class=\"token function\">Array<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">RealmService<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">searchBookmarks<\/span><span class=\"token punctuation\">(<\/span>text<span class=\"token punctuation\">:<\/span> searchText<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br>        tableView<span class=\"token punctuation\">.<\/span><span class=\"token function\">reloadData<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In this case, all the filtering is handled by the <strong>RealmService<\/strong> class. Let&rsquo;s take a look inside to see what we find.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">static<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">searchBookmarks<\/span><span class=\"token punctuation\">(<\/span>text<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Results<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">Bookmark<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> realm <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span><span class=\"token operator\">!<\/span> <span class=\"token function\">Realm<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">let<\/span> user <span class=\"token operator\">=<\/span> <span class=\"token function\">getUser<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><br>    <span class=\"token keyword\">var<\/span> bookmarks <span class=\"token operator\">=<\/span> realm<span class=\"token punctuation\">.<\/span><span class=\"token function\">objects<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">Bookmark<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">filter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;user = %@&quot;<\/span><span class=\"token punctuation\">,<\/span> user<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">sorted<\/span><span class=\"token punctuation\">(<\/span>byKeyPath<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;order&quot;<\/span><span class=\"token punctuation\">,<\/span> ascending<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">false<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">return<\/span> bookmarks<span class=\"token punctuation\">.<\/span><span class=\"token function\">filter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;content.title CONTAINS[c] %@ OR content.subhead CONTAINS[c] %@ OR content.body CONTAINS[c] %@ OR section.title CONTAINS[c] %@&quot;<\/span><span class=\"token punctuation\">,<\/span> text<span class=\"token punctuation\">,<\/span> text<span class=\"token punctuation\">,<\/span> text<span class=\"token punctuation\">,<\/span> text<span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This function returns all the bookmarks for a given user that has already logged in the app. The filter action is much the same but, instead of manually filtering, it takes advantage of SQL query language. We are not going to delve too deep into it but it might be worth taking a closer look.<\/p><p>There are some key pieces in this query. Let&rsquo;s first unfold the unit so we can see the whole picture.<\/p><p>There you can see that this query language is just a form of stating what we have written before. It searches if the text is part of the title, subhead, body or the section title of a given bookmark. Then, it returns all bookmarks that fit that criteria.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Search.jpg","image_width":"1600","image_height":"863","video":"","bookmark_id":"swift4-implementing-search-connecting-to-realm"},{"id":"11439","section_id":"138","order":"5","title":"Conclusion","subhead":"","body":"<p>There are a lot of different ways you may implement search. You may do your own controls, filter for color, tags, and much more. Getting to the basics of how a feature search works might be the best way to find out what is feasible and understanding what parts of search you can do better to deliver a richer experience.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-implementing-search-conclusion"},{"id":"11440","section_id":"138","order":"6","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/tmergulhao\">Tiago Mergulh&#xE3;o<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-implementing-search-credit"}]},{"id":"145","chapter_id":"4","order":"151","slug":"swift4-posting-storing","title":"Posting and Storing Data","caption":"Interfacing with REST APIs using URL Session","body":"<p>Service communications are done in a variety of ways, but modern guidelines are leaning towards a RESTful approach. REST is the acronym for Representational State Transfer which is the foundation of stateless representation of data.<\/p><p>In this section we are going to explore the use of Foundation&rsquo;s URL Session to build a minimal RESTful API for the Bookmarks scene on the Design+Code app.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-posting-data.jpg","video":"","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-posting-storing.zip","contents":[{"id":"12281","section_id":"145","order":"1","title":"Decoding Data","subhead":"","body":"<p>Decoding data is done using Foundation&rsquo;s Codable, especially because both Realm and Firebase are both capable of parsing dictionaries. As for Cloud Kit, it uses its dictionary-like interface that needs manual binding to communicate to Realm for local storage.<\/p><p>This section assumes that you do understand the Codable protocol syntax but will stick to its native implementation. If you want to brush up on those, we suggest you visit its section, titled JSON Parsing.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-decoding-data"},{"id":"12282","section_id":"145","order":"2","title":"Persisting Data","subhead":"","body":"<p>The persistence features of the app are mostly backed by Cloud Kit, Firebase, and Realm. Should a user be a logged in subscriber, their data would be backed into Firebase. Otherwise Cloud Kit kicks in, to maintain data sync when lacking cross-device user identification.<\/p><p>In either case, Realm is used for storing the content locally in a database. Whereas the associated assets for video and image are kept in local directories and their URLs stored in the database. If you would like more detail about how this works, we suggest you look into the Realm titled section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-persisting-data"},{"id":"12283","section_id":"145","order":"3","title":"URL Session","subhead":"","body":"<p>This class has come a long way in the last couple of years. There has been a day where it was fundamental to import third-party libraries to do simple networking on iOS. No more. The current interface provided by URL Session is now widely accepted in the community and regarded as sufficient for most of the needs.<\/p><p>To use a session, you may choose to use the <strong>URLSession.shared<\/strong> to get its shared instance. If the use case demands detail about how the tasks you send to a session is doing, you may choose to create a session for a configuration<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> configuration <span class=\"token operator\">=<\/span> <span class=\"token builtin\">URLSessionConfiguration<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">background<\/span><span class=\"token punctuation\">(<\/span>withIdentifier<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;io.designcode.downloadVideos&quot;<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> session <span class=\"token operator\">=<\/span> <span class=\"token function\">URLSession<\/span><span class=\"token punctuation\">(<\/span>configuration<span class=\"token punctuation\">:<\/span> configuration<span class=\"token punctuation\">,<\/span> delegate<span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> delegateQueue<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">nil<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-url-session"},{"id":"12284","section_id":"145","order":"4","title":"URL Session Task","subhead":"","body":"<p>In this section, we are mostly going to use the <strong>Data Task<\/strong> as we are going to load data about a user&rsquo;s bookmarks. For downloading and uploading large chunks of media, it is advised to use the <strong>Download<\/strong> or <strong>Upload Tasks<\/strong> that come with their signature interfaces and tailor-made implementations.<\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">URLSession<\/span><span class=\"token punctuation\">.<\/span>shared<span class=\"token punctuation\">.<\/span><span class=\"token function\">dataTask<\/span><span class=\"token punctuation\">(<\/span>with<span class=\"token punctuation\">:<\/span> dataRequest<span class=\"token punctuation\">,<\/span> completionHandler<span class=\"token punctuation\">:<\/span> dataCompletion<span class=\"token punctuation\">)<\/span><br><span class=\"token builtin\">URLSession<\/span><span class=\"token punctuation\">.<\/span>shared<span class=\"token punctuation\">.<\/span><span class=\"token function\">downloadTask<\/span><span class=\"token punctuation\">(<\/span>with<span class=\"token punctuation\">:<\/span> downloadRequest<span class=\"token punctuation\">,<\/span> completionHandler<span class=\"token punctuation\">:<\/span> downlaodCompletion<span class=\"token punctuation\">)<\/span><br><span class=\"token builtin\">URLSession<\/span><span class=\"token punctuation\">.<\/span>shared<span class=\"token punctuation\">.<\/span><span class=\"token function\">downloadTask<\/span><span class=\"token punctuation\">(<\/span>with<span class=\"token punctuation\">:<\/span> uploadRequest<span class=\"token punctuation\">,<\/span> fromFile<span class=\"token punctuation\">:<\/span> fileURL<span class=\"token punctuation\">,<\/span> completionHandler<span class=\"token punctuation\">:<\/span> uploadCompletion<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-url-session-task"},{"id":"12285","section_id":"145","order":"5","title":"","subhead":"URL Session Delegate","body":"<p>This protocol defines the signatures that make an object able to receive events from a <strong>URL Session<\/strong> about a given task. It is especially useful when you need fine-grained information about how a download task is doing.<\/p><p>If the app were download multiple videos from a given chapter at once and needed to inform the user of how these download task are doing. In the case of a <strong>URL Session Download Delegate<\/strong>, it would be able to:<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ Get progress information about the task and relay it to the user interface<\/span><br><span class=\"token keyword\">func<\/span> <span class=\"token function\">urlSession<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> session<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">URLSession<\/span><span class=\"token punctuation\">,<\/span> downloadTask<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">URLSessionDownloadTask<\/span><span class=\"token punctuation\">,<\/span> didWriteData bytesWritten<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int64<\/span><span class=\"token punctuation\">,<\/span> totalBytesWritten<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int64<\/span><span class=\"token punctuation\">,<\/span> totalBytesExpectedToWrite<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int64<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token comment\">\/\/ Save the cached data in a definitive manner<\/span><br><span class=\"token keyword\">func<\/span> <span class=\"token function\">urlSession<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> session<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">URLSession<\/span><span class=\"token punctuation\">,<\/span> downloadTask<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">URLSessionDownloadTask<\/span><span class=\"token punctuation\">,<\/span> didFinishDownloadingTo location<span class=\"token punctuation\">:<\/span> <span class=\"token constant\">URL<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token comment\">\/\/ Inform the user about the error and take appropriate action<\/span><br><span class=\"token keyword\">func<\/span> <span class=\"token function\">urlSession<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> session<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">URLSession<\/span><span class=\"token punctuation\">,<\/span> task<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">URLSessionTask<\/span><span class=\"token punctuation\">,<\/span> didCompleteWithError error<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Error<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>The underlying interfaces of a generic <strong>URL Session Delegate<\/strong> offer a more profound look at what is happening in the <strong>URL Session<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-url-session-delegate"},{"id":"12286","section_id":"145","order":"6","title":"Downloads for Posting and Storing Data","subhead":"","body":"<p>In this section, we are going to untangle some of the concepts exposed by showing a possible implementation of the bookmarks scene in a RESTful manner. To do that, download the example <a href=\"https:\/\/www.dropbox.com\/s\/54003o4p7eg082u\/database.json?dl=1\">database.json<\/a> file and follow along.<\/p><p>To accompany this material, there is a <a href=\"https:\/\/www.dropbox.com\/s\/y1l1ab1bdukl52f\/Posting%20and%20Storing%20Data.playground.zip?dl=1\">Posting and Storing Data.playground<\/a> with all the classes and definitions. Although it does not use the background thread for calls, you should use it on any production app.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-downloads-for-posting-and-storing-data"},{"id":"12287","section_id":"145","order":"7","title":"JSON Server","subhead":"","body":"<p>Setting up a JSON server is simple using the <a href=\"https:\/\/www.npmjs.com\" title=\"Node Package Manager\">NPM&rsquo;s (Node Package Manager)<\/a> <a href=\"https:\/\/github.com\/typicode\/json-server\" title=\"json-server, get a full fake REST API with zero coding in less than 30 seconds (seriously)\">json-server<\/a>. If you don&rsquo;t have <strong>npm<\/strong> installed on your computer, there is a three-step process to get it. Otherwise, jump to the <strong>Install json-server<\/strong> section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-json-server"},{"id":"12288","section_id":"145","order":"8","title":"","subhead":"Install Homebrew","body":"<p>First, you need to launch your <strong>Terminal.app<\/strong> and run:<\/p><pre><code class=\"language-swift\"><span class=\"token operator\">\/<\/span>usr<span class=\"token operator\">\/<\/span>bin<span class=\"token operator\">\/<\/span>ruby <span class=\"token operator\">-<\/span>e <span class=\"token string\">&quot;$(curl -fsSL https:\/\/raw.githubusercontent.com\/Homebrew\/install\/master\/install)&quot;<\/span><br><\/code><\/pre><p>This command will install <a href=\"https:\/\/brew.sh\" title=\"Homebrew, the missing package manager for macOS\">Homebrew<\/a> to your machine. As the tagline states, it is the catch-all interface for downloading and building software on your machine. Just like CocoaPods, instead of downloading a closed package, Homebrew builds and installs on site. Just like Ruby Gems, it is widely to install software such as compilers and command-line tools.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-install-homebrew"},{"id":"12289","section_id":"145","order":"9","title":"","subhead":"Install Node","body":"<p>Once Homebrew is installed, it may be used to install packages such as NPM. Just like <strong>CocoaPods<\/strong>, it takes a command to install. Using the same terminal window, do:<\/p><pre><code class=\"language-swift\">brew install node<br><\/code><\/pre><p>This process might take a while; you may grab a cup of coffee. If you are not familiar with <strong>Node<\/strong>, it is <strong>Javascript<\/strong> interpreter responsible for bringing this language to desktops and servers alike. A lot of the innovation we currently enjoy in desktop and web development comes from it. <strong>NodeJS<\/strong> comes packaged with its manager of choice, the <strong>NPM<\/strong>. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-install-node"},{"id":"12290","section_id":"145","order":"10","title":"","subhead":"Install json-server","body":"<p>Finally, install <a href=\"https:\/\/github.com\/typicode\/json-server\" title=\"json-server, get a full fake REST API with zero coding in less than 30 seconds (seriously)\">json-server<\/a> globally on your machine by running:<\/p><pre><code class=\"language-swift\">npm install <span class=\"token operator\">--<\/span>global json<span class=\"token operator\">-<\/span>server<br><\/code><\/pre><p>This command will publish <strong>json-server<\/strong> publicly as a command in the terminal. This package lets you publish a simple REST API with <strong>zero<\/strong> coding required (mainly for testing purposes). Open the folder containing the <strong>database.json<\/strong> file on <strong>Terminal<\/strong> using the <strong>cd<\/strong> command and run:<\/p><pre><code class=\"language-swift\">json<span class=\"token operator\">-<\/span>server <span class=\"token operator\">--<\/span>watch database<span class=\"token punctuation\">.<\/span>json<br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-install-json-server"},{"id":"12291","section_id":"145","order":"11","title":"HTTP Methods","subhead":"","body":"<p>The main reason we chose to use the json-server dependency in this tutorial is that it consumes the three main methods of a RESTful API realistically:<\/p><p><strong>POST<\/strong> is used to save a record to the server, which will be sent as JSON data. In this server implementation, a unique identifier is created for each record.<\/p><p><strong>GET<\/strong> is used to get data from a select route and may receive parameters for filtering, sorting, and paginating. It may also be used to get a select record by its unique identifier.<\/p><p><strong>DELETE<\/strong> is used to remove a given record from the dataset using its unique identifier.<\/p><p>Swift is a language that enforces type-safety to ensure stability from development. Let&rsquo;s ensure that by declaring those methods:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">enum<\/span> <span class=\"token builtin\">HTTPMethod<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">case<\/span> <span class=\"token keyword\">get<\/span>    <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;GET&quot;<\/span><br>    <span class=\"token keyword\">case<\/span> post   <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;POST&quot;<\/span><br>    <span class=\"token keyword\">case<\/span> delete <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;DELETE&quot;<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-http-methods"},{"id":"12292","section_id":"145","order":"12","title":"Get All Bookmarks Request","subhead":"","body":"<p>Before getting all the bookmarks in a service, it is required to fashion a request object. To do that we need to:<\/p><p>1 . know the <strong>URL<\/strong> of the server<\/p><p>2 . append to it the <strong>Path\/Route<\/strong> of the resource<\/p><p>3 . make a <strong>Request<\/strong> with it that composite url<\/p><p>4 . give it additional information about method, data body and content type<\/p><p>Some of these options are not strictly required for <strong>GET<\/strong> by are placed for generalization further along. In Swift it would look a lot like:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> baseUrl <span class=\"token punctuation\">:<\/span> <span class=\"token constant\">URL<\/span><span class=\"token operator\">!<\/span> <span class=\"token operator\">=<\/span> <span class=\"token function\">URL<\/span><span class=\"token punctuation\">(<\/span>string<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;http:\/\/localhost:3000\/&quot;<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token comment\">\/\/ 1<\/span><br><span class=\"token keyword\">let<\/span> url <span class=\"token operator\">=<\/span> baseUrl<span class=\"token punctuation\">.<\/span><span class=\"token function\">appendingPathComponent<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;bookmarks&quot;<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token comment\">\/\/ 2<\/span><br><span class=\"token keyword\">var<\/span> request <span class=\"token operator\">=<\/span> <span class=\"token function\">URLRequest<\/span><span class=\"token punctuation\">(<\/span>url<span class=\"token punctuation\">:<\/span> url<span class=\"token punctuation\">)<\/span> <span class=\"token comment\">\/\/ 3<\/span><br>request<span class=\"token punctuation\">.<\/span>httpMethod <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;GET&quot;<\/span> <span class=\"token comment\">\/\/ 4<\/span><br>request<span class=\"token punctuation\">.<\/span>httpBody <span class=\"token operator\">=<\/span> <span class=\"token constant\">nil<\/span><br>request<span class=\"token punctuation\">.<\/span><span class=\"token function\">setValue<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;application\/json&quot;<\/span><span class=\"token punctuation\">,<\/span> forHTTPHeaderField<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Content-Type&quot;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-get-all-bookmarks-request"},{"id":"12293","section_id":"145","order":"13","title":"Data Task for Bookmarks","subhead":"","body":"<p>The just created request sufficiently explains how to get information from a server. Now it suffices to make a task that consumes and acts on this information. To do that we need to:<\/p><p>1 . get a <strong>Session<\/strong><\/p><p>2 . ask the session to make a <strong>Data Task<\/strong> for the given request<\/p><p>3 . Specify a <strong>Completion<\/strong> for when the data finishes loading<\/p><p>4 . ask the task to <strong>resume<\/strong> on a background thread<\/p><p>In Swift, this could look like:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> session <span class=\"token operator\">=<\/span> <span class=\"token builtin\">URLSession<\/span><span class=\"token punctuation\">.<\/span>shared <span class=\"token comment\">\/\/ 1<\/span><br><span class=\"token keyword\">let<\/span> dataTask <span class=\"token operator\">=<\/span> session<span class=\"token punctuation\">.<\/span><span class=\"token function\">dataTask<\/span><span class=\"token punctuation\">(<\/span>with<span class=\"token punctuation\">:<\/span> request<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token comment\">\/\/ 2<\/span><br>    <span class=\"token punctuation\">(<\/span>data<span class=\"token punctuation\">,<\/span> response<span class=\"token punctuation\">,<\/span> error<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">in<\/span> <span class=\"token comment\">\/\/ 3<\/span><br>    <span class=\"token comment\">\/\/ Do something with the data<\/span><br>    <span class=\"token comment\">\/\/ This will be called in the background thread<\/span><br><span class=\"token punctuation\">}<\/span><br><br><span class=\"token builtin\">DispatchQueue<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">global<\/span><span class=\"token punctuation\">(<\/span>qos<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>background<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span>async <span class=\"token punctuation\">{<\/span><br>    <span class=\"token comment\">\/\/ Call on the background thread<\/span><br>    dataTask<span class=\"token punctuation\">.<\/span><span class=\"token function\">resume<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token comment\">\/\/ 4<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-data-task-for-bookmarks"},{"id":"12294","section_id":"145","order":"14","title":"All Bookmarks Endpoint","subhead":"","body":"<p>Most of what is specified in a data call can be generalized into the definition of an <strong>Endpoint<\/strong>. An endpoint is an interface to a service layer. In this example, we are going to materialize it as a structure with all the necessary means to fashion a <strong>data task<\/strong>:<\/p><p>1 . <strong>Path<\/strong>, to the resource<\/p><p>2 . <strong>HTTP Method<\/strong>, to act on the resource<\/p><p>3 . <strong>Data Body<\/strong>, should it need to send data<\/p><p>A broad definition would be:<\/p><pre><code class=\"language-swift\">protocol <span class=\"token builtin\">Endpoint<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">var<\/span> path <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">get<\/span> <span class=\"token punctuation\">}<\/span><br>    <span class=\"token keyword\">var<\/span> httpMethod <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">HTTPMethod<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">get<\/span> <span class=\"token punctuation\">}<\/span><br>    <span class=\"token keyword\">var<\/span> body <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Data<\/span><span class=\"token operator\">?<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">get<\/span> <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>A specific implementation complying with this protocol would be:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">enum<\/span> <span class=\"token builtin\">BookmarksEndpoint<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Endpoint<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">case<\/span> all<br><br>    <span class=\"token keyword\">var<\/span> path<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">return<\/span> <span class=\"token string\">&quot;bookmarks&quot;<\/span><br>    <span class=\"token punctuation\">}<\/span><br>    <span class=\"token keyword\">var<\/span> httpMethod <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">HTTPMethod<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token keyword\">get<\/span><br>    <span class=\"token punctuation\">}<\/span><br>    <span class=\"token keyword\">var<\/span> body <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Data<\/span><span class=\"token operator\">?<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">return<\/span> <span class=\"token constant\">nil<\/span><br>    <span class=\"token punctuation\">}<\/span><br><br>    <span class=\"token keyword\">var<\/span> baseUrl <span class=\"token punctuation\">:<\/span> <span class=\"token constant\">URL<\/span><span class=\"token operator\">!<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token function\">URL<\/span><span class=\"token punctuation\">(<\/span>string<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;http:\/\/localhost:3000\/&quot;<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-all-bookmarks-endpoint"},{"id":"12295","section_id":"145","order":"15","title":"Data Task for Endpoint","subhead":"","body":"<p>To get a data task for this endpoint, let&rsquo;s create a method inside the <strong>Bookmarks Endpoint<\/strong> enum that receives the completion handler and returns the task to be performed. As we are in the enum scope, we can implicitly call <strong>self<\/strong> to get information about provided by the endpoint.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">func<\/span> <span class=\"token function\">dataTask<\/span><span class=\"token punctuation\">(<\/span>completion<span class=\"token punctuation\">:<\/span>  @escaping <span class=\"token punctuation\">(<\/span><span class=\"token builtin\">Data<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Void<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">URLSessionTask<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> url <span class=\"token operator\">=<\/span> baseUrl<span class=\"token punctuation\">.<\/span><span class=\"token function\">appendingPathComponent<\/span><span class=\"token punctuation\">(<\/span>path<span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">var<\/span> request <span class=\"token operator\">=<\/span> <span class=\"token function\">URLRequest<\/span><span class=\"token punctuation\">(<\/span>url<span class=\"token punctuation\">:<\/span> url<span class=\"token punctuation\">)<\/span><br>        request<span class=\"token punctuation\">.<\/span><span class=\"token function\">setValue<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;application\/json&quot;<\/span><span class=\"token punctuation\">,<\/span> forHTTPHeaderField<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;Content-Type&quot;<\/span><span class=\"token punctuation\">)<\/span><br>        request<span class=\"token punctuation\">.<\/span>httpMethod <span class=\"token operator\">=<\/span> httpMethod<span class=\"token punctuation\">.<\/span>rawValue<br>        request<span class=\"token punctuation\">.<\/span>httpBody <span class=\"token operator\">=<\/span> body<br><br>        <span class=\"token keyword\">return<\/span> session<span class=\"token punctuation\">.<\/span><span class=\"token function\">dataTask<\/span><span class=\"token punctuation\">(<\/span>with<span class=\"token punctuation\">:<\/span> request<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>            <span class=\"token punctuation\">(<\/span>data<span class=\"token punctuation\">,<\/span> response<span class=\"token punctuation\">,<\/span> error<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">in<\/span><br>            <span class=\"token function\">completion<\/span><span class=\"token punctuation\">(<\/span>data<span class=\"token punctuation\">)<\/span><br>        <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>This definition does not seem very broad at first, but it provides the necessary means to extend the <strong>Bookmarks Endpoint<\/strong> with new cases while using Swift&rsquo;s type system for disambiguation and validation.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-data-task-for-endpoint"},{"id":"12296","section_id":"145","order":"16","title":"Decodable Bookmark","subhead":"","body":"<p>The server endpoint returns a data that is encoded as JSON. So make sense of it, it would be natural to define a data structure capable of receiving that information that complies with the <strong>Decodable<\/strong> protocol:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">struct<\/span> <span class=\"token builtin\">BookmarkDecodable<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Decodable<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">var<\/span> id <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>    <span class=\"token keyword\">var<\/span> contentId <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>    <span class=\"token keyword\">var<\/span> sectionId <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>    <span class=\"token keyword\">var<\/span> userId <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>    <span class=\"token keyword\">var<\/span> createdDate <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Date<\/span><br><span class=\"token punctuation\">}<\/span> <br><\/code><\/pre><p>By using JSON as the data storage on the server, it would be wise to comply with its naming conventions. Those conventions state that, differently from Swift&rsquo;s camel casing, keys should be named using underscore spacing. Inside this structure should be an exhaustive <strong>Coding Keys<\/strong> enum specifying this translation:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">enum<\/span> <span class=\"token builtin\">CodingKeys<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">CodingKey<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">case<\/span> id<br>    <span class=\"token keyword\">case<\/span> contentId <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;content_id&quot;<\/span><br>    <span class=\"token keyword\">case<\/span> sectionId <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;section_id&quot;<\/span><br>    <span class=\"token keyword\">case<\/span> userId <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;user_id&quot;<\/span><br>    <span class=\"token keyword\">case<\/span> createdDate <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;created_date&quot;<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-decodable-bookmark"},{"id":"12297","section_id":"145","order":"17","title":"","subhead":"Decoding the Data","body":"<p>The <strong>Bookmarks Endpoint<\/strong> for <strong>all<\/strong> is able to create a data task that consumes a completion handler that takes the data for all the bookmarks.<\/p><p>The appropriate place to parse or call something to parse the data into Swift types would be in the <strong>completion<\/strong>. Should the data be available, it would decode using the standard <strong>JSON Decoder<\/strong> provided with a date decoding strategy of <strong>iso8601<\/strong>, the industry standard used on the example data.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> task <span class=\"token operator\">=<\/span> <span class=\"token builtin\">BookmarksEndpoint<\/span><span class=\"token punctuation\">.<\/span>all<span class=\"token punctuation\">.<\/span>dataTask <span class=\"token punctuation\">{<\/span><br>    data <span class=\"token keyword\">in<\/span><br>    <span class=\"token keyword\">let<\/span> decoder <span class=\"token operator\">=<\/span> <span class=\"token function\">JSONDecoder<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    decoder<span class=\"token punctuation\">.<\/span>dateDecodingStrategy <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>iso8601<br>    <span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> bookmarks <span class=\"token operator\">=<\/span> <span class=\"token keyword\">try<\/span><span class=\"token operator\">?<\/span> decoder<span class=\"token punctuation\">.<\/span><span class=\"token function\">decode<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">BookmarkDecodable<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">,<\/span> from<span class=\"token punctuation\">:<\/span> data<span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token builtin\">DispatchQueue<\/span><span class=\"token punctuation\">.<\/span>main<span class=\"token punctuation\">.<\/span>sync <span class=\"token punctuation\">{<\/span><br>            tableView<span class=\"token punctuation\">.<\/span><span class=\"token function\">reloadData<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><span class=\"token builtin\">DispatchQueue<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">global<\/span><span class=\"token punctuation\">(<\/span>qos<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>background<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span>async <span class=\"token punctuation\">{<\/span><br>    task<span class=\"token punctuation\">.<\/span><span class=\"token function\">resume<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>It is important to remember that the <strong>resume<\/strong> call should be sent on the background thread. Likewise, the <strong>completion<\/strong> is going to resurface in this same thread. If some interface were to be called directly or indirectly, it would be appropriate to switch to the main thread by using <strong>&#xA0;DispatchQueue.main.sync<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-decoding-the-data"},{"id":"12298","section_id":"145","order":"18","title":"Remove Bookmark Request","subhead":"","body":"<p>A request for removing a piece of data has a lot in common with the task for loading. Its fields are the same but it has different values. Only with direct access to the <strong>Bookmarks Endpoint<\/strong> it is possible to extend its functionality. To do so, create a new case on it with an associated value for the id of the record:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">case<\/span> <span class=\"token function\">remove<\/span><span class=\"token punctuation\">(<\/span>id<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>A <strong>remove<\/strong> request is different from a <strong>all<\/strong> request because it will be targeted to a record <strong>unique identifier<\/strong> and will inform its intention to remove by using the HTTP method <strong>DELETE<\/strong>. Because the <strong>Bookmarks Endpoint<\/strong> uses computed variables, it is possible to disambiguate which endpoint is being used inside each variable like this:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> path<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">switch<\/span> <span class=\"token keyword\">self<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">case<\/span> <span class=\"token punctuation\">.<\/span>all<span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token string\">&quot;bookmarks&quot;<\/span><br>    <span class=\"token keyword\">case<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token function\">remove<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">let<\/span> id<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token string\">&quot;bookmarks\/<span class=\"token interpolation\"><span class=\"token delimiter variable\">(<\/span>id<span class=\"token delimiter variable\">)<\/span><\/span>&quot;<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Should the endpoint be for removal, the path should lead to the record by its unique identifier.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> httpMethod <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">HTTPMethod<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">switch<\/span> <span class=\"token keyword\">self<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">case<\/span> <span class=\"token punctuation\">.<\/span>all<span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token keyword\">get<\/span><br>    <span class=\"token keyword\">case<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token function\">remove<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">.<\/span>delete<br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In the same manner, the method to use in this case should be <strong>DELETE<\/strong>.<\/p><p>Calling it should be done in the background thread with:<\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">DispatchQueue<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">global<\/span><span class=\"token punctuation\">(<\/span>qos<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>background<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span>async <span class=\"token punctuation\">{<\/span><br>    <span class=\"token builtin\">BookmarksEndpoint<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">remove<\/span><span class=\"token punctuation\">(<\/span>id<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span>dataTask <span class=\"token punctuation\">{<\/span> <span class=\"token number\">_<\/span> <span class=\"token keyword\">in<\/span> <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-remove-bookmark-request"},{"id":"12299","section_id":"145","order":"19","title":"Create Bookmark","subhead":"","body":"<p>Similarly to the delete request, creating a new record in the server is going to take creating a new case for the <strong>Bookmarks Endpoint<\/strong>. In this case, we could use explicit associated values for <strong>contentId<\/strong>, <strong>sectionId<\/strong>, <strong>userId<\/strong>, and <strong>createdDate<\/strong>. Nonetheless, this would bind us to writing a dictionary instantiation.<\/p><p>Alternatively, it would be <em>swifty<\/em> to create a symmetrical structure for the <strong>Bookmark Encodable<\/strong> with coding keys:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">struct<\/span> <span class=\"token builtin\">BookmarkEncodable<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Decodable<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">var<\/span> contentId <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>    <span class=\"token keyword\">var<\/span> sectionId <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>    <span class=\"token keyword\">var<\/span> userId <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Int<\/span><br>    <span class=\"token keyword\">var<\/span> createdDate <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Date<\/span><br><br>    <span class=\"token keyword\">enum<\/span> <span class=\"token builtin\">CodingKeys<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token builtin\">CodingKey<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">case<\/span> contentId <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;content_id&quot;<\/span><br>        <span class=\"token keyword\">case<\/span> sectionId <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;section_id&quot;<\/span><br>        <span class=\"token keyword\">case<\/span> userId <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;user_id&quot;<\/span><br>        <span class=\"token keyword\">case<\/span> createdDate <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;created_date&quot;<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span> <br><\/code><\/pre><p>Different from its sibling, it lacks the unique identifier. That is because it relies on the server to provide this identifier on the database.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-create-bookmark"},{"id":"12300","section_id":"145","order":"20","title":"Create Bookmark Request","subhead":"","body":"<p>Now it suffices to declare a new case for create that has an associated value of <strong>Bookmark Encodable<\/strong> and exhaust the switch cases for this possibility:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">case<\/span> <span class=\"token function\">create<\/span><span class=\"token punctuation\">(<\/span>bookmark<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">BookmarksEncodable<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>The <strong>Path<\/strong> value should be the same as the <strong>all<\/strong> case, which would be <strong>&#x201D;bookmarks&#x201D;<\/strong>:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> path<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">String<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">switch<\/span> <span class=\"token keyword\">self<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">case<\/span> <span class=\"token punctuation\">.<\/span>all<span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">.<\/span>create<span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token string\">&quot;bookmarks&quot;<\/span><br><\/code><\/pre><p>The <strong>HTTP Method<\/strong> for this request would be a <strong>POST<\/strong>:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">case<\/span> <span class=\"token punctuation\">.<\/span>create<span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">.<\/span>post<br><\/code><\/pre><p>And the body would be the encoding of the associated value:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> body <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Data<\/span><span class=\"token operator\">?<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">switch<\/span> <span class=\"token keyword\">self<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">case<\/span> <span class=\"token punctuation\">.<\/span><span class=\"token function\">create<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">let<\/span> bookmark<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">:<\/span><br>        <span class=\"token keyword\">let<\/span> encoder <span class=\"token operator\">=<\/span> <span class=\"token function\">JSONEncoder<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>        encoder<span class=\"token punctuation\">.<\/span>dateEncodingStrategy <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>iso8601<br>        <span class=\"token keyword\">return<\/span> <span class=\"token keyword\">try<\/span><span class=\"token operator\">?<\/span> encoder<span class=\"token punctuation\">.<\/span><span class=\"token function\">encode<\/span><span class=\"token punctuation\">(<\/span>bookmark<span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">default<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token constant\">nil<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-create-bookmark-request"},{"id":"12301","section_id":"145","order":"21","title":"Sending a Create Bookmark Request","subhead":"","body":"<p>Creating a new bookmark takes a similar for as any other request.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> newBookmark <span class=\"token operator\">=<\/span> <span class=\"token function\">BookmarksEncodable<\/span><span class=\"token punctuation\">(<\/span>contentId<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span> sectionId<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span> userId<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span> createdDate<span class=\"token punctuation\">:<\/span> <span class=\"token function\">Date<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> createEndpoint <span class=\"token operator\">=<\/span> <span class=\"token builtin\">BookmarksEndpoint<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">create<\/span><span class=\"token punctuation\">(<\/span>bookmark<span class=\"token punctuation\">:<\/span> newBookmark<span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> createTask <span class=\"token operator\">=<\/span> createEndpoint<span class=\"token punctuation\">.<\/span>dataTask <span class=\"token punctuation\">{<\/span><br>    <span class=\"token number\">_<\/span> <span class=\"token keyword\">in<\/span><br>    <span class=\"token function\">print<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">&quot;One was created&quot;<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token comment\">\/\/ Update the user interface on the main thread<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Like all structs in Swift, <strong>Bookmarks Encodable<\/strong> is equipped with a default initializer that would be used to create a bookmark with reference to its target content, section, and user while also providing a date of creation for sorting purposes. <\/p><pre><code class=\"language-swift\"><span class=\"token builtin\">DispatchQueue<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">global<\/span><span class=\"token punctuation\">(<\/span>qos<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">.<\/span>background<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span>async <span class=\"token punctuation\">{<\/span><br>    createTask<span class=\"token punctuation\">.<\/span><span class=\"token function\">resume<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>And, like all the previous ones, it takes one call to make it work.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-sending-a-create-bookmark-request"},{"id":"12302","section_id":"145","order":"22","title":"Conclusion","subhead":"","body":"<p>You may have noticed that once we created a generic declaration for the endpoint, we stopped interfacing with <strong>URL Session<\/strong>. Should you need to create a communications layer by hand, it would be wise to create a solid and generic foundation that would ensure that you cover most cases with the least code.<\/p><p>The implementation presented might not be the smallest, the most resilient, not the most flexible. Like most tasks in software development, it takes studying the specific problem to find a suitable solution.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-posting-storing-conclusion"}]},{"id":"139","chapter_id":"4","order":"160","slug":"swift4-testflight","title":"TestFlight","caption":"Distribute your app to beta testers","body":"<p>One of the most important aspects of app development is being able to publish your app and share it with the world. The App Store is the best place to do this but sometimes we need a step in between, and we need to beta test our apps. TestFlight is a beta testing platform which quickly enables users to test your apps by only opening the TestFlight app on their devices.<\/p><p>TestFlight is a solution provided by Apple which means that it&rsquo;s integrated into its whole ecosystem. It works inside iTunesConnect which let developers upload builds directly from Xcode and distribute the app among the testers just by having their email addresses.<br><\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-testflight.jpg","video":"","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-testflight.zip","contents":[{"id":"11228","section_id":"139","order":"1","title":"Required platforms","subhead":"","body":"<p>You can use TestFlight to test your apps on different devices in Apple&rsquo;s ecosystem. On iPhone, iPad, or iPod touch, is required to run iOS 8 or later. <\/p><p>You can also test iMessage apps and sticker packs, but is required iOS 10 or later. For tvOS9 for tvOS apps, you need running tvOS 9 or later. TestFlight is not available for Mac apps.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/RequiredPlatforms.jpg","image_width":"1600","image_height":"673","video":"","bookmark_id":"swift4-testflight-required-platforms"},{"id":"11229","section_id":"139","order":"2","title":"TestFlight","subhead":"","body":"<p>To test your app on your device, you need to request a development certificate and create a provisioning profile. This process is just for security reasons; Apple wants to make sure who is the developer of every app that would like to access to the App Store, and this works as one of many filters to stop malicious apps to do so.<\/p><p>Something outstanding for today&rsquo;s process is that Xcode can do the signing in and can create the provisioning profile automatically for you. However, if your app is using some services like push notifications and Game Center, you will need to create a manual signing ID.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-testflight-testflight"},{"id":"11230","section_id":"139","order":"3","title":"Identity and Signing","subhead":"","body":"<p>In Xcode, to create your account click on the Project Navigator tab, over there choose the General tab.<\/p><p>From the General tab, in the Signing section, you will see that the <strong>Automatically manage signing<\/strong> is checked; on Team&rsquo;s drop-down choose <strong>Add an Account<\/strong> and fill it in with your Apple ID. <\/p><p>You will notice that Xcode created your <strong>Provisioning Profile<\/strong> and <strong>Signing Certificate<\/strong> automatically.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Identityandsigining.jpg","image_width":"1600","image_height":"566","video":"","bookmark_id":"swift4-testflight-identity-and-signing"},{"id":"11231","section_id":"139","order":"4","title":"App record","subhead":"","body":"<p>Next, you need to create an app record on iTunes Connect. Go to: <a href=\"itunesconnect.apple.com\">itunesconnect.apple.com<\/a>, sign in with your Apple ID, next go to <strong>My apps<\/strong> and click on the Plus button to create a new iOS app. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Itunesconnect.jpg","image_width":"1600","image_height":"667","video":"","bookmark_id":"swift4-testflight-app-record"},{"id":"11232","section_id":"139","order":"5","title":"","subhead":"Filling the new app information","body":"<p>After you hit the plus button a pop-up will prompt, there you will need to fill in all the information, like app name, Bundle ID, SKU and you will have to choose your primary language and platform, in our case English and iOS respectively, then click on <strong>Create<\/strong>. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/AddingNewapp.jpg","image_width":"1600","image_height":"767","video":"","bookmark_id":"swift4-testflight-filling-the-new-app-information"},{"id":"11233","section_id":"139","order":"6","title":"","subhead":"App Information","body":"<p>On the <strong>App Information<\/strong> tab, you will need to select the category of your App, and you can fill in some optional information and finally hit <strong>Save<\/strong>.<\/p><p>Congratulations you&rsquo;ve created your App Record. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/App%20information.jpg","image_width":"1600","image_height":"673","video":"","bookmark_id":"swift4-testflight-app-information"},{"id":"11234","section_id":"139","order":"7","title":"Prepare for Submission Tab","subhead":"","body":"<p>On this section, you will need to add some images and required information for your TestFlight version and which also will be useful and necessary the moment when you will decide to submit your app. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-testflight-prepare-for-submission-tab"},{"id":"11235","section_id":"139","order":"8","title":"","subhead":"App Previews and Screenshots","body":"<p>You can add up to 5 screenshots and 3 App Previews; these are like the billboards of your app on the App Store, so try to choose the most representative screenshots which can explain the objective of your app in some single screens. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/App%20previews%20and%20screenshots.jpg","image_width":"1600","image_height":"817","video":"","bookmark_id":"swift4-testflight-app-previews-and-screenshots"},{"id":"11236","section_id":"139","order":"9","title":"","subhead":"Additional Information","body":"<p>If you scroll down, you will find some additional information to be filled, like: <\/p><ul>\t<li><strong>Promotional Text<\/strong> which will appear at the top of the description of your app, once you will submit it.<\/li>\t<li><strong>Description<\/strong> here you can specify all the different features of your app. <\/li>\t<li><strong>Keywords<\/strong> these will help the users to find your app in the App Store when and with the App Store Optimization (ASO) as well, so choose your words carefully.<\/li>\t<li><strong>Support URL<\/strong> this URL will be used in case your audience will like to report a problem or send you any feedbacks.<\/li>\t<li><strong>Marketing URL<\/strong> This could be your website or an URL which helps to promote or explain your App.<\/li><\/ul>","image":"https:\/\/designcode.io\/cloud\/swift4\/Additional%20description.jpg","image_width":"1600","image_height":"905","video":"","bookmark_id":"swift4-testflight-additional-information"},{"id":"11237","section_id":"139","order":"10","title":"","subhead":"General App Information","body":"<p>You will need to add an app icon of 1024x1024px without rounded corners and without transparency. Write down the version, and underneath it, you can edit the rating of your app, you can select your App categories.<\/p><p>You can also add the copyright and your address.<\/p><p>On version release you can choose to release automatically your app once is approved to any date you will like or to you can do it manually and finally hit Save.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/General%20App%20information.jpg","image_width":"1600","image_height":"905","video":"","bookmark_id":"swift4-testflight-general-app-information"},{"id":"11238","section_id":"139","order":"11","title":"Archiving your app","subhead":"","body":"<p>Now we need to archive and upload our build to iTunes Connect, to do so let&apos;s return to Xcode, then go to Product&gt;Scheme&gt;Edit Scheme and select the last tab called <strong>Archive Release<\/strong>, over there make sure your Build Configuration is Set to Release, then hit close. Then go to Product&gt; Archive, and Xcode will start loading, wait for a while, and you will be driven a new screen. <\/p><p>On the right panel, you will notice a button with the tag <strong>Validate<\/strong>, hit on validate a pop-up will prompt, then choose the name of the developer, click on Validate, wait few seconds and click on Done. Now your App will be ready to be uploaded.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/i4y2rgvuueh8xqt\/Archive.mp4?dl=0","bookmark_id":"swift4-testflight-archiving-your-app"},{"id":"11239","section_id":"139","order":"12","title":"Uploading Your App","subhead":"","body":"<p>Finally click on the <strong>Upload<\/strong> button on the right Panel, a message with <strong>Upload Successful<\/strong> will appear and hit Done, like that our App should be iTunes Connect.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/s6rlka45kictl2g\/Upload.mp4?dl=0","bookmark_id":"swift4-testflight-uploading-your-app"},{"id":"11240","section_id":"139","order":"13","title":"iOS Build","subhead":"","body":"<p>Lets go back to iTunes Connect, and click on the TestFlight Tab, then choose iOS under BUILDS tab, over there you will see the build you just uploaded. <\/p><p>As final step, go to Test Information and fill in the different fields as: Test Information, Feedback Email, Marketing URL, Privacy Policy URL, Beta App Review Information and License agreement (this one is optional) and then hit Save, with this you will be able to start inviting testers.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/ios%20Build.jpg","image_width":"1600","image_height":"849","video":"","bookmark_id":"swift4-testflight-ios-build"},{"id":"11241","section_id":"139","order":"14","title":"Testers","subhead":"","body":"<p>There are two types of TestFlight testers, internal and external. Internal testers are users who are part of your organization or a small group of people which you want to give a first glance at your app; you can add up to 25 internal testers.<\/p><p> While external testers can be anyone outside of your company, this option is frequent use when you want to share your app with a broad public, TestFlight lets you add up to 10,000 external testers. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Testers.jpg","image_width":"1600","image_height":"673","video":"","bookmark_id":"swift4-testflight-testers"},{"id":"11242","section_id":"139","order":"15","title":"","subhead":"Adding new testers","body":"<p>To add new internal testers, go to iTunes Connect Users tab, and click on the plus button.<\/p><p>You only need an email address and as optional fields: the first and last name of the user.<\/p><p>If you have uploaded builds, invites will be sent right away, and internal testers will be able to access and install all your active builds. <\/p><p>To add external testers, click on the <strong>new group<\/strong> tab, fill out the email address, the first and last names fields are optional as well. <\/p><p>You can also import a list of testers from a CSV.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/AddingCSV.jpg","image_width":"1600","image_height":"905","video":"","bookmark_id":"swift4-testflight-adding-new-testers"},{"id":"11243","section_id":"139","order":"16","title":"Add a Build","subhead":"","body":"<p>Adding a build is simple, click on the plus button, then select your build and hit <strong>next<\/strong>, fill up all the information required; the more information you give to Apple, the easier for them to review your app. Finally hit submit and your build will go to a Beta App Review process.<br><\/p><p>Usually, this review process could take up to 48 hours to be approved.<\/p><p>You can add more builds and more testers anytime.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/AddaBuild.jpg","image_width":"1600","image_height":"905","video":"","bookmark_id":"swift4-testflight-add-a-build"},{"id":"11244","section_id":"139","order":"17","title":"","subhead":"Remove a tester","body":"<p>If you want to remove a tester, just go to the builds section, and remove a tester or group from the build, another option would be to expire the build for all testers. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Stoptesting%20.jpg","image_width":"1600","image_height":"905","video":"","bookmark_id":"swift4-testflight-remove-a-tester"},{"id":"11245","section_id":"139","order":"18","title":"All testers tab","subhead":"","body":"<p>On the <strong>all testers tab<\/strong> you can see a list of all your testers and each one status, along with some interesting details like the sessions and the times of crashes of the app.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/All%20Testers.jpg","image_width":"1600","image_height":"627","video":"","bookmark_id":"swift4-testflight-all-testers-tab"},{"id":"11246","section_id":"139","order":"19","title":"TestFlight app for testers","subhead":"","body":"<p>When the testers receive your invite via email, they just need to tap the provided link, and this will open the build on the TestFlight App. You will immediately spot an install button next to the icon of the App you want to test, just tap on install, and your app will start downloading. <\/p><p>Each build will be available for up to 90 days, starting from the day the developer uploads the build.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/0woxcc3adrowttz\/TesttFlight%20app%20for%20testers.mp4?dl=0","bookmark_id":"swift4-testflight-testflight-app-for-testers"},{"id":"11247","section_id":"139","order":"20","title":"Testing Multiple Apps","subhead":"","body":"<p>As a tester, you can test as many apps as you want, as long as the build didn&rsquo;t expire and the developer permitted you.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Testing%20Multiple%20Apps.jpg","image_width":"1600","image_height":"905","video":"","bookmark_id":"swift4-testflight-testing-multiple-apps"},{"id":"11248","section_id":"139","order":"21","title":"Testing Multiple Builds","subhead":"","body":"<p>You cannot have two different builds at the same time per se, but you can test any available to you. Go to the app&rsquo;s <strong>details page<\/strong>, then tap on <strong>Previous Builds<\/strong>, and you can select any available build. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/hz1uvmosfkml77f\/Oldbuilds.mp4?dl=0","bookmark_id":"swift4-testflight-testing-multiple-builds"},{"id":"11249","section_id":"139","order":"22","title":"How to Install Beta Apps","subhead":"","body":"<p>Apple made simple the process to install Beta Apps on any of its devices. <\/p><p>The first thing you need to do is to download the TestFlight app on your iOS or tvOS device.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/vgyisk21a2mdf1y\/How%20to%20Install%20Beta%20Apps.mp4?dl=0","bookmark_id":"swift4-testflight-how-to-install-beta-apps"},{"id":"11250","section_id":"139","order":"23","title":"","subhead":"Installing on an iOS device","body":"<p>You will receive an email with an invite for Beta testing a specific app, once you tap the link, it will open TestFlight, over there you will spot the icon of the app you want to test, and next to the icon an install button, tap on the install button, and voila, your app will download.<\/p><p>And you will know that is a beta app because when you see the icon of the app on the home screen, you will notice an orange dot next to the name of the app.<\/p><p>Consider also that the beta version will replace the live version of the app, so take care if you have a live version of the app installed on your device and you don&rsquo;t want to replace it by the beta.<\/p><p>Something really nice, is that Apple allows you to install beta apps on up 30 devices.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/1ty4exeteyyf5sv\/Installing%20on%20an%20iOS%20device.mp4?dl=0","bookmark_id":"swift4-testflight-installing-on-an-ios-device"},{"id":"11251","section_id":"139","order":"24","title":"","subhead":"Installing on an Apple TV","body":"<p>You will receive an invite to your email, once you hit the link of the invite you will be driven to a webpage with a redemption code. You can redeem the code via iTunes or your iOS device. Then turn on your Apple TV and the app will be already there. <\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Redeemacode.jpg","image_width":"1600","image_height":"905","video":"","bookmark_id":"swift4-testflight-installing-on-an-apple-tv"},{"id":"11252","section_id":"139","order":"25","title":"","subhead":"Testing an iMessage app and sticker packs","body":"<p>First of all, make sure you are running iOS 10 or later. It is effortless to test an iMessage app or a sticker pack, go to the TestFlight app in your iOS device, then install the Beta App to your device; this app must include iMessage extensions, then open the app from the home screen.<\/p><p>In case you are testing a standalone sticker pack or iMessage app, you have to open it from inside Messages.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/sticker%20packs.jpg","image_width":"1600","image_height":"905","video":"","bookmark_id":"swift4-testflight-testing-an-imessage-app-and-sticker-packs"},{"id":"11253","section_id":"139","order":"26","title":"","subhead":"Testing a watchOS app","body":"<p>To test a watchOS app, go to the TestFlight app on your iOS device. There you will spot the Beta App you want to try, go to the app&rsquo;s detail page. On the details page, you will see a Watch section, over there you will see the install button. Please notice that you will see the install button only if the watch extension is compatible with your watch.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/watchOS.jpg","image_width":"1600","image_height":"905","video":"","bookmark_id":"swift4-testflight-testing-a-watchos-app"},{"id":"11254","section_id":"139","order":"27","title":"Feedback","subhead":"","body":"<p>Another cool feature from TestFlight is that a tester can provide direct feedbacks, just go to the app&rsquo;s details page, and choose <strong>Send Beta Feedback<\/strong>. A popup will prompt reminding you that when you send the feedback, you are sharing your email address with the developer. Once you accept it, you can write your feedback add screenshots or even videos to explain your issue. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/0ys6t0pw57c621f\/Giving%20feedback.mp4?dl=0","bookmark_id":"swift4-testflight-feedback"},{"id":"11255","section_id":"139","order":"28","title":"After testing","subhead":"","body":"<p>Once the test period is over, you won&rsquo;t be able to open the beta build anymore. But you can install the public version, if available, from the App Store.<\/p><p>Note that if the app has in-app purchases, only during the beta period all the in-app purchases are free and this won&apos;t be extended to the public version.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/AfterTesting.jpg","image_width":"1600","image_height":"905","video":"","bookmark_id":"swift4-testflight-after-testing"},{"id":"11256","section_id":"139","order":"29","title":"Conclusion","subhead":"","body":"<p>Since Apple acquired TestFlight and integrate it to its ecosystem, it turns to be as one of the most essential tools for the developer community.<\/p><p>Here are few things to remember:<\/p><ul>\t<li> You are able to have up to 25 internal testers per app.<\/li>\t<li> You can have up to 10,000 external testers per app.<\/li>\t<li> Builds can be tested for up to 90 days, and that countdown begins when the build is uploaded. <\/li>\t<li> You can upload a new build to continue testing after 90 days.<\/li>\t<li> You can turn off testing at any time.<\/li>\t<li> TestFlight requires iOS 8 or tvOS 9 or later.<\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-testflight-conclusion"},{"id":"11257","section_id":"139","order":"30","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/marcosgriselli\">Marcos Griselli<\/a> and <a href=\"https:\/\/twitter.com\/dnisttahuz\">Daniel Nisttahuz<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-testflight-credit"}]},{"id":"140","chapter_id":"4","order":"170","slug":"swift4-publish-app-store","title":"Publish to the App Store","caption":"Working with iTunes Connect to get your app out there","body":"<p>Hooray! You are really close now to see your app in the App Store; this may be one of the most exciting steps in this long process, and you have it well-deserved.<\/p><p>So you finished developing and polishing your app, and of course, you already test it using TestFlight.<\/p><p>So we recommend you to submit the last tested build to the App Store using iTunes Connect, and after passing the validation tests, your App will be ready for the App Store.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/swift4-publish-app-store.jpg","video":"","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/swift4-publish-app-store.zip","contents":[{"id":"11534","section_id":"140","order":"1","title":"Requirements","subhead":"","body":"<p>Before you submit your app, you need to make sure that: <\/p><ol>\t<li>You have a valid Apple developer account.<\/li>\t<li>Your app follows <a href=\"https:\/\/developer.apple.com\/app-store\/review\/guidelines\/\" title=\"Apple&apos;s App Store Review Guidelines\">Apple&rsquo;s App&#xA0;Store Review Guidelines<\/a> and <a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/overview\/themes\/\" title=\"Human Interface Guidelines\">Human Interface Guidelines<\/a>, this can help your app to speed up the approval process. <\/li>\t<li>You had installed the latest version of Xcode.<\/li>\t<li>You have already tested your App in TestFlight.<\/li><\/ol>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-publish-app-store-requirements"},{"id":"11535","section_id":"140","order":"2","title":"Prepare your App","subhead":"","body":"<p>At this point, you have your app well tested, and you think it is ready for the AppStore. We made a list of the most common reasons for Apple to reject your App that you may like to check before submitting it: <\/p><ul>\t<li>If your app crashes or has bugs<\/li>\t<li>If your app behaves in a way that risks physical harm<\/li>\t<li>If your app uses camera, microphone or locations services without the user&rsquo;s authorization. <\/li>\t<li>If your app uses private APIs<\/li>\t<li>If your app does not perform as advertised <\/li>\t<li>If your app gathers data from the HomeKit API or from depth and\/or facial mapping tools<\/li>\t<li>If your app replicates the functionality of Apple&rsquo;s apps<\/li>\t<li>If your app includes undocumented or hidden features contrary to the description of your App <\/li><\/ul><p>We highly recommend you to read <a href=\"https:\/\/developer.apple.com\/app-store\/review\/guidelines\/#location\" title=\"App Store Review Guidelines\">Apple&rsquo;s App&#xA0;Store Review Guidelines<\/a> and <a href=\"[https:\/\/developer.apple.com\/app-store\/review\/rejections\/]\" title=\"common App rejections\">common App rejections<\/a> so you can have more details.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-publish-app-store-prepare-your-app"},{"id":"11536","section_id":"140","order":"3","title":"Before submitting","subhead":"","body":"<p>Don&apos;t forget that before submitting your app you need to consider two things: <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-publish-app-store-before-submitting"},{"id":"11537","section_id":"140","order":"4","title":"","subhead":"App ID","body":"<p>There are two types of App IDs, Wildcard and Explicit. Wildcard as Explicit App IDs can be used to build and to install multiple apps, but if your App needs to work with iCloud, In-App Purchases, Push notifications, or other iOS features you will need to use explicitly.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/WildcardandExplicit.jpg","image_width":"1600","image_height":"905","video":"","bookmark_id":"swift4-publish-app-store-app-id"},{"id":"11538","section_id":"140","order":"5","title":"","subhead":"Provisioning Profile","body":"<p>It&rsquo;s required for any developer who wants to submit an App to the Appstore to have a provisioning profile.<\/p><p><strong><em>Note: To have a provisional profile you need to have first a Distribution Certificate&#xA0;<\/em><\/strong><\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-publish-app-store-provisioning-profile"},{"id":"11539","section_id":"140","order":"6","title":"Submit your app to the App Store","subhead":"","body":"<p>After archiving your app and creating an app record on iTunes Connect, steps that we did in the TestFlight section.<\/p><p>Your next step is to go to <a href=\"http:\/\/itunesconnect.apple.com\" title=\"iTunesConnect\">iTunesConnect<\/a> and select <strong>My Apps<\/strong> and choose your app. Next, go to the <strong>Prepare for Submission Tab<\/strong> and select the Build section. Click the plus button to add a build and choose the one you want to submit. <\/p><p>As a final step, fill in all the information regarding Export Compliance, Content Rights, Advertising Identifier and hit save. <\/p><p>Click on <strong>Submit for Review<\/strong> and the status of your app will change to <strong>Waiting for Review<\/strong>. Most of the time it will take one to two days to receive an answer from Apple.<\/p>","image":"https:\/\/designcode.io\/cloud\/swift4\/Submit.jpg","image_width":"1600","image_height":"849","video":"","bookmark_id":"swift4-publish-app-store-submit-your-app-to-the-app-store"},{"id":"11540","section_id":"140","order":"7","title":"After You Submit","subhead":"","body":"<p>After you submit your app, you need to consider some aspects:<\/p><ul>\t<li>Apple will review your app as soon as they can, so be patient. <\/li>\t<li>You can check the status of your app on iTunes Connect.<\/li>\t<li>In case you have a critical time issue, you can request Apple for an <a href=\"https:\/\/developer.apple.com\/contact\/app-store\/?topic=expedite\" title=\"Expedited Review\">expedited review<\/a>, but be aware to not abuse of it because Apple can reject your request going forward. <\/li>\t<li>If you set your release date for upcoming days, weeks or months, your app will not appear on the App Store until the specific day you fixed it, and it can take up to 24 hours for your app to be in the different storefronts that you have selected.<\/li>\t<li>In case your App was rejected, you can use the Resolution Center to contact the App Review team if you still not happy you can <a href=\"https:\/\/developer.apple.com\/contact\/app-store\/?topic=appeal\" title=\"Submit an Appeal\">submit an appeal.&#xA0;&#xA0;<\/a><\/li><\/ul>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-publish-app-store-after-you-submit"},{"id":"11541","section_id":"140","order":"8","title":"Credit","subhead":"","body":"<p>Special thanks to <a href=\"https:\/\/twitter.com\/dnisttahuz\">Daniel Nisttahuz<\/a> for co-authoring this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"swift4-publish-app-store-credit"}]}]},{"id":"5","title":"SpriteKit","sections":[{"id":"146","chapter_id":"5","order":"999","slug":"spritekit-intro","title":"Introduction to SpriteKit","caption":"Creating your first iPhone platformer game","body":"<p>In this section, you will learn how to create your very own platform game using SpriteKit. You will learn how to implement all the basic gaming features such as player movement, player jumping, camera work, animations, etc.<\/p>","image":"https:\/\/designcode.io\/cloud\/spritekit\/sprite-intro.jpg","video":"https:\/\/player.vimeo.com\/external\/263963687.hd.mp4?s=2806d12c82e07c7c8e5139fc0e66810781d97add&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/spritekit-intro.zip","contents":[{"id":"12839","section_id":"146","order":"1","title":"What You&rsquo;re Building","subhead":"","body":"<p>This is the iPhone platformer game that you will be building.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/5l9rbszq7w2auxw\/1.%20SpriteKit%20-%20ElonsSpaceAdventure.mp4?dl=0","bookmark_id":"spritekit-intro-what-you-re-building"},{"id":"12840","section_id":"146","order":"2","title":"What is SpriteKit?","subhead":"","body":"<p>SpriteKit is a powerful 2D sprite-based framework for games development from Apple. SpriteKit uses SKView which is a scene, it is the visual that you see on your screen. For those who are familiar with making iOS App, it is similar to Storyboard. Less code, more images!<\/p>","image":"https:\/\/designcode.io\/cloud\/spritekit\/1.%20SpriteKit-What%20is%20SpriteKit_.jpg","image_width":"1600","image_height":"902","video":"","bookmark_id":"spritekit-intro-what-is-spritekit"},{"id":"12841","section_id":"146","order":"3","title":"Why use SpriteKit?","subhead":"","body":"<p>SpriteKit is easy to learn because it is a well-designed framework and it is even easier if you have experience with Swift. Even for a beginner, if you want to create your first game, 2D games is without a doubt the best way to transit in this new world. If you want to learn more about SpriteKit, here&rsquo;s the link to <a href=\"https:\/\/developer.apple.com\/documentation\/spritekit\">Apple&rsquo;s SpriteKit page<\/a>. <\/p>","image":"https:\/\/designcode.io\/cloud\/spritekit\/2.%20SpriteKit-Why%20use%20SpriteKit_.jpg","image_width":"1600","image_height":"893","video":"","bookmark_id":"spritekit-intro-why-use-spritekit"},{"id":"12842","section_id":"146","order":"4","title":"Downloads for Intro to SpriteKit","subhead":"","body":"<p>To follow this tutorial, you&rsquo;ll need <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode 9<\/a> and the <a href=\"https:\/\/www.dropbox.com\/sh\/e4nx0vnjz0znzu1\/AAAHXjd03Ec5t2l8uNle_kPYa?dl=0\">assets folder<\/a> for the game. To follow along, you can download the <a href=\"https:\/\/www.dropbox.com\/s\/xz36oz5s91agt5r\/FinalProject1.zip?dl=1\">final project<\/a> for this section.<\/p>","image":"https:\/\/designcode.io\/cloud\/spritekit\/3.%20SpriteKit-Letsgetstarted.jpg","image_width":"1600","image_height":"902","video":"","bookmark_id":"spritekit-intro-downloads-for-intro-to-spritekit"},{"id":"12843","section_id":"146","order":"5","title":"Set Up","subhead":"","body":"<p>Let&rsquo;s open Xcode, a small window will pop up with three different options, choose <strong>Create a new Xcode project<\/strong>. Xcode will give us some different templates to start our project. Make sure you select iOS as the platform, then choose the <strong>Game<\/strong> template and hit <strong>Next<\/strong>. On the following window, you will need to add a <strong>Product Name<\/strong>, let&rsquo;s type <strong>ElonGame<\/strong>, and you can put the name of your company on the <strong>Organization Identifier<\/strong> box, finally hit <strong>Next<\/strong>.<br>Next, we need to choose where we will like to save our project, in our case we will save it on our Desktop, click on <strong>Create<\/strong>. Congratulations! You created your first game. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/4p2wrqe5yxi65us\/2.%20SpriteKit%20-%20CreateYourFirstSpriteKitProject%20.mp4?dl=0","bookmark_id":"spritekit-intro-set-up"},{"id":"12844","section_id":"146","order":"6","title":"Running the Simulator","subhead":"","body":"<p>Let&rsquo;s run the simulator to make sure that our project is working. Click on the play button in the top left corner of your screen or press <strong>Command + R<\/strong>. <\/p><p>You will see that an iPhone frame will prompt with a greeting message on the screen: <strong>Hello, World!<\/strong>. Now that we are sure that our project is working properly, let&rsquo;s import the game assets.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/tkstajits51h87k\/3.%20SpriteKit%20-%20RunningTheSimulator.mp4?dl=0","bookmark_id":"spritekit-intro-running-the-simulator"},{"id":"12845","section_id":"146","order":"7","title":"Importing Assets","subhead":"","body":"<p>Let&rsquo;s click on the <strong>Assets.xcassets<\/strong> folder from our <strong>Project Navigator<\/strong> panel, the panel on the left side of Xcode&rsquo;s UI. Then, drag and drop all your assets from your assets folder to <strong>Assets.xcassets<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/5znnqo1ctgk96u5\/4.%20SpriteKit%20-%20Importing%20Assets.mp4?dl=0","bookmark_id":"spritekit-intro-importing-assets"},{"id":"12846","section_id":"146","order":"8","title":"Providing Namespacing","subhead":"","body":"<p>If you check the folders: <strong>jewel<\/strong>, <strong>jump<\/strong> and <strong>player<\/strong>, inside <strong>Assets.xcassets<\/strong>.<\/p><p>You will notice that the some of the assets on those folders have the same name, which can lead to a confusion later on. An easy way to organize them is to provide a namespacing. To do so, let&rsquo;s select those folders and on the <strong>Attributes Inspector<\/strong> panel, the right panel of the UI, check the box <strong>Provides Namespace<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/bhhtb8zqx7ghbvq\/5.%20SpriteKit%20-%20ProvidingNamespacing.mp4?dl=0","bookmark_id":"spritekit-intro-providing-namespacing"},{"id":"12847","section_id":"146","order":"9","title":"The SpriteKit Scene","subhead":"","body":"<p>Click on <strong>GameScene.sks<\/strong> from the <strong>Project Navigator<\/strong> panel. To have a cleaner UI without too many panels in our Xcode, project let&rsquo;s close the Navigator panel clicking on the third button, counting from right to left, of the top right corner of Xcode&rsquo;s UI. Then, select the <strong>helloLabel<\/strong> asset from the <strong>Scene<\/strong> panel and delete it. Now, let&rsquo;s name our scene. To do so, let&rsquo;s go to the right panel of our Xcode&rsquo;s UI and choose the third icon of the panel <strong>Attributes Inspector<\/strong>. On the <strong>Name<\/strong> box, let&rsquo;s type <strong>Level 1<\/strong>. Finally, let&rsquo;s give the width and height of the iPhone X to our scene, 812 for the width and 375 for the height and change the device on the simulator to iPhone X.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/ztqnvlr8gpab19n\/6.%20SpriteKit%20-%20theSpriteKitScene.mp4?dl=0","bookmark_id":"spritekit-intro-the-spritekit-scene"},{"id":"12848","section_id":"146","order":"10","title":"Adding the Assets to the Scene","subhead":"","body":"<p>Click on the <strong>Media Library<\/strong> panel, the bottom right panel on Xcode&rsquo;s UI, drag and drop the <strong>ground<\/strong> and <strong>player\/0<\/strong> assets to the canvas. Place the <strong>ground<\/strong> to the bottom of the scene and you can put <strong>player\/0<\/strong> to the middle of the scene. Let&rsquo;s run the simulator to see how our scene looks like. If your iPhone in your simulator is in portrait mode, you may not be able to see the full scene. You will need to change the iPhone&rsquo;s orientation to landscape mode by pressing <strong>Command + right arrow<\/strong>.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/fpnzjn428ioyynu\/7.%20SpriteKit%20-%20AddingTheAssetsToTheScene.mp4?dl=0","bookmark_id":"spritekit-intro-adding-the-assets-to-the-scene"},{"id":"12849","section_id":"146","order":"11","title":"Physic Properties (character)","subhead":"","body":"<p>We need to add some physics properties to both assets, so we can create a more realistic interaction between our hero and the ground. First, let&rsquo;s select <strong>player\/0<\/strong> and let&rsquo;s change its <strong>Body Type<\/strong> which is in the Physics Definition attribute from <strong>None<\/strong> to <strong>Alpha Mask<\/strong> and uncheck <strong>Allows Rotation<\/strong>. We will enable different physic properties, like gravity, collision, friction and many more, to our character.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/3i1mz33lzlquw7z\/8.%20SpriteKit%20-%20PhysicsPropertiesCharacter.mp4?dl=0","bookmark_id":"spritekit-intro-physic-properties-character"},{"id":"12850","section_id":"146","order":"12","title":"Physic Properties (ground)","subhead":"","body":"<p>Let&rsquo;s add some physics properties to the ground as well. We will change its <strong>Body Type<\/strong> from <strong>None<\/strong> to <strong>Bouncing rectangle<\/strong> and uncheck <strong>Dynamic<\/strong>, <strong>Allows Rotation<\/strong> and <strong>Affected By Gravity<\/strong>. Finally, let&rsquo;s press <strong>Command + R<\/strong> to run the simulator and you will notice that our hero will be touching the ground. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/h9oudqb8md5d7sn\/9.%20SpriteKit%20-%20PhysicsPropertiesGround.mp4?dl=0","bookmark_id":"spritekit-intro-physic-properties-ground"},{"id":"12851","section_id":"146","order":"13","title":"Body Definition","subhead":"","body":"<p>Depending on the shape of the physics body, you will choose between a better collisions accuracy or a better performance. If you use the circular shape, the performance will be better but, you will sacrifice the collision accuracy. On the other hand, choosing alpha mask prioritize collision accuracy over performance.<\/p><p>The Dynamic property determines if the node will be affected by physics: gravity, friction, collisions, forces or impulses.<\/p><p>The AllowsRotation property determines if your node can rotate depending on the force or the gravity.<\/p><p>The Pinned property will force the node to stay at its initial position while the gravity will pull the heavy parts of the node towards the ground.<\/p><p>The AffectedByGravity determines if the node can be affected by the physics world&rsquo;s gravity.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-intro-body-definition"},{"id":"12852","section_id":"146","order":"14","title":"Node Organization","subhead":"","body":"<p>Let&rsquo;s build the scenario of our game adding some other assets to the canvas like: <strong>background<\/strong>, <strong>arrow<\/strong>, <strong>knob<\/strong>, <strong>moon<\/strong>, <strong>mountain 1<\/strong>, both <strong>mountain 2<\/strong> assets and <strong>stars<\/strong>. You can organize them at your leisure. You need to consider that the position of the assets in the <strong>Scene<\/strong> panel will affect how you will see them on the canvas. So if you put an asset on the top of the asset&rsquo;s list of the <strong>Scene<\/strong> panel, this same asset will go to the back of the canvas. Therefore, top means bottom layer.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/ee9u2kleyaf4dng\/10.%20SpriteKit%20-%20NodeOrganization.mp4?dl=0","bookmark_id":"spritekit-intro-node-organization"},{"id":"12853","section_id":"146","order":"15","title":"Naming the nodes","subhead":"","body":"<p>Let&rsquo;s change the names of the nodes on the <strong>Scene<\/strong> panel because right now all the nodes have the same name. The following image shows how we are naming the nodes. <\/p>","image":"https:\/\/designcode.io\/cloud\/spritekit\/4.%20SpriteKit-NamingTheNodes.jpg","image_width":"1600","image_height":"902","video":"","bookmark_id":"spritekit-intro-naming-the-nodes"},{"id":"12854","section_id":"146","order":"16","title":"Creating a Joystick","subhead":"","body":"<p>Let&rsquo;s open the <strong>Object Library<\/strong>, the bottom right panel, drag an <strong>Empty<\/strong> node and drop it on top of the <strong>knob<\/strong> asset. Let&rsquo;s name the <strong>Empty<\/strong> node <strong>joystick<\/strong>. Next, we will change the position of the <strong>joystick<\/strong> node, -300 to its X axis and -100 to its Y axis. Then, let&rsquo;s select the <strong>knob<\/strong> and <strong>arrow<\/strong> nodes on the document outline and drop them into the <strong>joystick<\/strong> node. This will nest them.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/appm5wxgikd7i1x\/11.%20SpriteKit%20-%20CreatingAJoystick.mp4?dl=0","bookmark_id":"spritekit-intro-creating-a-joystick"},{"id":"12855","section_id":"146","order":"17","title":"Z Position","subhead":"","body":"<p>Let&rsquo;s open our project navigator, then select <strong>GameViewController.swift<\/strong>. Over there on line 28 of our code, let&rsquo;s change <strong>view.ignoresSiblingOrder = true<\/strong>&#xA0; for <strong>view.ignoresSiblingOrder = false<\/strong> . We are changing from true to false because we have many nodes that share the same Z position and we want Xcode to render all our nodes as they are in our scene. The Z position is a number which determines the order of each node that will appear on our screen, that&rsquo;s why it&rsquo;s important to change it for our case.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/4ao31wojbtb4xgn\/12.%20SpriteKit%20-%20ZPosition.mp4?dl=0","bookmark_id":"spritekit-intro-z-position"},{"id":"12856","section_id":"146","order":"18","title":"Conclusion","subhead":"","body":"<p>We are thrilled that you arrived at the end of the section. As you may have noticed, you have already learned many things, like how to create your first project in Xcode, to import assets, to set up a scene, to apply some physic properties to the nodes and get to know about the Z position.<br><\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-intro-conclusion"}]},{"id":"147","chapter_id":"5","order":"999","slug":"spritekit-joystick","title":"Joystick","caption":"Working with controls to move your player","body":"<p>In this section, we will connect our player to the joystick, so we can move him with the knob. We will also learn about the <strong>Touches<\/strong>, to reset the knob to its initial and how to control the position of our player so he always be facing the right direction on his X axis. You can <a href=\"https:\/\/www.dropbox.com\/s\/ct7mb9syjj1veye\/FinalProject2.zip?dl=0\" title=\"Second Section Final Project\">download the final project<\/a> to follow along.<\/p>","image":"https:\/\/designcode.io\/cloud\/spritekit\/spritekit-joystick.jpg","video":"https:\/\/player.vimeo.com\/external\/263963706.hd.mp4?s=2a82703c7e7f41318d3dc5223a053d934c6b10fe&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/spritekit-joystick.zip","contents":[{"id":"12857","section_id":"147","order":"1","title":"Downloads for Joystick and Player","subhead":"","body":"<p>To follow this tutorial, you will need <a href=\"xcode%20download\" title=\"Xcode 9\">Xcode 9&#xA0;<\/a>and you can <a href=\"https:\/\/www.dropbox.com\/s\/ct7mb9syjj1veye\/FinalProject2.zip?dl=0\" title=\"Second Section Final Project\">download the final project<\/a> which will help you to compare with your own progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-downloads-for-joystick-and-player"},{"id":"12858","section_id":"147","order":"2","title":"Set Up the Document","subhead":"","body":"<p>Let&rsquo;s click on <strong>GameScene.swift<\/strong> and you will notice that some code are already pre-filled. That is the SpriteKit template that Apple gives us to start our game.<\/p><p>We will erase all that code since they won&rsquo;t be needed. Start by double-clicking on the first open bracket, this action will select all the code within the underlying brackets. Let&rsquo;s delete all of it. Finally, let&rsquo;s add an open curly bracket <strong>{&#xA0;<\/strong> and hit enter.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/tg711yj77g0ejw5\/1.%20Joystick%20and%20Player%20-%20SetUp%20.mp4?dl=0","bookmark_id":"spritekit-joystick-set-up-the-document"},{"id":"12859","section_id":"147","order":"3","title":"Variables","subhead":"","body":"<p>After the open bracket we just added, we need to declare our variables for player, joystick and joystickKnob. We will put all of them as a SKNode and on optional mode. <\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ Nodes<\/span><br><span class=\"token keyword\">var<\/span> player <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKNode<\/span><span class=\"token operator\">?<\/span><br><span class=\"token keyword\">var<\/span> joystick <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKNode<\/span><span class=\"token operator\">?<\/span><br><span class=\"token keyword\">var<\/span> joystickKnob <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKNode<\/span><span class=\"token operator\">?<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-variables"},{"id":"12860","section_id":"147","order":"4","title":"","subhead":"didMove Method","body":"<p>Next, we need to add a <strong>didMove<\/strong> method. This is to customize our scene through code before the view gets presented and will be the first one to be called when you&rsquo;ll run the game. <\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ didmove<\/span><br><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">didMove<\/span><span class=\"token punctuation\">(<\/span>to view<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKView<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-didmove-method"},{"id":"12861","section_id":"147","order":"5","title":"","subhead":"Initializing Variables","body":"<p>Inside the <strong>didMove<\/strong> curly brackets, we need to initialize our variables: player, joystick and knob in our <strong>GameScene.sks<\/strong>.<\/p><pre><code class=\"language-swift\">player <span class=\"token operator\">=<\/span> <span class=\"token function\">childNode<\/span><span class=\"token punctuation\">(<\/span>withName<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;player&quot;<\/span><span class=\"token punctuation\">)<\/span><br>joystick <span class=\"token operator\">=<\/span> <span class=\"token function\">childNode<\/span><span class=\"token punctuation\">(<\/span>withName<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;joystick&quot;<\/span><span class=\"token punctuation\">)<\/span><br>joystickKnob <span class=\"token operator\">=<\/span> joystick<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">childNode<\/span><span class=\"token punctuation\">(<\/span>withName<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;knob&quot;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-initializing-variables"},{"id":"12862","section_id":"147","order":"6","title":"Touches","subhead":"","body":"<p>What&rsquo;s an iOS app without touches? Interactions between a user&rsquo;s finger(s) and the UI is probably one of the best inventions to be included in a device or app if not the best. To control our player, we will use the touches methods as opposed to gesture recognizers. To keep our code organized, we will create an extension after the last closing bracket of our Swift file. Later on, we will implement our touches inside that extension. <\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ MARK: Touches<\/span><br><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">GameScene<\/span>  <span class=\"token punctuation\">{<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-touches"},{"id":"12863","section_id":"147","order":"7","title":"","subhead":"Adding the Touches","body":"<p>There are three phases to the touch events. <strong>&#xA0;touchesBegan<\/strong> is the first contact between your finger(s) and the screen, <strong>&#xA0;touchesMoved<\/strong> is when you swipe your finger on the screen and <strong>&#xA0;touchesEnded<\/strong> is the moment when you remove your finger from the screen. Let&rsquo;s add these three phases inside the extension we just created by creating a method for each.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ Touch Began<\/span><br><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">touchesBegan<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> touches<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Set<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">UITouch<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">,<\/span> with event<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIEvent<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><span class=\"token punctuation\">}<\/span><br><span class=\"token comment\">\/\/ Touch Moved<\/span><br><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">touchesMoved<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> touches<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Set<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">UITouch<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">,<\/span> with event<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIEvent<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><span class=\"token punctuation\">}<\/span><br><span class=\"token comment\">\/\/ Touch Ended<\/span><br><span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">touchesEnded<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> touches<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Set<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">UITouch<\/span><span class=\"token operator\">&gt;<\/span><span class=\"token punctuation\">,<\/span> with event<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">UIEvent<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-adding-the-touches"},{"id":"12864","section_id":"147","order":"8","title":"Knob Movement","subhead":"","body":"<p>Now that we added our touch events, we can work on the knob movement. For that, we need to add two new variables, right after the code lines where we declare our <strong>Node<\/strong> variables.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ Boolean<\/span><br><span class=\"token keyword\">var<\/span> joystickAction <span class=\"token operator\">=<\/span> <span class=\"token boolean\">false<\/span><br><br><span class=\"token comment\">\/\/ Measure<\/span><br><span class=\"token keyword\">var<\/span> knobRadius <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span> <span class=\"token operator\">=<\/span> <span class=\"token number\">50.0<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-knob-movement"},{"id":"12865","section_id":"147","order":"9","title":"touchesBegan","subhead":"","body":"<p>Since we have declared the variables for our knob, now we can set those variables in the three stages of the touch events. Inside our override methods of <strong>touchesBegan<\/strong>, add the following code:<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">for<\/span> touch <span class=\"token keyword\">in<\/span> touches <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">if<\/span> <span class=\"token keyword\">let<\/span> joystickKnob <span class=\"token operator\">=<\/span> joystickKnob <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">let<\/span> location <span class=\"token operator\">=<\/span> touch<span class=\"token punctuation\">.<\/span><span class=\"token function\">location<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">in<\/span><span class=\"token punctuation\">:<\/span> joystick<span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><br>        joystickAction <span class=\"token operator\">=<\/span> joystickKnob<span class=\"token punctuation\">.<\/span>frame<span class=\"token punctuation\">.<\/span><span class=\"token function\">contains<\/span><span class=\"token punctuation\">(<\/span>location<span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>Basically, this snippet of code means that whenever we move the knob, it will register the location of the touch within the the joystick and assign that location to the joystickAction variable. This only works if the joystickKnob is already set to true.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-touchesbegan"},{"id":"12866","section_id":"147","order":"10","title":"touchesMoved","subhead":"","body":"<p>Let&rsquo;s go back to our <strong>touchesMoved<\/strong> override method and fill in some code. In there, we need to declare that our joystick is in fact a joystick, or else do nothing and exit the method. The same applies for the joystickKnob and the joystickAction.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">let<\/span> joystick <span class=\"token operator\">=<\/span> joystick <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">}<\/span><br><span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">let<\/span> joystickKnob <span class=\"token operator\">=<\/span> joystickKnob <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">}<\/span><br><br><span class=\"token keyword\">if<\/span> <span class=\"token operator\">!<\/span>joystickAction <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-touchesmoved"},{"id":"12867","section_id":"147","order":"11","title":"","subhead":"Distance Moved","body":"<p>Now, we need to calculate the distance when moving the knob. Just right after our last line of code in <strong>&#xA0;touchesMoved<\/strong>, let&rsquo;s declare the variables for the distance. We will use the Pythagorean theory to calculate the distance between the initial point of the knob to the point where we are going to hold it. For those who are not familiar with the Pythagorean theorem, it is used to calculate the hypotenuse which is the longest side of a triangle based on the 2 other sides. The common formula is a&#xB2;&#xA0;+ b&#xB2;&#xA0;= c&#xB2;.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ Distance<\/span><br><span class=\"token keyword\">for<\/span> touch <span class=\"token keyword\">in<\/span> touches <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> position <span class=\"token operator\">=<\/span> touch<span class=\"token punctuation\">.<\/span><span class=\"token function\">location<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">in<\/span><span class=\"token punctuation\">:<\/span> joystick<span class=\"token punctuation\">)<\/span><br><br>    <span class=\"token keyword\">let<\/span> length <span class=\"token operator\">=<\/span> <span class=\"token function\">sqrt<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">pow<\/span><span class=\"token punctuation\">(<\/span>position<span class=\"token punctuation\">.<\/span>y<span class=\"token punctuation\">,<\/span> <span class=\"token number\">2<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">+<\/span> <span class=\"token function\">pow<\/span><span class=\"token punctuation\">(<\/span>position<span class=\"token punctuation\">.<\/span>x<span class=\"token punctuation\">,<\/span> <span class=\"token number\">2<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">let<\/span> angle <span class=\"token operator\">=<\/span> <span class=\"token function\">atan2<\/span><span class=\"token punctuation\">(<\/span>position<span class=\"token punctuation\">.<\/span>y<span class=\"token punctuation\">,<\/span> position<span class=\"token punctuation\">.<\/span>x<span class=\"token punctuation\">)<\/span><br><br>    <span class=\"token keyword\">if<\/span> knobRadius <span class=\"token operator\">&gt;<\/span> length <span class=\"token punctuation\">{<\/span><br>        joystickKnob<span class=\"token punctuation\">.<\/span>position <span class=\"token operator\">=<\/span> position<br>    <span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span><br>        joystickKnob<span class=\"token punctuation\">.<\/span>position <span class=\"token operator\">=<\/span> <span class=\"token function\">CGPoint<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token function\">cos<\/span><span class=\"token punctuation\">(<\/span>angle<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">*<\/span> knobRadius<span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token function\">sin<\/span><span class=\"token punctuation\">(<\/span>angle<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">*<\/span> knobRadius<span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"https:\/\/designcode.io\/cloud\/spritekit\/spritekit-joystick-pitagore.jpg","image_width":"1266","image_height":"406","video":"","bookmark_id":"spritekit-joystick-distance-moved"},{"id":"12868","section_id":"147","order":"12","title":"touchesEnded","subhead":"","body":"<p>If you try to run the simulator and play with the joystick, you would notice that you can move the knob but the knob would not return to its initial position. Instead, it would stay at the last point your finger dragged to it. To fix this, we need to declare some other variables in the <strong>touchesEnded<\/strong> method and later on, we will add a function to reset the knob position.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">for<\/span> touch <span class=\"token keyword\">in<\/span> touches <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">let<\/span> xJoystickCoordinate <span class=\"token operator\">=<\/span> touch<span class=\"token punctuation\">.<\/span><span class=\"token function\">location<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">in<\/span><span class=\"token punctuation\">:<\/span> joystick<span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span>x<br>    <span class=\"token keyword\">let<\/span> xLimit<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">CGFloat<\/span> <span class=\"token operator\">=<\/span> <span class=\"token number\">200.0<\/span><br>    <span class=\"token keyword\">if<\/span> xJoystickCoordinate <span class=\"token operator\">&gt;<\/span> <span class=\"token operator\">-<\/span>xLimit <span class=\"token operator\">&amp;&amp;<\/span> xJoystickCoordinate <span class=\"token operator\">&lt;<\/span> xLimit <span class=\"token punctuation\">{<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In this case, xJoystickCoordinate is the x position of the touch in the joystick. Since our joystick has a radius of 200 points, the x position of the touch cannot exceed -200 points to the left and neither 200 points to the right. This is where the if statement comes in to make sure that this condition is true.<br><\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-touchesended"},{"id":"12869","section_id":"147","order":"13","title":"","subhead":"Reset Knob Position","body":"<p>We need to ascertain that the knob can always return back to its initial position. To do so, we need to create a new function. Let&rsquo;s go to the bottom of our document and create a new function right after the last closing bracket.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ MARK: Action<\/span><br><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">GameScene<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">func<\/span> <span class=\"token function\">resetKnobPosition<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">let<\/span> initialPoint <span class=\"token operator\">=<\/span> <span class=\"token function\">CGPoint<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> y<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><br>        <span class=\"token keyword\">let<\/span> moveBack <span class=\"token operator\">=<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">move<\/span><span class=\"token punctuation\">(<\/span>to<span class=\"token punctuation\">:<\/span> initialPoint<span class=\"token punctuation\">,<\/span> duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.1<\/span><span class=\"token punctuation\">)<\/span><br>        moveBack<span class=\"token punctuation\">.<\/span>timingMode <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">.<\/span>linear<br>        joystickKnob<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">run<\/span><span class=\"token punctuation\">(<\/span>moveBack<span class=\"token punctuation\">)<\/span><br>        joystickAction <span class=\"token operator\">=<\/span> <span class=\"token boolean\">false<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>We are first setting the initial position of the knob to 0 for both x and y coordinates. Then, we are creating an action to move back the knob to its initial position and that will take 0.1 second. Moreover, specifying the timing mode as linear just makes the knob return back in a constant manner and visible to us. Otherwise, it would disappear and 0.1 second later, it will appear back at the initial position. Next, we are running that action we just defined and finally set the joystickAction to false in the sense that its state is idle. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-reset-knob-position"},{"id":"12870","section_id":"147","order":"14","title":"","subhead":"Add Reset Function","body":"<p>Now that we have our function created, we can add it to our <strong>touchesEnded&#xA0;<\/strong> method right inside our joystick limit condition. If you run the simulator, you will see that the knob now returns to its initial position.<\/p><pre><code class=\"language-swift\"><span class=\"token function\">resetKnobPosition<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-add-reset-function"},{"id":"12871","section_id":"147","order":"15","title":"Moving Our Player on the X axis","subhead":"","body":"<p>Since we have our knob working properly and connected to our player, as the next step, we need to make our player move on its X axis. So, let&rsquo;s create some new variables right after the <strong>Measure<\/strong> variable.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ Sprite Engine<\/span><br><span class=\"token keyword\">var<\/span> previousTimeInterval <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">TimeInterval<\/span> <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><br><span class=\"token keyword\">var<\/span> playerIsFacingRight <span class=\"token operator\">=<\/span> <span class=\"token boolean\">true<\/span><br><span class=\"token keyword\">let<\/span> playerSpeed <span class=\"token operator\">=<\/span> <span class=\"token number\">4.0<\/span><br><\/code><\/pre><p>At the start of the game, the time interval is initialized at 0, the player is facing right and his movement&rsquo;s speed is set at 4.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-moving-our-player-on-the-x-axis"},{"id":"12872","section_id":"147","order":"16","title":"Game Loop","subhead":"","body":"<p>To make a game loop, let&rsquo;s create a new extension at the bottom of our document, let&rsquo;s call it <strong>GameLoop<\/strong> and declare its variables. <\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ MARK: Game Loop<\/span><br><span class=\"token keyword\">extension<\/span> <span class=\"token builtin\">GameScene<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">update<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> currentTime<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">TimeInterval<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">let<\/span> deltaTime <span class=\"token operator\">=<\/span> currentTime <span class=\"token operator\">-<\/span> previousTimeInterval<br>        previousTimeInterval <span class=\"token operator\">=<\/span> currentTime<br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>In game development, the delta time is the time elapsed between two frame updates. Here, it is the difference between the current time and the previous time interval. As we go on, the time elapsed is being added to the deltaTime variable. The last line of code reset the previous time interval as the current time. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-game-loop"},{"id":"12873","section_id":"147","order":"17","title":"","subhead":"Player Movement","body":"<p>Now, we will set up the joystick so we can instruct our player to move along the X axis. So right after <strong>previousTimeInterval = currentTime<\/strong>, let&rsquo;s set up the joystick.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ Player movement<\/span><br><span class=\"token keyword\">guard<\/span> <span class=\"token keyword\">let<\/span> joystickKnob <span class=\"token operator\">=<\/span> joystickKnob <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token punctuation\">}<\/span><br><span class=\"token keyword\">let<\/span> xPosition <span class=\"token operator\">=<\/span> <span class=\"token function\">Double<\/span><span class=\"token punctuation\">(<\/span>joystickKnob<span class=\"token punctuation\">.<\/span>position<span class=\"token punctuation\">.<\/span>x<span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> displacement <span class=\"token operator\">=<\/span> <span class=\"token function\">CGVector<\/span><span class=\"token punctuation\">(<\/span>dx<span class=\"token punctuation\">:<\/span> deltaTime <span class=\"token operator\">*<\/span> xPosition <span class=\"token operator\">*<\/span> playerSpeed<span class=\"token punctuation\">,<\/span> dy<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">let<\/span> move <span class=\"token operator\">=<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">move<\/span><span class=\"token punctuation\">(<\/span>by<span class=\"token punctuation\">:<\/span> displacement<span class=\"token punctuation\">,<\/span> duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><br>player<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">run<\/span><span class=\"token punctuation\">(<\/span>move<span class=\"token punctuation\">)<\/span> <br><\/code><\/pre><p>The concept is similar to resetting the knob back to its initial position except that here, we are moving the player by distance and time instead of to its final destination. Also, the distance travelled is in correlation with the x position of the knob as it keeps on being pressed on and factor in a speed of 4 initialized earlier.<\/p><p>If you run the simulator, you will see that we can now control our player&rsquo;s movement onto the X axis with the joystick. However, we will need to flip our player image according to its direction. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-player-movement"},{"id":"12874","section_id":"147","order":"18","title":"Flipping horizontally our player","subhead":"","body":"<p>To control the horizontal flip of our player, we need to set up its X position. Let&rsquo;s erase our last line of code <strong>player?.run(move)<\/strong> and start the set up on the same line of code.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> faceAction <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token operator\">!<\/span><br><span class=\"token keyword\">let<\/span> movingRight <span class=\"token operator\">=<\/span> xPosition <span class=\"token operator\">&gt;<\/span> <span class=\"token number\">0<\/span><br><span class=\"token keyword\">let<\/span> movingLeft <span class=\"token operator\">=<\/span> xPosition <span class=\"token operator\">&lt;<\/span> <span class=\"token number\">0<\/span><br><span class=\"token keyword\">if<\/span> movingLeft <span class=\"token operator\">&amp;&amp;<\/span> playerIsFacingRight <span class=\"token punctuation\">{<\/span><br>    playerIsFacingRight <span class=\"token operator\">=<\/span> <span class=\"token boolean\">false<\/span><br>    <span class=\"token keyword\">let<\/span> faceMovement <span class=\"token operator\">=<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">scaleX<\/span><span class=\"token punctuation\">(<\/span>to<span class=\"token punctuation\">:<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span> duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.0<\/span><span class=\"token punctuation\">)<\/span><br>    faceAction <span class=\"token operator\">=<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">sequence<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">[<\/span>move<span class=\"token punctuation\">,<\/span> faceMovement<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><span class=\"token keyword\">else<\/span> <span class=\"token keyword\">if<\/span> movingRight <span class=\"token operator\">&amp;&amp;<\/span> <span class=\"token operator\">!<\/span>playerIsFacingRight <span class=\"token punctuation\">{<\/span><br>    playerIsFacingRight <span class=\"token operator\">=<\/span> <span class=\"token boolean\">true<\/span><br>    <span class=\"token keyword\">let<\/span> faceMovement <span class=\"token operator\">=<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">scaleX<\/span><span class=\"token punctuation\">(<\/span>to<span class=\"token punctuation\">:<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">,<\/span> duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.0<\/span><span class=\"token punctuation\">)<\/span><br>    faceAction <span class=\"token operator\">=<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">sequence<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">[<\/span>move<span class=\"token punctuation\">,<\/span> faceMovement<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span><br>    faceAction <span class=\"token operator\">=<\/span> move<br><span class=\"token punctuation\">}<\/span><br>player<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">run<\/span><span class=\"token punctuation\">(<\/span>faceAction<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-flipping-horizontally-our-player"},{"id":"12875","section_id":"147","order":"19","title":"Conclusion","subhead":"","body":"<p>Let&rsquo;s run the simulator and you will notice that now you can control our player from left to right, with the image flipping horizontally according to its direction. Congratulations! So in this section, we learned many things like the touches function, how to move the knob around, how to reset the knob&rsquo;s initial position, we made the player move on its X axis and we also flip it horizontally according to its X axis direction.<br><\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-joystick-conclusion"}]},{"id":"148","chapter_id":"5","order":"999","slug":"spritekit-player-state","title":"PlayerState Machine","caption":"Using GameplayKit to manage the different statuses and animations","body":"<p>In this section, we will learn about <a href=\"https:\/\/developer.apple.com\/library\/content\/documentation\/General\/Conceptual\/GameplayKit_Guide\/StateMachine.html\" title=\"GameplayKit State Machine\">GameplayKit State Machine<\/a>, then we will make our player jump and give him some other animations, so buckle up and get ready for this ride of knowledge. If you want to compare your progress, you can <a href=\"https:\/\/www.dropbox.com\/s\/7t5pf96uabmfv7l\/FinalProject3.zip?dl=0\" title=\"Final Project 3\">download the final project&#xA0;<\/a>for this section.<\/p>","image":"https:\/\/designcode.io\/cloud\/spritekit\/spritekit-player-state.jpg","video":"https:\/\/player.vimeo.com\/external\/263963771.hd.mp4?s=8eadedb7e9b32935885d8de9168832524bc683e5&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/spritekit-player-state.zip","contents":[{"id":"12876","section_id":"148","order":"1","title":"Downloads for PlayerState Machine","subhead":"","body":"<p>To follow this tutorial, you will need <a href=\"xcode%20download\" title=\"Xcode 9\">Xcode 9&#xA0;<\/a> and if you want to compare your progress, you can <a href=\"https:\/\/www.dropbox.com\/s\/7t5pf96uabmfv7l\/FinalProject3.zip?dl=0\" title=\"Final Project 3\">download the final project<\/a> for this section.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-downloads-for-playerstate-machine"},{"id":"12877","section_id":"148","order":"2","title":"GameplayKit State Machine","subhead":"","body":"<p>To get started, we need to understand all the different states of the player because we are going to apply them to our game. <\/p>","image":"https:\/\/designcode.io\/cloud\/spritekit\/playerStateMachine.jpg","image_width":"1600","image_height":"900","video":"","bookmark_id":"spritekit-player-state-gameplaykit-state-machine"},{"id":"12878","section_id":"148","order":"3","title":"","subhead":"LandingState","body":"<p>The LandingState is when the player touches the ground.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-landingstate"},{"id":"12879","section_id":"148","order":"4","title":"","subhead":"IdleState","body":"<p>The IdleState is the animation of the player when he is standing still. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-idlestate"},{"id":"12880","section_id":"148","order":"5","title":"","subhead":"WalkingState","body":"<p>The WalkingState is the animation of the player when he is walking.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-walkingstate"},{"id":"12881","section_id":"148","order":"6","title":"","subhead":"JumpingState","body":"<p>The JumpingState is the animation of the player jumping and the action as well.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-jumpingstate"},{"id":"12882","section_id":"148","order":"7","title":"","subhead":"StunnedState","body":"<p>Finally, the StunnedState is the animation of the player when he is touched by a trap or an enemy. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-stunnedstate"},{"id":"12883","section_id":"148","order":"8","title":"","subhead":"States","body":"<p>As you may have noticed in the above image, all the states are connected to each other, which means that all of them are related in different ways.<br><\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-states"},{"id":"12884","section_id":"148","order":"9","title":"Set Up","subhead":"","body":"<p>Let&rsquo;s create a new Swift file, you can press <strong>Command and N<\/strong> to create the new file. A new window will appear, make sure that you are on the iOS platform and choose the <strong>Swift File<\/strong> template and hit <strong>Next<\/strong>. Then, we will be asked to name the file. Let&rsquo;s call it &#x201C;playerStateMachine&#x201D; and we will save it inside our initial folder <strong>ElonGame<\/strong> and hit <strong>Create.<\/strong><\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/mkv4j9nzb3bf78l\/1.playerStateMachine-SetUp.mp4?dl=0","bookmark_id":"spritekit-player-state-set-up"},{"id":"12885","section_id":"148","order":"10","title":"GameplayKit","subhead":"","body":"<p>Now, we need to work on the logic of the game, so we need to call <strong>GameplayKit<\/strong> framework. GameplayKit is more related to the game&rsquo;s logic as SpriteKit is for the visual part of the game. Let&rsquo;s import GameplayKit to our new document. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">import<\/span> <span class=\"token builtin\">GameplayKit<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-gameplaykit"},{"id":"12886","section_id":"148","order":"11","title":"Import Player Animation and Class for the Player State","subhead":"","body":"<p>Next, we will call all our player animations and later, we will create a class for the <strong>PlayerState<\/strong>. The player has to be initialized before being able to receive a state. All the code that we will add will be right after <strong>import GameplayKit<\/strong>.<\/p><pre><code class=\"language-swift\">fileprivate <span class=\"token keyword\">let<\/span> characterAnimationKey <span class=\"token operator\">=<\/span> <span class=\"token string\">&quot;Sprite Animation&quot;<\/span><br><br><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">PlayerState<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">GKState<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">unowned<\/span> <span class=\"token keyword\">var<\/span> playerNode<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKNode<\/span><br><br>    <span class=\"token keyword\">init<\/span><span class=\"token punctuation\">(<\/span>playerNode <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKNode<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>playerNode <span class=\"token operator\">=<\/span> playerNode<br><br>        <span class=\"token keyword\">super<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">init<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>We are regrouping all the animations with the name <strong>characterAnimationKey<\/strong>. In the <strong>PlayerState<\/strong> class, we are initializing the <strong>playerNode<\/strong> as a SKNode and enable him to receive animation and action states. These states only applies to the playerNode.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-import-player-animation-and-class-for-the-player-state"},{"id":"12887","section_id":"148","order":"12","title":"Jumping State Class","subhead":"","body":"<p>We will add a jumping state class <strong>&#xA0;JumpingState<\/strong> to manage the jumping action. Inside this class, we need to create two functions. The first one, <strong>isValidNextState<\/strong>, is an indicator that will tell us if our current state allows the transition to the next state. We will set a default return value of true for now. The second function <strong>didEnter<\/strong> will help us perform some <strong>Action<\/strong> when the player enters the jumping state. When he does, we are applying to him a gravity force of 75 Newtons with a duration of 0.1 second. This duration determines how fast the player jumps. Obviously during the jump, the value of <strong>hasFinishedJumping<\/strong> is set to false. Finally, we will add a <strong>Timer<\/strong> that will help us limit the jumping action, mainly blocking the player from jumping many times simultaneously, attempting to fly in the air like Flappy Bird. This will ensure that the initial jumping has finished before repeating it again. Once the player lands, <strong>hasFinishedJumping<\/strong> becomes true.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">JumpingState<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">PlayerState<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">var<\/span> hasFinishedJumping <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Bool<\/span> <span class=\"token operator\">=<\/span> <span class=\"token boolean\">false<\/span><br><br>    <span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">isValidNextState<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> stateClass<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AnyClass<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Bool<\/span> <span class=\"token punctuation\">{<\/span><br><br>        <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span><br>    <span class=\"token punctuation\">}<\/span><br><br>    <span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">didEnter<\/span><span class=\"token punctuation\">(<\/span>from previousState<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">GKState<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>        hasFinishedJumping <span class=\"token operator\">=<\/span> <span class=\"token boolean\">false<\/span><br>        playerNode<span class=\"token punctuation\">.<\/span><span class=\"token function\">run<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">applyForce<\/span><span class=\"token punctuation\">(<\/span><span class=\"token function\">CGVector<\/span><span class=\"token punctuation\">(<\/span>dx<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> dy<span class=\"token punctuation\">:<\/span> <span class=\"token number\">75<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span> duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.1<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><br><br>        <span class=\"token builtin\">Timer<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">scheduledTimer<\/span><span class=\"token punctuation\">(<\/span>withTimeInterval<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.1<\/span><span class=\"token punctuation\">,<\/span> repeats<span class=\"token punctuation\">:<\/span> <span class=\"token boolean\">false<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">(<\/span>timer<span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">in<\/span><br>            <span class=\"token keyword\">self<\/span><span class=\"token punctuation\">.<\/span>hasFinishedJumping <span class=\"token operator\">=<\/span> <span class=\"token boolean\">true<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-jumping-state-class"},{"id":"12888","section_id":"148","order":"13","title":"Game Scene Set Up","subhead":"","body":"<p>We need to define some variables for Player State, let&rsquo;s add the declaration below right after the Sprite Engine.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ Player state<\/span><br><span class=\"token keyword\">var<\/span> playerStateMachine <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">GKStateMachine<\/span><span class=\"token operator\">!<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-game-scene-set-up"},{"id":"12889","section_id":"148","order":"14","title":"","subhead":"didMove Set Up","body":"<p>Inside the <strong>didMove<\/strong> method and right after <strong>joystickKnob = joystick?.childNode(withName: &quot;knob&#x201D;)<\/strong>, let&rsquo;s add the playerStateMachine array that will hold the different states of the player.<\/p><pre><code class=\"language-swift\">playerStateMachine <span class=\"token operator\">=<\/span> <span class=\"token function\">GKStateMachine<\/span><span class=\"token punctuation\">(<\/span>states<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-didmove-set-up"},{"id":"12890","section_id":"148","order":"15","title":"","subhead":"touchesBegan","body":"<p>Let&rsquo;s go to <strong>touchesBegan<\/strong> and inside the curly brackets of <strong>if !(joystick?.contains(location))! &#xA0;<\/strong>, let&rsquo;s initiate the jumping action. <\/p><pre><code class=\"language-swift\">playerStateMachine<span class=\"token punctuation\">.<\/span><span class=\"token function\">enter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">JumpingState<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Now, let&rsquo;s run the simulator. On top of controlling the player left and right with the joystick, if you tap on the screen, the player responds by jumping.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-touchesbegan"},{"id":"12891","section_id":"148","order":"16","title":"Player States","subhead":"","body":"<p>Let&rsquo;s go back to the <strong>playerStateMachine.swift<\/strong> and on the bottom of the document, let&rsquo;s create more classes for the rest of the <strong>States<\/strong> of our <strong>Player<\/strong>. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-player-states"},{"id":"12892","section_id":"148","order":"17","title":"","subhead":"Landing State Class","body":"<p>Let&rsquo;s create a new class for the landing state. In this class, we will add the same <strong>&#xA0;isValidNextState<\/strong> function as the jumping class. Here though, we will use the <strong>Switch<\/strong> statement for the control flow. It is similar to the if statement except that it runs a certain block of codes depending on the multiple values matched instead of just true or false. We chose the Switch statement as opposed to the if statement as in the jumping state class because later on, we will add more cases. In this class, we are checking if the player is in the landing state OR in the jumping state. If either condition is false, don&rsquo;t enter the idle state.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">LandingState<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">PlayerState<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">isValidNextState<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> stateClass<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AnyClass<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Bool<\/span> <span class=\"token punctuation\">{<\/span><br><br>        <span class=\"token keyword\">switch<\/span> stateClass <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">case<\/span> <span class=\"token keyword\">is<\/span> <span class=\"token builtin\">LandingState<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">Type<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">is<\/span> <span class=\"token builtin\">JumpingState<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">Type<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">false<\/span><br>        <span class=\"token keyword\">default<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><br>    <span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">didEnter<\/span><span class=\"token punctuation\">(<\/span>from previousState<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">GKState<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>        stateMachine<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">enter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">IdleState<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-landing-state-class"},{"id":"12893","section_id":"148","order":"18","title":"","subhead":"Idle State Class","body":"<p>In the same way as the <strong>LandingState<\/strong> class, we need to create a class for the <strong>IdleState<\/strong> and again verify if we are good to go to the next state with the <strong>&#xA0;isValidNextState<\/strong> function. Then, we will declare a variable <strong>textures<\/strong> with a <strong>SKTexture<\/strong> object representing an image that can be applied to a node. As a parameter, we will apply the image <strong>player\/0<\/strong> in order to have the player standing still during the idle state. Finally, we will declare an <strong>action<\/strong> to attach the image to the player we chose earlier. The <strong>action<\/strong> variable is stored as lazy to avoid being ran until necessary when being called for the first time which is in the <strong>didEnter<\/strong> function, and that after removing any previous animation. The purpose of using a lazy property for a declaration is to save processing time and optimize memory.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">IdleState<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">PlayerState<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">isValidNextState<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> stateClass<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AnyClass<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Bool<\/span> <span class=\"token punctuation\">{<\/span><br><br>        <span class=\"token keyword\">switch<\/span> stateClass <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">case<\/span> <span class=\"token keyword\">is<\/span> <span class=\"token builtin\">LandingState<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">Type<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">is<\/span> <span class=\"token builtin\">IdleState<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">Type<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">false<\/span><br>        <span class=\"token keyword\">default<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><br>    <span class=\"token keyword\">let<\/span> textures <span class=\"token operator\">=<\/span> <span class=\"token function\">SKTexture<\/span><span class=\"token punctuation\">(<\/span>imageNamed<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;player\/0&quot;<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">lazy<\/span> <span class=\"token keyword\">var<\/span> action <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span>with<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">[<\/span>textures<span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">,<\/span> timePerFrame<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.1<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><br>    <span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">didEnter<\/span><span class=\"token punctuation\">(<\/span>from previousState<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">GKState<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>        playerNode<span class=\"token punctuation\">.<\/span><span class=\"token function\">removeAction<\/span><span class=\"token punctuation\">(<\/span>forKey<span class=\"token punctuation\">:<\/span> characterAnimationKey<span class=\"token punctuation\">)<\/span><br>        playerNode<span class=\"token punctuation\">.<\/span><span class=\"token function\">run<\/span><span class=\"token punctuation\">(<\/span>action<span class=\"token punctuation\">,<\/span> withKey<span class=\"token punctuation\">:<\/span> characterAnimationKey<span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-idle-state-class"},{"id":"12894","section_id":"148","order":"19","title":"","subhead":"Walking State Class","body":"<p>Now, let&rsquo;s define the <strong>walkingState<\/strong> class. The code within is pretty similar to the <strong>IdleState<\/strong>. However, the <strong>textures<\/strong> variable is an array holding the different frames of our player so that as he walks, he is being animated as if his legs and arms move like in real life. This action is being ran forever until we another state interrupts the walking. <\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">WalkingState<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">PlayerState<\/span> <span class=\"token punctuation\">{<\/span><br>    <span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">isValidNextState<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">_<\/span> stateClass<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">AnyClass<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token builtin\">Bool<\/span> <span class=\"token punctuation\">{<\/span><br><br>        <span class=\"token keyword\">switch<\/span> stateClass <span class=\"token punctuation\">{<\/span><br>        <span class=\"token keyword\">case<\/span> <span class=\"token keyword\">is<\/span> <span class=\"token builtin\">LandingState<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">Type<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token keyword\">is<\/span> <span class=\"token builtin\">WalkingState<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">Type<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">false<\/span><br>        <span class=\"token keyword\">default<\/span><span class=\"token punctuation\">:<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span><br>        <span class=\"token punctuation\">}<\/span><br>    <span class=\"token punctuation\">}<\/span><br><br>    <span class=\"token keyword\">let<\/span> textures <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">SKTexture<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token number\">6<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">map<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token string\">&quot;player\/<span class=\"token interpolation\"><span class=\"token delimiter variable\">(<\/span>$<span class=\"token number\">0<\/span><span class=\"token delimiter variable\">)<\/span><\/span>&quot;<\/span><span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">map<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">SKTexture<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">init<\/span><span class=\"token punctuation\">)<\/span><br>    <span class=\"token keyword\">lazy<\/span> <span class=\"token keyword\">var<\/span> action <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">repeatForever<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span>with<span class=\"token punctuation\">:<\/span> textures<span class=\"token punctuation\">,<\/span> timePerFrame<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.1<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><br>    <span class=\"token keyword\">override<\/span> <span class=\"token keyword\">func<\/span> <span class=\"token function\">didEnter<\/span><span class=\"token punctuation\">(<\/span>from previousState<span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">GKState<\/span><span class=\"token operator\">?<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span><br><br>        playerNode<span class=\"token punctuation\">.<\/span><span class=\"token function\">removeAction<\/span><span class=\"token punctuation\">(<\/span>forKey<span class=\"token punctuation\">:<\/span> characterAnimationKey<span class=\"token punctuation\">)<\/span><br>        playerNode<span class=\"token punctuation\">.<\/span><span class=\"token function\">run<\/span><span class=\"token punctuation\">(<\/span>action<span class=\"token punctuation\">,<\/span> withKey<span class=\"token punctuation\">:<\/span> characterAnimationKey<span class=\"token punctuation\">)<\/span><br>    <span class=\"token punctuation\">}<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-walking-state-class"},{"id":"12895","section_id":"148","order":"20","title":"","subhead":"Stunned State Class","body":"<p>We will declare the <strong>&#xA0;StunnedState<\/strong> class first but leaving it blank for now. We will complete it in later section.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">class<\/span> <span class=\"token class-name\">StunnedState<\/span> <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">PlayerState<\/span> <span class=\"token punctuation\">{<\/span><br><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-stunned-state-class"},{"id":"12896","section_id":"148","order":"21","title":"","subhead":"Constraint the Jumping","body":"<p>Let&rsquo;s go back to the <strong>JumpingState<\/strong> class to constraint the jumping, so that when our player has finished jumping and lands on the ground, only then he will be able to jump again. Inside the function <strong>isValidNextState<\/strong> and right before <strong>return true&#xA0;<\/strong>, add the following condition. Also, let&rsquo;s change <strong>return true<\/strong> to <strong>return false<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">if<\/span> hasFinishedJumping <span class=\"token operator\">&amp;&amp;<\/span> stateClass <span class=\"token keyword\">is<\/span> <span class=\"token builtin\">LandingState<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">Type<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span> <span class=\"token punctuation\">}<\/span><br><br><span class=\"token keyword\">return<\/span> <span class=\"token boolean\">false<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-constraint-the-jumping"},{"id":"12897","section_id":"148","order":"22","title":"","subhead":"Jumping Animation","body":"<p>Right below the <strong>isValidNextState<\/strong> function, let&rsquo;s declare a variable <strong>textures<\/strong> as an array type for storing images for the jumping animation. As well, we will run an action to animate the player with these images, as in the walking animation.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> textures <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">Array<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token builtin\">SKTexture<\/span><span class=\"token operator\">&gt;<\/span> <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token operator\">&lt;<\/span><span class=\"token number\">2<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">map<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">{<\/span> <span class=\"token keyword\">return<\/span> <span class=\"token string\">&quot;jump\/<span class=\"token interpolation\"><span class=\"token delimiter variable\">(<\/span>$<span class=\"token number\">0<\/span><span class=\"token delimiter variable\">)<\/span><\/span>&quot;<\/span><span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">map<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">SKTexture<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">init<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token keyword\">lazy<\/span> <span class=\"token keyword\">var<\/span> action <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">animate<\/span><span class=\"token punctuation\">(<\/span>with<span class=\"token punctuation\">:<\/span> textures<span class=\"token punctuation\">,<\/span> timePerFrame<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.1<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">}<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-jumping-animation"},{"id":"12898","section_id":"148","order":"23","title":"","subhead":"Remove and Run Action","body":"<p>In the <strong>didEnter<\/strong> function right below, let&rsquo;s add the remove and run action just above the <strong>&#xA0;hasFinishedJumping = false<\/strong>.<\/p><pre><code class=\"language-swift\">playerNode<span class=\"token punctuation\">.<\/span><span class=\"token function\">removeAction<\/span><span class=\"token punctuation\">(<\/span>forKey<span class=\"token punctuation\">:<\/span> characterAnimationKey<span class=\"token punctuation\">)<\/span><br>playerNode<span class=\"token punctuation\">.<\/span><span class=\"token function\">run<\/span><span class=\"token punctuation\">(<\/span>action<span class=\"token punctuation\">,<\/span> withKey<span class=\"token punctuation\">:<\/span> characterAnimationKey<span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-remove-and-run-action"},{"id":"12899","section_id":"148","order":"24","title":"","subhead":"Completing States","body":"<p>Let&rsquo;s go back to <strong>GameScene.swift<\/strong> document, then look for the <strong>didMove<\/strong> function. After <strong>JumpingState(playerNode: player!),&#xA0;<\/strong>, let&rsquo;s add the rest of the player states in the array <strong>playerStateMachine<\/strong>. <\/p><pre><code class=\"language-swift\"><span class=\"token function\">WalkingState<\/span><span class=\"token punctuation\">(<\/span>playerNode<span class=\"token punctuation\">:<\/span> player<span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span><br><span class=\"token function\">IdleState<\/span><span class=\"token punctuation\">(<\/span>playerNode<span class=\"token punctuation\">:<\/span> player<span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span><br><span class=\"token function\">LandingState<\/span><span class=\"token punctuation\">(<\/span>playerNode<span class=\"token punctuation\">:<\/span> player<span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span><br><span class=\"token function\">StunnedState<\/span><span class=\"token punctuation\">(<\/span>playerNode<span class=\"token punctuation\">:<\/span> player<span class=\"token operator\">!<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-completing-states"},{"id":"12900","section_id":"148","order":"25","title":"","subhead":"Default Player to Idle State","body":"<p>Now, we need to default the player in the idle state at the start of the game. Right after the <strong>playerStateMachine = GKStateMachine<\/strong>, add this line of code.<\/p><pre><code class=\"language-swift\">playerStateMachine<span class=\"token punctuation\">.<\/span><span class=\"token function\">enter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">IdleState<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-default-player-to-idle-state"},{"id":"12901","section_id":"148","order":"26","title":"positivePosition","subhead":"","body":"<p>Now that we have set up our all of the player states, let&rsquo;s allow the player to enter the walking state as the user moves the knob. To do so, go to the <strong>update<\/strong> function under the <strong>Game Loop<\/strong> mark and right after the declaration of <strong>xPosition&#xA0;<\/strong>, let&rsquo;s create a new variable called <strong>positivePosition<\/strong>. This will store a positive value for the x position of the knob.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">let<\/span> positivePosition <span class=\"token operator\">=<\/span> xPosition <span class=\"token operator\">&lt;<\/span> <span class=\"token number\">0<\/span> <span class=\"token operator\">?<\/span> <span class=\"token operator\">-<\/span>xPosition <span class=\"token punctuation\">:<\/span> xPosition<br><br><span class=\"token keyword\">if<\/span> <span class=\"token function\">floor<\/span><span class=\"token punctuation\">(<\/span>positivePosition<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">!=<\/span> <span class=\"token number\">0<\/span> <span class=\"token punctuation\">{<\/span><br>    playerStateMachine<span class=\"token punctuation\">.<\/span><span class=\"token function\">enter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">WalkingState<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span> <span class=\"token keyword\">else<\/span> <span class=\"token punctuation\">{<\/span><br>    playerStateMachine<span class=\"token punctuation\">.<\/span><span class=\"token function\">enter<\/span><span class=\"token punctuation\">(<\/span><span class=\"token builtin\">IdleState<\/span><span class=\"token punctuation\">.<\/span><span class=\"token keyword\">self<\/span><span class=\"token punctuation\">)<\/span><br><span class=\"token punctuation\">}<\/span><br><\/code><\/pre><p>As we are declaring the <strong>positivePosition<\/strong>, we are testing if the xPosition is negative. In the eventuality that it&rsquo;s true, make it positive. Then, we are rounding down that value to the nearest integer by using the floor function. If the end result is not 0, meaning the knob is not in the centre of the joystick, make the player walk with animation. Otherwise, have him enter the idle state.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-positiveposition"},{"id":"12902","section_id":"148","order":"27","title":"Setting Up the Walking State","subhead":"","body":"<p>If you run the app and tap on the screen, you will see that as our player jumps, he gets into in the jumping animation. However, even after he lands, he still remains in the jumping mode. To fix that, we need to modify the walking state, the reason being we didn&rsquo;t apply the collision with the ground yet. Let&rsquo;s go back to the <strong>playerStateMachine.swift<\/strong> file and in the <strong>JumpingState<\/strong> class, comment out this condition <\/p><p><strong>if hasFinishedJumping &amp;&amp; stateClass is LandingState.Type { return true }<\/strong>. As well, let&rsquo;s change <strong>return false<\/strong> to <strong>return true<\/strong>. The walking and jumping state conflicts for now as we didn&rsquo;t apply the collision yet.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ if hasFinishedJumping &amp;&amp; stateClass is LandingState.Type { return true }<\/span><br><br><span class=\"token keyword\">return<\/span> <span class=\"token boolean\">true<\/span><br><\/code><\/pre><p>Now run the simulator again and perform the jump. This time, our player is actually walking correctly while we move the joystick left and right. Also, he can continuously jump as many times as we spam the screen since we just removed the constraint. If we let go the knob, the player stops all walking and jumping. <\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/32b6nqb40lkiqft\/2.playerStateMachine-SettingUptheWalking%20state.mp4?dl=0","bookmark_id":"spritekit-player-state-setting-up-the-walking-state"},{"id":"12903","section_id":"148","order":"28","title":"Conclusion","subhead":"","body":"<p>In this section, we learned about the <strong>GKStateMachine<\/strong>, assign different states to our player and apply certain condition on when to enter and exit those states. On top of that, we added animations to them and apply them.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-player-state-conclusion"}]},{"id":"149","chapter_id":"5","order":"999","slug":"spritekit-camera","title":"Camera Work","caption":"Following the player and adding a background parallax","body":"<p>In this section, we will learn about an essential element in any game: the camera. In most iconic platform games like Mario, Metroid, Super Meat boy, a good implementation of the camera makes the whole gaming experience a lot better. You can <a href=\"https:\/\/www.dropbox.com\/s\/n3rgvft1f3ktm7y\/FinalProject4.zip?dl=0\">download the final project<\/a> for this section if you want to check the final result first.<\/p>","image":"https:\/\/designcode.io\/cloud\/spritekit\/spritekit-camera.jpg","video":"https:\/\/player.vimeo.com\/external\/263969517.hd.mp4?s=c515f219d2a03ebd28bef59bffea2a15720acbd1&profile_id=175","subtitles":"","zipped_assets_location":"https:\/\/designcode.io\/content\/sections\/spritekit-camera.zip","contents":[{"id":"12823","section_id":"149","order":"1","title":"Downloads of Camera Work","subhead":"","body":"<p>You can <a href=\"https:\/\/www.dropbox.com\/s\/n3rgvft1f3ktm7y\/FinalProject4.zip?dl=0\">download the final project<\/a> for this section to help you compare your progress.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-camera-downloads-of-camera-work"},{"id":"12824","section_id":"149","order":"2","title":"CameraNode in the Scene","subhead":"","body":"<p>Open the <strong>GameScene.sks<\/strong> file. At the right, search for the <strong>Camera<\/strong> in the <strong>Object Library<\/strong>. Drag and drop the <strong>Camera<\/strong> in the scene and name it <strong>cameraNode<\/strong>. Let&rsquo;s change the position of the cameraNode to ( x: 0, y: 0). Click on the <strong>Scene<\/strong> in your document outline and select <strong>cameraNode<\/strong> for the camera.<\/p><p>BE CAREFUL! You cannot name the cameraNode &#x201C;camera&#x201D; because, Xcode already has a build-in name for it and you don&rsquo;t want to create confusion between those 2 elements.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/91nb3xog7rqg7kp\/1.Camera%20Work%20-%20CameraNodeScene.mp4?dl=0","bookmark_id":"spritekit-camera-cameranode-in-the-scene"},{"id":"12825","section_id":"149","order":"3","title":"CameraNode in Code","subhead":"","body":"<p>Now that we have implemented the camera in the scene, let&rsquo;s position it to the player. As a result, the camera will follow the player.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/xsmyuvia8pbey5s\/2.Camera%20Work%20-%20CameraNodeInCode.mp4?dl=0","bookmark_id":"spritekit-camera-cameranode-in-code"},{"id":"12826","section_id":"149","order":"4","title":"","subhead":"Declaration of cameraNode","body":"<p>In the <strong>Nodes<\/strong> section, just after the declaration of the <strong>joystickKnob<\/strong>, create a new variable for the <strong>cameraNode<\/strong>.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> cameraNode <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKCameraNode<\/span><span class=\"token operator\">?<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-camera-declaration-of-cameranode"},{"id":"12827","section_id":"149","order":"5","title":"","subhead":"Initializing cameraNode","body":"<p>In the <strong>didMove<\/strong> method, assign our new variable <strong>cameraNode<\/strong> to the cameraNode we had set up in the scene.<\/p><pre><code class=\"language-swift\">cameraNode <span class=\"token operator\">=<\/span> <span class=\"token function\">childNode<\/span><span class=\"token punctuation\">(<\/span>withName<span class=\"token punctuation\">:<\/span>  <span class=\"token string\">&quot;cameraNode&quot;<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token keyword\">as<\/span><span class=\"token operator\">?<\/span> <span class=\"token builtin\">SKCameraNode<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-camera-initializing-cameranode"},{"id":"12828","section_id":"149","order":"6","title":"","subhead":"Camera Position","body":"<p>In the <strong>Game Loop<\/strong> section, mark a new sub-section and name it <strong>Camera<\/strong>. To make the camera follow the player, we are going to change the x position of the camera to be the same as the player&rsquo;s x position.<\/p><pre><code class=\"language-swift\">cameraNode<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>position<span class=\"token punctuation\">.<\/span>x <span class=\"token operator\">=<\/span> player<span class=\"token operator\">!<\/span><span class=\"token punctuation\">.<\/span>position<span class=\"token punctuation\">.<\/span>x<br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-camera-camera-position"},{"id":"12829","section_id":"149","order":"7","title":"Side Effect","subhead":"","body":"<p>By making the camera follow the player, other elements in your game might disappear off your screen. In our case, it is the joystick. Let&rsquo;s apply the same logic so the joystick follows the camera. In the <strong>GameScene.sks<\/strong>, remember that the position of the joystick is (x: -300, y: -100). Therefore just after the camera position, let&rsquo;s make the joystick follow the camera.<\/p><pre><code class=\"language-swift\">joystick<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>position<span class=\"token punctuation\">.<\/span>y <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span>cameraNode<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>position<span class=\"token punctuation\">.<\/span>y<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span> <span class=\"token operator\">-<\/span> <span class=\"token number\">100<\/span><br>joystick<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>position<span class=\"token punctuation\">.<\/span>x <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span>cameraNode<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>position<span class=\"token punctuation\">.<\/span>x<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span> <span class=\"token operator\">-<\/span> <span class=\"token number\">300<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-camera-side-effect"},{"id":"12830","section_id":"149","order":"8","title":"Constraint Zone","subhead":"","body":"<p>Every games have forbidden zones, those are places where the player cannot pass. We will also apply this concept to constraint the player or else, he will fall into the void. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-camera-constraint-zone"},{"id":"12831","section_id":"149","order":"9","title":"","subhead":"Off Limit","body":"<p>In the <strong>Media Library<\/strong>, select the first option: <strong>Color Sprite<\/strong>, drag and drop in the scene, where you want the off limit zone to be. Change the <strong>height<\/strong> of the node to <strong>375<\/strong>. Select <strong>Bounding Rectangle<\/strong> for the <strong>Body Type<\/strong> and uncheck <strong>Dynamic<\/strong>, <strong>Allows Rotation<\/strong> and <strong>Affected By Gravity<\/strong>.<\/p><p>Name it : EndZone and change the <strong>Alpha<\/strong> property to 0. Copy, paste and put one at each endpoint.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/behi9sg93kz2n5l\/3.Camera%20Work%20-%20OffLimit.mp4?dl=0","bookmark_id":"spritekit-camera-off-limit"},{"id":"12832","section_id":"149","order":"10","title":"Parallax Animation","subhead":"","body":"<p>It is a type of animation where different elements in the background are moving at different speed and it gives an illusion of depth in the game.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-camera-parallax-animation"},{"id":"12833","section_id":"149","order":"11","title":"","subhead":"Variables","body":"<p>Let&rsquo;s declare the variables for the mountains, the moon and the stars to make the parallax animation possible.<\/p><pre><code class=\"language-swift\"><span class=\"token keyword\">var<\/span> mountains1 <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKNode<\/span><span class=\"token operator\">?<\/span><br><span class=\"token keyword\">var<\/span> mountains2 <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKNode<\/span><span class=\"token operator\">?<\/span><br><span class=\"token keyword\">var<\/span> mountains3 <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKNode<\/span><span class=\"token operator\">?<\/span><br><span class=\"token keyword\">var<\/span> moon <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKNode<\/span><span class=\"token operator\">?<\/span><br><span class=\"token keyword\">var<\/span> stars <span class=\"token punctuation\">:<\/span> <span class=\"token builtin\">SKNode<\/span><span class=\"token operator\">?<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-camera-variables"},{"id":"12834","section_id":"149","order":"12","title":"","subhead":"Declaration of the variables","body":"<p>In the <strong>didMove<\/strong> method, initialize the variables.<\/p><pre><code class=\"language-swift\">mountains1 <span class=\"token operator\">=<\/span> <span class=\"token function\">childNode<\/span><span class=\"token punctuation\">(<\/span>withName<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;mountains1&quot;<\/span><span class=\"token punctuation\">)<\/span><br>mountains2 <span class=\"token operator\">=<\/span> <span class=\"token function\">childNode<\/span><span class=\"token punctuation\">(<\/span>withName<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;mountains2&quot;<\/span><span class=\"token punctuation\">)<\/span><br>mountains3 <span class=\"token operator\">=<\/span> <span class=\"token function\">childNode<\/span><span class=\"token punctuation\">(<\/span>withName<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;mountains3&quot;<\/span><span class=\"token punctuation\">)<\/span><br>moon <span class=\"token operator\">=<\/span> <span class=\"token function\">childNode<\/span><span class=\"token punctuation\">(<\/span>withName<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;moon&quot;<\/span><span class=\"token punctuation\">)<\/span><br>stars <span class=\"token operator\">=<\/span> <span class=\"token function\">childNode<\/span><span class=\"token punctuation\">(<\/span>withName<span class=\"token punctuation\">:<\/span> <span class=\"token string\">&quot;stars&quot;<\/span><span class=\"token punctuation\">)<\/span><br><\/code><\/pre>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-camera-declaration-of-the-variables"},{"id":"12835","section_id":"149","order":"13","title":"","subhead":"Parallax effect","body":"<p>To achieve the parallax animation, we need to move each elements at different speed. To calculate the speed, you need to double the speed for every layers.<\/p><p>The top layer would be assigned the highest number since we want to it to move faster than the other layers. Create an action for each scenery node and run them.<\/p><pre><code class=\"language-swift\"><span class=\"token comment\">\/\/ Background Parallax<\/span><br><br><span class=\"token keyword\">let<\/span> parallax1 <span class=\"token operator\">=<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">moveTo<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> player<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>position<span class=\"token punctuation\">.<\/span>x<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><span class=\"token operator\">\/<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">-<\/span><span class=\"token number\">10<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span> duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.0<\/span><span class=\"token punctuation\">)<\/span><br>mountains1<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">run<\/span><span class=\"token punctuation\">(<\/span>parallax1<span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> parallax2 <span class=\"token operator\">=<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">moveTo<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> player<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>position<span class=\"token punctuation\">.<\/span>x<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><span class=\"token operator\">\/<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">-<\/span><span class=\"token number\">20<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span> duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.0<\/span><span class=\"token punctuation\">)<\/span><br>mountains2<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">run<\/span><span class=\"token punctuation\">(<\/span>parallax2<span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> parallax3 <span class=\"token operator\">=<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">moveTo<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> player<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>position<span class=\"token punctuation\">.<\/span>x<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><span class=\"token operator\">\/<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">-<\/span><span class=\"token number\">40<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span> duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.0<\/span><span class=\"token punctuation\">)<\/span><br>mountains3<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">run<\/span><span class=\"token punctuation\">(<\/span>parallax3<span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> parallax4 <span class=\"token operator\">=<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">moveTo<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">(<\/span>cameraNode<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>position<span class=\"token punctuation\">.<\/span>x<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><span class=\"token punctuation\">,<\/span> duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.0<\/span><span class=\"token punctuation\">)<\/span><br>moon<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">run<\/span><span class=\"token punctuation\">(<\/span>parallax4<span class=\"token punctuation\">)<\/span><br><br><span class=\"token keyword\">let<\/span> parallax5 <span class=\"token operator\">=<\/span> <span class=\"token builtin\">SKAction<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">moveTo<\/span><span class=\"token punctuation\">(<\/span>x<span class=\"token punctuation\">:<\/span> <span class=\"token punctuation\">(<\/span>cameraNode<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span>position<span class=\"token punctuation\">.<\/span>x<span class=\"token punctuation\">)<\/span><span class=\"token operator\">!<\/span><span class=\"token punctuation\">,<\/span> duration<span class=\"token punctuation\">:<\/span> <span class=\"token number\">0.0<\/span><span class=\"token punctuation\">)<\/span><br>stars<span class=\"token operator\">?<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">run<\/span><span class=\"token punctuation\">(<\/span>parallax5<span class=\"token punctuation\">)<\/span><br><\/code><\/pre><p>Note that here, we only want the mountains to be affected by the parallax animation. They will follow the player&rsquo;s movement at a different speed. The player will pass <strong>mountains3<\/strong> at a faster pace than <strong>mountains2<\/strong> and <strong>mountains1<\/strong> since these mountains are closest to him. The moon and the stars will follow the camera to make them stay still. If we don&rsquo;t add these moving actions, they would disappear from the scene as the player walks away.<br><\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-camera-parallax-effect"},{"id":"12836","section_id":"149","order":"14","title":"Timeline Animation","subhead":"","body":"<p>It is a type of animation that uses keyframe that you run through time to create animation. In the <strong>Scene<\/strong>, you can easily make timeline animation without a single line of code. <\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-camera-timeline-animation"},{"id":"12837","section_id":"149","order":"15","title":"","subhead":"Animate With Texture","body":"<p>First, in the media library, drag and drop <strong>jewel\/0<\/strong> in your scene. Use the <strong>Scale<\/strong> property and put (x: 0.2, y: 0.2). Then, name it <strong>jewel<\/strong>. Select <strong>Alpha Mask<\/strong> as the body type and uncheck <strong>Allows Rotation<\/strong> and <strong>Affected by gravity<\/strong>. Enable the <strong>Action Editor View<\/strong> at the bottom and you will see the list of all the nodes in the scene. Search for <strong>AnimateWithTexture<\/strong> in the <strong>Object library<\/strong> and drop it inside the timeline of the jewel. In the attribute inspector, check <strong>Resize<\/strong>. In the <strong>Media library<\/strong>, drag and drop the rest of the jewel images in the <strong>Textures<\/strong> box. In SpriteKit scene, you don&rsquo;t have to always run the simulator to preview the animations. Click on <strong>Animate<\/strong> and voila, the jewel is animated now! To make it loop, click on the looping icon and select the infinite icon.<\/p>","image":"","image_width":"0","image_height":"0","video":"https:\/\/dl.dropboxusercontent.com\/s\/09shl3h3mpy37ig\/4.Camera%20Work%20-%20AnimateWithTexture.mp4?dl=0","bookmark_id":"spritekit-camera-animate-with-texture"},{"id":"12838","section_id":"149","order":"16","title":"Conclusion","subhead":"","body":"<p>To this point, our game is looking good! We implemented the camera and having it follow the player. We learned how to make some elements move alongside the camera such as the joystick. To end this section, we did some parallax and timeline animations.<\/p>","image":"","image_width":"0","image_height":"0","video":"","bookmark_id":"spritekit-camera-conclusion"}]}]}],"version":204},"message":"Content up to date","status":"success","status_code":"ContentUpToDate"}
}